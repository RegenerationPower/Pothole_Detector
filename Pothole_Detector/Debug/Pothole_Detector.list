
Pothole_Detector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f0  08010e90  08010e90  00020e90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011680  08011680  000302d8  2**0
                  CONTENTS
  4 .ARM          00000008  08011680  08011680  00021680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011688  08011688  000302d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011688  08011688  00021688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801168c  0801168c  0002168c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  08011690  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302d8  2**0
                  CONTENTS
 10 .bss          00001e58  200002d8  200002d8  000302d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002130  20002130  000302d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014e1c  00000000  00000000  0003034b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000036d4  00000000  00000000  00045167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001180  00000000  00000000  00048840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d68  00000000  00000000  000499c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024969  00000000  00000000  0004a728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018002  00000000  00000000  0006f091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb6a2  00000000  00000000  00087093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006378  00000000  00000000  00152738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008c  00000000  00000000  00158ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010e78 	.word	0x08010e78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	08010e78 	.word	0x08010e78

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <DHT_getData>:

#define DHT_Timeout 10000
#define readPin()		(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET)

DHT_Data DHT_getData()
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b090      	sub	sp, #64	; 0x40
 8000ff4:	af00      	add	r7, sp, #0
	uint16_t timeout = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	87fb      	strh	r3, [r7, #62]	; 0x3e
	DHT_Data data =
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001000:	f04f 0300 	mov.w	r3, #0
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
	{ 0.0f, 0.0f };
	GPIO_InitTypeDef GPIO_InitStruct =
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]
	{ 0 };
	uint8_t rawData[5] =
 8001016:	4a7f      	ldr	r2, [pc, #508]	; (8001214 <DHT_getData+0x224>)
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001020:	6018      	str	r0, [r3, #0]
 8001022:	3304      	adds	r3, #4
 8001024:	7019      	strb	r1, [r3, #0]
	{ 0, 0, 0, 0, 0 };

	// Налаштування GPIO на вихід
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001026:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800102a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800102c:	2311      	movs	r3, #17
 800102e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4619      	mov	r1, r3
 8001036:	4878      	ldr	r0, [pc, #480]	; (8001218 <DHT_getData+0x228>)
 8001038:	f001 fd60 	bl	8002afc <HAL_GPIO_Init>

	// Ініціалізація датчика
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001042:	4875      	ldr	r0, [pc, #468]	; (8001218 <DHT_getData+0x228>)
 8001044:	f001 ff0e 	bl	8002e64 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001048:	2014      	movs	r0, #20
 800104a:	f001 fc21 	bl	8002890 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001054:	4870      	ldr	r0, [pc, #448]	; (8001218 <DHT_getData+0x228>)
 8001056:	f001 ff05 	bl	8002e64 <HAL_GPIO_WritePin>

	// Налаштування GPIO на вхід
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 800105a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800105e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4619      	mov	r1, r3
 800106a:	486b      	ldr	r0, [pc, #428]	; (8001218 <DHT_getData+0x228>)
 800106c:	f001 fd46 	bl	8002afc <HAL_GPIO_Init>

	// Очікування початку відповіді від датчика
	while (readPin())
 8001070:	e010      	b.n	8001094 <DHT_getData+0xa4>
	{
		timeout++;
 8001072:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001074:	3301      	adds	r3, #1
 8001076:	87fb      	strh	r3, [r7, #62]	; 0x3e
		if (timeout > DHT_Timeout)
 8001078:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800107a:	f242 7210 	movw	r2, #10000	; 0x2710
 800107e:	4293      	cmp	r3, r2
 8001080:	d908      	bls.n	8001094 <DHT_getData+0xa4>
		{
			return data;
 8001082:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001086:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800108a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800108e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001092:	e0b2      	b.n	80011fa <DHT_getData+0x20a>
	while (readPin())
 8001094:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001098:	485f      	ldr	r0, [pc, #380]	; (8001218 <DHT_getData+0x228>)
 800109a:	f001 fecb 	bl	8002e34 <HAL_GPIO_ReadPin>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d0e6      	beq.n	8001072 <DHT_getData+0x82>
		}
	}
	timeout = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	87fb      	strh	r3, [r7, #62]	; 0x3e

	while (!readPin())
 80010a8:	e010      	b.n	80010cc <DHT_getData+0xdc>
	{
		timeout++;
 80010aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010ac:	3301      	adds	r3, #1
 80010ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
		if (timeout > DHT_Timeout)
 80010b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d908      	bls.n	80010cc <DHT_getData+0xdc>
		{
			return data;
 80010ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010c6:	e883 0003 	stmia.w	r3, {r0, r1}
 80010ca:	e096      	b.n	80011fa <DHT_getData+0x20a>
	while (!readPin())
 80010cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010d0:	4851      	ldr	r0, [pc, #324]	; (8001218 <DHT_getData+0x228>)
 80010d2:	f001 feaf 	bl	8002e34 <HAL_GPIO_ReadPin>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d1e6      	bne.n	80010aa <DHT_getData+0xba>
		}
	}
	timeout = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	87fb      	strh	r3, [r7, #62]	; 0x3e

	while (readPin())
 80010e0:	e010      	b.n	8001104 <DHT_getData+0x114>
	{
		timeout++;
 80010e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010e4:	3301      	adds	r3, #1
 80010e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
		if (timeout > DHT_Timeout)
 80010e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d908      	bls.n	8001104 <DHT_getData+0x114>
		{
			return data;
 80010f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010fe:	e883 0003 	stmia.w	r3, {r0, r1}
 8001102:	e07a      	b.n	80011fa <DHT_getData+0x20a>
	while (readPin())
 8001104:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001108:	4843      	ldr	r0, [pc, #268]	; (8001218 <DHT_getData+0x228>)
 800110a:	f001 fe93 	bl	8002e34 <HAL_GPIO_ReadPin>
 800110e:	4603      	mov	r3, r0
 8001110:	2b01      	cmp	r3, #1
 8001112:	d0e6      	beq.n	80010e2 <DHT_getData+0xf2>

		}
	}

	// Зчитування даних з датчика
	for (uint8_t i = 0; i < 5; i++)
 8001114:	2300      	movs	r3, #0
 8001116:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800111a:	e047      	b.n	80011ac <DHT_getData+0x1bc>
	{
		for (uint8_t j = 7; j != 255; j--)
 800111c:	2307      	movs	r3, #7
 800111e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001122:	e03a      	b.n	800119a <DHT_getData+0x1aa>
		{
			uint16_t highLevel = 0, lowLevel = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	877b      	strh	r3, [r7, #58]	; 0x3a
 8001128:	2300      	movs	r3, #0
 800112a:	873b      	strh	r3, [r7, #56]	; 0x38

			while (!readPin())
 800112c:	e002      	b.n	8001134 <DHT_getData+0x144>
			{
				lowLevel++;
 800112e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001130:	3301      	adds	r3, #1
 8001132:	873b      	strh	r3, [r7, #56]	; 0x38
			while (!readPin())
 8001134:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001138:	4837      	ldr	r0, [pc, #220]	; (8001218 <DHT_getData+0x228>)
 800113a:	f001 fe7b 	bl	8002e34 <HAL_GPIO_ReadPin>
 800113e:	4603      	mov	r3, r0
 8001140:	2b01      	cmp	r3, #1
 8001142:	d1f4      	bne.n	800112e <DHT_getData+0x13e>
			}

			while (readPin())
 8001144:	e002      	b.n	800114c <DHT_getData+0x15c>
			{
				highLevel++;
 8001146:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001148:	3301      	adds	r3, #1
 800114a:	877b      	strh	r3, [r7, #58]	; 0x3a
			while (readPin())
 800114c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001150:	4831      	ldr	r0, [pc, #196]	; (8001218 <DHT_getData+0x228>)
 8001152:	f001 fe6f 	bl	8002e34 <HAL_GPIO_ReadPin>
 8001156:	4603      	mov	r3, r0
 8001158:	2b01      	cmp	r3, #1
 800115a:	d0f4      	beq.n	8001146 <DHT_getData+0x156>
			}

			if (highLevel > lowLevel)
 800115c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800115e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001160:	429a      	cmp	r2, r3
 8001162:	d915      	bls.n	8001190 <DHT_getData+0x1a0>
			{
				rawData[i] |= (1 << j);
 8001164:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001168:	3340      	adds	r3, #64	; 0x40
 800116a:	443b      	add	r3, r7
 800116c:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8001170:	b25a      	sxtb	r2, r3
 8001172:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001176:	2101      	movs	r1, #1
 8001178:	fa01 f303 	lsl.w	r3, r1, r3
 800117c:	b25b      	sxtb	r3, r3
 800117e:	4313      	orrs	r3, r2
 8001180:	b25a      	sxtb	r2, r3
 8001182:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	3340      	adds	r3, #64	; 0x40
 800118a:	443b      	add	r3, r7
 800118c:	f803 2c34 	strb.w	r2, [r3, #-52]
		for (uint8_t j = 7; j != 255; j--)
 8001190:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001194:	3b01      	subs	r3, #1
 8001196:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800119a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800119e:	2bff      	cmp	r3, #255	; 0xff
 80011a0:	d1c0      	bne.n	8001124 <DHT_getData+0x134>
	for (uint8_t i = 0; i < 5; i++)
 80011a2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80011a6:	3301      	adds	r3, #1
 80011a8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80011ac:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80011b0:	2b04      	cmp	r3, #4
 80011b2:	d9b3      	bls.n	800111c <DHT_getData+0x12c>
			}
		}
	}

	// Перевірка контрольної суми і запис даних
	if ((uint8_t) (rawData[0] + rawData[1] + rawData[2] + rawData[3])
 80011b4:	7b3a      	ldrb	r2, [r7, #12]
 80011b6:	7b7b      	ldrb	r3, [r7, #13]
 80011b8:	4413      	add	r3, r2
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	7bbb      	ldrb	r3, [r7, #14]
 80011be:	4413      	add	r3, r2
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	4413      	add	r3, r2
 80011c6:	b2da      	uxtb	r2, r3
			== rawData[4])
 80011c8:	7c3b      	ldrb	r3, [r7, #16]
	if ((uint8_t) (rawData[0] + rawData[1] + rawData[2] + rawData[3])
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d10d      	bne.n	80011ea <DHT_getData+0x1fa>
	{

		data.humidity = (float) rawData[0];
 80011ce:	7b3b      	ldrb	r3, [r7, #12]
 80011d0:	ee07 3a90 	vmov	s15, r3
 80011d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011d8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		data.temperature = (float) rawData[2];
 80011dc:	7bbb      	ldrb	r3, [r7, #14]
 80011de:	ee07 3a90 	vmov	s15, r3
 80011e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011e6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	}

	return data;
 80011ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011f6:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80011fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011fe:	ee07 2a10 	vmov	s14, r2
 8001202:	ee07 3a90 	vmov	s15, r3
 8001206:	eeb0 0a47 	vmov.f32	s0, s14
 800120a:	eef0 0a67 	vmov.f32	s1, s15
 800120e:	3740      	adds	r7, #64	; 0x40
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	08010e90 	.word	0x08010e90
 8001218:	40020c00 	.word	0x40020c00

0800121c <Delay_us>:
#define DISPLAY_ON           0x04
#define TWO_LINE               0x08

// Затримка в мікросекундах
void Delay_us(uint16_t us)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	80fb      	strh	r3, [r7, #6]
	uint32_t division = (SysTick->LOAD + 1) / 1000;
 8001226:	4b19      	ldr	r3, [pc, #100]	; (800128c <Delay_us+0x70>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	3301      	adds	r3, #1
 800122c:	4a18      	ldr	r2, [pc, #96]	; (8001290 <Delay_us+0x74>)
 800122e:	fba2 2303 	umull	r2, r3, r2, r3
 8001232:	099b      	lsrs	r3, r3, #6
 8001234:	60fb      	str	r3, [r7, #12]
	uint32_t startUs = HAL_GetTick() * 1000 + (1000 - SysTick->VAL / division);
 8001236:	f001 fb1f 	bl	8002878 <HAL_GetTick>
 800123a:	4603      	mov	r3, r0
 800123c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001240:	fb03 f202 	mul.w	r2, r3, r2
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <Delay_us+0x70>)
 8001246:	6899      	ldr	r1, [r3, #8]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	fbb1 f3f3 	udiv	r3, r1, r3
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001254:	60bb      	str	r3, [r7, #8]
	while ((HAL_GetTick() * 1000 + (1000 - SysTick->VAL / division) - startUs
 8001256:	bf00      	nop
 8001258:	f001 fb0e 	bl	8002878 <HAL_GetTick>
 800125c:	4603      	mov	r3, r0
 800125e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001262:	fb03 f202 	mul.w	r2, r3, r2
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <Delay_us+0x70>)
 8001268:	6899      	ldr	r1, [r3, #8]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001270:	1ad2      	subs	r2, r2, r3
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
			< us))
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	429a      	cmp	r2, r3
 800127e:	d3eb      	bcc.n	8001258 <Delay_us+0x3c>
		;
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	e000e010 	.word	0xe000e010
 8001290:	10624dd3 	.word	0x10624dd3

08001294 <sendCommand4bit>:

// Надсилання команди у 4-бітному режимі
static void sendCommand4bit(uint8_t cmd)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, (GPIO_PinState) (cmd & 0x08));
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	461a      	mov	r2, r3
 80012a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ac:	481b      	ldr	r0, [pc, #108]	; (800131c <sendCommand4bit+0x88>)
 80012ae:	f001 fdd9 	bl	8002e64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, (GPIO_PinState) (cmd & 0x04));
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	461a      	mov	r2, r3
 80012bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012c0:	4816      	ldr	r0, [pc, #88]	; (800131c <sendCommand4bit+0x88>)
 80012c2:	f001 fdcf 	bl	8002e64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, (GPIO_PinState) (cmd & 0x02));
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	461a      	mov	r2, r3
 80012d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d4:	4811      	ldr	r0, [pc, #68]	; (800131c <sendCommand4bit+0x88>)
 80012d6:	f001 fdc5 	bl	8002e64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, (GPIO_PinState) (cmd & 0x01));
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	461a      	mov	r2, r3
 80012e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012e8:	480c      	ldr	r0, [pc, #48]	; (800131c <sendCommand4bit+0x88>)
 80012ea:	f001 fdbb 	bl	8002e64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 80012ee:	2201      	movs	r2, #1
 80012f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012f4:	4809      	ldr	r0, [pc, #36]	; (800131c <sendCommand4bit+0x88>)
 80012f6:	f001 fdb5 	bl	8002e64 <HAL_GPIO_WritePin>
	Delay_us(50);
 80012fa:	2032      	movs	r0, #50	; 0x32
 80012fc:	f7ff ff8e 	bl	800121c <Delay_us>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <sendCommand4bit+0x88>)
 8001308:	f001 fdac 	bl	8002e64 <HAL_GPIO_WritePin>
	Delay_us(50);
 800130c:	2032      	movs	r0, #50	; 0x32
 800130e:	f7ff ff85 	bl	800121c <Delay_us>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000

08001320 <sendCommand>:

static void sendCommand(uint8_t cmd)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	2180      	movs	r1, #128	; 0x80
 800132e:	480a      	ldr	r0, [pc, #40]	; (8001358 <sendCommand+0x38>)
 8001330:	f001 fd98 	bl	8002e64 <HAL_GPIO_WritePin>
	sendCommand4bit(cmd >> 4);
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	091b      	lsrs	r3, r3, #4
 8001338:	b2db      	uxtb	r3, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ffaa 	bl	8001294 <sendCommand4bit>
	sendCommand4bit(cmd & 0x0F);
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	b2db      	uxtb	r3, r3
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ffa3 	bl	8001294 <sendCommand4bit>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000

0800135c <setCursor>:

static void setCursor(uint8_t col, uint8_t row)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	460a      	mov	r2, r1
 8001366:	71fb      	strb	r3, [r7, #7]
 8001368:	4613      	mov	r3, r2
 800136a:	71bb      	strb	r3, [r7, #6]
	uint8_t row_offsets[] =
 800136c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001370:	81bb      	strh	r3, [r7, #12]
	{ 0x00, 0x40 };
	if (row >= ROWS)
 8001372:	79bb      	ldrb	r3, [r7, #6]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d901      	bls.n	800137c <setCursor+0x20>
	{
		row = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	71bb      	strb	r3, [r7, #6]
	}
	lcdOptions.X = col;
 800137c:	4a0c      	ldr	r2, [pc, #48]	; (80013b0 <setCursor+0x54>)
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	70d3      	strb	r3, [r2, #3]
	lcdOptions.Y = row;
 8001382:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <setCursor+0x54>)
 8001384:	79bb      	ldrb	r3, [r7, #6]
 8001386:	7113      	strb	r3, [r2, #4]
	sendCommand(SET_DDRAM_ADDR | (col + row_offsets[row]));
 8001388:	79bb      	ldrb	r3, [r7, #6]
 800138a:	3310      	adds	r3, #16
 800138c:	443b      	add	r3, r7
 800138e:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	4413      	add	r3, r2
 8001396:	b2db      	uxtb	r3, r3
 8001398:	b25b      	sxtb	r3, r3
 800139a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800139e:	b25b      	sxtb	r3, r3
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff ffbc 	bl	8001320 <sendCommand>
}
 80013a8:	bf00      	nop
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200002f4 	.word	0x200002f4

080013b4 <displayOn>:

void displayOn(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
	lcdOptions.displayControl |= DISPLAY_ON;
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <displayOn+0x28>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	f043 0304 	orr.w	r3, r3, #4
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <displayOn+0x28>)
 80013c4:	701a      	strb	r2, [r3, #0]
	sendCommand(DISPLAY_CONTROL | lcdOptions.displayControl);
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <displayOn+0x28>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	f043 0308 	orr.w	r3, r3, #8
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ffa5 	bl	8001320 <sendCommand>
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200002f4 	.word	0x200002f4

080013e0 <LCD_PutString>:

// Виведення рядка на дисплей
void LCD_PutString(uint8_t x, uint8_t y, char *str)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	603a      	str	r2, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
 80013ec:	460b      	mov	r3, r1
 80013ee:	71bb      	strb	r3, [r7, #6]
	setCursor(x, y);
 80013f0:	79ba      	ldrb	r2, [r7, #6]
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	4611      	mov	r1, r2
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ffb0 	bl	800135c <setCursor>
	while (*str)
 80013fc:	e04f      	b.n	800149e <LCD_PutString+0xbe>
	{
		// Перевірка чи не виходить курсор за межі рядка
		if (lcdOptions.X >= COLUMNS)
 80013fe:	4b2c      	ldr	r3, [pc, #176]	; (80014b0 <LCD_PutString+0xd0>)
 8001400:	78db      	ldrb	r3, [r3, #3]
 8001402:	2b0f      	cmp	r3, #15
 8001404:	d910      	bls.n	8001428 <LCD_PutString+0x48>
		{
			lcdOptions.X = 0;
 8001406:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <LCD_PutString+0xd0>)
 8001408:	2200      	movs	r2, #0
 800140a:	70da      	strb	r2, [r3, #3]
			lcdOptions.Y++;
 800140c:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <LCD_PutString+0xd0>)
 800140e:	791b      	ldrb	r3, [r3, #4]
 8001410:	3301      	adds	r3, #1
 8001412:	b2da      	uxtb	r2, r3
 8001414:	4b26      	ldr	r3, [pc, #152]	; (80014b0 <LCD_PutString+0xd0>)
 8001416:	711a      	strb	r2, [r3, #4]
			setCursor(lcdOptions.X, lcdOptions.Y);
 8001418:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <LCD_PutString+0xd0>)
 800141a:	78db      	ldrb	r3, [r3, #3]
 800141c:	4a24      	ldr	r2, [pc, #144]	; (80014b0 <LCD_PutString+0xd0>)
 800141e:	7912      	ldrb	r2, [r2, #4]
 8001420:	4611      	mov	r1, r2
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff9a 	bl	800135c <setCursor>
		}
		if (*str == '\n')
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b0a      	cmp	r3, #10
 800142e:	d10e      	bne.n	800144e <LCD_PutString+0x6e>
		{
			lcdOptions.Y++;
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <LCD_PutString+0xd0>)
 8001432:	791b      	ldrb	r3, [r3, #4]
 8001434:	3301      	adds	r3, #1
 8001436:	b2da      	uxtb	r2, r3
 8001438:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <LCD_PutString+0xd0>)
 800143a:	711a      	strb	r2, [r3, #4]
			setCursor(lcdOptions.X, lcdOptions.Y);
 800143c:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <LCD_PutString+0xd0>)
 800143e:	78db      	ldrb	r3, [r3, #3]
 8001440:	4a1b      	ldr	r2, [pc, #108]	; (80014b0 <LCD_PutString+0xd0>)
 8001442:	7912      	ldrb	r2, [r2, #4]
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ff88 	bl	800135c <setCursor>
 800144c:	e024      	b.n	8001498 <LCD_PutString+0xb8>
		}
		else if (*str == '\r')
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b0d      	cmp	r3, #13
 8001454:	d106      	bne.n	8001464 <LCD_PutString+0x84>
		{
			setCursor(0, lcdOptions.Y);
 8001456:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <LCD_PutString+0xd0>)
 8001458:	791b      	ldrb	r3, [r3, #4]
 800145a:	4619      	mov	r1, r3
 800145c:	2000      	movs	r0, #0
 800145e:	f7ff ff7d 	bl	800135c <setCursor>
 8001462:	e019      	b.n	8001498 <LCD_PutString+0xb8>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8001464:	2201      	movs	r2, #1
 8001466:	2180      	movs	r1, #128	; 0x80
 8001468:	4812      	ldr	r0, [pc, #72]	; (80014b4 <LCD_PutString+0xd4>)
 800146a:	f001 fcfb 	bl	8002e64 <HAL_GPIO_WritePin>
			sendCommand4bit(*str >> 4);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	091b      	lsrs	r3, r3, #4
 8001474:	b2db      	uxtb	r3, r3
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff ff0c 	bl	8001294 <sendCommand4bit>
			sendCommand4bit(*str & 0x0F);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	f003 030f 	and.w	r3, r3, #15
 8001484:	b2db      	uxtb	r3, r3
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff04 	bl	8001294 <sendCommand4bit>
			lcdOptions.X++;
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <LCD_PutString+0xd0>)
 800148e:	78db      	ldrb	r3, [r3, #3]
 8001490:	3301      	adds	r3, #1
 8001492:	b2da      	uxtb	r2, r3
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <LCD_PutString+0xd0>)
 8001496:	70da      	strb	r2, [r3, #3]
		}
		str++;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	603b      	str	r3, [r7, #0]
	while (*str)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1ab      	bne.n	80013fe <LCD_PutString+0x1e>
	}
}
 80014a6:	bf00      	nop
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	200002f4 	.word	0x200002f4
 80014b4:	40021000 	.word	0x40021000

080014b8 <LCD_Clear>:

void LCD_Clear(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	sendCommand(CLEAR_DISPLAY);
 80014bc:	2001      	movs	r0, #1
 80014be:	f7ff ff2f 	bl	8001320 <sendCommand>
	HAL_Delay(2);
 80014c2:	2002      	movs	r0, #2
 80014c4:	f001 f9e4 	bl	8002890 <HAL_Delay>
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}

080014cc <LCD_Init>:

void LCD_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	// Затримка для стабілізації після включення живлення
	while (HAL_GetTick() < 200)
 80014d0:	e002      	b.n	80014d8 <LCD_Init+0xc>
	{
		HAL_Delay(1);
 80014d2:	2001      	movs	r0, #1
 80014d4:	f001 f9dc 	bl	8002890 <HAL_Delay>
	while (HAL_GetTick() < 200)
 80014d8:	f001 f9ce 	bl	8002878 <HAL_GetTick>
 80014dc:	4603      	mov	r3, r0
 80014de:	2bc7      	cmp	r3, #199	; 0xc7
 80014e0:	d9f7      	bls.n	80014d2 <LCD_Init+0x6>
	}

	lcdOptions.X = 0;
 80014e2:	4b20      	ldr	r3, [pc, #128]	; (8001564 <LCD_Init+0x98>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	70da      	strb	r2, [r3, #3]
	lcdOptions.Y = 0;
 80014e8:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <LCD_Init+0x98>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	711a      	strb	r2, [r3, #4]
	lcdOptions.displayFunction = TWO_LINE;
 80014ee:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <LCD_Init+0x98>)
 80014f0:	2208      	movs	r2, #8
 80014f2:	705a      	strb	r2, [r3, #1]

	// Спроби встановити 4-бітний режим
	sendCommand4bit(0x03);
 80014f4:	2003      	movs	r0, #3
 80014f6:	f7ff fecd 	bl	8001294 <sendCommand4bit>
	HAL_Delay(20);
 80014fa:	2014      	movs	r0, #20
 80014fc:	f001 f9c8 	bl	8002890 <HAL_Delay>

	sendCommand4bit(0x03);
 8001500:	2003      	movs	r0, #3
 8001502:	f7ff fec7 	bl	8001294 <sendCommand4bit>
	HAL_Delay(20);
 8001506:	2014      	movs	r0, #20
 8001508:	f001 f9c2 	bl	8002890 <HAL_Delay>

	sendCommand4bit(0x03);
 800150c:	2003      	movs	r0, #3
 800150e:	f7ff fec1 	bl	8001294 <sendCommand4bit>
	HAL_Delay(20);
 8001512:	2014      	movs	r0, #20
 8001514:	f001 f9bc 	bl	8002890 <HAL_Delay>

	sendCommand4bit(0x02);
 8001518:	2002      	movs	r0, #2
 800151a:	f7ff febb 	bl	8001294 <sendCommand4bit>
	HAL_Delay(20);
 800151e:	2014      	movs	r0, #20
 8001520:	f001 f9b6 	bl	8002890 <HAL_Delay>

	// Встановлення функціонального режиму дисплея
	sendCommand(FUNCTION_SET | lcdOptions.displayFunction);
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <LCD_Init+0x98>)
 8001526:	785b      	ldrb	r3, [r3, #1]
 8001528:	f043 0320 	orr.w	r3, r3, #32
 800152c:	b2db      	uxtb	r3, r3
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fef6 	bl	8001320 <sendCommand>

	lcdOptions.displayControl = DISPLAY_ON;
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <LCD_Init+0x98>)
 8001536:	2204      	movs	r2, #4
 8001538:	701a      	strb	r2, [r3, #0]
	displayOn();
 800153a:	f7ff ff3b 	bl	80013b4 <displayOn>
	LCD_Clear();
 800153e:	f7ff ffbb 	bl	80014b8 <LCD_Clear>

	// Встановлення режиму вводу
	lcdOptions.displayMode = ENTRY_LEFT;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <LCD_Init+0x98>)
 8001544:	2202      	movs	r2, #2
 8001546:	709a      	strb	r2, [r3, #2]
	sendCommand(ENTRY_SET | lcdOptions.displayMode);
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <LCD_Init+0x98>)
 800154a:	789b      	ldrb	r3, [r3, #2]
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	b2db      	uxtb	r3, r3
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fee4 	bl	8001320 <sendCommand>
	HAL_Delay(20);
 8001558:	2014      	movs	r0, #20
 800155a:	f001 f999 	bl	8002890 <HAL_Delay>
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200002f4 	.word	0x200002f4

08001568 <MPU6050_Init>:
static void MX_I2C1_Init(void);
static void MX_USART3_UART_Init(void);

// Функція ініціалізації MPU6050
void MPU6050_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af04      	add	r7, sp, #16
	uint8_t addressCheck;
	uint8_t data;

	// Перевірка ID пристрою
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &addressCheck, 1,
 800156e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001572:	9302      	str	r3, [sp, #8]
 8001574:	2301      	movs	r3, #1
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	1dfb      	adds	r3, r7, #7
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	2301      	movs	r3, #1
 800157e:	2275      	movs	r2, #117	; 0x75
 8001580:	21d0      	movs	r1, #208	; 0xd0
 8001582:	4823      	ldr	r0, [pc, #140]	; (8001610 <MPU6050_Init+0xa8>)
 8001584:	f001 fec6 	bl	8003314 <HAL_I2C_Mem_Read>
			1000);

	if (addressCheck == 0x68)
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	2b68      	cmp	r3, #104	; 0x68
 800158c:	d13b      	bne.n	8001606 <MPU6050_Init+0x9e>
	{
		// Пробудження датчика
		data = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1,
 8001592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001596:	9302      	str	r3, [sp, #8]
 8001598:	2301      	movs	r3, #1
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	1dbb      	adds	r3, r7, #6
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	2301      	movs	r3, #1
 80015a2:	226b      	movs	r2, #107	; 0x6b
 80015a4:	21d0      	movs	r1, #208	; 0xd0
 80015a6:	481a      	ldr	r0, [pc, #104]	; (8001610 <MPU6050_Init+0xa8>)
 80015a8:	f001 fdba 	bl	8003120 <HAL_I2C_Mem_Write>
				1000);

		// Встановлення частоти даних 1KHz
		data = 0x07;
 80015ac:	2307      	movs	r3, #7
 80015ae:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1,
 80015b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	2301      	movs	r3, #1
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	1dbb      	adds	r3, r7, #6
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2301      	movs	r3, #1
 80015c0:	2219      	movs	r2, #25
 80015c2:	21d0      	movs	r1, #208	; 0xd0
 80015c4:	4812      	ldr	r0, [pc, #72]	; (8001610 <MPU6050_Init+0xa8>)
 80015c6:	f001 fdab 	bl	8003120 <HAL_I2C_Mem_Write>
				1000);

		// AFS_SEL = 0 => +-2g
		data = 0x00;
 80015ca:	2300      	movs	r3, #0
 80015cc:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1,
 80015ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d2:	9302      	str	r3, [sp, #8]
 80015d4:	2301      	movs	r3, #1
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	1dbb      	adds	r3, r7, #6
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2301      	movs	r3, #1
 80015de:	221c      	movs	r2, #28
 80015e0:	21d0      	movs	r1, #208	; 0xd0
 80015e2:	480b      	ldr	r0, [pc, #44]	; (8001610 <MPU6050_Init+0xa8>)
 80015e4:	f001 fd9c 	bl	8003120 <HAL_I2C_Mem_Write>
				1000);

		// FS_SEL = 0 => +-250s
		data = 0x00;
 80015e8:	2300      	movs	r3, #0
 80015ea:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1,
 80015ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f0:	9302      	str	r3, [sp, #8]
 80015f2:	2301      	movs	r3, #1
 80015f4:	9301      	str	r3, [sp, #4]
 80015f6:	1dbb      	adds	r3, r7, #6
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	2301      	movs	r3, #1
 80015fc:	221b      	movs	r2, #27
 80015fe:	21d0      	movs	r1, #208	; 0xd0
 8001600:	4803      	ldr	r0, [pc, #12]	; (8001610 <MPU6050_Init+0xa8>)
 8001602:	f001 fd8d 	bl	8003120 <HAL_I2C_Mem_Write>
				1000);
	}
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000338 	.word	0x20000338

08001614 <MPU6050_ReadAccel>:

void MPU6050_ReadAccel(void)
{
 8001614:	b5b0      	push	{r4, r5, r7, lr}
 8001616:	b092      	sub	sp, #72	; 0x48
 8001618:	af04      	add	r7, sp, #16
	uint8_t receivedData[6];

	// Зчитування 6 байт даних, починаючи з регістра ACCEL_XOUT_H
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR,
 800161a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161e:	9302      	str	r3, [sp, #8]
 8001620:	2306      	movs	r3, #6
 8001622:	9301      	str	r3, [sp, #4]
 8001624:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2301      	movs	r3, #1
 800162c:	223b      	movs	r2, #59	; 0x3b
 800162e:	21d0      	movs	r1, #208	; 0xd0
 8001630:	4840      	ldr	r0, [pc, #256]	; (8001734 <MPU6050_ReadAccel+0x120>)
 8001632:	f001 fe6f 	bl	8003314 <HAL_I2C_Mem_Read>
 8001636:	4603      	mov	r3, r0
 8001638:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	ACCEL_XOUT_H_REG, 1, receivedData, 6, 1000);
	if (status != HAL_OK)
 800163c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001640:	2b00      	cmp	r3, #0
 8001642:	d016      	beq.n	8001672 <MPU6050_ReadAccel+0x5e>
	{
		char errorMessage[] = "Error reading accelerometer data with I2C\r\n";
 8001644:	4b3c      	ldr	r3, [pc, #240]	; (8001738 <MPU6050_ReadAccel+0x124>)
 8001646:	1d3c      	adds	r4, r7, #4
 8001648:	461d      	mov	r5, r3
 800164a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800164c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800164e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001652:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001656:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		CDC_Transmit_FS((uint8_t*) errorMessage, strlen(errorMessage));
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe fe07 	bl	8000270 <strlen>
 8001662:	4603      	mov	r3, r0
 8001664:	b29a      	uxth	r2, r3
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	4611      	mov	r1, r2
 800166a:	4618      	mov	r0, r3
 800166c:	f008 fb8e 	bl	8009d8c <CDC_Transmit_FS>
 8001670:	e05c      	b.n	800172c <MPU6050_ReadAccel+0x118>
		return;
	}

	// Об'єднання старшого і молодшого байта координати в 16-бітне значення для отримання сирих даних
	accel_X_Raw = (int16_t) (receivedData[0] << 8 | receivedData[1]);
 8001672:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001676:	021b      	lsls	r3, r3, #8
 8001678:	b21a      	sxth	r2, r3
 800167a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800167e:	b21b      	sxth	r3, r3
 8001680:	4313      	orrs	r3, r2
 8001682:	b21a      	sxth	r2, r3
 8001684:	4b2d      	ldr	r3, [pc, #180]	; (800173c <MPU6050_ReadAccel+0x128>)
 8001686:	801a      	strh	r2, [r3, #0]
	accel_Y_Raw = (int16_t) (receivedData[2] << 8 | receivedData[3]);
 8001688:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	b21a      	sxth	r2, r3
 8001690:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001694:	b21b      	sxth	r3, r3
 8001696:	4313      	orrs	r3, r2
 8001698:	b21a      	sxth	r2, r3
 800169a:	4b29      	ldr	r3, [pc, #164]	; (8001740 <MPU6050_ReadAccel+0x12c>)
 800169c:	801a      	strh	r2, [r3, #0]
	accel_Z_Raw = (int16_t) (receivedData[4] << 8 | receivedData[5]);
 800169e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	b21a      	sxth	r2, r3
 80016a6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b21a      	sxth	r2, r3
 80016b0:	4b24      	ldr	r3, [pc, #144]	; (8001744 <MPU6050_ReadAccel+0x130>)
 80016b2:	801a      	strh	r2, [r3, #0]

	// Перетворення сирих значень акселерометра в "g"
	accel_X = accel_X_Raw / 16384.0;
 80016b4:	4b21      	ldr	r3, [pc, #132]	; (800173c <MPU6050_ReadAccel+0x128>)
 80016b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe ff32 	bl	8000524 <__aeabi_i2d>
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	4b20      	ldr	r3, [pc, #128]	; (8001748 <MPU6050_ReadAccel+0x134>)
 80016c6:	f7ff f8c1 	bl	800084c <__aeabi_ddiv>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	f7ff fa89 	bl	8000be8 <__aeabi_d2f>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4a1c      	ldr	r2, [pc, #112]	; (800174c <MPU6050_ReadAccel+0x138>)
 80016da:	6013      	str	r3, [r2, #0]
	accel_Y = accel_Y_Raw / 16384.0;
 80016dc:	4b18      	ldr	r3, [pc, #96]	; (8001740 <MPU6050_ReadAccel+0x12c>)
 80016de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe ff1e 	bl	8000524 <__aeabi_i2d>
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	4b16      	ldr	r3, [pc, #88]	; (8001748 <MPU6050_ReadAccel+0x134>)
 80016ee:	f7ff f8ad 	bl	800084c <__aeabi_ddiv>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f7ff fa75 	bl	8000be8 <__aeabi_d2f>
 80016fe:	4603      	mov	r3, r0
 8001700:	4a13      	ldr	r2, [pc, #76]	; (8001750 <MPU6050_ReadAccel+0x13c>)
 8001702:	6013      	str	r3, [r2, #0]
	accel_Z = accel_Z_Raw / 16384.0;
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <MPU6050_ReadAccel+0x130>)
 8001706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe ff0a 	bl	8000524 <__aeabi_i2d>
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MPU6050_ReadAccel+0x134>)
 8001716:	f7ff f899 	bl	800084c <__aeabi_ddiv>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f7ff fa61 	bl	8000be8 <__aeabi_d2f>
 8001726:	4603      	mov	r3, r0
 8001728:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <MPU6050_ReadAccel+0x140>)
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	3738      	adds	r7, #56	; 0x38
 800172e:	46bd      	mov	sp, r7
 8001730:	bdb0      	pop	{r4, r5, r7, pc}
 8001732:	bf00      	nop
 8001734:	20000338 	.word	0x20000338
 8001738:	08010e98 	.word	0x08010e98
 800173c:	20000308 	.word	0x20000308
 8001740:	2000030a 	.word	0x2000030a
 8001744:	2000030c 	.word	0x2000030c
 8001748:	40d00000 	.word	0x40d00000
 800174c:	20000314 	.word	0x20000314
 8001750:	20000318 	.word	0x20000318
 8001754:	2000031c 	.word	0x2000031c

08001758 <MPU6050_ReadGyro>:

void MPU6050_ReadGyro(void)
{
 8001758:	b5b0      	push	{r4, r5, r7, lr}
 800175a:	b094      	sub	sp, #80	; 0x50
 800175c:	af04      	add	r7, sp, #16
	uint8_t receivedData[6];

	// Зчитування 6 байт даних, починаючи з регістра GYRO_XOUT_H
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR,
 800175e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001762:	9302      	str	r3, [sp, #8]
 8001764:	2306      	movs	r3, #6
 8001766:	9301      	str	r3, [sp, #4]
 8001768:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	2301      	movs	r3, #1
 8001770:	2243      	movs	r2, #67	; 0x43
 8001772:	21d0      	movs	r1, #208	; 0xd0
 8001774:	48ae      	ldr	r0, [pc, #696]	; (8001a30 <MPU6050_ReadGyro+0x2d8>)
 8001776:	f001 fdcd 	bl	8003314 <HAL_I2C_Mem_Read>
 800177a:	4603      	mov	r3, r0
 800177c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	GYRO_XOUT_H_REG, 1, receivedData, 6, 1000);
	if (status != HAL_OK)
 8001780:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001784:	2b00      	cmp	r3, #0
 8001786:	d016      	beq.n	80017b6 <MPU6050_ReadGyro+0x5e>
	{
		char errorMessage[] = "Error reading gyroscope data with I2C\r\n";
 8001788:	4baa      	ldr	r3, [pc, #680]	; (8001a34 <MPU6050_ReadGyro+0x2dc>)
 800178a:	1d3c      	adds	r4, r7, #4
 800178c:	461d      	mov	r5, r3
 800178e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001796:	e895 0003 	ldmia.w	r5, {r0, r1}
 800179a:	e884 0003 	stmia.w	r4, {r0, r1}
		CDC_Transmit_FS((uint8_t*) errorMessage, strlen(errorMessage));
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fd65 	bl	8000270 <strlen>
 80017a6:	4603      	mov	r3, r0
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	4611      	mov	r1, r2
 80017ae:	4618      	mov	r0, r3
 80017b0:	f008 faec 	bl	8009d8c <CDC_Transmit_FS>
 80017b4:	e12e      	b.n	8001a14 <MPU6050_ReadGyro+0x2bc>
		return;
	}

	// Об'єднання старшого і молодшого байта координати в 16-бітне значення для отримання сирих даних
	gyro_X_Raw = (int16_t) (receivedData[0] << 8 | receivedData[1]);
 80017b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	b21a      	sxth	r2, r3
 80017be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80017c2:	b21b      	sxth	r3, r3
 80017c4:	4313      	orrs	r3, r2
 80017c6:	b21a      	sxth	r2, r3
 80017c8:	4b9b      	ldr	r3, [pc, #620]	; (8001a38 <MPU6050_ReadGyro+0x2e0>)
 80017ca:	801a      	strh	r2, [r3, #0]
	gyro_Y_Raw = (int16_t) (receivedData[2] << 8 | receivedData[3]);
 80017cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017d8:	b21b      	sxth	r3, r3
 80017da:	4313      	orrs	r3, r2
 80017dc:	b21a      	sxth	r2, r3
 80017de:	4b97      	ldr	r3, [pc, #604]	; (8001a3c <MPU6050_ReadGyro+0x2e4>)
 80017e0:	801a      	strh	r2, [r3, #0]
	gyro_Z_Raw = (int16_t) (receivedData[4] << 8 | receivedData[5]);
 80017e2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017e6:	021b      	lsls	r3, r3, #8
 80017e8:	b21a      	sxth	r2, r3
 80017ea:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80017ee:	b21b      	sxth	r3, r3
 80017f0:	4313      	orrs	r3, r2
 80017f2:	b21a      	sxth	r2, r3
 80017f4:	4b92      	ldr	r3, [pc, #584]	; (8001a40 <MPU6050_ReadGyro+0x2e8>)
 80017f6:	801a      	strh	r2, [r3, #0]

	// Перетворення сирих значень гіроскопа в "градус на секунду"
	gyro_X = gyro_X_Raw / 131.0;
 80017f8:	4b8f      	ldr	r3, [pc, #572]	; (8001a38 <MPU6050_ReadGyro+0x2e0>)
 80017fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fe90 	bl	8000524 <__aeabi_i2d>
 8001804:	a386      	add	r3, pc, #536	; (adr r3, 8001a20 <MPU6050_ReadGyro+0x2c8>)
 8001806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180a:	f7ff f81f 	bl	800084c <__aeabi_ddiv>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	f7ff f9e7 	bl	8000be8 <__aeabi_d2f>
 800181a:	4603      	mov	r3, r0
 800181c:	4a89      	ldr	r2, [pc, #548]	; (8001a44 <MPU6050_ReadGyro+0x2ec>)
 800181e:	6013      	str	r3, [r2, #0]
	gyro_Y = gyro_Y_Raw / 131.0;
 8001820:	4b86      	ldr	r3, [pc, #536]	; (8001a3c <MPU6050_ReadGyro+0x2e4>)
 8001822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fe7c 	bl	8000524 <__aeabi_i2d>
 800182c:	a37c      	add	r3, pc, #496	; (adr r3, 8001a20 <MPU6050_ReadGyro+0x2c8>)
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	f7ff f80b 	bl	800084c <__aeabi_ddiv>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	f7ff f9d3 	bl	8000be8 <__aeabi_d2f>
 8001842:	4603      	mov	r3, r0
 8001844:	4a80      	ldr	r2, [pc, #512]	; (8001a48 <MPU6050_ReadGyro+0x2f0>)
 8001846:	6013      	str	r3, [r2, #0]
	gyro_Z = gyro_Z_Raw / 131.0;
 8001848:	4b7d      	ldr	r3, [pc, #500]	; (8001a40 <MPU6050_ReadGyro+0x2e8>)
 800184a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fe68 	bl	8000524 <__aeabi_i2d>
 8001854:	a372      	add	r3, pc, #456	; (adr r3, 8001a20 <MPU6050_ReadGyro+0x2c8>)
 8001856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185a:	f7fe fff7 	bl	800084c <__aeabi_ddiv>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4610      	mov	r0, r2
 8001864:	4619      	mov	r1, r3
 8001866:	f7ff f9bf 	bl	8000be8 <__aeabi_d2f>
 800186a:	4603      	mov	r3, r0
 800186c:	4a77      	ldr	r2, [pc, #476]	; (8001a4c <MPU6050_ReadGyro+0x2f4>)
 800186e:	6013      	str	r3, [r2, #0]

	// Обчислення кута нахилу на основі даних акселерометра та гіроскопа
	// Якщо не використовувати (180.0 * M_PI) тоді результат буде в радіанах
	MPU6050_Data.X = atan2(accel_Y, accel_Z) * 180.0 / M_PI;
 8001870:	4b77      	ldr	r3, [pc, #476]	; (8001a50 <MPU6050_ReadGyro+0x2f8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fe67 	bl	8000548 <__aeabi_f2d>
 800187a:	4604      	mov	r4, r0
 800187c:	460d      	mov	r5, r1
 800187e:	4b75      	ldr	r3, [pc, #468]	; (8001a54 <MPU6050_ReadGyro+0x2fc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fe60 	bl	8000548 <__aeabi_f2d>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	ec43 2b11 	vmov	d1, r2, r3
 8001890:	ec45 4b10 	vmov	d0, r4, r5
 8001894:	f00d ff38 	bl	800f708 <atan2>
 8001898:	ec51 0b10 	vmov	r0, r1, d0
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	4b6d      	ldr	r3, [pc, #436]	; (8001a58 <MPU6050_ReadGyro+0x300>)
 80018a2:	f7fe fea9 	bl	80005f8 <__aeabi_dmul>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4610      	mov	r0, r2
 80018ac:	4619      	mov	r1, r3
 80018ae:	a35e      	add	r3, pc, #376	; (adr r3, 8001a28 <MPU6050_ReadGyro+0x2d0>)
 80018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b4:	f7fe ffca 	bl	800084c <__aeabi_ddiv>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	f7ff f992 	bl	8000be8 <__aeabi_d2f>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4a65      	ldr	r2, [pc, #404]	; (8001a5c <MPU6050_ReadGyro+0x304>)
 80018c8:	6013      	str	r3, [r2, #0]
	MPU6050_Data.Y = atan2(-accel_X,
 80018ca:	4b65      	ldr	r3, [pc, #404]	; (8001a60 <MPU6050_ReadGyro+0x308>)
 80018cc:	edd3 7a00 	vldr	s15, [r3]
 80018d0:	eef1 7a67 	vneg.f32	s15, s15
 80018d4:	ee17 3a90 	vmov	r3, s15
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fe35 	bl	8000548 <__aeabi_f2d>
 80018de:	4604      	mov	r4, r0
 80018e0:	460d      	mov	r5, r1
			sqrt(accel_Y * accel_Y + accel_Z * accel_Z)) / 180.0 * M_PI;
 80018e2:	4b5b      	ldr	r3, [pc, #364]	; (8001a50 <MPU6050_ReadGyro+0x2f8>)
 80018e4:	ed93 7a00 	vldr	s14, [r3]
 80018e8:	4b59      	ldr	r3, [pc, #356]	; (8001a50 <MPU6050_ReadGyro+0x2f8>)
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018f2:	4b58      	ldr	r3, [pc, #352]	; (8001a54 <MPU6050_ReadGyro+0x2fc>)
 80018f4:	edd3 6a00 	vldr	s13, [r3]
 80018f8:	4b56      	ldr	r3, [pc, #344]	; (8001a54 <MPU6050_ReadGyro+0x2fc>)
 80018fa:	edd3 7a00 	vldr	s15, [r3]
 80018fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001902:	ee77 7a27 	vadd.f32	s15, s14, s15
	MPU6050_Data.Y = atan2(-accel_X,
 8001906:	ee17 0a90 	vmov	r0, s15
 800190a:	f7fe fe1d 	bl	8000548 <__aeabi_f2d>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	ec43 2b10 	vmov	d0, r2, r3
 8001916:	f00d fef9 	bl	800f70c <sqrt>
 800191a:	eeb0 7a40 	vmov.f32	s14, s0
 800191e:	eef0 7a60 	vmov.f32	s15, s1
 8001922:	eeb0 1a47 	vmov.f32	s2, s14
 8001926:	eef0 1a67 	vmov.f32	s3, s15
 800192a:	ec45 4b10 	vmov	d0, r4, r5
 800192e:	f00d feeb 	bl	800f708 <atan2>
 8001932:	ec51 0b10 	vmov	r0, r1, d0
			sqrt(accel_Y * accel_Y + accel_Z * accel_Z)) / 180.0 * M_PI;
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <MPU6050_ReadGyro+0x300>)
 800193c:	f7fe ff86 	bl	800084c <__aeabi_ddiv>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4610      	mov	r0, r2
 8001946:	4619      	mov	r1, r3
 8001948:	a337      	add	r3, pc, #220	; (adr r3, 8001a28 <MPU6050_ReadGyro+0x2d0>)
 800194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194e:	f7fe fe53 	bl	80005f8 <__aeabi_dmul>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	f7ff f945 	bl	8000be8 <__aeabi_d2f>
 800195e:	4603      	mov	r3, r0
	MPU6050_Data.Y = atan2(-accel_X,
 8001960:	4a3e      	ldr	r2, [pc, #248]	; (8001a5c <MPU6050_ReadGyro+0x304>)
 8001962:	6053      	str	r3, [r2, #4]
	float Z = (gyro_Z) / 131.0;
 8001964:	4b39      	ldr	r3, [pc, #228]	; (8001a4c <MPU6050_ReadGyro+0x2f4>)
 8001966:	ed93 7a00 	vldr	s14, [r3]
 800196a:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001a64 <MPU6050_ReadGyro+0x30c>
 800196e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001972:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	// Перевіряється, чи є значення кутової швидкості обертання навколо Z достатнім для корекції X та Y
	MPU6050_Data.Z = Z;
 8001976:	4a39      	ldr	r2, [pc, #228]	; (8001a5c <MPU6050_ReadGyro+0x304>)
 8001978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800197a:	6093      	str	r3, [r2, #8]
	if (abs(Z) > 0.01)
 800197c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001984:	ee17 3a90 	vmov	r3, s15
 8001988:	2b00      	cmp	r3, #0
 800198a:	bfb8      	it	lt
 800198c:	425b      	neglt	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	dd40      	ble.n	8001a14 <MPU6050_ReadGyro+0x2bc>
	{
		float new_Z = sin(Z * M_PI / 180);
 8001992:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001994:	f7fe fdd8 	bl	8000548 <__aeabi_f2d>
 8001998:	a323      	add	r3, pc, #140	; (adr r3, 8001a28 <MPU6050_ReadGyro+0x2d0>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	f7fe fe2b 	bl	80005f8 <__aeabi_dmul>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	4b2a      	ldr	r3, [pc, #168]	; (8001a58 <MPU6050_ReadGyro+0x300>)
 80019b0:	f7fe ff4c 	bl	800084c <__aeabi_ddiv>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	ec43 2b17 	vmov	d7, r2, r3
 80019bc:	eeb0 0a47 	vmov.f32	s0, s14
 80019c0:	eef0 0a67 	vmov.f32	s1, s15
 80019c4:	f00d fed0 	bl	800f768 <sin>
 80019c8:	ec53 2b10 	vmov	r2, r3, d0
 80019cc:	4610      	mov	r0, r2
 80019ce:	4619      	mov	r1, r3
 80019d0:	f7ff f90a 	bl	8000be8 <__aeabi_d2f>
 80019d4:	4603      	mov	r3, r0
 80019d6:	637b      	str	r3, [r7, #52]	; 0x34
		MPU6050_Data.X -= MPU6050_Data.Y * new_Z;
 80019d8:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <MPU6050_ReadGyro+0x304>)
 80019da:	ed93 7a00 	vldr	s14, [r3]
 80019de:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <MPU6050_ReadGyro+0x304>)
 80019e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80019e4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80019e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f0:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <MPU6050_ReadGyro+0x304>)
 80019f2:	edc3 7a00 	vstr	s15, [r3]
		MPU6050_Data.Y += MPU6050_Data.X * new_Z;
 80019f6:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <MPU6050_ReadGyro+0x304>)
 80019f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80019fc:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <MPU6050_ReadGyro+0x304>)
 80019fe:	edd3 6a00 	vldr	s13, [r3]
 8001a02:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a0e:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <MPU6050_ReadGyro+0x304>)
 8001a10:	edc3 7a01 	vstr	s15, [r3, #4]
	}
}
 8001a14:	3740      	adds	r7, #64	; 0x40
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bdb0      	pop	{r4, r5, r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	f3af 8000 	nop.w
 8001a20:	00000000 	.word	0x00000000
 8001a24:	40606000 	.word	0x40606000
 8001a28:	54442d18 	.word	0x54442d18
 8001a2c:	400921fb 	.word	0x400921fb
 8001a30:	20000338 	.word	0x20000338
 8001a34:	08010ec4 	.word	0x08010ec4
 8001a38:	2000030e 	.word	0x2000030e
 8001a3c:	20000310 	.word	0x20000310
 8001a40:	20000312 	.word	0x20000312
 8001a44:	20000320 	.word	0x20000320
 8001a48:	20000324 	.word	0x20000324
 8001a4c:	20000328 	.word	0x20000328
 8001a50:	20000318 	.word	0x20000318
 8001a54:	2000031c 	.word	0x2000031c
 8001a58:	40668000 	.word	0x40668000
 8001a5c:	200002fc 	.word	0x200002fc
 8001a60:	20000314 	.word	0x20000314
 8001a64:	43030000 	.word	0x43030000

08001a68 <ComplementaryFilter>:

void ComplementaryFilter(float accelX, float gyroX, float accelY, float gyroY,
		float accelZ, float gyroZ)
{
 8001a68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a6c:	b098      	sub	sp, #96	; 0x60
 8001a6e:	af04      	add	r7, sp, #16
 8001a70:	ed87 0a05 	vstr	s0, [r7, #20]
 8001a74:	edc7 0a04 	vstr	s1, [r7, #16]
 8001a78:	ed87 1a03 	vstr	s2, [r7, #12]
 8001a7c:	edc7 1a02 	vstr	s3, [r7, #8]
 8001a80:	ed87 2a01 	vstr	s4, [r7, #4]
 8001a84:	edc7 2a00 	vstr	s5, [r7]
	char USB_DataBufer[50];
	// Застосування комплементарного фільтра для згладжування вимірювань акселерометра та гіроскопа
	MPU6050_Data.X = COMP_FILTER_ALPHA * (gyroX + accelX)
 8001a88:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a94:	ee17 0a90 	vmov	r0, s15
 8001a98:	f7fe fd56 	bl	8000548 <__aeabi_f2d>
 8001a9c:	a358      	add	r3, pc, #352	; (adr r3, 8001c00 <ComplementaryFilter+0x198>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	f7fe fda9 	bl	80005f8 <__aeabi_dmul>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4614      	mov	r4, r2
 8001aac:	461d      	mov	r5, r3
			+ (1 - COMP_FILTER_ALPHA) * prev_X;
 8001aae:	4b56      	ldr	r3, [pc, #344]	; (8001c08 <ComplementaryFilter+0x1a0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fd48 	bl	8000548 <__aeabi_f2d>
 8001ab8:	a34f      	add	r3, pc, #316	; (adr r3, 8001bf8 <ComplementaryFilter+0x190>)
 8001aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abe:	f7fe fd9b 	bl	80005f8 <__aeabi_dmul>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	4629      	mov	r1, r5
 8001aca:	f7fe fbdf 	bl	800028c <__adddf3>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f7ff f887 	bl	8000be8 <__aeabi_d2f>
 8001ada:	4603      	mov	r3, r0
	MPU6050_Data.X = COMP_FILTER_ALPHA * (gyroX + accelX)
 8001adc:	4a4b      	ldr	r2, [pc, #300]	; (8001c0c <ComplementaryFilter+0x1a4>)
 8001ade:	6013      	str	r3, [r2, #0]
	MPU6050_Data.Y = COMP_FILTER_ALPHA * (gyroY + accelY)
 8001ae0:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ae4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aec:	ee17 0a90 	vmov	r0, s15
 8001af0:	f7fe fd2a 	bl	8000548 <__aeabi_f2d>
 8001af4:	a342      	add	r3, pc, #264	; (adr r3, 8001c00 <ComplementaryFilter+0x198>)
 8001af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afa:	f7fe fd7d 	bl	80005f8 <__aeabi_dmul>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4614      	mov	r4, r2
 8001b04:	461d      	mov	r5, r3
			+ (1 - COMP_FILTER_ALPHA) * prev_Y;
 8001b06:	4b42      	ldr	r3, [pc, #264]	; (8001c10 <ComplementaryFilter+0x1a8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd1c 	bl	8000548 <__aeabi_f2d>
 8001b10:	a339      	add	r3, pc, #228	; (adr r3, 8001bf8 <ComplementaryFilter+0x190>)
 8001b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b16:	f7fe fd6f 	bl	80005f8 <__aeabi_dmul>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4620      	mov	r0, r4
 8001b20:	4629      	mov	r1, r5
 8001b22:	f7fe fbb3 	bl	800028c <__adddf3>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f7ff f85b 	bl	8000be8 <__aeabi_d2f>
 8001b32:	4603      	mov	r3, r0
	MPU6050_Data.Y = COMP_FILTER_ALPHA * (gyroY + accelY)
 8001b34:	4a35      	ldr	r2, [pc, #212]	; (8001c0c <ComplementaryFilter+0x1a4>)
 8001b36:	6053      	str	r3, [r2, #4]
	MPU6050_Data.Z = COMP_FILTER_ALPHA * (gyroZ + accelZ)
 8001b38:	ed97 7a00 	vldr	s14, [r7]
 8001b3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b44:	ee17 0a90 	vmov	r0, s15
 8001b48:	f7fe fcfe 	bl	8000548 <__aeabi_f2d>
 8001b4c:	a32c      	add	r3, pc, #176	; (adr r3, 8001c00 <ComplementaryFilter+0x198>)
 8001b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b52:	f7fe fd51 	bl	80005f8 <__aeabi_dmul>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4614      	mov	r4, r2
 8001b5c:	461d      	mov	r5, r3
			+ (1 - COMP_FILTER_ALPHA) * prev_Z;
 8001b5e:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <ComplementaryFilter+0x1ac>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fcf0 	bl	8000548 <__aeabi_f2d>
 8001b68:	a323      	add	r3, pc, #140	; (adr r3, 8001bf8 <ComplementaryFilter+0x190>)
 8001b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6e:	f7fe fd43 	bl	80005f8 <__aeabi_dmul>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4620      	mov	r0, r4
 8001b78:	4629      	mov	r1, r5
 8001b7a:	f7fe fb87 	bl	800028c <__adddf3>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	f7ff f82f 	bl	8000be8 <__aeabi_d2f>
 8001b8a:	4603      	mov	r3, r0
	MPU6050_Data.Z = COMP_FILTER_ALPHA * (gyroZ + accelZ)
 8001b8c:	4a1f      	ldr	r2, [pc, #124]	; (8001c0c <ComplementaryFilter+0x1a4>)
 8001b8e:	6093      	str	r3, [r2, #8]

	sprintf(USB_DataBufer, "%1.f; %1.f; %1.f\n", MPU6050_Data.X, MPU6050_Data.Y,
 8001b90:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <ComplementaryFilter+0x1a4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fcd7 	bl	8000548 <__aeabi_f2d>
 8001b9a:	4680      	mov	r8, r0
 8001b9c:	4689      	mov	r9, r1
 8001b9e:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <ComplementaryFilter+0x1a4>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fcd0 	bl	8000548 <__aeabi_f2d>
 8001ba8:	4604      	mov	r4, r0
 8001baa:	460d      	mov	r5, r1
			MPU6050_Data.Z);
 8001bac:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <ComplementaryFilter+0x1a4>)
 8001bae:	689b      	ldr	r3, [r3, #8]
	sprintf(USB_DataBufer, "%1.f; %1.f; %1.f\n", MPU6050_Data.X, MPU6050_Data.Y,
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fcc9 	bl	8000548 <__aeabi_f2d>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	f107 001c 	add.w	r0, r7, #28
 8001bbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001bc2:	e9cd 4500 	strd	r4, r5, [sp]
 8001bc6:	4642      	mov	r2, r8
 8001bc8:	464b      	mov	r3, r9
 8001bca:	4913      	ldr	r1, [pc, #76]	; (8001c18 <ComplementaryFilter+0x1b0>)
 8001bcc:	f009 fc94 	bl	800b4f8 <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_DataBufer, strlen(USB_DataBufer));
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fb4b 	bl	8000270 <strlen>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	f107 031c 	add.w	r3, r7, #28
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f008 f8d1 	bl	8009d8c <CDC_Transmit_FS>
}
 8001bea:	bf00      	nop
 8001bec:	3750      	adds	r7, #80	; 0x50
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	47ae1480 	.word	0x47ae1480
 8001bfc:	3f947ae1 	.word	0x3f947ae1
 8001c00:	f5c28f5c 	.word	0xf5c28f5c
 8001c04:	3fef5c28 	.word	0x3fef5c28
 8001c08:	2000032c 	.word	0x2000032c
 8001c0c:	200002fc 	.word	0x200002fc
 8001c10:	20000330 	.word	0x20000330
 8001c14:	20000334 	.word	0x20000334
 8001c18:	08010eec 	.word	0x08010eec

08001c1c <ControlLEDs>:

void ControlLEDs(float x, float y, float z)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c26:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c2a:	ed87 1a01 	vstr	s2, [r7, #4]
	if (x < LEFT_THRESHOLD)
 8001c2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c32:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001c36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3e:	d506      	bpl.n	8001c4e <ControlLEDs+0x32>
	{
		// Увімкнути червоний світлодіод
		HAL_GPIO_WritePin(GPIOD, Red_LED_Pin, GPIO_PIN_SET);
 8001c40:	2201      	movs	r2, #1
 8001c42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c46:	4828      	ldr	r0, [pc, #160]	; (8001ce8 <ControlLEDs+0xcc>)
 8001c48:	f001 f90c 	bl	8002e64 <HAL_GPIO_WritePin>
 8001c4c:	e005      	b.n	8001c5a <ControlLEDs+0x3e>
	}
	else
	{
		// Вимкнути червоний світлодіод
		HAL_GPIO_WritePin(GPIOD, Red_LED_Pin, GPIO_PIN_RESET);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c54:	4824      	ldr	r0, [pc, #144]	; (8001ce8 <ControlLEDs+0xcc>)
 8001c56:	f001 f905 	bl	8002e64 <HAL_GPIO_WritePin>
	}
	if (x > RIGHT_THRESHOLD)
 8001c5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c5e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6a:	dd06      	ble.n	8001c7a <ControlLEDs+0x5e>
	{
		// Увімкнути зелений світлодіод
		HAL_GPIO_WritePin(GPIOD, Green_LED_Pin, GPIO_PIN_SET);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c72:	481d      	ldr	r0, [pc, #116]	; (8001ce8 <ControlLEDs+0xcc>)
 8001c74:	f001 f8f6 	bl	8002e64 <HAL_GPIO_WritePin>
 8001c78:	e005      	b.n	8001c86 <ControlLEDs+0x6a>
	}
	else
	{
		// Вимкнути зелений світлодіод
		HAL_GPIO_WritePin(GPIOD, Green_LED_Pin, GPIO_PIN_RESET);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c80:	4819      	ldr	r0, [pc, #100]	; (8001ce8 <ControlLEDs+0xcc>)
 8001c82:	f001 f8ef 	bl	8002e64 <HAL_GPIO_WritePin>
	}

	if (y > TOP_THRESHOLD)
 8001c86:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c8a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c96:	dd06      	ble.n	8001ca6 <ControlLEDs+0x8a>
	{
		// Увімкнути синій світлодіод
		HAL_GPIO_WritePin(GPIOD, Blue_LED_Pin, GPIO_PIN_SET);
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c9e:	4812      	ldr	r0, [pc, #72]	; (8001ce8 <ControlLEDs+0xcc>)
 8001ca0:	f001 f8e0 	bl	8002e64 <HAL_GPIO_WritePin>
 8001ca4:	e005      	b.n	8001cb2 <ControlLEDs+0x96>
	}
	else
	{
		// Вимкнути синій світлодіод
		HAL_GPIO_WritePin(GPIOD, Blue_LED_Pin, GPIO_PIN_RESET);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cac:	480e      	ldr	r0, [pc, #56]	; (8001ce8 <ControlLEDs+0xcc>)
 8001cae:	f001 f8d9 	bl	8002e64 <HAL_GPIO_WritePin>
	}

	if (y < BOTTOM_THRESHOLD)
 8001cb2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cb6:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001cba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc2:	d506      	bpl.n	8001cd2 <ControlLEDs+0xb6>
	{
		// Увімкнути помаранчевий світлодіод
		HAL_GPIO_WritePin(GPIOD, Orange_LED_Pin, GPIO_PIN_SET);
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cca:	4807      	ldr	r0, [pc, #28]	; (8001ce8 <ControlLEDs+0xcc>)
 8001ccc:	f001 f8ca 	bl	8002e64 <HAL_GPIO_WritePin>
	else
	{
		// Вимкнути помаранчевий світлодіод
		HAL_GPIO_WritePin(GPIOD, Orange_LED_Pin, GPIO_PIN_RESET);
	}
}
 8001cd0:	e005      	b.n	8001cde <ControlLEDs+0xc2>
		HAL_GPIO_WritePin(GPIOD, Orange_LED_Pin, GPIO_PIN_RESET);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cd8:	4803      	ldr	r0, [pc, #12]	; (8001ce8 <ControlLEDs+0xcc>)
 8001cda:	f001 f8c3 	bl	8002e64 <HAL_GPIO_WritePin>
}
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40020c00 	.word	0x40020c00

08001cec <extractGPGGA>:

int extractGPGGA(const char *buffer, char *gpgga_Sentence)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
	// Знаходимо початок речення GPGGA
	const char *start = strstr(buffer, "$GPGGA");
 8001cf6:	4913      	ldr	r1, [pc, #76]	; (8001d44 <extractGPGGA+0x58>)
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f009 fcb6 	bl	800b66a <strstr>
 8001cfe:	6178      	str	r0, [r7, #20]
	if (start)
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d018      	beq.n	8001d38 <extractGPGGA+0x4c>
	{
		// Знаходимо кінець речення GPGGA
		const char *end = strchr(start, '\n');
 8001d06:	210a      	movs	r1, #10
 8001d08:	6978      	ldr	r0, [r7, #20]
 8001d0a:	f009 fc8e 	bl	800b62a <strchr>
 8001d0e:	6138      	str	r0, [r7, #16]
		if (end)
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d010      	beq.n	8001d38 <extractGPGGA+0x4c>
		{
			size_t len = end - start + 1;
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	60fb      	str	r3, [r7, #12]
			// Копіюємо речення GPGGA у вихідний буфер
			strncpy(gpgga_Sentence, start, len);
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	6979      	ldr	r1, [r7, #20]
 8001d24:	6838      	ldr	r0, [r7, #0]
 8001d26:	f009 fc8d 	bl	800b644 <strncpy>
			gpgga_Sentence[len] = '\0';
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4413      	add	r3, r2
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
			return 1;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <extractGPGGA+0x4e>
		}
	}
	return 0;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	08010f00 	.word	0x08010f00

08001d48 <parseGPGGA>:

void parseGPGGA(const char *sentence, char *latitude, char *longitude)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b090      	sub	sp, #64	; 0x40
 8001d4c:	af02      	add	r7, sp, #8
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
	char tempLatitude[15], tempLongitude[15];
	char latitudeDirection, longtitudeDirection;

	// Зчитуємо широту та довготу з рядка GPGGA
	if (sscanf(sentence, "$GPGGA,%*f,%[^,],%c,%[^,],%c", tempLatitude,
 8001d54:	f107 0117 	add.w	r1, r7, #23
 8001d58:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d5c:	f107 0316 	add.w	r3, r7, #22
 8001d60:	9301      	str	r3, [sp, #4]
 8001d62:	f107 0318 	add.w	r3, r7, #24
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4914      	ldr	r1, [pc, #80]	; (8001dbc <parseGPGGA+0x74>)
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f009 fbe3 	bl	800b538 <siscanf>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d114      	bne.n	8001da2 <parseGPGGA+0x5a>
			&latitudeDirection, tempLongitude, &longtitudeDirection) == 4)
	{
		snprintf(latitude, sizeof(tempLatitude), "%.10s %c", tempLatitude,
 8001d78:	7dfb      	ldrb	r3, [r7, #23]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d80:	9200      	str	r2, [sp, #0]
 8001d82:	4a0f      	ldr	r2, [pc, #60]	; (8001dc0 <parseGPGGA+0x78>)
 8001d84:	210f      	movs	r1, #15
 8001d86:	68b8      	ldr	r0, [r7, #8]
 8001d88:	f009 fb82 	bl	800b490 <sniprintf>
				latitudeDirection);
		snprintf(longitude, sizeof(tempLongitude), "%.10s %c", tempLongitude,
 8001d8c:	7dbb      	ldrb	r3, [r7, #22]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	f107 0318 	add.w	r3, r7, #24
 8001d94:	9200      	str	r2, [sp, #0]
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <parseGPGGA+0x78>)
 8001d98:	210f      	movs	r1, #15
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f009 fb78 	bl	800b490 <sniprintf>
	else
	{
		strcpy(latitude, "N/A");
		strcpy(longitude, "N/A");
	}
}
 8001da0:	e007      	b.n	8001db2 <parseGPGGA+0x6a>
		strcpy(latitude, "N/A");
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	4a07      	ldr	r2, [pc, #28]	; (8001dc4 <parseGPGGA+0x7c>)
 8001da6:	6810      	ldr	r0, [r2, #0]
 8001da8:	6018      	str	r0, [r3, #0]
		strcpy(longitude, "N/A");
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <parseGPGGA+0x7c>)
 8001dae:	6810      	ldr	r0, [r2, #0]
 8001db0:	6018      	str	r0, [r3, #0]
}
 8001db2:	bf00      	nop
 8001db4:	3738      	adds	r7, #56	; 0x38
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	08010f08 	.word	0x08010f08
 8001dc0:	08010f28 	.word	0x08010f28
 8001dc4:	08010f34 	.word	0x08010f34

08001dc8 <main>:

int main(void)
{
 8001dc8:	b5b0      	push	{r4, r5, r7, lr}
 8001dca:	b0f6      	sub	sp, #472	; 0x1d8
 8001dcc:	af02      	add	r7, sp, #8
	char gpgga_Sentence[100];
	char latitude[15];
	char longitude[15];

	// Ініціалізація системи та периферії
	HAL_Init();
 8001dce:	f000 fced 	bl	80027ac <HAL_Init>
	SystemClock_Config();
 8001dd2:	f000 f9af 	bl	8002134 <SystemClock_Config>
	MX_GPIO_Init();
 8001dd6:	f000 fa6f 	bl	80022b8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001dda:	f000 fa15 	bl	8002208 <MX_I2C1_Init>
	MX_USART3_UART_Init();
 8001dde:	f000 fa41 	bl	8002264 <MX_USART3_UART_Init>
	MX_USB_DEVICE_Init();
 8001de2:	f007 ff15 	bl	8009c10 <MX_USB_DEVICE_Init>
	MPU6050_Init();
 8001de6:	f7ff fbbf 	bl	8001568 <MPU6050_Init>
	LCD_Init();
 8001dea:	f7ff fb6f 	bl	80014cc <LCD_Init>

	while (1)
	{
		// Зчитування даних з акселерометра та гіроскопа
		MPU6050_ReadAccel();
 8001dee:	f7ff fc11 	bl	8001614 <MPU6050_ReadAccel>
		MPU6050_ReadGyro();
 8001df2:	f7ff fcb1 	bl	8001758 <MPU6050_ReadGyro>

		// Обчислення кутів нахилу на основі даних акселерометра
		MPU6050_Data.X = atan2(accel_Y, accel_Z) * 180.0 / M_PI;
 8001df6:	4bc0      	ldr	r3, [pc, #768]	; (80020f8 <main+0x330>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fba4 	bl	8000548 <__aeabi_f2d>
 8001e00:	4604      	mov	r4, r0
 8001e02:	460d      	mov	r5, r1
 8001e04:	4bbd      	ldr	r3, [pc, #756]	; (80020fc <main+0x334>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fb9d 	bl	8000548 <__aeabi_f2d>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	ec43 2b11 	vmov	d1, r2, r3
 8001e16:	ec45 4b10 	vmov	d0, r4, r5
 8001e1a:	f00d fc75 	bl	800f708 <atan2>
 8001e1e:	ec51 0b10 	vmov	r0, r1, d0
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	4bb6      	ldr	r3, [pc, #728]	; (8002100 <main+0x338>)
 8001e28:	f7fe fbe6 	bl	80005f8 <__aeabi_dmul>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4610      	mov	r0, r2
 8001e32:	4619      	mov	r1, r3
 8001e34:	a3ae      	add	r3, pc, #696	; (adr r3, 80020f0 <main+0x328>)
 8001e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3a:	f7fe fd07 	bl	800084c <__aeabi_ddiv>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4610      	mov	r0, r2
 8001e44:	4619      	mov	r1, r3
 8001e46:	f7fe fecf 	bl	8000be8 <__aeabi_d2f>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4aad      	ldr	r2, [pc, #692]	; (8002104 <main+0x33c>)
 8001e4e:	6013      	str	r3, [r2, #0]
		MPU6050_Data.Y = atan2(-accel_X,
 8001e50:	4bad      	ldr	r3, [pc, #692]	; (8002108 <main+0x340>)
 8001e52:	edd3 7a00 	vldr	s15, [r3]
 8001e56:	eef1 7a67 	vneg.f32	s15, s15
 8001e5a:	ee17 3a90 	vmov	r3, s15
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fb72 	bl	8000548 <__aeabi_f2d>
 8001e64:	4604      	mov	r4, r0
 8001e66:	460d      	mov	r5, r1
				sqrt(accel_Y * accel_Y + accel_Z * accel_Z)) * 180.0 / M_PI;
 8001e68:	4ba3      	ldr	r3, [pc, #652]	; (80020f8 <main+0x330>)
 8001e6a:	ed93 7a00 	vldr	s14, [r3]
 8001e6e:	4ba2      	ldr	r3, [pc, #648]	; (80020f8 <main+0x330>)
 8001e70:	edd3 7a00 	vldr	s15, [r3]
 8001e74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e78:	4ba0      	ldr	r3, [pc, #640]	; (80020fc <main+0x334>)
 8001e7a:	edd3 6a00 	vldr	s13, [r3]
 8001e7e:	4b9f      	ldr	r3, [pc, #636]	; (80020fc <main+0x334>)
 8001e80:	edd3 7a00 	vldr	s15, [r3]
 8001e84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e88:	ee77 7a27 	vadd.f32	s15, s14, s15
		MPU6050_Data.Y = atan2(-accel_X,
 8001e8c:	ee17 0a90 	vmov	r0, s15
 8001e90:	f7fe fb5a 	bl	8000548 <__aeabi_f2d>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	ec43 2b10 	vmov	d0, r2, r3
 8001e9c:	f00d fc36 	bl	800f70c <sqrt>
 8001ea0:	eeb0 7a40 	vmov.f32	s14, s0
 8001ea4:	eef0 7a60 	vmov.f32	s15, s1
 8001ea8:	eeb0 1a47 	vmov.f32	s2, s14
 8001eac:	eef0 1a67 	vmov.f32	s3, s15
 8001eb0:	ec45 4b10 	vmov	d0, r4, r5
 8001eb4:	f00d fc28 	bl	800f708 <atan2>
 8001eb8:	ec51 0b10 	vmov	r0, r1, d0
				sqrt(accel_Y * accel_Y + accel_Z * accel_Z)) * 180.0 / M_PI;
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	4b8f      	ldr	r3, [pc, #572]	; (8002100 <main+0x338>)
 8001ec2:	f7fe fb99 	bl	80005f8 <__aeabi_dmul>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	a388      	add	r3, pc, #544	; (adr r3, 80020f0 <main+0x328>)
 8001ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed4:	f7fe fcba 	bl	800084c <__aeabi_ddiv>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f7fe fe82 	bl	8000be8 <__aeabi_d2f>
 8001ee4:	4603      	mov	r3, r0
		MPU6050_Data.Y = atan2(-accel_X,
 8001ee6:	4a87      	ldr	r2, [pc, #540]	; (8002104 <main+0x33c>)
 8001ee8:	6053      	str	r3, [r2, #4]
		MPU6050_Data.Z = 0;
 8001eea:	4b86      	ldr	r3, [pc, #536]	; (8002104 <main+0x33c>)
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]

		// Застосування комплементарного фільтра для згладжування даних
		ComplementaryFilter(MPU6050_Data.X, gyro_X, MPU6050_Data.Y, gyro_Y,
 8001ef2:	4b84      	ldr	r3, [pc, #528]	; (8002104 <main+0x33c>)
 8001ef4:	edd3 7a00 	vldr	s15, [r3]
 8001ef8:	4b84      	ldr	r3, [pc, #528]	; (800210c <main+0x344>)
 8001efa:	ed93 7a00 	vldr	s14, [r3]
 8001efe:	4b81      	ldr	r3, [pc, #516]	; (8002104 <main+0x33c>)
 8001f00:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f04:	4b82      	ldr	r3, [pc, #520]	; (8002110 <main+0x348>)
 8001f06:	ed93 6a00 	vldr	s12, [r3]
 8001f0a:	4b7e      	ldr	r3, [pc, #504]	; (8002104 <main+0x33c>)
 8001f0c:	edd3 5a02 	vldr	s11, [r3, #8]
 8001f10:	4b80      	ldr	r3, [pc, #512]	; (8002114 <main+0x34c>)
 8001f12:	ed93 5a00 	vldr	s10, [r3]
 8001f16:	eef0 2a45 	vmov.f32	s5, s10
 8001f1a:	eeb0 2a65 	vmov.f32	s4, s11
 8001f1e:	eef0 1a46 	vmov.f32	s3, s12
 8001f22:	eeb0 1a66 	vmov.f32	s2, s13
 8001f26:	eef0 0a47 	vmov.f32	s1, s14
 8001f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f2e:	f7ff fd9b 	bl	8001a68 <ComplementaryFilter>
				MPU6050_Data.Z, gyro_Z);

		ControlLEDs(MPU6050_Data.X, MPU6050_Data.Y, MPU6050_Data.Z);
 8001f32:	4b74      	ldr	r3, [pc, #464]	; (8002104 <main+0x33c>)
 8001f34:	edd3 7a00 	vldr	s15, [r3]
 8001f38:	4b72      	ldr	r3, [pc, #456]	; (8002104 <main+0x33c>)
 8001f3a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f3e:	4b71      	ldr	r3, [pc, #452]	; (8002104 <main+0x33c>)
 8001f40:	edd3 6a02 	vldr	s13, [r3, #8]
 8001f44:	eeb0 1a66 	vmov.f32	s2, s13
 8001f48:	eef0 0a47 	vmov.f32	s1, s14
 8001f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f50:	f7ff fe64 	bl	8001c1c <ControlLEDs>

		prev_X = MPU6050_Data.X;
 8001f54:	4b6b      	ldr	r3, [pc, #428]	; (8002104 <main+0x33c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a6f      	ldr	r2, [pc, #444]	; (8002118 <main+0x350>)
 8001f5a:	6013      	str	r3, [r2, #0]
		prev_Y = MPU6050_Data.Y;
 8001f5c:	4b69      	ldr	r3, [pc, #420]	; (8002104 <main+0x33c>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4a6e      	ldr	r2, [pc, #440]	; (800211c <main+0x354>)
 8001f62:	6013      	str	r3, [r2, #0]
		prev_Z = MPU6050_Data.Z;
 8001f64:	4b67      	ldr	r3, [pc, #412]	; (8002104 <main+0x33c>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4a6d      	ldr	r2, [pc, #436]	; (8002120 <main+0x358>)
 8001f6a:	6013      	str	r3, [r2, #0]

		// Отримання даних з датчика DHT
		DHT_Data dht = DHT_getData();
 8001f6c:	f7ff f840 	bl	8000ff0 <DHT_getData>
 8001f70:	eeb0 7a40 	vmov.f32	s14, s0
 8001f74:	eef0 7a60 	vmov.f32	s15, s1
 8001f78:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001f7c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f80:	ed83 7a00 	vstr	s14, [r3]
 8001f84:	edc3 7a01 	vstr	s15, [r3, #4]
		float prevTemperature = 0;
 8001f88:	f04f 0300 	mov.w	r3, #0
 8001f8c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
		float prevHumidity = 0;
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8

		if (dht.temperature != 0 && dht.humidity != 0
 8001f98:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001f9c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001fa0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fa4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fac:	d066      	beq.n	800207c <main+0x2b4>
 8001fae:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001fb2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001fb6:	edd3 7a00 	vldr	s15, [r3]
 8001fba:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc2:	d05b      	beq.n	800207c <main+0x2b4>
				&& (dht.temperature != prevTemperature
 8001fc4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001fc8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001fcc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fd0:	ed97 7a73 	vldr	s14, [r7, #460]	; 0x1cc
 8001fd4:	eeb4 7a67 	vcmp.f32	s14, s15
 8001fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fdc:	d10c      	bne.n	8001ff8 <main+0x230>
						|| dht.humidity != prevHumidity))
 8001fde:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001fe2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001fe6:	edd3 7a00 	vldr	s15, [r3]
 8001fea:	ed97 7a72 	vldr	s14, [r7, #456]	; 0x1c8
 8001fee:	eeb4 7a67 	vcmp.f32	s14, s15
 8001ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff6:	d041      	beq.n	800207c <main+0x2b4>
		{
			snprintf(temperature, sizeof(temperature), "Temperature: %1.f",
					dht.temperature);
 8001ff8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001ffc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002000:	685b      	ldr	r3, [r3, #4]
			snprintf(temperature, sizeof(temperature), "Temperature: %1.f",
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe faa0 	bl	8000548 <__aeabi_f2d>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	f507 70d0 	add.w	r0, r7, #416	; 0x1a0
 8002010:	e9cd 2300 	strd	r2, r3, [sp]
 8002014:	4a43      	ldr	r2, [pc, #268]	; (8002124 <main+0x35c>)
 8002016:	2114      	movs	r1, #20
 8002018:	f009 fa3a 	bl	800b490 <sniprintf>
			snprintf(humidity, sizeof(humidity), "Humidity: %1.f",
					dht.humidity);
 800201c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002020:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002024:	681b      	ldr	r3, [r3, #0]
			snprintf(humidity, sizeof(humidity), "Humidity: %1.f",
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fa8e 	bl	8000548 <__aeabi_f2d>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	f507 70da 	add.w	r0, r7, #436	; 0x1b4
 8002034:	e9cd 2300 	strd	r2, r3, [sp]
 8002038:	4a3b      	ldr	r2, [pc, #236]	; (8002128 <main+0x360>)
 800203a:	2114      	movs	r1, #20
 800203c:	f009 fa28 	bl	800b490 <sniprintf>
			LCD_Clear();
 8002040:	f7ff fa3a 	bl	80014b8 <LCD_Clear>
			LCD_PutString(0, 0, temperature); // Відображення температури на першому рядку
 8002044:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002048:	461a      	mov	r2, r3
 800204a:	2100      	movs	r1, #0
 800204c:	2000      	movs	r0, #0
 800204e:	f7ff f9c7 	bl	80013e0 <LCD_PutString>
			LCD_PutString(0, 1, humidity); // Відображення вологості на другому рядку
 8002052:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8002056:	461a      	mov	r2, r3
 8002058:	2101      	movs	r1, #1
 800205a:	2000      	movs	r0, #0
 800205c:	f7ff f9c0 	bl	80013e0 <LCD_PutString>

			prevTemperature = dht.temperature;
 8002060:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002064:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
			prevHumidity = dht.humidity;
 800206e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002072:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
		}

		// Прийом GPS даних з UART
		HAL_UART_Receive(&huart3, gpsBuffer, sizeof(gpsBuffer), HAL_MAX_DELAY);
 800207c:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8002080:	f04f 33ff 	mov.w	r3, #4294967295
 8002084:	22c8      	movs	r2, #200	; 0xc8
 8002086:	4829      	ldr	r0, [pc, #164]	; (800212c <main+0x364>)
 8002088:	f003 fe27 	bl	8005cda <HAL_UART_Receive>

		// Забезпечення завершення буфера нульовим байтом
		gpsBuffer[sizeof(gpsBuffer) - 1] = '\0';
 800208c:	2300      	movs	r3, #0
 800208e:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f

		// Витягнення речення GPGGA
		if (extractGPGGA((char*) gpsBuffer, gpgga_Sentence))
 8002092:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8002096:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fe25 	bl	8001cec <extractGPGGA>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f43f aea2 	beq.w	8001dee <main+0x26>
		{
			// Розбір витягнутого речення GPGGA
			parseGPGGA(gpgga_Sentence, latitude, longitude);
 80020aa:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80020ae:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80020b2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fe46 	bl	8001d48 <parseGPGGA>

			// Підготовка повідомлення для відправки через USB
			char gps_Message[75];
			snprintf(gps_Message, sizeof(gps_Message),
 80020bc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80020c0:	4638      	mov	r0, r7
 80020c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	4613      	mov	r3, r2
 80020ca:	4a19      	ldr	r2, [pc, #100]	; (8002130 <main+0x368>)
 80020cc:	214b      	movs	r1, #75	; 0x4b
 80020ce:	f009 f9df 	bl	800b490 <sniprintf>
					"Latitude: %.15s, Longitude: %.15s\n", latitude, longitude);

			CDC_Transmit_FS((uint8_t*) gps_Message, strlen(gps_Message));
 80020d2:	463b      	mov	r3, r7
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe f8cb 	bl	8000270 <strlen>
 80020da:	4603      	mov	r3, r0
 80020dc:	b29a      	uxth	r2, r3
 80020de:	463b      	mov	r3, r7
 80020e0:	4611      	mov	r1, r2
 80020e2:	4618      	mov	r0, r3
 80020e4:	f007 fe52 	bl	8009d8c <CDC_Transmit_FS>
	{
 80020e8:	e681      	b.n	8001dee <main+0x26>
 80020ea:	bf00      	nop
 80020ec:	f3af 8000 	nop.w
 80020f0:	54442d18 	.word	0x54442d18
 80020f4:	400921fb 	.word	0x400921fb
 80020f8:	20000318 	.word	0x20000318
 80020fc:	2000031c 	.word	0x2000031c
 8002100:	40668000 	.word	0x40668000
 8002104:	200002fc 	.word	0x200002fc
 8002108:	20000314 	.word	0x20000314
 800210c:	20000320 	.word	0x20000320
 8002110:	20000324 	.word	0x20000324
 8002114:	20000328 	.word	0x20000328
 8002118:	2000032c 	.word	0x2000032c
 800211c:	20000330 	.word	0x20000330
 8002120:	20000334 	.word	0x20000334
 8002124:	08010f38 	.word	0x08010f38
 8002128:	08010f4c 	.word	0x08010f4c
 800212c:	2000038c 	.word	0x2000038c
 8002130:	08010f5c 	.word	0x08010f5c

08002134 <SystemClock_Config>:
		}
	}
}

void SystemClock_Config(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b094      	sub	sp, #80	; 0x50
 8002138:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800213a:	f107 0320 	add.w	r3, r7, #32
 800213e:	2230      	movs	r2, #48	; 0x30
 8002140:	2100      	movs	r1, #0
 8002142:	4618      	mov	r0, r3
 8002144:	f009 fa69 	bl	800b61a <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8002148:	f107 030c 	add.w	r3, r7, #12
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002158:	2300      	movs	r3, #0
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	4b28      	ldr	r3, [pc, #160]	; (8002200 <SystemClock_Config+0xcc>)
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	4a27      	ldr	r2, [pc, #156]	; (8002200 <SystemClock_Config+0xcc>)
 8002162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002166:	6413      	str	r3, [r2, #64]	; 0x40
 8002168:	4b25      	ldr	r3, [pc, #148]	; (8002200 <SystemClock_Config+0xcc>)
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002174:	2300      	movs	r3, #0
 8002176:	607b      	str	r3, [r7, #4]
 8002178:	4b22      	ldr	r3, [pc, #136]	; (8002204 <SystemClock_Config+0xd0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a21      	ldr	r2, [pc, #132]	; (8002204 <SystemClock_Config+0xd0>)
 800217e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <SystemClock_Config+0xd0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002190:	2301      	movs	r3, #1
 8002192:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002194:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800219a:	2302      	movs	r3, #2
 800219c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800219e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80021a4:	2308      	movs	r3, #8
 80021a6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80021a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80021ac:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021ae:	2302      	movs	r3, #2
 80021b0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80021b2:	2307      	movs	r3, #7
 80021b4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021b6:	f107 0320 	add.w	r3, r7, #32
 80021ba:	4618      	mov	r0, r3
 80021bc:	f003 f8a8 	bl	8005310 <HAL_RCC_OscConfig>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <SystemClock_Config+0x96>
	{
		Error_Handler();
 80021c6:	f000 f8fd 	bl	80023c4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80021ca:	230f      	movs	r3, #15
 80021cc:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ce:	2302      	movs	r3, #2
 80021d0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021da:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021e2:	f107 030c 	add.w	r3, r7, #12
 80021e6:	2105      	movs	r1, #5
 80021e8:	4618      	mov	r0, r3
 80021ea:	f003 fb09 	bl	8005800 <HAL_RCC_ClockConfig>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80021f4:	f000 f8e6 	bl	80023c4 <Error_Handler>
	}
}
 80021f8:	bf00      	nop
 80021fa:	3750      	adds	r7, #80	; 0x50
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40023800 	.word	0x40023800
 8002204:	40007000 	.word	0x40007000

08002208 <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 800220c:	4b12      	ldr	r3, [pc, #72]	; (8002258 <MX_I2C1_Init+0x50>)
 800220e:	4a13      	ldr	r2, [pc, #76]	; (800225c <MX_I2C1_Init+0x54>)
 8002210:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8002212:	4b11      	ldr	r3, [pc, #68]	; (8002258 <MX_I2C1_Init+0x50>)
 8002214:	4a12      	ldr	r2, [pc, #72]	; (8002260 <MX_I2C1_Init+0x58>)
 8002216:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002218:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <MX_I2C1_Init+0x50>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800221e:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <MX_I2C1_Init+0x50>)
 8002220:	2200      	movs	r2, #0
 8002222:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <MX_I2C1_Init+0x50>)
 8002226:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800222a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800222c:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <MX_I2C1_Init+0x50>)
 800222e:	2200      	movs	r2, #0
 8002230:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <MX_I2C1_Init+0x50>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002238:	4b07      	ldr	r3, [pc, #28]	; (8002258 <MX_I2C1_Init+0x50>)
 800223a:	2200      	movs	r2, #0
 800223c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <MX_I2C1_Init+0x50>)
 8002240:	2200      	movs	r2, #0
 8002242:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002244:	4804      	ldr	r0, [pc, #16]	; (8002258 <MX_I2C1_Init+0x50>)
 8002246:	f000 fe27 	bl	8002e98 <HAL_I2C_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8002250:	f000 f8b8 	bl	80023c4 <Error_Handler>
	}
}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000338 	.word	0x20000338
 800225c:	40005400 	.word	0x40005400
 8002260:	00061a80 	.word	0x00061a80

08002264 <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
	huart3.Instance = USART3;
 8002268:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 800226a:	4a12      	ldr	r2, [pc, #72]	; (80022b4 <MX_USART3_UART_Init+0x50>)
 800226c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 57600;
 800226e:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 8002270:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002274:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002288:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 800228a:	220c      	movs	r2, #12
 800228c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800228e:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 8002290:	2200      	movs	r2, #0
 8002292:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 8002296:	2200      	movs	r2, #0
 8002298:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800229a:	4805      	ldr	r0, [pc, #20]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 800229c:	f003 fcd0 	bl	8005c40 <HAL_UART_Init>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 80022a6:	f000 f88d 	bl	80023c4 <Error_Handler>
	}
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	2000038c 	.word	0x2000038c
 80022b4:	40004800 	.word	0x40004800

080022b8 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	; 0x28
 80022bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80022be:	f107 0314 	add.w	r3, r7, #20
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	60da      	str	r2, [r3, #12]
 80022cc:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	4b39      	ldr	r3, [pc, #228]	; (80023b8 <MX_GPIO_Init+0x100>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a38      	ldr	r2, [pc, #224]	; (80023b8 <MX_GPIO_Init+0x100>)
 80022d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <MX_GPIO_Init+0x100>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b32      	ldr	r3, [pc, #200]	; (80023b8 <MX_GPIO_Init+0x100>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	4a31      	ldr	r2, [pc, #196]	; (80023b8 <MX_GPIO_Init+0x100>)
 80022f4:	f043 0310 	orr.w	r3, r3, #16
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
 80022fa:	4b2f      	ldr	r3, [pc, #188]	; (80023b8 <MX_GPIO_Init+0x100>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	4b2b      	ldr	r3, [pc, #172]	; (80023b8 <MX_GPIO_Init+0x100>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a2a      	ldr	r2, [pc, #168]	; (80023b8 <MX_GPIO_Init+0x100>)
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	6313      	str	r3, [r2, #48]	; 0x30
 8002316:	4b28      	ldr	r3, [pc, #160]	; (80023b8 <MX_GPIO_Init+0x100>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	607b      	str	r3, [r7, #4]
 8002326:	4b24      	ldr	r3, [pc, #144]	; (80023b8 <MX_GPIO_Init+0x100>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	4a23      	ldr	r2, [pc, #140]	; (80023b8 <MX_GPIO_Init+0x100>)
 800232c:	f043 0308 	orr.w	r3, r3, #8
 8002330:	6313      	str	r3, [r2, #48]	; 0x30
 8002332:	4b21      	ldr	r3, [pc, #132]	; (80023b8 <MX_GPIO_Init+0x100>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	607b      	str	r3, [r7, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	603b      	str	r3, [r7, #0]
 8002342:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <MX_GPIO_Init+0x100>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a1c      	ldr	r2, [pc, #112]	; (80023b8 <MX_GPIO_Init+0x100>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <MX_GPIO_Init+0x100>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 800235a:	2200      	movs	r2, #0
 800235c:	f64f 4180 	movw	r1, #64640	; 0xfc80
 8002360:	4816      	ldr	r0, [pc, #88]	; (80023bc <MX_GPIO_Init+0x104>)
 8002362:	f000 fd7f 	bl	8002e64 <HAL_GPIO_WritePin>
	RS_Pin | RW_Pin | EN_Pin | DB4_Pin | DB5_Pin | DB6_Pin | DB7_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8002366:	2200      	movs	r2, #0
 8002368:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 800236c:	4814      	ldr	r0, [pc, #80]	; (80023c0 <MX_GPIO_Init+0x108>)
 800236e:	f000 fd79 	bl	8002e64 <HAL_GPIO_WritePin>
	DHT11_Pin | Green_LED_Pin | Orange_LED_Pin | Red_LED_Pin | Blue_LED_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : RS_Pin RW_Pin EN_Pin DB4_Pin
	 DB5_Pin DB6_Pin DB7_Pin */
	GPIO_InitStruct.Pin = RS_Pin | RW_Pin | EN_Pin | DB4_Pin | DB5_Pin | DB6_Pin
 8002372:	f64f 4380 	movw	r3, #64640	; 0xfc80
 8002376:	617b      	str	r3, [r7, #20]
			| DB7_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002378:	2301      	movs	r3, #1
 800237a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002380:	2300      	movs	r3, #0
 8002382:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	4619      	mov	r1, r3
 800238a:	480c      	ldr	r0, [pc, #48]	; (80023bc <MX_GPIO_Init+0x104>)
 800238c:	f000 fbb6 	bl	8002afc <HAL_GPIO_Init>

	/*Configure GPIO pins : DHT11_Pin Green_LED_Pin Orange_LED_Pin Red_LED_Pin
	 Blue_LED_Pin */
	GPIO_InitStruct.Pin = DHT11_Pin | Green_LED_Pin | Orange_LED_Pin
 8002390:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002394:	617b      	str	r3, [r7, #20]
			| Red_LED_Pin | Blue_LED_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002396:	2301      	movs	r3, #1
 8002398:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239e:	2300      	movs	r3, #0
 80023a0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	4619      	mov	r1, r3
 80023a8:	4805      	ldr	r0, [pc, #20]	; (80023c0 <MX_GPIO_Init+0x108>)
 80023aa:	f000 fba7 	bl	8002afc <HAL_GPIO_Init>
}
 80023ae:	bf00      	nop
 80023b0:	3728      	adds	r7, #40	; 0x28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40021000 	.word	0x40021000
 80023c0:	40020c00 	.word	0x40020c00

080023c4 <Error_Handler>:

void Error_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023c8:	b672      	cpsid	i
}
 80023ca:	bf00      	nop
	__disable_irq();
	while (1)
 80023cc:	e7fe      	b.n	80023cc <Error_Handler+0x8>
	...

080023d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	607b      	str	r3, [r7, #4]
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <HAL_MspInit+0x4c>)
 80023dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023de:	4a0f      	ldr	r2, [pc, #60]	; (800241c <HAL_MspInit+0x4c>)
 80023e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e4:	6453      	str	r3, [r2, #68]	; 0x44
 80023e6:	4b0d      	ldr	r3, [pc, #52]	; (800241c <HAL_MspInit+0x4c>)
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ee:	607b      	str	r3, [r7, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	603b      	str	r3, [r7, #0]
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_MspInit+0x4c>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	4a08      	ldr	r2, [pc, #32]	; (800241c <HAL_MspInit+0x4c>)
 80023fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002400:	6413      	str	r3, [r2, #64]	; 0x40
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_MspInit+0x4c>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240a:	603b      	str	r3, [r7, #0]
 800240c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800240e:	2007      	movs	r0, #7
 8002410:	f000 fb32 	bl	8002a78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40023800 	.word	0x40023800

08002420 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08a      	sub	sp, #40	; 0x28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a19      	ldr	r2, [pc, #100]	; (80024a4 <HAL_I2C_MspInit+0x84>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d12b      	bne.n	800249a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <HAL_I2C_MspInit+0x88>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4a17      	ldr	r2, [pc, #92]	; (80024a8 <HAL_I2C_MspInit+0x88>)
 800244c:	f043 0302 	orr.w	r3, r3, #2
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
 8002452:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <HAL_I2C_MspInit+0x88>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800245e:	23c0      	movs	r3, #192	; 0xc0
 8002460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002462:	2312      	movs	r3, #18
 8002464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246a:	2303      	movs	r3, #3
 800246c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800246e:	2304      	movs	r3, #4
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	4619      	mov	r1, r3
 8002478:	480c      	ldr	r0, [pc, #48]	; (80024ac <HAL_I2C_MspInit+0x8c>)
 800247a:	f000 fb3f 	bl	8002afc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <HAL_I2C_MspInit+0x88>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	4a08      	ldr	r2, [pc, #32]	; (80024a8 <HAL_I2C_MspInit+0x88>)
 8002488:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800248c:	6413      	str	r3, [r2, #64]	; 0x40
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_I2C_MspInit+0x88>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800249a:	bf00      	nop
 800249c:	3728      	adds	r7, #40	; 0x28
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40005400 	.word	0x40005400
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40020400 	.word	0x40020400

080024b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	; 0x28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a19      	ldr	r2, [pc, #100]	; (8002534 <HAL_UART_MspInit+0x84>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d12c      	bne.n	800252c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	4b18      	ldr	r3, [pc, #96]	; (8002538 <HAL_UART_MspInit+0x88>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	4a17      	ldr	r2, [pc, #92]	; (8002538 <HAL_UART_MspInit+0x88>)
 80024dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024e0:	6413      	str	r3, [r2, #64]	; 0x40
 80024e2:	4b15      	ldr	r3, [pc, #84]	; (8002538 <HAL_UART_MspInit+0x88>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	4b11      	ldr	r3, [pc, #68]	; (8002538 <HAL_UART_MspInit+0x88>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	4a10      	ldr	r2, [pc, #64]	; (8002538 <HAL_UART_MspInit+0x88>)
 80024f8:	f043 0302 	orr.w	r3, r3, #2
 80024fc:	6313      	str	r3, [r2, #48]	; 0x30
 80024fe:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <HAL_UART_MspInit+0x88>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800250a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800250e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002510:	2302      	movs	r3, #2
 8002512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002518:	2303      	movs	r3, #3
 800251a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800251c:	2307      	movs	r3, #7
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	4619      	mov	r1, r3
 8002526:	4805      	ldr	r0, [pc, #20]	; (800253c <HAL_UART_MspInit+0x8c>)
 8002528:	f000 fae8 	bl	8002afc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800252c:	bf00      	nop
 800252e:	3728      	adds	r7, #40	; 0x28
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40004800 	.word	0x40004800
 8002538:	40023800 	.word	0x40023800
 800253c:	40020400 	.word	0x40020400

08002540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002544:	e7fe      	b.n	8002544 <NMI_Handler+0x4>

08002546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800254a:	e7fe      	b.n	800254a <HardFault_Handler+0x4>

0800254c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002550:	e7fe      	b.n	8002550 <MemManage_Handler+0x4>

08002552 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002556:	e7fe      	b.n	8002556 <BusFault_Handler+0x4>

08002558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800255c:	e7fe      	b.n	800255c <UsageFault_Handler+0x4>

0800255e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800258c:	f000 f960 	bl	8002850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}

08002594 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002598:	4802      	ldr	r0, [pc, #8]	; (80025a4 <OTG_FS_IRQHandler+0x10>)
 800259a:	f001 fd8c 	bl	80040b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200018b8 	.word	0x200018b8

080025a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return 1;
 80025ac:	2301      	movs	r3, #1
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <_kill>:

int _kill(int pid, int sig)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025c2:	f009 f8b3 	bl	800b72c <__errno>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2216      	movs	r2, #22
 80025ca:	601a      	str	r2, [r3, #0]
  return -1;
 80025cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <_exit>:

void _exit (int status)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025e0:	f04f 31ff 	mov.w	r1, #4294967295
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7ff ffe7 	bl	80025b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025ea:	e7fe      	b.n	80025ea <_exit+0x12>

080025ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	e00a      	b.n	8002614 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025fe:	f3af 8000 	nop.w
 8002602:	4601      	mov	r1, r0
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	60ba      	str	r2, [r7, #8]
 800260a:	b2ca      	uxtb	r2, r1
 800260c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	3301      	adds	r3, #1
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	429a      	cmp	r2, r3
 800261a:	dbf0      	blt.n	80025fe <_read+0x12>
  }

  return len;
 800261c:	687b      	ldr	r3, [r7, #4]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b086      	sub	sp, #24
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	e009      	b.n	800264c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	60ba      	str	r2, [r7, #8]
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	3301      	adds	r3, #1
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	429a      	cmp	r2, r3
 8002652:	dbf1      	blt.n	8002638 <_write+0x12>
  }
  return len;
 8002654:	687b      	ldr	r3, [r7, #4]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <_close>:

int _close(int file)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002666:	f04f 33ff 	mov.w	r3, #4294967295
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002686:	605a      	str	r2, [r3, #4]
  return 0;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <_isatty>:

int _isatty(int file)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800269e:	2301      	movs	r3, #1
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026d0:	4a14      	ldr	r2, [pc, #80]	; (8002724 <_sbrk+0x5c>)
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <_sbrk+0x60>)
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026dc:	4b13      	ldr	r3, [pc, #76]	; (800272c <_sbrk+0x64>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d102      	bne.n	80026ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <_sbrk+0x64>)
 80026e6:	4a12      	ldr	r2, [pc, #72]	; (8002730 <_sbrk+0x68>)
 80026e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ea:	4b10      	ldr	r3, [pc, #64]	; (800272c <_sbrk+0x64>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d207      	bcs.n	8002708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026f8:	f009 f818 	bl	800b72c <__errno>
 80026fc:	4603      	mov	r3, r0
 80026fe:	220c      	movs	r2, #12
 8002700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002702:	f04f 33ff 	mov.w	r3, #4294967295
 8002706:	e009      	b.n	800271c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002708:	4b08      	ldr	r3, [pc, #32]	; (800272c <_sbrk+0x64>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <_sbrk+0x64>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	4a05      	ldr	r2, [pc, #20]	; (800272c <_sbrk+0x64>)
 8002718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800271a:	68fb      	ldr	r3, [r7, #12]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20020000 	.word	0x20020000
 8002728:	00000400 	.word	0x00000400
 800272c:	200003d0 	.word	0x200003d0
 8002730:	20002130 	.word	0x20002130

08002734 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <SystemInit+0x20>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273e:	4a05      	ldr	r2, [pc, #20]	; (8002754 <SystemInit+0x20>)
 8002740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002790 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800275c:	480d      	ldr	r0, [pc, #52]	; (8002794 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800275e:	490e      	ldr	r1, [pc, #56]	; (8002798 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002760:	4a0e      	ldr	r2, [pc, #56]	; (800279c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002764:	e002      	b.n	800276c <LoopCopyDataInit>

08002766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800276a:	3304      	adds	r3, #4

0800276c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800276c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800276e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002770:	d3f9      	bcc.n	8002766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002772:	4a0b      	ldr	r2, [pc, #44]	; (80027a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002774:	4c0b      	ldr	r4, [pc, #44]	; (80027a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002778:	e001      	b.n	800277e <LoopFillZerobss>

0800277a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800277a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800277c:	3204      	adds	r2, #4

0800277e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800277e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002780:	d3fb      	bcc.n	800277a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002782:	f7ff ffd7 	bl	8002734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002786:	f008 ffd7 	bl	800b738 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800278a:	f7ff fb1d 	bl	8001dc8 <main>
  bx  lr    
 800278e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002790:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002798:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 800279c:	08011690 	.word	0x08011690
  ldr r2, =_sbss
 80027a0:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 80027a4:	20002130 	.word	0x20002130

080027a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027a8:	e7fe      	b.n	80027a8 <ADC_IRQHandler>
	...

080027ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027b0:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <HAL_Init+0x40>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <HAL_Init+0x40>)
 80027b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_Init+0x40>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <HAL_Init+0x40>)
 80027c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <HAL_Init+0x40>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a07      	ldr	r2, [pc, #28]	; (80027ec <HAL_Init+0x40>)
 80027ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d4:	2003      	movs	r0, #3
 80027d6:	f000 f94f 	bl	8002a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027da:	2000      	movs	r0, #0
 80027dc:	f000 f808 	bl	80027f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027e0:	f7ff fdf6 	bl	80023d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40023c00 	.word	0x40023c00

080027f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_InitTick+0x54>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_InitTick+0x58>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	4619      	mov	r1, r3
 8002802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002806:	fbb3 f3f1 	udiv	r3, r3, r1
 800280a:	fbb2 f3f3 	udiv	r3, r2, r3
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f967 	bl	8002ae2 <HAL_SYSTICK_Config>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e00e      	b.n	800283c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b0f      	cmp	r3, #15
 8002822:	d80a      	bhi.n	800283a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002824:	2200      	movs	r2, #0
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	f04f 30ff 	mov.w	r0, #4294967295
 800282c:	f000 f92f 	bl	8002a8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002830:	4a06      	ldr	r2, [pc, #24]	; (800284c <HAL_InitTick+0x5c>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e000      	b.n	800283c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000000 	.word	0x20000000
 8002848:	20000008 	.word	0x20000008
 800284c:	20000004 	.word	0x20000004

08002850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_IncTick+0x20>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_IncTick+0x24>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4413      	add	r3, r2
 8002860:	4a04      	ldr	r2, [pc, #16]	; (8002874 <HAL_IncTick+0x24>)
 8002862:	6013      	str	r3, [r2, #0]
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	20000008 	.word	0x20000008
 8002874:	200003d4 	.word	0x200003d4

08002878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return uwTick;
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <HAL_GetTick+0x14>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	200003d4 	.word	0x200003d4

08002890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002898:	f7ff ffee 	bl	8002878 <HAL_GetTick>
 800289c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a8:	d005      	beq.n	80028b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <HAL_Delay+0x44>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4413      	add	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028b6:	bf00      	nop
 80028b8:	f7ff ffde 	bl	8002878 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d8f7      	bhi.n	80028b8 <HAL_Delay+0x28>
  {
  }
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000008 	.word	0x20000008

080028d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e8:	4b0c      	ldr	r3, [pc, #48]	; (800291c <__NVIC_SetPriorityGrouping+0x44>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028f4:	4013      	ands	r3, r2
 80028f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002900:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800290a:	4a04      	ldr	r2, [pc, #16]	; (800291c <__NVIC_SetPriorityGrouping+0x44>)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	60d3      	str	r3, [r2, #12]
}
 8002910:	bf00      	nop
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002924:	4b04      	ldr	r3, [pc, #16]	; (8002938 <__NVIC_GetPriorityGrouping+0x18>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	0a1b      	lsrs	r3, r3, #8
 800292a:	f003 0307 	and.w	r3, r3, #7
}
 800292e:	4618      	mov	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	2b00      	cmp	r3, #0
 800294c:	db0b      	blt.n	8002966 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	f003 021f 	and.w	r2, r3, #31
 8002954:	4907      	ldr	r1, [pc, #28]	; (8002974 <__NVIC_EnableIRQ+0x38>)
 8002956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	2001      	movs	r0, #1
 800295e:	fa00 f202 	lsl.w	r2, r0, r2
 8002962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	e000e100 	.word	0xe000e100

08002978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	6039      	str	r1, [r7, #0]
 8002982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002988:	2b00      	cmp	r3, #0
 800298a:	db0a      	blt.n	80029a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	b2da      	uxtb	r2, r3
 8002990:	490c      	ldr	r1, [pc, #48]	; (80029c4 <__NVIC_SetPriority+0x4c>)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	0112      	lsls	r2, r2, #4
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	440b      	add	r3, r1
 800299c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a0:	e00a      	b.n	80029b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	4908      	ldr	r1, [pc, #32]	; (80029c8 <__NVIC_SetPriority+0x50>)
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	3b04      	subs	r3, #4
 80029b0:	0112      	lsls	r2, r2, #4
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	440b      	add	r3, r1
 80029b6:	761a      	strb	r2, [r3, #24]
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000e100 	.word	0xe000e100
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b089      	sub	sp, #36	; 0x24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f1c3 0307 	rsb	r3, r3, #7
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	bf28      	it	cs
 80029ea:	2304      	movcs	r3, #4
 80029ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3304      	adds	r3, #4
 80029f2:	2b06      	cmp	r3, #6
 80029f4:	d902      	bls.n	80029fc <NVIC_EncodePriority+0x30>
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3b03      	subs	r3, #3
 80029fa:	e000      	b.n	80029fe <NVIC_EncodePriority+0x32>
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a00:	f04f 32ff 	mov.w	r2, #4294967295
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43da      	mvns	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	401a      	ands	r2, r3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a14:	f04f 31ff 	mov.w	r1, #4294967295
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	43d9      	mvns	r1, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a24:	4313      	orrs	r3, r2
         );
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3724      	adds	r7, #36	; 0x24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a44:	d301      	bcc.n	8002a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a46:	2301      	movs	r3, #1
 8002a48:	e00f      	b.n	8002a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a4a:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <SysTick_Config+0x40>)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a52:	210f      	movs	r1, #15
 8002a54:	f04f 30ff 	mov.w	r0, #4294967295
 8002a58:	f7ff ff8e 	bl	8002978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <SysTick_Config+0x40>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a62:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <SysTick_Config+0x40>)
 8002a64:	2207      	movs	r2, #7
 8002a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	e000e010 	.word	0xe000e010

08002a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7ff ff29 	bl	80028d8 <__NVIC_SetPriorityGrouping>
}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b086      	sub	sp, #24
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	4603      	mov	r3, r0
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
 8002a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa0:	f7ff ff3e 	bl	8002920 <__NVIC_GetPriorityGrouping>
 8002aa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	68b9      	ldr	r1, [r7, #8]
 8002aaa:	6978      	ldr	r0, [r7, #20]
 8002aac:	f7ff ff8e 	bl	80029cc <NVIC_EncodePriority>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff ff5d 	bl	8002978 <__NVIC_SetPriority>
}
 8002abe:	bf00      	nop
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	4603      	mov	r3, r0
 8002ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff ff31 	bl	800293c <__NVIC_EnableIRQ>
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff ffa2 	bl	8002a34 <SysTick_Config>
 8002af0:	4603      	mov	r3, r0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b089      	sub	sp, #36	; 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b12:	2300      	movs	r3, #0
 8002b14:	61fb      	str	r3, [r7, #28]
 8002b16:	e16b      	b.n	8002df0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b18:	2201      	movs	r2, #1
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	f040 815a 	bne.w	8002dea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d005      	beq.n	8002b4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d130      	bne.n	8002bb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	2203      	movs	r2, #3
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b84:	2201      	movs	r2, #1
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	091b      	lsrs	r3, r3, #4
 8002b9a:	f003 0201 	and.w	r2, r3, #1
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d017      	beq.n	8002bec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d123      	bne.n	8002c40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	08da      	lsrs	r2, r3, #3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3208      	adds	r2, #8
 8002c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	220f      	movs	r2, #15
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	08da      	lsrs	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3208      	adds	r2, #8
 8002c3a:	69b9      	ldr	r1, [r7, #24]
 8002c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 0203 	and.w	r2, r3, #3
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80b4 	beq.w	8002dea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	4b60      	ldr	r3, [pc, #384]	; (8002e08 <HAL_GPIO_Init+0x30c>)
 8002c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8a:	4a5f      	ldr	r2, [pc, #380]	; (8002e08 <HAL_GPIO_Init+0x30c>)
 8002c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c90:	6453      	str	r3, [r2, #68]	; 0x44
 8002c92:	4b5d      	ldr	r3, [pc, #372]	; (8002e08 <HAL_GPIO_Init+0x30c>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c9e:	4a5b      	ldr	r2, [pc, #364]	; (8002e0c <HAL_GPIO_Init+0x310>)
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	089b      	lsrs	r3, r3, #2
 8002ca4:	3302      	adds	r3, #2
 8002ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	220f      	movs	r2, #15
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a52      	ldr	r2, [pc, #328]	; (8002e10 <HAL_GPIO_Init+0x314>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d02b      	beq.n	8002d22 <HAL_GPIO_Init+0x226>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a51      	ldr	r2, [pc, #324]	; (8002e14 <HAL_GPIO_Init+0x318>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d025      	beq.n	8002d1e <HAL_GPIO_Init+0x222>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a50      	ldr	r2, [pc, #320]	; (8002e18 <HAL_GPIO_Init+0x31c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d01f      	beq.n	8002d1a <HAL_GPIO_Init+0x21e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a4f      	ldr	r2, [pc, #316]	; (8002e1c <HAL_GPIO_Init+0x320>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d019      	beq.n	8002d16 <HAL_GPIO_Init+0x21a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a4e      	ldr	r2, [pc, #312]	; (8002e20 <HAL_GPIO_Init+0x324>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d013      	beq.n	8002d12 <HAL_GPIO_Init+0x216>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a4d      	ldr	r2, [pc, #308]	; (8002e24 <HAL_GPIO_Init+0x328>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00d      	beq.n	8002d0e <HAL_GPIO_Init+0x212>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a4c      	ldr	r2, [pc, #304]	; (8002e28 <HAL_GPIO_Init+0x32c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d007      	beq.n	8002d0a <HAL_GPIO_Init+0x20e>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a4b      	ldr	r2, [pc, #300]	; (8002e2c <HAL_GPIO_Init+0x330>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d101      	bne.n	8002d06 <HAL_GPIO_Init+0x20a>
 8002d02:	2307      	movs	r3, #7
 8002d04:	e00e      	b.n	8002d24 <HAL_GPIO_Init+0x228>
 8002d06:	2308      	movs	r3, #8
 8002d08:	e00c      	b.n	8002d24 <HAL_GPIO_Init+0x228>
 8002d0a:	2306      	movs	r3, #6
 8002d0c:	e00a      	b.n	8002d24 <HAL_GPIO_Init+0x228>
 8002d0e:	2305      	movs	r3, #5
 8002d10:	e008      	b.n	8002d24 <HAL_GPIO_Init+0x228>
 8002d12:	2304      	movs	r3, #4
 8002d14:	e006      	b.n	8002d24 <HAL_GPIO_Init+0x228>
 8002d16:	2303      	movs	r3, #3
 8002d18:	e004      	b.n	8002d24 <HAL_GPIO_Init+0x228>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e002      	b.n	8002d24 <HAL_GPIO_Init+0x228>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <HAL_GPIO_Init+0x228>
 8002d22:	2300      	movs	r3, #0
 8002d24:	69fa      	ldr	r2, [r7, #28]
 8002d26:	f002 0203 	and.w	r2, r2, #3
 8002d2a:	0092      	lsls	r2, r2, #2
 8002d2c:	4093      	lsls	r3, r2
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d34:	4935      	ldr	r1, [pc, #212]	; (8002e0c <HAL_GPIO_Init+0x310>)
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	089b      	lsrs	r3, r3, #2
 8002d3a:	3302      	adds	r3, #2
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d42:	4b3b      	ldr	r3, [pc, #236]	; (8002e30 <HAL_GPIO_Init+0x334>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d66:	4a32      	ldr	r2, [pc, #200]	; (8002e30 <HAL_GPIO_Init+0x334>)
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d6c:	4b30      	ldr	r3, [pc, #192]	; (8002e30 <HAL_GPIO_Init+0x334>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d90:	4a27      	ldr	r2, [pc, #156]	; (8002e30 <HAL_GPIO_Init+0x334>)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d96:	4b26      	ldr	r3, [pc, #152]	; (8002e30 <HAL_GPIO_Init+0x334>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dba:	4a1d      	ldr	r2, [pc, #116]	; (8002e30 <HAL_GPIO_Init+0x334>)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <HAL_GPIO_Init+0x334>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002de4:	4a12      	ldr	r2, [pc, #72]	; (8002e30 <HAL_GPIO_Init+0x334>)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3301      	adds	r3, #1
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	2b0f      	cmp	r3, #15
 8002df4:	f67f ae90 	bls.w	8002b18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002df8:	bf00      	nop
 8002dfa:	bf00      	nop
 8002dfc:	3724      	adds	r7, #36	; 0x24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40013800 	.word	0x40013800
 8002e10:	40020000 	.word	0x40020000
 8002e14:	40020400 	.word	0x40020400
 8002e18:	40020800 	.word	0x40020800
 8002e1c:	40020c00 	.word	0x40020c00
 8002e20:	40021000 	.word	0x40021000
 8002e24:	40021400 	.word	0x40021400
 8002e28:	40021800 	.word	0x40021800
 8002e2c:	40021c00 	.word	0x40021c00
 8002e30:	40013c00 	.word	0x40013c00

08002e34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	887b      	ldrh	r3, [r7, #2]
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
 8002e50:	e001      	b.n	8002e56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e52:	2300      	movs	r3, #0
 8002e54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	807b      	strh	r3, [r7, #2]
 8002e70:	4613      	mov	r3, r2
 8002e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e74:	787b      	ldrb	r3, [r7, #1]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e7a:	887a      	ldrh	r2, [r7, #2]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e80:	e003      	b.n	8002e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e82:	887b      	ldrh	r3, [r7, #2]
 8002e84:	041a      	lsls	r2, r3, #16
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	619a      	str	r2, [r3, #24]
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
	...

08002e98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e12b      	b.n	8003102 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff faae 	bl	8002420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2224      	movs	r2, #36	; 0x24
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0201 	bic.w	r2, r2, #1
 8002eda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002efa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002efc:	f002 fe78 	bl	8005bf0 <HAL_RCC_GetPCLK1Freq>
 8002f00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	4a81      	ldr	r2, [pc, #516]	; (800310c <HAL_I2C_Init+0x274>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d807      	bhi.n	8002f1c <HAL_I2C_Init+0x84>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4a80      	ldr	r2, [pc, #512]	; (8003110 <HAL_I2C_Init+0x278>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	bf94      	ite	ls
 8002f14:	2301      	movls	r3, #1
 8002f16:	2300      	movhi	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e006      	b.n	8002f2a <HAL_I2C_Init+0x92>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4a7d      	ldr	r2, [pc, #500]	; (8003114 <HAL_I2C_Init+0x27c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	bf94      	ite	ls
 8002f24:	2301      	movls	r3, #1
 8002f26:	2300      	movhi	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e0e7      	b.n	8003102 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4a78      	ldr	r2, [pc, #480]	; (8003118 <HAL_I2C_Init+0x280>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	0c9b      	lsrs	r3, r3, #18
 8002f3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	4a6a      	ldr	r2, [pc, #424]	; (800310c <HAL_I2C_Init+0x274>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d802      	bhi.n	8002f6c <HAL_I2C_Init+0xd4>
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	e009      	b.n	8002f80 <HAL_I2C_Init+0xe8>
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f72:	fb02 f303 	mul.w	r3, r2, r3
 8002f76:	4a69      	ldr	r2, [pc, #420]	; (800311c <HAL_I2C_Init+0x284>)
 8002f78:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7c:	099b      	lsrs	r3, r3, #6
 8002f7e:	3301      	adds	r3, #1
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	430b      	orrs	r3, r1
 8002f86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	495c      	ldr	r1, [pc, #368]	; (800310c <HAL_I2C_Init+0x274>)
 8002f9c:	428b      	cmp	r3, r1
 8002f9e:	d819      	bhi.n	8002fd4 <HAL_I2C_Init+0x13c>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	1e59      	subs	r1, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fae:	1c59      	adds	r1, r3, #1
 8002fb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fb4:	400b      	ands	r3, r1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <HAL_I2C_Init+0x138>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1e59      	subs	r1, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fc8:	3301      	adds	r3, #1
 8002fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fce:	e051      	b.n	8003074 <HAL_I2C_Init+0x1dc>
 8002fd0:	2304      	movs	r3, #4
 8002fd2:	e04f      	b.n	8003074 <HAL_I2C_Init+0x1dc>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d111      	bne.n	8003000 <HAL_I2C_Init+0x168>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	1e58      	subs	r0, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6859      	ldr	r1, [r3, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	440b      	add	r3, r1
 8002fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fee:	3301      	adds	r3, #1
 8002ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bf0c      	ite	eq
 8002ff8:	2301      	moveq	r3, #1
 8002ffa:	2300      	movne	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	e012      	b.n	8003026 <HAL_I2C_Init+0x18e>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1e58      	subs	r0, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	0099      	lsls	r1, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	fbb0 f3f3 	udiv	r3, r0, r3
 8003016:	3301      	adds	r3, #1
 8003018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301c:	2b00      	cmp	r3, #0
 800301e:	bf0c      	ite	eq
 8003020:	2301      	moveq	r3, #1
 8003022:	2300      	movne	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_I2C_Init+0x196>
 800302a:	2301      	movs	r3, #1
 800302c:	e022      	b.n	8003074 <HAL_I2C_Init+0x1dc>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10e      	bne.n	8003054 <HAL_I2C_Init+0x1bc>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1e58      	subs	r0, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6859      	ldr	r1, [r3, #4]
 800303e:	460b      	mov	r3, r1
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	440b      	add	r3, r1
 8003044:	fbb0 f3f3 	udiv	r3, r0, r3
 8003048:	3301      	adds	r3, #1
 800304a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800304e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003052:	e00f      	b.n	8003074 <HAL_I2C_Init+0x1dc>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1e58      	subs	r0, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	0099      	lsls	r1, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	fbb0 f3f3 	udiv	r3, r0, r3
 800306a:	3301      	adds	r3, #1
 800306c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003070:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	6809      	ldr	r1, [r1, #0]
 8003078:	4313      	orrs	r3, r2
 800307a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69da      	ldr	r2, [r3, #28]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6911      	ldr	r1, [r2, #16]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	68d2      	ldr	r2, [r2, #12]
 80030ae:	4311      	orrs	r1, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	430b      	orrs	r3, r1
 80030b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	000186a0 	.word	0x000186a0
 8003110:	001e847f 	.word	0x001e847f
 8003114:	003d08ff 	.word	0x003d08ff
 8003118:	431bde83 	.word	0x431bde83
 800311c:	10624dd3 	.word	0x10624dd3

08003120 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af02      	add	r7, sp, #8
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	4608      	mov	r0, r1
 800312a:	4611      	mov	r1, r2
 800312c:	461a      	mov	r2, r3
 800312e:	4603      	mov	r3, r0
 8003130:	817b      	strh	r3, [r7, #10]
 8003132:	460b      	mov	r3, r1
 8003134:	813b      	strh	r3, [r7, #8]
 8003136:	4613      	mov	r3, r2
 8003138:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800313a:	f7ff fb9d 	bl	8002878 <HAL_GetTick>
 800313e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b20      	cmp	r3, #32
 800314a:	f040 80d9 	bne.w	8003300 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	2319      	movs	r3, #25
 8003154:	2201      	movs	r2, #1
 8003156:	496d      	ldr	r1, [pc, #436]	; (800330c <HAL_I2C_Mem_Write+0x1ec>)
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 fc7f 	bl	8003a5c <I2C_WaitOnFlagUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003164:	2302      	movs	r3, #2
 8003166:	e0cc      	b.n	8003302 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_I2C_Mem_Write+0x56>
 8003172:	2302      	movs	r3, #2
 8003174:	e0c5      	b.n	8003302 <HAL_I2C_Mem_Write+0x1e2>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b01      	cmp	r3, #1
 800318a:	d007      	beq.n	800319c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0201 	orr.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2221      	movs	r2, #33	; 0x21
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2240      	movs	r2, #64	; 0x40
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a3a      	ldr	r2, [r7, #32]
 80031c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4a4d      	ldr	r2, [pc, #308]	; (8003310 <HAL_I2C_Mem_Write+0x1f0>)
 80031dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031de:	88f8      	ldrh	r0, [r7, #6]
 80031e0:	893a      	ldrh	r2, [r7, #8]
 80031e2:	8979      	ldrh	r1, [r7, #10]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	9301      	str	r3, [sp, #4]
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	4603      	mov	r3, r0
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 fab6 	bl	8003760 <I2C_RequestMemoryWrite>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d052      	beq.n	80032a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e081      	b.n	8003302 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 fd00 	bl	8003c08 <I2C_WaitOnTXEFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00d      	beq.n	800322a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	2b04      	cmp	r3, #4
 8003214:	d107      	bne.n	8003226 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003224:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e06b      	b.n	8003302 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	781a      	ldrb	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b04      	cmp	r3, #4
 8003266:	d11b      	bne.n	80032a0 <HAL_I2C_Mem_Write+0x180>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326c:	2b00      	cmp	r3, #0
 800326e:	d017      	beq.n	80032a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	781a      	ldrb	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1aa      	bne.n	80031fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 fcec 	bl	8003c8a <I2C_WaitOnBTFFlagUntilTimeout>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00d      	beq.n	80032d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d107      	bne.n	80032d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e016      	b.n	8003302 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	e000      	b.n	8003302 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003300:	2302      	movs	r3, #2
  }
}
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	00100002 	.word	0x00100002
 8003310:	ffff0000 	.word	0xffff0000

08003314 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08c      	sub	sp, #48	; 0x30
 8003318:	af02      	add	r7, sp, #8
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	4608      	mov	r0, r1
 800331e:	4611      	mov	r1, r2
 8003320:	461a      	mov	r2, r3
 8003322:	4603      	mov	r3, r0
 8003324:	817b      	strh	r3, [r7, #10]
 8003326:	460b      	mov	r3, r1
 8003328:	813b      	strh	r3, [r7, #8]
 800332a:	4613      	mov	r3, r2
 800332c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800332e:	f7ff faa3 	bl	8002878 <HAL_GetTick>
 8003332:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b20      	cmp	r3, #32
 800333e:	f040 8208 	bne.w	8003752 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	2319      	movs	r3, #25
 8003348:	2201      	movs	r2, #1
 800334a:	497b      	ldr	r1, [pc, #492]	; (8003538 <HAL_I2C_Mem_Read+0x224>)
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 fb85 	bl	8003a5c <I2C_WaitOnFlagUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003358:	2302      	movs	r3, #2
 800335a:	e1fb      	b.n	8003754 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_I2C_Mem_Read+0x56>
 8003366:	2302      	movs	r3, #2
 8003368:	e1f4      	b.n	8003754 <HAL_I2C_Mem_Read+0x440>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b01      	cmp	r3, #1
 800337e:	d007      	beq.n	8003390 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0201 	orr.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800339e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2222      	movs	r2, #34	; 0x22
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2240      	movs	r2, #64	; 0x40
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80033c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4a5b      	ldr	r2, [pc, #364]	; (800353c <HAL_I2C_Mem_Read+0x228>)
 80033d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033d2:	88f8      	ldrh	r0, [r7, #6]
 80033d4:	893a      	ldrh	r2, [r7, #8]
 80033d6:	8979      	ldrh	r1, [r7, #10]
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	9301      	str	r3, [sp, #4]
 80033dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	4603      	mov	r3, r0
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 fa52 	bl	800388c <I2C_RequestMemoryRead>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e1b0      	b.n	8003754 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d113      	bne.n	8003422 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033fa:	2300      	movs	r3, #0
 80033fc:	623b      	str	r3, [r7, #32]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	623b      	str	r3, [r7, #32]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	623b      	str	r3, [r7, #32]
 800340e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	e184      	b.n	800372c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003426:	2b01      	cmp	r3, #1
 8003428:	d11b      	bne.n	8003462 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003438:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800343a:	2300      	movs	r3, #0
 800343c:	61fb      	str	r3, [r7, #28]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	61fb      	str	r3, [r7, #28]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	e164      	b.n	800372c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003466:	2b02      	cmp	r3, #2
 8003468:	d11b      	bne.n	80034a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003478:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003488:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800348a:	2300      	movs	r3, #0
 800348c:	61bb      	str	r3, [r7, #24]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	61bb      	str	r3, [r7, #24]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	61bb      	str	r3, [r7, #24]
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	e144      	b.n	800372c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80034b8:	e138      	b.n	800372c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034be:	2b03      	cmp	r3, #3
 80034c0:	f200 80f1 	bhi.w	80036a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d123      	bne.n	8003514 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 fc1b 	bl	8003d0c <I2C_WaitOnRXNEFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e139      	b.n	8003754 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691a      	ldr	r2, [r3, #16]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003508:	b29b      	uxth	r3, r3
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003512:	e10b      	b.n	800372c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003518:	2b02      	cmp	r3, #2
 800351a:	d14e      	bne.n	80035ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003522:	2200      	movs	r2, #0
 8003524:	4906      	ldr	r1, [pc, #24]	; (8003540 <HAL_I2C_Mem_Read+0x22c>)
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 fa98 	bl	8003a5c <I2C_WaitOnFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e10e      	b.n	8003754 <HAL_I2C_Mem_Read+0x440>
 8003536:	bf00      	nop
 8003538:	00100002 	.word	0x00100002
 800353c:	ffff0000 	.word	0xffff0000
 8003540:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003552:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691a      	ldr	r2, [r3, #16]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357c:	b29b      	uxth	r3, r3
 800357e:	3b01      	subs	r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035b8:	e0b8      	b.n	800372c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c0:	2200      	movs	r2, #0
 80035c2:	4966      	ldr	r1, [pc, #408]	; (800375c <HAL_I2C_Mem_Read+0x448>)
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 fa49 	bl	8003a5c <I2C_WaitOnFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0bf      	b.n	8003754 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361c:	2200      	movs	r2, #0
 800361e:	494f      	ldr	r1, [pc, #316]	; (800375c <HAL_I2C_Mem_Read+0x448>)
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 fa1b 	bl	8003a5c <I2C_WaitOnFlagUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e091      	b.n	8003754 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800363e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691a      	ldr	r2, [r3, #16]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036a4:	e042      	b.n	800372c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 fb2e 	bl	8003d0c <I2C_WaitOnRXNEFlagUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e04c      	b.n	8003754 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d118      	bne.n	800372c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003716:	3b01      	subs	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003730:	2b00      	cmp	r3, #0
 8003732:	f47f aec2 	bne.w	80034ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2220      	movs	r2, #32
 800373a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	e000      	b.n	8003754 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003752:	2302      	movs	r3, #2
  }
}
 8003754:	4618      	mov	r0, r3
 8003756:	3728      	adds	r7, #40	; 0x28
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	00010004 	.word	0x00010004

08003760 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af02      	add	r7, sp, #8
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	4608      	mov	r0, r1
 800376a:	4611      	mov	r1, r2
 800376c:	461a      	mov	r2, r3
 800376e:	4603      	mov	r3, r0
 8003770:	817b      	strh	r3, [r7, #10]
 8003772:	460b      	mov	r3, r1
 8003774:	813b      	strh	r3, [r7, #8]
 8003776:	4613      	mov	r3, r2
 8003778:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003788:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	2200      	movs	r2, #0
 8003792:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 f960 	bl	8003a5c <I2C_WaitOnFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00d      	beq.n	80037be <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037b0:	d103      	bne.n	80037ba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e05f      	b.n	800387e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037be:	897b      	ldrh	r3, [r7, #10]
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	461a      	mov	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	6a3a      	ldr	r2, [r7, #32]
 80037d2:	492d      	ldr	r1, [pc, #180]	; (8003888 <I2C_RequestMemoryWrite+0x128>)
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f998 	bl	8003b0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e04c      	b.n	800387e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fc:	6a39      	ldr	r1, [r7, #32]
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 fa02 	bl	8003c08 <I2C_WaitOnTXEFlagUntilTimeout>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00d      	beq.n	8003826 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	2b04      	cmp	r3, #4
 8003810:	d107      	bne.n	8003822 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003820:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e02b      	b.n	800387e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003826:	88fb      	ldrh	r3, [r7, #6]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d105      	bne.n	8003838 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800382c:	893b      	ldrh	r3, [r7, #8]
 800382e:	b2da      	uxtb	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	611a      	str	r2, [r3, #16]
 8003836:	e021      	b.n	800387c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003838:	893b      	ldrh	r3, [r7, #8]
 800383a:	0a1b      	lsrs	r3, r3, #8
 800383c:	b29b      	uxth	r3, r3
 800383e:	b2da      	uxtb	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003848:	6a39      	ldr	r1, [r7, #32]
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f9dc 	bl	8003c08 <I2C_WaitOnTXEFlagUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00d      	beq.n	8003872 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	2b04      	cmp	r3, #4
 800385c:	d107      	bne.n	800386e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800386c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e005      	b.n	800387e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003872:	893b      	ldrh	r3, [r7, #8]
 8003874:	b2da      	uxtb	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	00010002 	.word	0x00010002

0800388c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af02      	add	r7, sp, #8
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	4608      	mov	r0, r1
 8003896:	4611      	mov	r1, r2
 8003898:	461a      	mov	r2, r3
 800389a:	4603      	mov	r3, r0
 800389c:	817b      	strh	r3, [r7, #10]
 800389e:	460b      	mov	r3, r1
 80038a0:	813b      	strh	r3, [r7, #8]
 80038a2:	4613      	mov	r3, r2
 80038a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 f8c2 	bl	8003a5c <I2C_WaitOnFlagUntilTimeout>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00d      	beq.n	80038fa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ec:	d103      	bne.n	80038f6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e0aa      	b.n	8003a50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038fa:	897b      	ldrh	r3, [r7, #10]
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	461a      	mov	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003908:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	6a3a      	ldr	r2, [r7, #32]
 800390e:	4952      	ldr	r1, [pc, #328]	; (8003a58 <I2C_RequestMemoryRead+0x1cc>)
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 f8fa 	bl	8003b0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e097      	b.n	8003a50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	617b      	str	r3, [r7, #20]
 8003934:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003938:	6a39      	ldr	r1, [r7, #32]
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 f964 	bl	8003c08 <I2C_WaitOnTXEFlagUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00d      	beq.n	8003962 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	2b04      	cmp	r3, #4
 800394c:	d107      	bne.n	800395e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800395c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e076      	b.n	8003a50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003962:	88fb      	ldrh	r3, [r7, #6]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d105      	bne.n	8003974 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003968:	893b      	ldrh	r3, [r7, #8]
 800396a:	b2da      	uxtb	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	611a      	str	r2, [r3, #16]
 8003972:	e021      	b.n	80039b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003974:	893b      	ldrh	r3, [r7, #8]
 8003976:	0a1b      	lsrs	r3, r3, #8
 8003978:	b29b      	uxth	r3, r3
 800397a:	b2da      	uxtb	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003984:	6a39      	ldr	r1, [r7, #32]
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 f93e 	bl	8003c08 <I2C_WaitOnTXEFlagUntilTimeout>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00d      	beq.n	80039ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	2b04      	cmp	r3, #4
 8003998:	d107      	bne.n	80039aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e050      	b.n	8003a50 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039ae:	893b      	ldrh	r3, [r7, #8]
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ba:	6a39      	ldr	r1, [r7, #32]
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 f923 	bl	8003c08 <I2C_WaitOnTXEFlagUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00d      	beq.n	80039e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d107      	bne.n	80039e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e035      	b.n	8003a50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 f82b 	bl	8003a5c <I2C_WaitOnFlagUntilTimeout>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00d      	beq.n	8003a28 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a1a:	d103      	bne.n	8003a24 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e013      	b.n	8003a50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a28:	897b      	ldrh	r3, [r7, #10]
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	f043 0301 	orr.w	r3, r3, #1
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	6a3a      	ldr	r2, [r7, #32]
 8003a3c:	4906      	ldr	r1, [pc, #24]	; (8003a58 <I2C_RequestMemoryRead+0x1cc>)
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 f863 	bl	8003b0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	00010002 	.word	0x00010002

08003a5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	603b      	str	r3, [r7, #0]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a6c:	e025      	b.n	8003aba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a74:	d021      	beq.n	8003aba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a76:	f7fe feff 	bl	8002878 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d302      	bcc.n	8003a8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d116      	bne.n	8003aba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f043 0220 	orr.w	r2, r3, #32
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e023      	b.n	8003b02 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	0c1b      	lsrs	r3, r3, #16
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d10d      	bne.n	8003ae0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	43da      	mvns	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	bf0c      	ite	eq
 8003ad6:	2301      	moveq	r3, #1
 8003ad8:	2300      	movne	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	461a      	mov	r2, r3
 8003ade:	e00c      	b.n	8003afa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	43da      	mvns	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4013      	ands	r3, r2
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	bf0c      	ite	eq
 8003af2:	2301      	moveq	r3, #1
 8003af4:	2300      	movne	r3, #0
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	461a      	mov	r2, r3
 8003afa:	79fb      	ldrb	r3, [r7, #7]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d0b6      	beq.n	8003a6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b084      	sub	sp, #16
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	607a      	str	r2, [r7, #4]
 8003b16:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b18:	e051      	b.n	8003bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b28:	d123      	bne.n	8003b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b38:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f043 0204 	orr.w	r2, r3, #4
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e046      	b.n	8003c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b78:	d021      	beq.n	8003bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7a:	f7fe fe7d 	bl	8002878 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d302      	bcc.n	8003b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d116      	bne.n	8003bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f043 0220 	orr.w	r2, r3, #32
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e020      	b.n	8003c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	0c1b      	lsrs	r3, r3, #16
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d10c      	bne.n	8003be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	43da      	mvns	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	bf14      	ite	ne
 8003bda:	2301      	movne	r3, #1
 8003bdc:	2300      	moveq	r3, #0
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	e00b      	b.n	8003bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	43da      	mvns	r2, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	4013      	ands	r3, r2
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	bf14      	ite	ne
 8003bf4:	2301      	movne	r3, #1
 8003bf6:	2300      	moveq	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d18d      	bne.n	8003b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c14:	e02d      	b.n	8003c72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 f8ce 	bl	8003db8 <I2C_IsAcknowledgeFailed>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e02d      	b.n	8003c82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2c:	d021      	beq.n	8003c72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c2e:	f7fe fe23 	bl	8002878 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d302      	bcc.n	8003c44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d116      	bne.n	8003c72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f043 0220 	orr.w	r2, r3, #32
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e007      	b.n	8003c82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7c:	2b80      	cmp	r3, #128	; 0x80
 8003c7e:	d1ca      	bne.n	8003c16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b084      	sub	sp, #16
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	60f8      	str	r0, [r7, #12]
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c96:	e02d      	b.n	8003cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 f88d 	bl	8003db8 <I2C_IsAcknowledgeFailed>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e02d      	b.n	8003d04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cae:	d021      	beq.n	8003cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb0:	f7fe fde2 	bl	8002878 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d302      	bcc.n	8003cc6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d116      	bne.n	8003cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	f043 0220 	orr.w	r2, r3, #32
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e007      	b.n	8003d04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d1ca      	bne.n	8003c98 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d18:	e042      	b.n	8003da0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	f003 0310 	and.w	r3, r3, #16
 8003d24:	2b10      	cmp	r3, #16
 8003d26:	d119      	bne.n	8003d5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f06f 0210 	mvn.w	r2, #16
 8003d30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e029      	b.n	8003db0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5c:	f7fe fd8c 	bl	8002878 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d302      	bcc.n	8003d72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d116      	bne.n	8003da0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	f043 0220 	orr.w	r2, r3, #32
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e007      	b.n	8003db0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003daa:	2b40      	cmp	r3, #64	; 0x40
 8003dac:	d1b5      	bne.n	8003d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dce:	d11b      	bne.n	8003e08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dd8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	f043 0204 	orr.w	r2, r3, #4
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e18:	b08f      	sub	sp, #60	; 0x3c
 8003e1a:	af0a      	add	r7, sp, #40	; 0x28
 8003e1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e10f      	b.n	8004048 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f006 f8ea 	bl	800a01c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2203      	movs	r2, #3
 8003e4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d102      	bne.n	8003e62 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f002 fbd1 	bl	800660e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	603b      	str	r3, [r7, #0]
 8003e72:	687e      	ldr	r6, [r7, #4]
 8003e74:	466d      	mov	r5, sp
 8003e76:	f106 0410 	add.w	r4, r6, #16
 8003e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e86:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e8a:	1d33      	adds	r3, r6, #4
 8003e8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e8e:	6838      	ldr	r0, [r7, #0]
 8003e90:	f002 faa8 	bl	80063e4 <USB_CoreInit>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e0d0      	b.n	8004048 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2100      	movs	r1, #0
 8003eac:	4618      	mov	r0, r3
 8003eae:	f002 fbbf 	bl	8006630 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	73fb      	strb	r3, [r7, #15]
 8003eb6:	e04a      	b.n	8003f4e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003eb8:	7bfa      	ldrb	r2, [r7, #15]
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	333d      	adds	r3, #61	; 0x3d
 8003ec8:	2201      	movs	r2, #1
 8003eca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ecc:	7bfa      	ldrb	r2, [r7, #15]
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	333c      	adds	r3, #60	; 0x3c
 8003edc:	7bfa      	ldrb	r2, [r7, #15]
 8003ede:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ee0:	7bfa      	ldrb	r2, [r7, #15]
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	b298      	uxth	r0, r3
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	3344      	adds	r3, #68	; 0x44
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ef8:	7bfa      	ldrb	r2, [r7, #15]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	3340      	adds	r3, #64	; 0x40
 8003f08:	2200      	movs	r2, #0
 8003f0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f0c:	7bfa      	ldrb	r2, [r7, #15]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	3348      	adds	r3, #72	; 0x48
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f20:	7bfa      	ldrb	r2, [r7, #15]
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	4413      	add	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	334c      	adds	r3, #76	; 0x4c
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f34:	7bfa      	ldrb	r2, [r7, #15]
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	3354      	adds	r3, #84	; 0x54
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	73fb      	strb	r3, [r7, #15]
 8003f4e:	7bfa      	ldrb	r2, [r7, #15]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d3af      	bcc.n	8003eb8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f58:	2300      	movs	r3, #0
 8003f5a:	73fb      	strb	r3, [r7, #15]
 8003f5c:	e044      	b.n	8003fe8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f5e:	7bfa      	ldrb	r2, [r7, #15]
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	4413      	add	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003f70:	2200      	movs	r2, #0
 8003f72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f74:	7bfa      	ldrb	r2, [r7, #15]
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003f86:	7bfa      	ldrb	r2, [r7, #15]
 8003f88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f8a:	7bfa      	ldrb	r2, [r7, #15]
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	4413      	add	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003fa0:	7bfa      	ldrb	r2, [r7, #15]
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003fb6:	7bfa      	ldrb	r2, [r7, #15]
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	4413      	add	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003fcc:	7bfa      	ldrb	r2, [r7, #15]
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	73fb      	strb	r3, [r7, #15]
 8003fe8:	7bfa      	ldrb	r2, [r7, #15]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d3b5      	bcc.n	8003f5e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	687e      	ldr	r6, [r7, #4]
 8003ffa:	466d      	mov	r5, sp
 8003ffc:	f106 0410 	add.w	r4, r6, #16
 8004000:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004002:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004004:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004006:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004008:	e894 0003 	ldmia.w	r4, {r0, r1}
 800400c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004010:	1d33      	adds	r3, r6, #4
 8004012:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004014:	6838      	ldr	r0, [r7, #0]
 8004016:	f002 fb57 	bl	80066c8 <USB_DevInit>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e00d      	b.n	8004048 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	f003 fca6 	bl	8007992 <USB_DevDisconnect>

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004050 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_PCD_Start+0x1c>
 8004068:	2302      	movs	r3, #2
 800406a:	e020      	b.n	80040ae <HAL_PCD_Start+0x5e>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004078:	2b01      	cmp	r3, #1
 800407a:	d109      	bne.n	8004090 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004080:	2b01      	cmp	r3, #1
 8004082:	d005      	beq.n	8004090 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4618      	mov	r0, r3
 8004096:	f002 faa9 	bl	80065ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f003 fc56 	bl	8007950 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80040b6:	b590      	push	{r4, r7, lr}
 80040b8:	b08d      	sub	sp, #52	; 0x34
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f003 fd14 	bl	8007afa <USB_GetMode>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f040 848a 	bne.w	80049ee <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4618      	mov	r0, r3
 80040e0:	f003 fc78 	bl	80079d4 <USB_ReadInterrupts>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 8480 	beq.w	80049ec <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	0a1b      	lsrs	r3, r3, #8
 80040f6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4618      	mov	r0, r3
 8004106:	f003 fc65 	bl	80079d4 <USB_ReadInterrupts>
 800410a:	4603      	mov	r3, r0
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b02      	cmp	r3, #2
 8004112:	d107      	bne.n	8004124 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695a      	ldr	r2, [r3, #20]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f002 0202 	and.w	r2, r2, #2
 8004122:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f003 fc53 	bl	80079d4 <USB_ReadInterrupts>
 800412e:	4603      	mov	r3, r0
 8004130:	f003 0310 	and.w	r3, r3, #16
 8004134:	2b10      	cmp	r3, #16
 8004136:	d161      	bne.n	80041fc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699a      	ldr	r2, [r3, #24]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0210 	bic.w	r2, r2, #16
 8004146:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	f003 020f 	and.w	r2, r3, #15
 8004154:	4613      	mov	r3, r2
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	4413      	add	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	4413      	add	r3, r2
 8004164:	3304      	adds	r3, #4
 8004166:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	0c5b      	lsrs	r3, r3, #17
 800416c:	f003 030f 	and.w	r3, r3, #15
 8004170:	2b02      	cmp	r3, #2
 8004172:	d124      	bne.n	80041be <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800417a:	4013      	ands	r3, r2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d035      	beq.n	80041ec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	091b      	lsrs	r3, r3, #4
 8004188:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800418a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800418e:	b29b      	uxth	r3, r3
 8004190:	461a      	mov	r2, r3
 8004192:	6a38      	ldr	r0, [r7, #32]
 8004194:	f003 fa8a 	bl	80076ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	691a      	ldr	r2, [r3, #16]
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	091b      	lsrs	r3, r3, #4
 80041a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041a4:	441a      	add	r2, r3
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	6a1a      	ldr	r2, [r3, #32]
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	091b      	lsrs	r3, r3, #4
 80041b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041b6:	441a      	add	r2, r3
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	621a      	str	r2, [r3, #32]
 80041bc:	e016      	b.n	80041ec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	0c5b      	lsrs	r3, r3, #17
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	2b06      	cmp	r3, #6
 80041c8:	d110      	bne.n	80041ec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041d0:	2208      	movs	r2, #8
 80041d2:	4619      	mov	r1, r3
 80041d4:	6a38      	ldr	r0, [r7, #32]
 80041d6:	f003 fa69 	bl	80076ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	6a1a      	ldr	r2, [r3, #32]
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	091b      	lsrs	r3, r3, #4
 80041e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041e6:	441a      	add	r2, r3
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699a      	ldr	r2, [r3, #24]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0210 	orr.w	r2, r2, #16
 80041fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f003 fbe7 	bl	80079d4 <USB_ReadInterrupts>
 8004206:	4603      	mov	r3, r0
 8004208:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800420c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004210:	f040 80a7 	bne.w	8004362 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4618      	mov	r0, r3
 800421e:	f003 fbec 	bl	80079fa <USB_ReadDevAllOutEpInterrupt>
 8004222:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004224:	e099      	b.n	800435a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 808e 	beq.w	800434e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	4611      	mov	r1, r2
 800423c:	4618      	mov	r0, r3
 800423e:	f003 fc10 	bl	8007a62 <USB_ReadDevOutEPInterrupt>
 8004242:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00c      	beq.n	8004268 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	4413      	add	r3, r2
 8004256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425a:	461a      	mov	r2, r3
 800425c:	2301      	movs	r3, #1
 800425e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004260:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fec2 	bl	8004fec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00c      	beq.n	800428c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	4413      	add	r3, r2
 800427a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800427e:	461a      	mov	r2, r3
 8004280:	2308      	movs	r3, #8
 8004282:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004284:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 ff98 	bl	80051bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f003 0310 	and.w	r3, r3, #16
 8004292:	2b00      	cmp	r3, #0
 8004294:	d008      	beq.n	80042a8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	4413      	add	r3, r2
 800429e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a2:	461a      	mov	r2, r3
 80042a4:	2310      	movs	r3, #16
 80042a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d030      	beq.n	8004314 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ba:	2b80      	cmp	r3, #128	; 0x80
 80042bc:	d109      	bne.n	80042d2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	69fa      	ldr	r2, [r7, #28]
 80042c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042d0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80042d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d4:	4613      	mov	r3, r2
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	4413      	add	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	4413      	add	r3, r2
 80042e4:	3304      	adds	r3, #4
 80042e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	78db      	ldrb	r3, [r3, #3]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d108      	bne.n	8004302 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2200      	movs	r2, #0
 80042f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	4619      	mov	r1, r3
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f005 ff93 	bl	800a228 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	4413      	add	r3, r2
 800430a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800430e:	461a      	mov	r2, r3
 8004310:	2302      	movs	r3, #2
 8004312:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f003 0320 	and.w	r3, r3, #32
 800431a:	2b00      	cmp	r3, #0
 800431c:	d008      	beq.n	8004330 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	4413      	add	r3, r2
 8004326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432a:	461a      	mov	r2, r3
 800432c:	2320      	movs	r3, #32
 800432e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d009      	beq.n	800434e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004346:	461a      	mov	r2, r3
 8004348:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800434c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	3301      	adds	r3, #1
 8004352:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004356:	085b      	lsrs	r3, r3, #1
 8004358:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435c:	2b00      	cmp	r3, #0
 800435e:	f47f af62 	bne.w	8004226 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f003 fb34 	bl	80079d4 <USB_ReadInterrupts>
 800436c:	4603      	mov	r3, r0
 800436e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004372:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004376:	f040 80db 	bne.w	8004530 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f003 fb55 	bl	8007a2e <USB_ReadDevAllInEpInterrupt>
 8004384:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800438a:	e0cd      	b.n	8004528 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800438c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 80c2 	beq.w	800451c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	4611      	mov	r1, r2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f003 fb7b 	bl	8007a9e <USB_ReadDevInEPInterrupt>
 80043a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d057      	beq.n	8004464 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	2201      	movs	r2, #1
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	43db      	mvns	r3, r3
 80043ce:	69f9      	ldr	r1, [r7, #28]
 80043d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043d4:	4013      	ands	r3, r2
 80043d6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e4:	461a      	mov	r2, r3
 80043e6:	2301      	movs	r3, #1
 80043e8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d132      	bne.n	8004458 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f6:	4613      	mov	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	334c      	adds	r3, #76	; 0x4c
 8004402:	6819      	ldr	r1, [r3, #0]
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004408:	4613      	mov	r3, r2
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	4413      	add	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4403      	add	r3, r0
 8004412:	3348      	adds	r3, #72	; 0x48
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4419      	add	r1, r3
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800441c:	4613      	mov	r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	4413      	add	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4403      	add	r3, r0
 8004426:	334c      	adds	r3, #76	; 0x4c
 8004428:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	2b00      	cmp	r3, #0
 800442e:	d113      	bne.n	8004458 <HAL_PCD_IRQHandler+0x3a2>
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004434:	4613      	mov	r3, r2
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	4413      	add	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	3354      	adds	r3, #84	; 0x54
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d108      	bne.n	8004458 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004450:	461a      	mov	r2, r3
 8004452:	2101      	movs	r1, #1
 8004454:	f003 fb82 	bl	8007b5c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	b2db      	uxtb	r3, r3
 800445c:	4619      	mov	r1, r3
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f005 fe5d 	bl	800a11e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d008      	beq.n	8004480 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	015a      	lsls	r2, r3, #5
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	4413      	add	r3, r2
 8004476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447a:	461a      	mov	r2, r3
 800447c:	2308      	movs	r3, #8
 800447e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	f003 0310 	and.w	r3, r3, #16
 8004486:	2b00      	cmp	r3, #0
 8004488:	d008      	beq.n	800449c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004496:	461a      	mov	r2, r3
 8004498:	2310      	movs	r3, #16
 800449a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d008      	beq.n	80044b8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b2:	461a      	mov	r2, r3
 80044b4:	2340      	movs	r3, #64	; 0x40
 80044b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d023      	beq.n	800450a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80044c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044c4:	6a38      	ldr	r0, [r7, #32]
 80044c6:	f002 fa63 	bl	8006990 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80044ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044cc:	4613      	mov	r3, r2
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	4413      	add	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	3338      	adds	r3, #56	; 0x38
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	4413      	add	r3, r2
 80044da:	3304      	adds	r3, #4
 80044dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	78db      	ldrb	r3, [r3, #3]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d108      	bne.n	80044f8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2200      	movs	r2, #0
 80044ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	4619      	mov	r1, r3
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f005 feaa 	bl	800a24c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004504:	461a      	mov	r2, r3
 8004506:	2302      	movs	r3, #2
 8004508:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fcdb 	bl	8004ed2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	3301      	adds	r3, #1
 8004520:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	085b      	lsrs	r3, r3, #1
 8004526:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	2b00      	cmp	r3, #0
 800452c:	f47f af2e 	bne.w	800438c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f003 fa4d 	bl	80079d4 <USB_ReadInterrupts>
 800453a:	4603      	mov	r3, r0
 800453c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004540:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004544:	d122      	bne.n	800458c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	69fa      	ldr	r2, [r7, #28]
 8004550:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004554:	f023 0301 	bic.w	r3, r3, #1
 8004558:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004560:	2b01      	cmp	r3, #1
 8004562:	d108      	bne.n	8004576 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800456c:	2100      	movs	r1, #0
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fec2 	bl	80052f8 <HAL_PCDEx_LPM_Callback>
 8004574:	e002      	b.n	800457c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f005 fe48 	bl	800a20c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695a      	ldr	r2, [r3, #20]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800458a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4618      	mov	r0, r3
 8004592:	f003 fa1f 	bl	80079d4 <USB_ReadInterrupts>
 8004596:	4603      	mov	r3, r0
 8004598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800459c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a0:	d112      	bne.n	80045c8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d102      	bne.n	80045b8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f005 fe04 	bl	800a1c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695a      	ldr	r2, [r3, #20]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80045c6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f003 fa01 	bl	80079d4 <USB_ReadInterrupts>
 80045d2:	4603      	mov	r3, r0
 80045d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045dc:	f040 80b7 	bne.w	800474e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045ee:	f023 0301 	bic.w	r3, r3, #1
 80045f2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2110      	movs	r1, #16
 80045fa:	4618      	mov	r0, r3
 80045fc:	f002 f9c8 	bl	8006990 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004600:	2300      	movs	r3, #0
 8004602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004604:	e046      	b.n	8004694 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004612:	461a      	mov	r2, r3
 8004614:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004618:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800461a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800462a:	0151      	lsls	r1, r2, #5
 800462c:	69fa      	ldr	r2, [r7, #28]
 800462e:	440a      	add	r2, r1
 8004630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004634:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004638:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800463a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004646:	461a      	mov	r2, r3
 8004648:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800464c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800464e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	4413      	add	r3, r2
 8004656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800465e:	0151      	lsls	r1, r2, #5
 8004660:	69fa      	ldr	r2, [r7, #28]
 8004662:	440a      	add	r2, r1
 8004664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004668:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800466c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800466e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800467e:	0151      	lsls	r1, r2, #5
 8004680:	69fa      	ldr	r2, [r7, #28]
 8004682:	440a      	add	r2, r1
 8004684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004688:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800468c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800468e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004690:	3301      	adds	r3, #1
 8004692:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800469a:	429a      	cmp	r2, r3
 800469c:	d3b3      	bcc.n	8004606 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046ac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80046b0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d016      	beq.n	80046e8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046c4:	69fa      	ldr	r2, [r7, #28]
 80046c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046ca:	f043 030b 	orr.w	r3, r3, #11
 80046ce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046da:	69fa      	ldr	r2, [r7, #28]
 80046dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046e0:	f043 030b 	orr.w	r3, r3, #11
 80046e4:	6453      	str	r3, [r2, #68]	; 0x44
 80046e6:	e015      	b.n	8004714 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	69fa      	ldr	r2, [r7, #28]
 80046f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80046fa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80046fe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	69fa      	ldr	r2, [r7, #28]
 800470a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800470e:	f043 030b 	orr.w	r3, r3, #11
 8004712:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	69fa      	ldr	r2, [r7, #28]
 800471e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004722:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004726:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6818      	ldr	r0, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004738:	461a      	mov	r2, r3
 800473a:	f003 fa0f 	bl	8007b5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	695a      	ldr	r2, [r3, #20]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800474c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f003 f93e 	bl	80079d4 <USB_ReadInterrupts>
 8004758:	4603      	mov	r3, r0
 800475a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800475e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004762:	d124      	bne.n	80047ae <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4618      	mov	r0, r3
 800476a:	f003 f9d4 	bl	8007b16 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f002 f989 	bl	8006a8a <USB_GetDevSpeed>
 8004778:	4603      	mov	r3, r0
 800477a:	461a      	mov	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681c      	ldr	r4, [r3, #0]
 8004784:	f001 fa28 	bl	8005bd8 <HAL_RCC_GetHCLKFreq>
 8004788:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800478e:	b2db      	uxtb	r3, r3
 8004790:	461a      	mov	r2, r3
 8004792:	4620      	mov	r0, r4
 8004794:	f001 fe88 	bl	80064a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f005 fce8 	bl	800a16e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695a      	ldr	r2, [r3, #20]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80047ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f003 f90e 	bl	80079d4 <USB_ReadInterrupts>
 80047b8:	4603      	mov	r3, r0
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d10a      	bne.n	80047d8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f005 fcc5 	bl	800a152 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695a      	ldr	r2, [r3, #20]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f002 0208 	and.w	r2, r2, #8
 80047d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4618      	mov	r0, r3
 80047de:	f003 f8f9 	bl	80079d4 <USB_ReadInterrupts>
 80047e2:	4603      	mov	r3, r0
 80047e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e8:	2b80      	cmp	r3, #128	; 0x80
 80047ea:	d122      	bne.n	8004832 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047f8:	2301      	movs	r3, #1
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
 80047fc:	e014      	b.n	8004828 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004802:	4613      	mov	r3, r2
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	4413      	add	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	440b      	add	r3, r1
 800480c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d105      	bne.n	8004822 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	b2db      	uxtb	r3, r3
 800481a:	4619      	mov	r1, r3
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 fb27 	bl	8004e70 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	3301      	adds	r3, #1
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800482e:	429a      	cmp	r2, r3
 8004830:	d3e5      	bcc.n	80047fe <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f003 f8cc 	bl	80079d4 <USB_ReadInterrupts>
 800483c:	4603      	mov	r3, r0
 800483e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004846:	d13b      	bne.n	80048c0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004848:	2301      	movs	r3, #1
 800484a:	627b      	str	r3, [r7, #36]	; 0x24
 800484c:	e02b      	b.n	80048a6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	4413      	add	r3, r2
 8004856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800485e:	6879      	ldr	r1, [r7, #4]
 8004860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004862:	4613      	mov	r3, r2
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	4413      	add	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	440b      	add	r3, r1
 800486c:	3340      	adds	r3, #64	; 0x40
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d115      	bne.n	80048a0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004874:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004876:	2b00      	cmp	r3, #0
 8004878:	da12      	bge.n	80048a0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800487e:	4613      	mov	r3, r2
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	4413      	add	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	440b      	add	r3, r1
 8004888:	333f      	adds	r3, #63	; 0x3f
 800488a:	2201      	movs	r2, #1
 800488c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	b2db      	uxtb	r3, r3
 8004892:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004896:	b2db      	uxtb	r3, r3
 8004898:	4619      	mov	r1, r3
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fae8 	bl	8004e70 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	3301      	adds	r3, #1
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d3ce      	bcc.n	800484e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695a      	ldr	r2, [r3, #20]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80048be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f003 f885 	bl	80079d4 <USB_ReadInterrupts>
 80048ca:	4603      	mov	r3, r0
 80048cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048d4:	d155      	bne.n	8004982 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048d6:	2301      	movs	r3, #1
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24
 80048da:	e045      	b.n	8004968 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80048ec:	6879      	ldr	r1, [r7, #4]
 80048ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f0:	4613      	mov	r3, r2
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	4413      	add	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	440b      	add	r3, r1
 80048fa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d12e      	bne.n	8004962 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004904:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004906:	2b00      	cmp	r3, #0
 8004908:	da2b      	bge.n	8004962 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004916:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800491a:	429a      	cmp	r2, r3
 800491c:	d121      	bne.n	8004962 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800491e:	6879      	ldr	r1, [r7, #4]
 8004920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004922:	4613      	mov	r3, r2
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	4413      	add	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	440b      	add	r3, r1
 800492c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004930:	2201      	movs	r2, #1
 8004932:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10a      	bne.n	8004962 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	69fa      	ldr	r2, [r7, #28]
 8004956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800495a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800495e:	6053      	str	r3, [r2, #4]
            break;
 8004960:	e007      	b.n	8004972 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	3301      	adds	r3, #1
 8004966:	627b      	str	r3, [r7, #36]	; 0x24
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496e:	429a      	cmp	r2, r3
 8004970:	d3b4      	bcc.n	80048dc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695a      	ldr	r2, [r3, #20]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004980:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f003 f824 	bl	80079d4 <USB_ReadInterrupts>
 800498c:	4603      	mov	r3, r0
 800498e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004996:	d10a      	bne.n	80049ae <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f005 fc69 	bl	800a270 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	695a      	ldr	r2, [r3, #20]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80049ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f003 f80e 	bl	80079d4 <USB_ReadInterrupts>
 80049b8:	4603      	mov	r3, r0
 80049ba:	f003 0304 	and.w	r3, r3, #4
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d115      	bne.n	80049ee <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f005 fc59 	bl	800a28c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6859      	ldr	r1, [r3, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	605a      	str	r2, [r3, #4]
 80049ea:	e000      	b.n	80049ee <HAL_PCD_IRQHandler+0x938>
      return;
 80049ec:	bf00      	nop
    }
  }
}
 80049ee:	3734      	adds	r7, #52	; 0x34
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd90      	pop	{r4, r7, pc}

080049f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <HAL_PCD_SetAddress+0x1a>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e013      	b.n	8004a36 <HAL_PCD_SetAddress+0x42>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	78fa      	ldrb	r2, [r7, #3]
 8004a1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	78fa      	ldrb	r2, [r7, #3]
 8004a24:	4611      	mov	r1, r2
 8004a26:	4618      	mov	r0, r3
 8004a28:	f002 ff6c 	bl	8007904 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b084      	sub	sp, #16
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	4608      	mov	r0, r1
 8004a48:	4611      	mov	r1, r2
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	70fb      	strb	r3, [r7, #3]
 8004a50:	460b      	mov	r3, r1
 8004a52:	803b      	strh	r3, [r7, #0]
 8004a54:	4613      	mov	r3, r2
 8004a56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	da0f      	bge.n	8004a84 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	f003 020f 	and.w	r2, r3, #15
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	4413      	add	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	3338      	adds	r3, #56	; 0x38
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	4413      	add	r3, r2
 8004a78:	3304      	adds	r3, #4
 8004a7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	705a      	strb	r2, [r3, #1]
 8004a82:	e00f      	b.n	8004aa4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a84:	78fb      	ldrb	r3, [r7, #3]
 8004a86:	f003 020f 	and.w	r2, r3, #15
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	4413      	add	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	4413      	add	r3, r2
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004aa4:	78fb      	ldrb	r3, [r7, #3]
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004ab0:	883a      	ldrh	r2, [r7, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	78ba      	ldrb	r2, [r7, #2]
 8004aba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	785b      	ldrb	r3, [r3, #1]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d004      	beq.n	8004ace <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004ace:	78bb      	ldrb	r3, [r7, #2]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d102      	bne.n	8004ada <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_PCD_EP_Open+0xaa>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e00e      	b.n	8004b06 <HAL_PCD_EP_Open+0xc8>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68f9      	ldr	r1, [r7, #12]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f001 ffec 	bl	8006ad4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004b04:	7afb      	ldrb	r3, [r7, #11]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b084      	sub	sp, #16
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	460b      	mov	r3, r1
 8004b18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	da0f      	bge.n	8004b42 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b22:	78fb      	ldrb	r3, [r7, #3]
 8004b24:	f003 020f 	and.w	r2, r3, #15
 8004b28:	4613      	mov	r3, r2
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	4413      	add	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	3338      	adds	r3, #56	; 0x38
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	4413      	add	r3, r2
 8004b36:	3304      	adds	r3, #4
 8004b38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	705a      	strb	r2, [r3, #1]
 8004b40:	e00f      	b.n	8004b62 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b42:	78fb      	ldrb	r3, [r7, #3]
 8004b44:	f003 020f 	and.w	r2, r3, #15
 8004b48:	4613      	mov	r3, r2
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	4413      	add	r3, r2
 8004b58:	3304      	adds	r3, #4
 8004b5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004b62:	78fb      	ldrb	r3, [r7, #3]
 8004b64:	f003 030f 	and.w	r3, r3, #15
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_PCD_EP_Close+0x6e>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e00e      	b.n	8004b9a <HAL_PCD_EP_Close+0x8c>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68f9      	ldr	r1, [r7, #12]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f002 f82a 	bl	8006be4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b086      	sub	sp, #24
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	603b      	str	r3, [r7, #0]
 8004bae:	460b      	mov	r3, r1
 8004bb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bb2:	7afb      	ldrb	r3, [r7, #11]
 8004bb4:	f003 020f 	and.w	r2, r3, #15
 8004bb8:	4613      	mov	r3, r2
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	4413      	add	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	3304      	adds	r3, #4
 8004bca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2200      	movs	r2, #0
 8004be2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004be4:	7afb      	ldrb	r3, [r7, #11]
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d102      	bne.n	8004bfe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004bfe:	7afb      	ldrb	r3, [r7, #11]
 8004c00:	f003 030f 	and.w	r3, r3, #15
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d109      	bne.n	8004c1c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6818      	ldr	r0, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	461a      	mov	r2, r3
 8004c14:	6979      	ldr	r1, [r7, #20]
 8004c16:	f002 fb09 	bl	800722c <USB_EP0StartXfer>
 8004c1a:	e008      	b.n	8004c2e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6818      	ldr	r0, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	461a      	mov	r2, r3
 8004c28:	6979      	ldr	r1, [r7, #20]
 8004c2a:	f002 f8b7 	bl	8006d9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	460b      	mov	r3, r1
 8004c42:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004c44:	78fb      	ldrb	r3, [r7, #3]
 8004c46:	f003 020f 	and.w	r2, r3, #15
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	4413      	add	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	440b      	add	r3, r1
 8004c56:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004c5a:	681b      	ldr	r3, [r3, #0]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	607a      	str	r2, [r7, #4]
 8004c72:	603b      	str	r3, [r7, #0]
 8004c74:	460b      	mov	r3, r1
 8004c76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c78:	7afb      	ldrb	r3, [r7, #11]
 8004c7a:	f003 020f 	and.w	r2, r3, #15
 8004c7e:	4613      	mov	r3, r2
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	4413      	add	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	3338      	adds	r3, #56	; 0x38
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ca8:	7afb      	ldrb	r3, [r7, #11]
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d102      	bne.n	8004cc2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cc2:	7afb      	ldrb	r3, [r7, #11]
 8004cc4:	f003 030f 	and.w	r3, r3, #15
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d109      	bne.n	8004ce0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	6979      	ldr	r1, [r7, #20]
 8004cda:	f002 faa7 	bl	800722c <USB_EP0StartXfer>
 8004cde:	e008      	b.n	8004cf2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	461a      	mov	r2, r3
 8004cec:	6979      	ldr	r1, [r7, #20]
 8004cee:	f002 f855 	bl	8006d9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	460b      	mov	r3, r1
 8004d06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	f003 020f 	and.w	r2, r3, #15
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d901      	bls.n	8004d1a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e050      	b.n	8004dbc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	da0f      	bge.n	8004d42 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d22:	78fb      	ldrb	r3, [r7, #3]
 8004d24:	f003 020f 	and.w	r2, r3, #15
 8004d28:	4613      	mov	r3, r2
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	4413      	add	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	3338      	adds	r3, #56	; 0x38
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	4413      	add	r3, r2
 8004d36:	3304      	adds	r3, #4
 8004d38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	705a      	strb	r2, [r3, #1]
 8004d40:	e00d      	b.n	8004d5e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d42:	78fa      	ldrb	r2, [r7, #3]
 8004d44:	4613      	mov	r3, r2
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	4413      	add	r3, r2
 8004d54:	3304      	adds	r3, #4
 8004d56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2201      	movs	r2, #1
 8004d62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d64:	78fb      	ldrb	r3, [r7, #3]
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d101      	bne.n	8004d7e <HAL_PCD_EP_SetStall+0x82>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	e01e      	b.n	8004dbc <HAL_PCD_EP_SetStall+0xc0>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68f9      	ldr	r1, [r7, #12]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f002 fce5 	bl	800775c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d92:	78fb      	ldrb	r3, [r7, #3]
 8004d94:	f003 030f 	and.w	r3, r3, #15
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10a      	bne.n	8004db2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6818      	ldr	r0, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	b2d9      	uxtb	r1, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004dac:	461a      	mov	r2, r3
 8004dae:	f002 fed5 	bl	8007b5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004dd0:	78fb      	ldrb	r3, [r7, #3]
 8004dd2:	f003 020f 	and.w	r2, r3, #15
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d901      	bls.n	8004de2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e042      	b.n	8004e68 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004de2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	da0f      	bge.n	8004e0a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dea:	78fb      	ldrb	r3, [r7, #3]
 8004dec:	f003 020f 	and.w	r2, r3, #15
 8004df0:	4613      	mov	r3, r2
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	4413      	add	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	3338      	adds	r3, #56	; 0x38
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	3304      	adds	r3, #4
 8004e00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2201      	movs	r2, #1
 8004e06:	705a      	strb	r2, [r3, #1]
 8004e08:	e00f      	b.n	8004e2a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	f003 020f 	and.w	r2, r3, #15
 8004e10:	4613      	mov	r3, r2
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	4413      	add	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	4413      	add	r3, r2
 8004e20:	3304      	adds	r3, #4
 8004e22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e30:	78fb      	ldrb	r3, [r7, #3]
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d101      	bne.n	8004e4a <HAL_PCD_EP_ClrStall+0x86>
 8004e46:	2302      	movs	r3, #2
 8004e48:	e00e      	b.n	8004e68 <HAL_PCD_EP_ClrStall+0xa4>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68f9      	ldr	r1, [r7, #12]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f002 fced 	bl	8007838 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004e7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	da0c      	bge.n	8004e9e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e84:	78fb      	ldrb	r3, [r7, #3]
 8004e86:	f003 020f 	and.w	r2, r3, #15
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	00db      	lsls	r3, r3, #3
 8004e8e:	4413      	add	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	3338      	adds	r3, #56	; 0x38
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	4413      	add	r3, r2
 8004e98:	3304      	adds	r3, #4
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	e00c      	b.n	8004eb8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e9e:	78fb      	ldrb	r3, [r7, #3]
 8004ea0:	f003 020f 	and.w	r2, r3, #15
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68f9      	ldr	r1, [r7, #12]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f002 fb0c 	bl	80074dc <USB_EPStopXfer>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004ec8:	7afb      	ldrb	r3, [r7, #11]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b08a      	sub	sp, #40	; 0x28
 8004ed6:	af02      	add	r7, sp, #8
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	4413      	add	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	3338      	adds	r3, #56	; 0x38
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6a1a      	ldr	r2, [r3, #32]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d901      	bls.n	8004f0a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e06c      	b.n	8004fe4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	699a      	ldr	r2, [r3, #24]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	69fa      	ldr	r2, [r7, #28]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d902      	bls.n	8004f26 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	3303      	adds	r3, #3
 8004f2a:	089b      	lsrs	r3, r3, #2
 8004f2c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f2e:	e02b      	b.n	8004f88 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	699a      	ldr	r2, [r3, #24]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	69fa      	ldr	r2, [r7, #28]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d902      	bls.n	8004f4c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	3303      	adds	r3, #3
 8004f50:	089b      	lsrs	r3, r3, #2
 8004f52:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6919      	ldr	r1, [r3, #16]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	4603      	mov	r3, r0
 8004f6a:	6978      	ldr	r0, [r7, #20]
 8004f6c:	f002 fb60 	bl	8007630 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	691a      	ldr	r2, [r3, #16]
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	441a      	add	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a1a      	ldr	r2, [r3, #32]
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	441a      	add	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d809      	bhi.n	8004fb2 <PCD_WriteEmptyTxFifo+0xe0>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6a1a      	ldr	r2, [r3, #32]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d203      	bcs.n	8004fb2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1be      	bne.n	8004f30 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	699a      	ldr	r2, [r3, #24]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d811      	bhi.n	8004fe2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	f003 030f 	and.w	r3, r3, #15
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fca:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	43db      	mvns	r3, r3
 8004fd8:	6939      	ldr	r1, [r7, #16]
 8004fda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fde:	4013      	ands	r3, r2
 8004fe0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3720      	adds	r7, #32
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b088      	sub	sp, #32
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	333c      	adds	r3, #60	; 0x3c
 8005004:	3304      	adds	r3, #4
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	4413      	add	r3, r2
 8005012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d17b      	bne.n	800511a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b00      	cmp	r3, #0
 800502a:	d015      	beq.n	8005058 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	4a61      	ldr	r2, [pc, #388]	; (80051b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005030:	4293      	cmp	r3, r2
 8005032:	f240 80b9 	bls.w	80051a8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 80b3 	beq.w	80051a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504e:	461a      	mov	r2, r3
 8005050:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005054:	6093      	str	r3, [r2, #8]
 8005056:	e0a7      	b.n	80051a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	f003 0320 	and.w	r3, r3, #32
 800505e:	2b00      	cmp	r3, #0
 8005060:	d009      	beq.n	8005076 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	4413      	add	r3, r2
 800506a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506e:	461a      	mov	r2, r3
 8005070:	2320      	movs	r3, #32
 8005072:	6093      	str	r3, [r2, #8]
 8005074:	e098      	b.n	80051a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800507c:	2b00      	cmp	r3, #0
 800507e:	f040 8093 	bne.w	80051a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	4a4b      	ldr	r2, [pc, #300]	; (80051b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d90f      	bls.n	80050aa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00a      	beq.n	80050aa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a0:	461a      	mov	r2, r3
 80050a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050a6:	6093      	str	r3, [r2, #8]
 80050a8:	e07e      	b.n	80051a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	4613      	mov	r3, r2
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	4413      	add	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	4413      	add	r3, r2
 80050bc:	3304      	adds	r3, #4
 80050be:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	69da      	ldr	r2, [r3, #28]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	0159      	lsls	r1, r3, #5
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	440b      	add	r3, r1
 80050cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050d6:	1ad2      	subs	r2, r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d114      	bne.n	800510c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d109      	bne.n	80050fe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6818      	ldr	r0, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80050f4:	461a      	mov	r2, r3
 80050f6:	2101      	movs	r1, #1
 80050f8:	f002 fd30 	bl	8007b5c <USB_EP0_OutStart>
 80050fc:	e006      	b.n	800510c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	691a      	ldr	r2, [r3, #16]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	441a      	add	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	b2db      	uxtb	r3, r3
 8005110:	4619      	mov	r1, r3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f004 ffe8 	bl	800a0e8 <HAL_PCD_DataOutStageCallback>
 8005118:	e046      	b.n	80051a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	4a26      	ldr	r2, [pc, #152]	; (80051b8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d124      	bne.n	800516c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005138:	461a      	mov	r2, r3
 800513a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800513e:	6093      	str	r3, [r2, #8]
 8005140:	e032      	b.n	80051a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b00      	cmp	r3, #0
 800514a:	d008      	beq.n	800515e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005158:	461a      	mov	r2, r3
 800515a:	2320      	movs	r3, #32
 800515c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	4619      	mov	r1, r3
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f004 ffbf 	bl	800a0e8 <HAL_PCD_DataOutStageCallback>
 800516a:	e01d      	b.n	80051a8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d114      	bne.n	800519c <PCD_EP_OutXfrComplete_int+0x1b0>
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	4613      	mov	r3, r2
 8005178:	00db      	lsls	r3, r3, #3
 800517a:	4413      	add	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	440b      	add	r3, r1
 8005180:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d108      	bne.n	800519c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005194:	461a      	mov	r2, r3
 8005196:	2100      	movs	r1, #0
 8005198:	f002 fce0 	bl	8007b5c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	4619      	mov	r1, r3
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f004 ffa0 	bl	800a0e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3720      	adds	r7, #32
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	4f54300a 	.word	0x4f54300a
 80051b8:	4f54310a 	.word	0x4f54310a

080051bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	333c      	adds	r3, #60	; 0x3c
 80051d4:	3304      	adds	r3, #4
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4a15      	ldr	r2, [pc, #84]	; (8005244 <PCD_EP_OutSetupPacket_int+0x88>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d90e      	bls.n	8005210 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d009      	beq.n	8005210 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005208:	461a      	mov	r2, r3
 800520a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800520e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f004 ff57 	bl	800a0c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4a0a      	ldr	r2, [pc, #40]	; (8005244 <PCD_EP_OutSetupPacket_int+0x88>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d90c      	bls.n	8005238 <PCD_EP_OutSetupPacket_int+0x7c>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d108      	bne.n	8005238 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6818      	ldr	r0, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005230:	461a      	mov	r2, r3
 8005232:	2101      	movs	r1, #1
 8005234:	f002 fc92 	bl	8007b5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	4f54300a 	.word	0x4f54300a

08005248 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	460b      	mov	r3, r1
 8005252:	70fb      	strb	r3, [r7, #3]
 8005254:	4613      	mov	r3, r2
 8005256:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005260:	78fb      	ldrb	r3, [r7, #3]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d107      	bne.n	8005276 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005266:	883b      	ldrh	r3, [r7, #0]
 8005268:	0419      	lsls	r1, r3, #16
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	430a      	orrs	r2, r1
 8005272:	629a      	str	r2, [r3, #40]	; 0x28
 8005274:	e028      	b.n	80052c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527c:	0c1b      	lsrs	r3, r3, #16
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	4413      	add	r3, r2
 8005282:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005284:	2300      	movs	r3, #0
 8005286:	73fb      	strb	r3, [r7, #15]
 8005288:	e00d      	b.n	80052a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	7bfb      	ldrb	r3, [r7, #15]
 8005290:	3340      	adds	r3, #64	; 0x40
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	0c1b      	lsrs	r3, r3, #16
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	4413      	add	r3, r2
 800529e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
 80052a2:	3301      	adds	r3, #1
 80052a4:	73fb      	strb	r3, [r7, #15]
 80052a6:	7bfa      	ldrb	r2, [r7, #15]
 80052a8:	78fb      	ldrb	r3, [r7, #3]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d3ec      	bcc.n	800528a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80052b0:	883b      	ldrh	r3, [r7, #0]
 80052b2:	0418      	lsls	r0, r3, #16
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6819      	ldr	r1, [r3, #0]
 80052b8:	78fb      	ldrb	r3, [r7, #3]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	4302      	orrs	r2, r0
 80052c0:	3340      	adds	r3, #64	; 0x40
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	460b      	mov	r3, r1
 80052e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	887a      	ldrh	r2, [r7, #2]
 80052e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	460b      	mov	r3, r1
 8005302:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e267      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d075      	beq.n	800541a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800532e:	4b88      	ldr	r3, [pc, #544]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 030c 	and.w	r3, r3, #12
 8005336:	2b04      	cmp	r3, #4
 8005338:	d00c      	beq.n	8005354 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800533a:	4b85      	ldr	r3, [pc, #532]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005342:	2b08      	cmp	r3, #8
 8005344:	d112      	bne.n	800536c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005346:	4b82      	ldr	r3, [pc, #520]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800534e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005352:	d10b      	bne.n	800536c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005354:	4b7e      	ldr	r3, [pc, #504]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d05b      	beq.n	8005418 <HAL_RCC_OscConfig+0x108>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d157      	bne.n	8005418 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e242      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005374:	d106      	bne.n	8005384 <HAL_RCC_OscConfig+0x74>
 8005376:	4b76      	ldr	r3, [pc, #472]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a75      	ldr	r2, [pc, #468]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 800537c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	e01d      	b.n	80053c0 <HAL_RCC_OscConfig+0xb0>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800538c:	d10c      	bne.n	80053a8 <HAL_RCC_OscConfig+0x98>
 800538e:	4b70      	ldr	r3, [pc, #448]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a6f      	ldr	r2, [pc, #444]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 8005394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005398:	6013      	str	r3, [r2, #0]
 800539a:	4b6d      	ldr	r3, [pc, #436]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a6c      	ldr	r2, [pc, #432]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 80053a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	e00b      	b.n	80053c0 <HAL_RCC_OscConfig+0xb0>
 80053a8:	4b69      	ldr	r3, [pc, #420]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a68      	ldr	r2, [pc, #416]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 80053ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	4b66      	ldr	r3, [pc, #408]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a65      	ldr	r2, [pc, #404]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 80053ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d013      	beq.n	80053f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c8:	f7fd fa56 	bl	8002878 <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053d0:	f7fd fa52 	bl	8002878 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b64      	cmp	r3, #100	; 0x64
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e207      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053e2:	4b5b      	ldr	r3, [pc, #364]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0f0      	beq.n	80053d0 <HAL_RCC_OscConfig+0xc0>
 80053ee:	e014      	b.n	800541a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f0:	f7fd fa42 	bl	8002878 <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053f6:	e008      	b.n	800540a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053f8:	f7fd fa3e 	bl	8002878 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b64      	cmp	r3, #100	; 0x64
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e1f3      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800540a:	4b51      	ldr	r3, [pc, #324]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1f0      	bne.n	80053f8 <HAL_RCC_OscConfig+0xe8>
 8005416:	e000      	b.n	800541a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d063      	beq.n	80054ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005426:	4b4a      	ldr	r3, [pc, #296]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 030c 	and.w	r3, r3, #12
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00b      	beq.n	800544a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005432:	4b47      	ldr	r3, [pc, #284]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800543a:	2b08      	cmp	r3, #8
 800543c:	d11c      	bne.n	8005478 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800543e:	4b44      	ldr	r3, [pc, #272]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d116      	bne.n	8005478 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800544a:	4b41      	ldr	r3, [pc, #260]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d005      	beq.n	8005462 <HAL_RCC_OscConfig+0x152>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d001      	beq.n	8005462 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e1c7      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005462:	4b3b      	ldr	r3, [pc, #236]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	4937      	ldr	r1, [pc, #220]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 8005472:	4313      	orrs	r3, r2
 8005474:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005476:	e03a      	b.n	80054ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d020      	beq.n	80054c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005480:	4b34      	ldr	r3, [pc, #208]	; (8005554 <HAL_RCC_OscConfig+0x244>)
 8005482:	2201      	movs	r2, #1
 8005484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005486:	f7fd f9f7 	bl	8002878 <HAL_GetTick>
 800548a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800548c:	e008      	b.n	80054a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800548e:	f7fd f9f3 	bl	8002878 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e1a8      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054a0:	4b2b      	ldr	r3, [pc, #172]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0f0      	beq.n	800548e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ac:	4b28      	ldr	r3, [pc, #160]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	4925      	ldr	r1, [pc, #148]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	600b      	str	r3, [r1, #0]
 80054c0:	e015      	b.n	80054ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054c2:	4b24      	ldr	r3, [pc, #144]	; (8005554 <HAL_RCC_OscConfig+0x244>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c8:	f7fd f9d6 	bl	8002878 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054d0:	f7fd f9d2 	bl	8002878 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e187      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054e2:	4b1b      	ldr	r3, [pc, #108]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f0      	bne.n	80054d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d036      	beq.n	8005568 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d016      	beq.n	8005530 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005502:	4b15      	ldr	r3, [pc, #84]	; (8005558 <HAL_RCC_OscConfig+0x248>)
 8005504:	2201      	movs	r2, #1
 8005506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005508:	f7fd f9b6 	bl	8002878 <HAL_GetTick>
 800550c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800550e:	e008      	b.n	8005522 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005510:	f7fd f9b2 	bl	8002878 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e167      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005522:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 8005524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d0f0      	beq.n	8005510 <HAL_RCC_OscConfig+0x200>
 800552e:	e01b      	b.n	8005568 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005530:	4b09      	ldr	r3, [pc, #36]	; (8005558 <HAL_RCC_OscConfig+0x248>)
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005536:	f7fd f99f 	bl	8002878 <HAL_GetTick>
 800553a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800553c:	e00e      	b.n	800555c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800553e:	f7fd f99b 	bl	8002878 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d907      	bls.n	800555c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e150      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
 8005550:	40023800 	.word	0x40023800
 8005554:	42470000 	.word	0x42470000
 8005558:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800555c:	4b88      	ldr	r3, [pc, #544]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 800555e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1ea      	bne.n	800553e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 8097 	beq.w	80056a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005576:	2300      	movs	r3, #0
 8005578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800557a:	4b81      	ldr	r3, [pc, #516]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10f      	bne.n	80055a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005586:	2300      	movs	r3, #0
 8005588:	60bb      	str	r3, [r7, #8]
 800558a:	4b7d      	ldr	r3, [pc, #500]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	4a7c      	ldr	r2, [pc, #496]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 8005590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005594:	6413      	str	r3, [r2, #64]	; 0x40
 8005596:	4b7a      	ldr	r3, [pc, #488]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800559e:	60bb      	str	r3, [r7, #8]
 80055a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055a2:	2301      	movs	r3, #1
 80055a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a6:	4b77      	ldr	r3, [pc, #476]	; (8005784 <HAL_RCC_OscConfig+0x474>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d118      	bne.n	80055e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055b2:	4b74      	ldr	r3, [pc, #464]	; (8005784 <HAL_RCC_OscConfig+0x474>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a73      	ldr	r2, [pc, #460]	; (8005784 <HAL_RCC_OscConfig+0x474>)
 80055b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055be:	f7fd f95b 	bl	8002878 <HAL_GetTick>
 80055c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c4:	e008      	b.n	80055d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055c6:	f7fd f957 	bl	8002878 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d901      	bls.n	80055d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e10c      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055d8:	4b6a      	ldr	r3, [pc, #424]	; (8005784 <HAL_RCC_OscConfig+0x474>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d0f0      	beq.n	80055c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d106      	bne.n	80055fa <HAL_RCC_OscConfig+0x2ea>
 80055ec:	4b64      	ldr	r3, [pc, #400]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 80055ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f0:	4a63      	ldr	r2, [pc, #396]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 80055f2:	f043 0301 	orr.w	r3, r3, #1
 80055f6:	6713      	str	r3, [r2, #112]	; 0x70
 80055f8:	e01c      	b.n	8005634 <HAL_RCC_OscConfig+0x324>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	2b05      	cmp	r3, #5
 8005600:	d10c      	bne.n	800561c <HAL_RCC_OscConfig+0x30c>
 8005602:	4b5f      	ldr	r3, [pc, #380]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 8005604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005606:	4a5e      	ldr	r2, [pc, #376]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 8005608:	f043 0304 	orr.w	r3, r3, #4
 800560c:	6713      	str	r3, [r2, #112]	; 0x70
 800560e:	4b5c      	ldr	r3, [pc, #368]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 8005610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005612:	4a5b      	ldr	r2, [pc, #364]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 8005614:	f043 0301 	orr.w	r3, r3, #1
 8005618:	6713      	str	r3, [r2, #112]	; 0x70
 800561a:	e00b      	b.n	8005634 <HAL_RCC_OscConfig+0x324>
 800561c:	4b58      	ldr	r3, [pc, #352]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 800561e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005620:	4a57      	ldr	r2, [pc, #348]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 8005622:	f023 0301 	bic.w	r3, r3, #1
 8005626:	6713      	str	r3, [r2, #112]	; 0x70
 8005628:	4b55      	ldr	r3, [pc, #340]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 800562a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562c:	4a54      	ldr	r2, [pc, #336]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 800562e:	f023 0304 	bic.w	r3, r3, #4
 8005632:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d015      	beq.n	8005668 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800563c:	f7fd f91c 	bl	8002878 <HAL_GetTick>
 8005640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005642:	e00a      	b.n	800565a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005644:	f7fd f918 	bl	8002878 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005652:	4293      	cmp	r3, r2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e0cb      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800565a:	4b49      	ldr	r3, [pc, #292]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 800565c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d0ee      	beq.n	8005644 <HAL_RCC_OscConfig+0x334>
 8005666:	e014      	b.n	8005692 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005668:	f7fd f906 	bl	8002878 <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800566e:	e00a      	b.n	8005686 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005670:	f7fd f902 	bl	8002878 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	f241 3288 	movw	r2, #5000	; 0x1388
 800567e:	4293      	cmp	r3, r2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e0b5      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005686:	4b3e      	ldr	r3, [pc, #248]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 8005688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1ee      	bne.n	8005670 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005692:	7dfb      	ldrb	r3, [r7, #23]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d105      	bne.n	80056a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005698:	4b39      	ldr	r3, [pc, #228]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 800569a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569c:	4a38      	ldr	r2, [pc, #224]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 800569e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 80a1 	beq.w	80057f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056ae:	4b34      	ldr	r3, [pc, #208]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f003 030c 	and.w	r3, r3, #12
 80056b6:	2b08      	cmp	r3, #8
 80056b8:	d05c      	beq.n	8005774 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d141      	bne.n	8005746 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056c2:	4b31      	ldr	r3, [pc, #196]	; (8005788 <HAL_RCC_OscConfig+0x478>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c8:	f7fd f8d6 	bl	8002878 <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056d0:	f7fd f8d2 	bl	8002878 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e087      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056e2:	4b27      	ldr	r3, [pc, #156]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1f0      	bne.n	80056d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69da      	ldr	r2, [r3, #28]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	431a      	orrs	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	019b      	lsls	r3, r3, #6
 80056fe:	431a      	orrs	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005704:	085b      	lsrs	r3, r3, #1
 8005706:	3b01      	subs	r3, #1
 8005708:	041b      	lsls	r3, r3, #16
 800570a:	431a      	orrs	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	061b      	lsls	r3, r3, #24
 8005712:	491b      	ldr	r1, [pc, #108]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 8005714:	4313      	orrs	r3, r2
 8005716:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005718:	4b1b      	ldr	r3, [pc, #108]	; (8005788 <HAL_RCC_OscConfig+0x478>)
 800571a:	2201      	movs	r2, #1
 800571c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571e:	f7fd f8ab 	bl	8002878 <HAL_GetTick>
 8005722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005724:	e008      	b.n	8005738 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005726:	f7fd f8a7 	bl	8002878 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e05c      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005738:	4b11      	ldr	r3, [pc, #68]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0f0      	beq.n	8005726 <HAL_RCC_OscConfig+0x416>
 8005744:	e054      	b.n	80057f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005746:	4b10      	ldr	r3, [pc, #64]	; (8005788 <HAL_RCC_OscConfig+0x478>)
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574c:	f7fd f894 	bl	8002878 <HAL_GetTick>
 8005750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005754:	f7fd f890 	bl	8002878 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e045      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005766:	4b06      	ldr	r3, [pc, #24]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1f0      	bne.n	8005754 <HAL_RCC_OscConfig+0x444>
 8005772:	e03d      	b.n	80057f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d107      	bne.n	800578c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e038      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
 8005780:	40023800 	.word	0x40023800
 8005784:	40007000 	.word	0x40007000
 8005788:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800578c:	4b1b      	ldr	r3, [pc, #108]	; (80057fc <HAL_RCC_OscConfig+0x4ec>)
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d028      	beq.n	80057ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d121      	bne.n	80057ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d11a      	bne.n	80057ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057bc:	4013      	ands	r3, r2
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d111      	bne.n	80057ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d2:	085b      	lsrs	r3, r3, #1
 80057d4:	3b01      	subs	r3, #1
 80057d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057d8:	429a      	cmp	r2, r3
 80057da:	d107      	bne.n	80057ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d001      	beq.n	80057f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e000      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	40023800 	.word	0x40023800

08005800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e0cc      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005814:	4b68      	ldr	r3, [pc, #416]	; (80059b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d90c      	bls.n	800583c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005822:	4b65      	ldr	r3, [pc, #404]	; (80059b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800582a:	4b63      	ldr	r3, [pc, #396]	; (80059b8 <HAL_RCC_ClockConfig+0x1b8>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0307 	and.w	r3, r3, #7
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d001      	beq.n	800583c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e0b8      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d020      	beq.n	800588a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	d005      	beq.n	8005860 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005854:	4b59      	ldr	r3, [pc, #356]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	4a58      	ldr	r2, [pc, #352]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 800585a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800585e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0308 	and.w	r3, r3, #8
 8005868:	2b00      	cmp	r3, #0
 800586a:	d005      	beq.n	8005878 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800586c:	4b53      	ldr	r3, [pc, #332]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	4a52      	ldr	r2, [pc, #328]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 8005872:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005876:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005878:	4b50      	ldr	r3, [pc, #320]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	494d      	ldr	r1, [pc, #308]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 8005886:	4313      	orrs	r3, r2
 8005888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d044      	beq.n	8005920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d107      	bne.n	80058ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800589e:	4b47      	ldr	r3, [pc, #284]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d119      	bne.n	80058de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e07f      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d003      	beq.n	80058be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	d107      	bne.n	80058ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058be:	4b3f      	ldr	r3, [pc, #252]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d109      	bne.n	80058de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e06f      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ce:	4b3b      	ldr	r3, [pc, #236]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e067      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058de:	4b37      	ldr	r3, [pc, #220]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f023 0203 	bic.w	r2, r3, #3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	4934      	ldr	r1, [pc, #208]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058f0:	f7fc ffc2 	bl	8002878 <HAL_GetTick>
 80058f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058f6:	e00a      	b.n	800590e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058f8:	f7fc ffbe 	bl	8002878 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	f241 3288 	movw	r2, #5000	; 0x1388
 8005906:	4293      	cmp	r3, r2
 8005908:	d901      	bls.n	800590e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e04f      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800590e:	4b2b      	ldr	r3, [pc, #172]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f003 020c 	and.w	r2, r3, #12
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	429a      	cmp	r2, r3
 800591e:	d1eb      	bne.n	80058f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005920:	4b25      	ldr	r3, [pc, #148]	; (80059b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0307 	and.w	r3, r3, #7
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d20c      	bcs.n	8005948 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800592e:	4b22      	ldr	r3, [pc, #136]	; (80059b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005936:	4b20      	ldr	r3, [pc, #128]	; (80059b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0307 	and.w	r3, r3, #7
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	429a      	cmp	r2, r3
 8005942:	d001      	beq.n	8005948 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e032      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0304 	and.w	r3, r3, #4
 8005950:	2b00      	cmp	r3, #0
 8005952:	d008      	beq.n	8005966 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005954:	4b19      	ldr	r3, [pc, #100]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	4916      	ldr	r1, [pc, #88]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 8005962:	4313      	orrs	r3, r2
 8005964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0308 	and.w	r3, r3, #8
 800596e:	2b00      	cmp	r3, #0
 8005970:	d009      	beq.n	8005986 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005972:	4b12      	ldr	r3, [pc, #72]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	490e      	ldr	r1, [pc, #56]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 8005982:	4313      	orrs	r3, r2
 8005984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005986:	f000 f821 	bl	80059cc <HAL_RCC_GetSysClockFreq>
 800598a:	4602      	mov	r2, r0
 800598c:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	091b      	lsrs	r3, r3, #4
 8005992:	f003 030f 	and.w	r3, r3, #15
 8005996:	490a      	ldr	r1, [pc, #40]	; (80059c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005998:	5ccb      	ldrb	r3, [r1, r3]
 800599a:	fa22 f303 	lsr.w	r3, r2, r3
 800599e:	4a09      	ldr	r2, [pc, #36]	; (80059c4 <HAL_RCC_ClockConfig+0x1c4>)
 80059a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059a2:	4b09      	ldr	r3, [pc, #36]	; (80059c8 <HAL_RCC_ClockConfig+0x1c8>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fc ff22 	bl	80027f0 <HAL_InitTick>

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	40023c00 	.word	0x40023c00
 80059bc:	40023800 	.word	0x40023800
 80059c0:	08010fd4 	.word	0x08010fd4
 80059c4:	20000000 	.word	0x20000000
 80059c8:	20000004 	.word	0x20000004

080059cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059d0:	b094      	sub	sp, #80	; 0x50
 80059d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	647b      	str	r3, [r7, #68]	; 0x44
 80059d8:	2300      	movs	r3, #0
 80059da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059dc:	2300      	movs	r3, #0
 80059de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059e4:	4b79      	ldr	r3, [pc, #484]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x200>)
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f003 030c 	and.w	r3, r3, #12
 80059ec:	2b08      	cmp	r3, #8
 80059ee:	d00d      	beq.n	8005a0c <HAL_RCC_GetSysClockFreq+0x40>
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	f200 80e1 	bhi.w	8005bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d002      	beq.n	8005a00 <HAL_RCC_GetSysClockFreq+0x34>
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	d003      	beq.n	8005a06 <HAL_RCC_GetSysClockFreq+0x3a>
 80059fe:	e0db      	b.n	8005bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a00:	4b73      	ldr	r3, [pc, #460]	; (8005bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005a04:	e0db      	b.n	8005bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a06:	4b73      	ldr	r3, [pc, #460]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a0a:	e0d8      	b.n	8005bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a0c:	4b6f      	ldr	r3, [pc, #444]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a16:	4b6d      	ldr	r3, [pc, #436]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d063      	beq.n	8005aea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a22:	4b6a      	ldr	r3, [pc, #424]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	099b      	lsrs	r3, r3, #6
 8005a28:	2200      	movs	r2, #0
 8005a2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a34:	633b      	str	r3, [r7, #48]	; 0x30
 8005a36:	2300      	movs	r3, #0
 8005a38:	637b      	str	r3, [r7, #52]	; 0x34
 8005a3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005a3e:	4622      	mov	r2, r4
 8005a40:	462b      	mov	r3, r5
 8005a42:	f04f 0000 	mov.w	r0, #0
 8005a46:	f04f 0100 	mov.w	r1, #0
 8005a4a:	0159      	lsls	r1, r3, #5
 8005a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a50:	0150      	lsls	r0, r2, #5
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	4621      	mov	r1, r4
 8005a58:	1a51      	subs	r1, r2, r1
 8005a5a:	6139      	str	r1, [r7, #16]
 8005a5c:	4629      	mov	r1, r5
 8005a5e:	eb63 0301 	sbc.w	r3, r3, r1
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	f04f 0200 	mov.w	r2, #0
 8005a68:	f04f 0300 	mov.w	r3, #0
 8005a6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a70:	4659      	mov	r1, fp
 8005a72:	018b      	lsls	r3, r1, #6
 8005a74:	4651      	mov	r1, sl
 8005a76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a7a:	4651      	mov	r1, sl
 8005a7c:	018a      	lsls	r2, r1, #6
 8005a7e:	4651      	mov	r1, sl
 8005a80:	ebb2 0801 	subs.w	r8, r2, r1
 8005a84:	4659      	mov	r1, fp
 8005a86:	eb63 0901 	sbc.w	r9, r3, r1
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	f04f 0300 	mov.w	r3, #0
 8005a92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a9e:	4690      	mov	r8, r2
 8005aa0:	4699      	mov	r9, r3
 8005aa2:	4623      	mov	r3, r4
 8005aa4:	eb18 0303 	adds.w	r3, r8, r3
 8005aa8:	60bb      	str	r3, [r7, #8]
 8005aaa:	462b      	mov	r3, r5
 8005aac:	eb49 0303 	adc.w	r3, r9, r3
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	f04f 0200 	mov.w	r2, #0
 8005ab6:	f04f 0300 	mov.w	r3, #0
 8005aba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005abe:	4629      	mov	r1, r5
 8005ac0:	024b      	lsls	r3, r1, #9
 8005ac2:	4621      	mov	r1, r4
 8005ac4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ac8:	4621      	mov	r1, r4
 8005aca:	024a      	lsls	r2, r1, #9
 8005acc:	4610      	mov	r0, r2
 8005ace:	4619      	mov	r1, r3
 8005ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ad8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005adc:	f7fb f8d4 	bl	8000c88 <__aeabi_uldivmod>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ae8:	e058      	b.n	8005b9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aea:	4b38      	ldr	r3, [pc, #224]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	099b      	lsrs	r3, r3, #6
 8005af0:	2200      	movs	r2, #0
 8005af2:	4618      	mov	r0, r3
 8005af4:	4611      	mov	r1, r2
 8005af6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005afa:	623b      	str	r3, [r7, #32]
 8005afc:	2300      	movs	r3, #0
 8005afe:	627b      	str	r3, [r7, #36]	; 0x24
 8005b00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b04:	4642      	mov	r2, r8
 8005b06:	464b      	mov	r3, r9
 8005b08:	f04f 0000 	mov.w	r0, #0
 8005b0c:	f04f 0100 	mov.w	r1, #0
 8005b10:	0159      	lsls	r1, r3, #5
 8005b12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b16:	0150      	lsls	r0, r2, #5
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4641      	mov	r1, r8
 8005b1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b22:	4649      	mov	r1, r9
 8005b24:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	f04f 0300 	mov.w	r3, #0
 8005b30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b3c:	ebb2 040a 	subs.w	r4, r2, sl
 8005b40:	eb63 050b 	sbc.w	r5, r3, fp
 8005b44:	f04f 0200 	mov.w	r2, #0
 8005b48:	f04f 0300 	mov.w	r3, #0
 8005b4c:	00eb      	lsls	r3, r5, #3
 8005b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b52:	00e2      	lsls	r2, r4, #3
 8005b54:	4614      	mov	r4, r2
 8005b56:	461d      	mov	r5, r3
 8005b58:	4643      	mov	r3, r8
 8005b5a:	18e3      	adds	r3, r4, r3
 8005b5c:	603b      	str	r3, [r7, #0]
 8005b5e:	464b      	mov	r3, r9
 8005b60:	eb45 0303 	adc.w	r3, r5, r3
 8005b64:	607b      	str	r3, [r7, #4]
 8005b66:	f04f 0200 	mov.w	r2, #0
 8005b6a:	f04f 0300 	mov.w	r3, #0
 8005b6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b72:	4629      	mov	r1, r5
 8005b74:	028b      	lsls	r3, r1, #10
 8005b76:	4621      	mov	r1, r4
 8005b78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	028a      	lsls	r2, r1, #10
 8005b80:	4610      	mov	r0, r2
 8005b82:	4619      	mov	r1, r3
 8005b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b86:	2200      	movs	r2, #0
 8005b88:	61bb      	str	r3, [r7, #24]
 8005b8a:	61fa      	str	r2, [r7, #28]
 8005b8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b90:	f7fb f87a 	bl	8000c88 <__aeabi_uldivmod>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4613      	mov	r3, r2
 8005b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b9c:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	0c1b      	lsrs	r3, r3, #16
 8005ba2:	f003 0303 	and.w	r3, r3, #3
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005bac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bb6:	e002      	b.n	8005bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bb8:	4b05      	ldr	r3, [pc, #20]	; (8005bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005bba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3750      	adds	r7, #80	; 0x50
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bca:	bf00      	nop
 8005bcc:	40023800 	.word	0x40023800
 8005bd0:	00f42400 	.word	0x00f42400
 8005bd4:	007a1200 	.word	0x007a1200

08005bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bdc:	4b03      	ldr	r3, [pc, #12]	; (8005bec <HAL_RCC_GetHCLKFreq+0x14>)
 8005bde:	681b      	ldr	r3, [r3, #0]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	20000000 	.word	0x20000000

08005bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005bf4:	f7ff fff0 	bl	8005bd8 <HAL_RCC_GetHCLKFreq>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	0a9b      	lsrs	r3, r3, #10
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	4903      	ldr	r1, [pc, #12]	; (8005c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c06:	5ccb      	ldrb	r3, [r1, r3]
 8005c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	40023800 	.word	0x40023800
 8005c14:	08010fe4 	.word	0x08010fe4

08005c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c1c:	f7ff ffdc 	bl	8005bd8 <HAL_RCC_GetHCLKFreq>
 8005c20:	4602      	mov	r2, r0
 8005c22:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	0b5b      	lsrs	r3, r3, #13
 8005c28:	f003 0307 	and.w	r3, r3, #7
 8005c2c:	4903      	ldr	r1, [pc, #12]	; (8005c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c2e:	5ccb      	ldrb	r3, [r1, r3]
 8005c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40023800 	.word	0x40023800
 8005c3c:	08010fe4 	.word	0x08010fe4

08005c40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e03f      	b.n	8005cd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d106      	bne.n	8005c6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7fc fc22 	bl	80024b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2224      	movs	r2, #36	; 0x24
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f939 	bl	8005efc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	691a      	ldr	r2, [r3, #16]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695a      	ldr	r2, [r3, #20]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ca8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68da      	ldr	r2, [r3, #12]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b08a      	sub	sp, #40	; 0x28
 8005cde:	af02      	add	r7, sp, #8
 8005ce0:	60f8      	str	r0, [r7, #12]
 8005ce2:	60b9      	str	r1, [r7, #8]
 8005ce4:	603b      	str	r3, [r7, #0]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	f040 808c 	bne.w	8005e14 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <HAL_UART_Receive+0x2e>
 8005d02:	88fb      	ldrh	r3, [r7, #6]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e084      	b.n	8005e16 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d101      	bne.n	8005d1a <HAL_UART_Receive+0x40>
 8005d16:	2302      	movs	r3, #2
 8005d18:	e07d      	b.n	8005e16 <HAL_UART_Receive+0x13c>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2222      	movs	r2, #34	; 0x22
 8005d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d36:	f7fc fd9f 	bl	8002878 <HAL_GetTick>
 8005d3a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	88fa      	ldrh	r2, [r7, #6]
 8005d40:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	88fa      	ldrh	r2, [r7, #6]
 8005d46:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d50:	d108      	bne.n	8005d64 <HAL_UART_Receive+0x8a>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d104      	bne.n	8005d64 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	61bb      	str	r3, [r7, #24]
 8005d62:	e003      	b.n	8005d6c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005d74:	e043      	b.n	8005dfe <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	2120      	movs	r1, #32
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 f84c 	bl	8005e1e <UART_WaitOnFlagUntilTimeout>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e042      	b.n	8005e16 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10c      	bne.n	8005db0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	3302      	adds	r3, #2
 8005dac:	61bb      	str	r3, [r7, #24]
 8005dae:	e01f      	b.n	8005df0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db8:	d007      	beq.n	8005dca <HAL_UART_Receive+0xf0>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10a      	bne.n	8005dd8 <HAL_UART_Receive+0xfe>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d106      	bne.n	8005dd8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	701a      	strb	r2, [r3, #0]
 8005dd6:	e008      	b.n	8005dea <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	3301      	adds	r3, #1
 8005dee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	3b01      	subs	r3, #1
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1b6      	bne.n	8005d76 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005e10:	2300      	movs	r3, #0
 8005e12:	e000      	b.n	8005e16 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005e14:	2302      	movs	r3, #2
  }
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3720      	adds	r7, #32
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b090      	sub	sp, #64	; 0x40
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	60f8      	str	r0, [r7, #12]
 8005e26:	60b9      	str	r1, [r7, #8]
 8005e28:	603b      	str	r3, [r7, #0]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e2e:	e050      	b.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e36:	d04c      	beq.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d007      	beq.n	8005e4e <UART_WaitOnFlagUntilTimeout+0x30>
 8005e3e:	f7fc fd1b 	bl	8002878 <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d241      	bcs.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	330c      	adds	r3, #12
 8005e54:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e58:	e853 3f00 	ldrex	r3, [r3]
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	330c      	adds	r3, #12
 8005e6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e6e:	637a      	str	r2, [r7, #52]	; 0x34
 8005e70:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e76:	e841 2300 	strex	r3, r2, [r1]
 8005e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1e5      	bne.n	8005e4e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	3314      	adds	r3, #20
 8005e88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	e853 3f00 	ldrex	r3, [r3]
 8005e90:	613b      	str	r3, [r7, #16]
   return(result);
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f023 0301 	bic.w	r3, r3, #1
 8005e98:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	3314      	adds	r3, #20
 8005ea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ea2:	623a      	str	r2, [r7, #32]
 8005ea4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea6:	69f9      	ldr	r1, [r7, #28]
 8005ea8:	6a3a      	ldr	r2, [r7, #32]
 8005eaa:	e841 2300 	strex	r3, r2, [r1]
 8005eae:	61bb      	str	r3, [r7, #24]
   return(result);
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1e5      	bne.n	8005e82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e00f      	b.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	4013      	ands	r3, r2
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	bf0c      	ite	eq
 8005ee2:	2301      	moveq	r3, #1
 8005ee4:	2300      	movne	r3, #0
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	461a      	mov	r2, r3
 8005eea:	79fb      	ldrb	r3, [r7, #7]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d09f      	beq.n	8005e30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3740      	adds	r7, #64	; 0x40
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f00:	b0c0      	sub	sp, #256	; 0x100
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f18:	68d9      	ldr	r1, [r3, #12]
 8005f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	ea40 0301 	orr.w	r3, r0, r1
 8005f24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f2a:	689a      	ldr	r2, [r3, #8]
 8005f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	431a      	orrs	r2, r3
 8005f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f54:	f021 010c 	bic.w	r1, r1, #12
 8005f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f62:	430b      	orrs	r3, r1
 8005f64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f76:	6999      	ldr	r1, [r3, #24]
 8005f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	ea40 0301 	orr.w	r3, r0, r1
 8005f82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	4b8f      	ldr	r3, [pc, #572]	; (80061c8 <UART_SetConfig+0x2cc>)
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d005      	beq.n	8005f9c <UART_SetConfig+0xa0>
 8005f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	4b8d      	ldr	r3, [pc, #564]	; (80061cc <UART_SetConfig+0x2d0>)
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d104      	bne.n	8005fa6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f9c:	f7ff fe3c 	bl	8005c18 <HAL_RCC_GetPCLK2Freq>
 8005fa0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005fa4:	e003      	b.n	8005fae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fa6:	f7ff fe23 	bl	8005bf0 <HAL_RCC_GetPCLK1Freq>
 8005faa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb2:	69db      	ldr	r3, [r3, #28]
 8005fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fb8:	f040 810c 	bne.w	80061d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fc6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005fca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005fce:	4622      	mov	r2, r4
 8005fd0:	462b      	mov	r3, r5
 8005fd2:	1891      	adds	r1, r2, r2
 8005fd4:	65b9      	str	r1, [r7, #88]	; 0x58
 8005fd6:	415b      	adcs	r3, r3
 8005fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005fde:	4621      	mov	r1, r4
 8005fe0:	eb12 0801 	adds.w	r8, r2, r1
 8005fe4:	4629      	mov	r1, r5
 8005fe6:	eb43 0901 	adc.w	r9, r3, r1
 8005fea:	f04f 0200 	mov.w	r2, #0
 8005fee:	f04f 0300 	mov.w	r3, #0
 8005ff2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ff6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ffa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ffe:	4690      	mov	r8, r2
 8006000:	4699      	mov	r9, r3
 8006002:	4623      	mov	r3, r4
 8006004:	eb18 0303 	adds.w	r3, r8, r3
 8006008:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800600c:	462b      	mov	r3, r5
 800600e:	eb49 0303 	adc.w	r3, r9, r3
 8006012:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006022:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006026:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800602a:	460b      	mov	r3, r1
 800602c:	18db      	adds	r3, r3, r3
 800602e:	653b      	str	r3, [r7, #80]	; 0x50
 8006030:	4613      	mov	r3, r2
 8006032:	eb42 0303 	adc.w	r3, r2, r3
 8006036:	657b      	str	r3, [r7, #84]	; 0x54
 8006038:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800603c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006040:	f7fa fe22 	bl	8000c88 <__aeabi_uldivmod>
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	4b61      	ldr	r3, [pc, #388]	; (80061d0 <UART_SetConfig+0x2d4>)
 800604a:	fba3 2302 	umull	r2, r3, r3, r2
 800604e:	095b      	lsrs	r3, r3, #5
 8006050:	011c      	lsls	r4, r3, #4
 8006052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006056:	2200      	movs	r2, #0
 8006058:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800605c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006060:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006064:	4642      	mov	r2, r8
 8006066:	464b      	mov	r3, r9
 8006068:	1891      	adds	r1, r2, r2
 800606a:	64b9      	str	r1, [r7, #72]	; 0x48
 800606c:	415b      	adcs	r3, r3
 800606e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006070:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006074:	4641      	mov	r1, r8
 8006076:	eb12 0a01 	adds.w	sl, r2, r1
 800607a:	4649      	mov	r1, r9
 800607c:	eb43 0b01 	adc.w	fp, r3, r1
 8006080:	f04f 0200 	mov.w	r2, #0
 8006084:	f04f 0300 	mov.w	r3, #0
 8006088:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800608c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006090:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006094:	4692      	mov	sl, r2
 8006096:	469b      	mov	fp, r3
 8006098:	4643      	mov	r3, r8
 800609a:	eb1a 0303 	adds.w	r3, sl, r3
 800609e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060a2:	464b      	mov	r3, r9
 80060a4:	eb4b 0303 	adc.w	r3, fp, r3
 80060a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80060bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80060c0:	460b      	mov	r3, r1
 80060c2:	18db      	adds	r3, r3, r3
 80060c4:	643b      	str	r3, [r7, #64]	; 0x40
 80060c6:	4613      	mov	r3, r2
 80060c8:	eb42 0303 	adc.w	r3, r2, r3
 80060cc:	647b      	str	r3, [r7, #68]	; 0x44
 80060ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80060d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80060d6:	f7fa fdd7 	bl	8000c88 <__aeabi_uldivmod>
 80060da:	4602      	mov	r2, r0
 80060dc:	460b      	mov	r3, r1
 80060de:	4611      	mov	r1, r2
 80060e0:	4b3b      	ldr	r3, [pc, #236]	; (80061d0 <UART_SetConfig+0x2d4>)
 80060e2:	fba3 2301 	umull	r2, r3, r3, r1
 80060e6:	095b      	lsrs	r3, r3, #5
 80060e8:	2264      	movs	r2, #100	; 0x64
 80060ea:	fb02 f303 	mul.w	r3, r2, r3
 80060ee:	1acb      	subs	r3, r1, r3
 80060f0:	00db      	lsls	r3, r3, #3
 80060f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80060f6:	4b36      	ldr	r3, [pc, #216]	; (80061d0 <UART_SetConfig+0x2d4>)
 80060f8:	fba3 2302 	umull	r2, r3, r3, r2
 80060fc:	095b      	lsrs	r3, r3, #5
 80060fe:	005b      	lsls	r3, r3, #1
 8006100:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006104:	441c      	add	r4, r3
 8006106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800610a:	2200      	movs	r2, #0
 800610c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006110:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006114:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006118:	4642      	mov	r2, r8
 800611a:	464b      	mov	r3, r9
 800611c:	1891      	adds	r1, r2, r2
 800611e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006120:	415b      	adcs	r3, r3
 8006122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006124:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006128:	4641      	mov	r1, r8
 800612a:	1851      	adds	r1, r2, r1
 800612c:	6339      	str	r1, [r7, #48]	; 0x30
 800612e:	4649      	mov	r1, r9
 8006130:	414b      	adcs	r3, r1
 8006132:	637b      	str	r3, [r7, #52]	; 0x34
 8006134:	f04f 0200 	mov.w	r2, #0
 8006138:	f04f 0300 	mov.w	r3, #0
 800613c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006140:	4659      	mov	r1, fp
 8006142:	00cb      	lsls	r3, r1, #3
 8006144:	4651      	mov	r1, sl
 8006146:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800614a:	4651      	mov	r1, sl
 800614c:	00ca      	lsls	r2, r1, #3
 800614e:	4610      	mov	r0, r2
 8006150:	4619      	mov	r1, r3
 8006152:	4603      	mov	r3, r0
 8006154:	4642      	mov	r2, r8
 8006156:	189b      	adds	r3, r3, r2
 8006158:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800615c:	464b      	mov	r3, r9
 800615e:	460a      	mov	r2, r1
 8006160:	eb42 0303 	adc.w	r3, r2, r3
 8006164:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006174:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006178:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800617c:	460b      	mov	r3, r1
 800617e:	18db      	adds	r3, r3, r3
 8006180:	62bb      	str	r3, [r7, #40]	; 0x28
 8006182:	4613      	mov	r3, r2
 8006184:	eb42 0303 	adc.w	r3, r2, r3
 8006188:	62fb      	str	r3, [r7, #44]	; 0x2c
 800618a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800618e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006192:	f7fa fd79 	bl	8000c88 <__aeabi_uldivmod>
 8006196:	4602      	mov	r2, r0
 8006198:	460b      	mov	r3, r1
 800619a:	4b0d      	ldr	r3, [pc, #52]	; (80061d0 <UART_SetConfig+0x2d4>)
 800619c:	fba3 1302 	umull	r1, r3, r3, r2
 80061a0:	095b      	lsrs	r3, r3, #5
 80061a2:	2164      	movs	r1, #100	; 0x64
 80061a4:	fb01 f303 	mul.w	r3, r1, r3
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	3332      	adds	r3, #50	; 0x32
 80061ae:	4a08      	ldr	r2, [pc, #32]	; (80061d0 <UART_SetConfig+0x2d4>)
 80061b0:	fba2 2303 	umull	r2, r3, r2, r3
 80061b4:	095b      	lsrs	r3, r3, #5
 80061b6:	f003 0207 	and.w	r2, r3, #7
 80061ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4422      	add	r2, r4
 80061c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80061c4:	e106      	b.n	80063d4 <UART_SetConfig+0x4d8>
 80061c6:	bf00      	nop
 80061c8:	40011000 	.word	0x40011000
 80061cc:	40011400 	.word	0x40011400
 80061d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061d8:	2200      	movs	r2, #0
 80061da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80061e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80061e6:	4642      	mov	r2, r8
 80061e8:	464b      	mov	r3, r9
 80061ea:	1891      	adds	r1, r2, r2
 80061ec:	6239      	str	r1, [r7, #32]
 80061ee:	415b      	adcs	r3, r3
 80061f0:	627b      	str	r3, [r7, #36]	; 0x24
 80061f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061f6:	4641      	mov	r1, r8
 80061f8:	1854      	adds	r4, r2, r1
 80061fa:	4649      	mov	r1, r9
 80061fc:	eb43 0501 	adc.w	r5, r3, r1
 8006200:	f04f 0200 	mov.w	r2, #0
 8006204:	f04f 0300 	mov.w	r3, #0
 8006208:	00eb      	lsls	r3, r5, #3
 800620a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800620e:	00e2      	lsls	r2, r4, #3
 8006210:	4614      	mov	r4, r2
 8006212:	461d      	mov	r5, r3
 8006214:	4643      	mov	r3, r8
 8006216:	18e3      	adds	r3, r4, r3
 8006218:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800621c:	464b      	mov	r3, r9
 800621e:	eb45 0303 	adc.w	r3, r5, r3
 8006222:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006232:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006236:	f04f 0200 	mov.w	r2, #0
 800623a:	f04f 0300 	mov.w	r3, #0
 800623e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006242:	4629      	mov	r1, r5
 8006244:	008b      	lsls	r3, r1, #2
 8006246:	4621      	mov	r1, r4
 8006248:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800624c:	4621      	mov	r1, r4
 800624e:	008a      	lsls	r2, r1, #2
 8006250:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006254:	f7fa fd18 	bl	8000c88 <__aeabi_uldivmod>
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
 800625c:	4b60      	ldr	r3, [pc, #384]	; (80063e0 <UART_SetConfig+0x4e4>)
 800625e:	fba3 2302 	umull	r2, r3, r3, r2
 8006262:	095b      	lsrs	r3, r3, #5
 8006264:	011c      	lsls	r4, r3, #4
 8006266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800626a:	2200      	movs	r2, #0
 800626c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006270:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006274:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006278:	4642      	mov	r2, r8
 800627a:	464b      	mov	r3, r9
 800627c:	1891      	adds	r1, r2, r2
 800627e:	61b9      	str	r1, [r7, #24]
 8006280:	415b      	adcs	r3, r3
 8006282:	61fb      	str	r3, [r7, #28]
 8006284:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006288:	4641      	mov	r1, r8
 800628a:	1851      	adds	r1, r2, r1
 800628c:	6139      	str	r1, [r7, #16]
 800628e:	4649      	mov	r1, r9
 8006290:	414b      	adcs	r3, r1
 8006292:	617b      	str	r3, [r7, #20]
 8006294:	f04f 0200 	mov.w	r2, #0
 8006298:	f04f 0300 	mov.w	r3, #0
 800629c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062a0:	4659      	mov	r1, fp
 80062a2:	00cb      	lsls	r3, r1, #3
 80062a4:	4651      	mov	r1, sl
 80062a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062aa:	4651      	mov	r1, sl
 80062ac:	00ca      	lsls	r2, r1, #3
 80062ae:	4610      	mov	r0, r2
 80062b0:	4619      	mov	r1, r3
 80062b2:	4603      	mov	r3, r0
 80062b4:	4642      	mov	r2, r8
 80062b6:	189b      	adds	r3, r3, r2
 80062b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062bc:	464b      	mov	r3, r9
 80062be:	460a      	mov	r2, r1
 80062c0:	eb42 0303 	adc.w	r3, r2, r3
 80062c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80062d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80062d4:	f04f 0200 	mov.w	r2, #0
 80062d8:	f04f 0300 	mov.w	r3, #0
 80062dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80062e0:	4649      	mov	r1, r9
 80062e2:	008b      	lsls	r3, r1, #2
 80062e4:	4641      	mov	r1, r8
 80062e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062ea:	4641      	mov	r1, r8
 80062ec:	008a      	lsls	r2, r1, #2
 80062ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80062f2:	f7fa fcc9 	bl	8000c88 <__aeabi_uldivmod>
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	4611      	mov	r1, r2
 80062fc:	4b38      	ldr	r3, [pc, #224]	; (80063e0 <UART_SetConfig+0x4e4>)
 80062fe:	fba3 2301 	umull	r2, r3, r3, r1
 8006302:	095b      	lsrs	r3, r3, #5
 8006304:	2264      	movs	r2, #100	; 0x64
 8006306:	fb02 f303 	mul.w	r3, r2, r3
 800630a:	1acb      	subs	r3, r1, r3
 800630c:	011b      	lsls	r3, r3, #4
 800630e:	3332      	adds	r3, #50	; 0x32
 8006310:	4a33      	ldr	r2, [pc, #204]	; (80063e0 <UART_SetConfig+0x4e4>)
 8006312:	fba2 2303 	umull	r2, r3, r2, r3
 8006316:	095b      	lsrs	r3, r3, #5
 8006318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800631c:	441c      	add	r4, r3
 800631e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006322:	2200      	movs	r2, #0
 8006324:	673b      	str	r3, [r7, #112]	; 0x70
 8006326:	677a      	str	r2, [r7, #116]	; 0x74
 8006328:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800632c:	4642      	mov	r2, r8
 800632e:	464b      	mov	r3, r9
 8006330:	1891      	adds	r1, r2, r2
 8006332:	60b9      	str	r1, [r7, #8]
 8006334:	415b      	adcs	r3, r3
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800633c:	4641      	mov	r1, r8
 800633e:	1851      	adds	r1, r2, r1
 8006340:	6039      	str	r1, [r7, #0]
 8006342:	4649      	mov	r1, r9
 8006344:	414b      	adcs	r3, r1
 8006346:	607b      	str	r3, [r7, #4]
 8006348:	f04f 0200 	mov.w	r2, #0
 800634c:	f04f 0300 	mov.w	r3, #0
 8006350:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006354:	4659      	mov	r1, fp
 8006356:	00cb      	lsls	r3, r1, #3
 8006358:	4651      	mov	r1, sl
 800635a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800635e:	4651      	mov	r1, sl
 8006360:	00ca      	lsls	r2, r1, #3
 8006362:	4610      	mov	r0, r2
 8006364:	4619      	mov	r1, r3
 8006366:	4603      	mov	r3, r0
 8006368:	4642      	mov	r2, r8
 800636a:	189b      	adds	r3, r3, r2
 800636c:	66bb      	str	r3, [r7, #104]	; 0x68
 800636e:	464b      	mov	r3, r9
 8006370:	460a      	mov	r2, r1
 8006372:	eb42 0303 	adc.w	r3, r2, r3
 8006376:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	663b      	str	r3, [r7, #96]	; 0x60
 8006382:	667a      	str	r2, [r7, #100]	; 0x64
 8006384:	f04f 0200 	mov.w	r2, #0
 8006388:	f04f 0300 	mov.w	r3, #0
 800638c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006390:	4649      	mov	r1, r9
 8006392:	008b      	lsls	r3, r1, #2
 8006394:	4641      	mov	r1, r8
 8006396:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800639a:	4641      	mov	r1, r8
 800639c:	008a      	lsls	r2, r1, #2
 800639e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80063a2:	f7fa fc71 	bl	8000c88 <__aeabi_uldivmod>
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	4b0d      	ldr	r3, [pc, #52]	; (80063e0 <UART_SetConfig+0x4e4>)
 80063ac:	fba3 1302 	umull	r1, r3, r3, r2
 80063b0:	095b      	lsrs	r3, r3, #5
 80063b2:	2164      	movs	r1, #100	; 0x64
 80063b4:	fb01 f303 	mul.w	r3, r1, r3
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	011b      	lsls	r3, r3, #4
 80063bc:	3332      	adds	r3, #50	; 0x32
 80063be:	4a08      	ldr	r2, [pc, #32]	; (80063e0 <UART_SetConfig+0x4e4>)
 80063c0:	fba2 2303 	umull	r2, r3, r2, r3
 80063c4:	095b      	lsrs	r3, r3, #5
 80063c6:	f003 020f 	and.w	r2, r3, #15
 80063ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4422      	add	r2, r4
 80063d2:	609a      	str	r2, [r3, #8]
}
 80063d4:	bf00      	nop
 80063d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80063da:	46bd      	mov	sp, r7
 80063dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063e0:	51eb851f 	.word	0x51eb851f

080063e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063e4:	b084      	sub	sp, #16
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b084      	sub	sp, #16
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
 80063ee:	f107 001c 	add.w	r0, r7, #28
 80063f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d122      	bne.n	8006442 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006400:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006426:	2b01      	cmp	r3, #1
 8006428:	d105      	bne.n	8006436 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f001 fbee 	bl	8007c18 <USB_CoreReset>
 800643c:	4603      	mov	r3, r0
 800643e:	73fb      	strb	r3, [r7, #15]
 8006440:	e01a      	b.n	8006478 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f001 fbe2 	bl	8007c18 <USB_CoreReset>
 8006454:	4603      	mov	r3, r0
 8006456:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800645a:	2b00      	cmp	r3, #0
 800645c:	d106      	bne.n	800646c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006462:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	639a      	str	r2, [r3, #56]	; 0x38
 800646a:	e005      	b.n	8006478 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006470:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647a:	2b01      	cmp	r3, #1
 800647c:	d10b      	bne.n	8006496 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f043 0206 	orr.w	r2, r3, #6
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f043 0220 	orr.w	r2, r3, #32
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006496:	7bfb      	ldrb	r3, [r7, #15]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064a2:	b004      	add	sp, #16
 80064a4:	4770      	bx	lr
	...

080064a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	4613      	mov	r3, r2
 80064b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80064b6:	79fb      	ldrb	r3, [r7, #7]
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d165      	bne.n	8006588 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	4a41      	ldr	r2, [pc, #260]	; (80065c4 <USB_SetTurnaroundTime+0x11c>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d906      	bls.n	80064d2 <USB_SetTurnaroundTime+0x2a>
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	4a40      	ldr	r2, [pc, #256]	; (80065c8 <USB_SetTurnaroundTime+0x120>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d202      	bcs.n	80064d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80064cc:	230f      	movs	r3, #15
 80064ce:	617b      	str	r3, [r7, #20]
 80064d0:	e062      	b.n	8006598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	4a3c      	ldr	r2, [pc, #240]	; (80065c8 <USB_SetTurnaroundTime+0x120>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d306      	bcc.n	80064e8 <USB_SetTurnaroundTime+0x40>
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	4a3b      	ldr	r2, [pc, #236]	; (80065cc <USB_SetTurnaroundTime+0x124>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d202      	bcs.n	80064e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80064e2:	230e      	movs	r3, #14
 80064e4:	617b      	str	r3, [r7, #20]
 80064e6:	e057      	b.n	8006598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4a38      	ldr	r2, [pc, #224]	; (80065cc <USB_SetTurnaroundTime+0x124>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d306      	bcc.n	80064fe <USB_SetTurnaroundTime+0x56>
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	4a37      	ldr	r2, [pc, #220]	; (80065d0 <USB_SetTurnaroundTime+0x128>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d202      	bcs.n	80064fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80064f8:	230d      	movs	r3, #13
 80064fa:	617b      	str	r3, [r7, #20]
 80064fc:	e04c      	b.n	8006598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	4a33      	ldr	r2, [pc, #204]	; (80065d0 <USB_SetTurnaroundTime+0x128>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d306      	bcc.n	8006514 <USB_SetTurnaroundTime+0x6c>
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	4a32      	ldr	r2, [pc, #200]	; (80065d4 <USB_SetTurnaroundTime+0x12c>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d802      	bhi.n	8006514 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800650e:	230c      	movs	r3, #12
 8006510:	617b      	str	r3, [r7, #20]
 8006512:	e041      	b.n	8006598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	4a2f      	ldr	r2, [pc, #188]	; (80065d4 <USB_SetTurnaroundTime+0x12c>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d906      	bls.n	800652a <USB_SetTurnaroundTime+0x82>
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	4a2e      	ldr	r2, [pc, #184]	; (80065d8 <USB_SetTurnaroundTime+0x130>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d802      	bhi.n	800652a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006524:	230b      	movs	r3, #11
 8006526:	617b      	str	r3, [r7, #20]
 8006528:	e036      	b.n	8006598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	4a2a      	ldr	r2, [pc, #168]	; (80065d8 <USB_SetTurnaroundTime+0x130>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d906      	bls.n	8006540 <USB_SetTurnaroundTime+0x98>
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	4a29      	ldr	r2, [pc, #164]	; (80065dc <USB_SetTurnaroundTime+0x134>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d802      	bhi.n	8006540 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800653a:	230a      	movs	r3, #10
 800653c:	617b      	str	r3, [r7, #20]
 800653e:	e02b      	b.n	8006598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4a26      	ldr	r2, [pc, #152]	; (80065dc <USB_SetTurnaroundTime+0x134>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d906      	bls.n	8006556 <USB_SetTurnaroundTime+0xae>
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	4a25      	ldr	r2, [pc, #148]	; (80065e0 <USB_SetTurnaroundTime+0x138>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d202      	bcs.n	8006556 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006550:	2309      	movs	r3, #9
 8006552:	617b      	str	r3, [r7, #20]
 8006554:	e020      	b.n	8006598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	4a21      	ldr	r2, [pc, #132]	; (80065e0 <USB_SetTurnaroundTime+0x138>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d306      	bcc.n	800656c <USB_SetTurnaroundTime+0xc4>
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	4a20      	ldr	r2, [pc, #128]	; (80065e4 <USB_SetTurnaroundTime+0x13c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d802      	bhi.n	800656c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006566:	2308      	movs	r3, #8
 8006568:	617b      	str	r3, [r7, #20]
 800656a:	e015      	b.n	8006598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	4a1d      	ldr	r2, [pc, #116]	; (80065e4 <USB_SetTurnaroundTime+0x13c>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d906      	bls.n	8006582 <USB_SetTurnaroundTime+0xda>
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	4a1c      	ldr	r2, [pc, #112]	; (80065e8 <USB_SetTurnaroundTime+0x140>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d202      	bcs.n	8006582 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800657c:	2307      	movs	r3, #7
 800657e:	617b      	str	r3, [r7, #20]
 8006580:	e00a      	b.n	8006598 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006582:	2306      	movs	r3, #6
 8006584:	617b      	str	r3, [r7, #20]
 8006586:	e007      	b.n	8006598 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006588:	79fb      	ldrb	r3, [r7, #7]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d102      	bne.n	8006594 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800658e:	2309      	movs	r3, #9
 8006590:	617b      	str	r3, [r7, #20]
 8006592:	e001      	b.n	8006598 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006594:	2309      	movs	r3, #9
 8006596:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	68da      	ldr	r2, [r3, #12]
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	029b      	lsls	r3, r3, #10
 80065ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80065b0:	431a      	orrs	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	371c      	adds	r7, #28
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	00d8acbf 	.word	0x00d8acbf
 80065c8:	00e4e1c0 	.word	0x00e4e1c0
 80065cc:	00f42400 	.word	0x00f42400
 80065d0:	01067380 	.word	0x01067380
 80065d4:	011a499f 	.word	0x011a499f
 80065d8:	01312cff 	.word	0x01312cff
 80065dc:	014ca43f 	.word	0x014ca43f
 80065e0:	016e3600 	.word	0x016e3600
 80065e4:	01a6ab1f 	.word	0x01a6ab1f
 80065e8:	01e84800 	.word	0x01e84800

080065ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f043 0201 	orr.w	r2, r3, #1
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800660e:	b480      	push	{r7}
 8006610:	b083      	sub	sp, #12
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f023 0201 	bic.w	r2, r3, #1
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	460b      	mov	r3, r1
 800663a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800663c:	2300      	movs	r3, #0
 800663e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800664c:	78fb      	ldrb	r3, [r7, #3]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d115      	bne.n	800667e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800665e:	2001      	movs	r0, #1
 8006660:	f7fc f916 	bl	8002890 <HAL_Delay>
      ms++;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	3301      	adds	r3, #1
 8006668:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f001 fa45 	bl	8007afa <USB_GetMode>
 8006670:	4603      	mov	r3, r0
 8006672:	2b01      	cmp	r3, #1
 8006674:	d01e      	beq.n	80066b4 <USB_SetCurrentMode+0x84>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2b31      	cmp	r3, #49	; 0x31
 800667a:	d9f0      	bls.n	800665e <USB_SetCurrentMode+0x2e>
 800667c:	e01a      	b.n	80066b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800667e:	78fb      	ldrb	r3, [r7, #3]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d115      	bne.n	80066b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006690:	2001      	movs	r0, #1
 8006692:	f7fc f8fd 	bl	8002890 <HAL_Delay>
      ms++;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	3301      	adds	r3, #1
 800669a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f001 fa2c 	bl	8007afa <USB_GetMode>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d005      	beq.n	80066b4 <USB_SetCurrentMode+0x84>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2b31      	cmp	r3, #49	; 0x31
 80066ac:	d9f0      	bls.n	8006690 <USB_SetCurrentMode+0x60>
 80066ae:	e001      	b.n	80066b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e005      	b.n	80066c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2b32      	cmp	r3, #50	; 0x32
 80066b8:	d101      	bne.n	80066be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e000      	b.n	80066c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066c8:	b084      	sub	sp, #16
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b086      	sub	sp, #24
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80066d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066da:	2300      	movs	r3, #0
 80066dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80066e2:	2300      	movs	r3, #0
 80066e4:	613b      	str	r3, [r7, #16]
 80066e6:	e009      	b.n	80066fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	3340      	adds	r3, #64	; 0x40
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	2200      	movs	r2, #0
 80066f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	3301      	adds	r3, #1
 80066fa:	613b      	str	r3, [r7, #16]
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	2b0e      	cmp	r3, #14
 8006700:	d9f2      	bls.n	80066e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006704:	2b00      	cmp	r3, #0
 8006706:	d11c      	bne.n	8006742 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006716:	f043 0302 	orr.w	r3, r3, #2
 800671a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006720:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006738:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	639a      	str	r2, [r3, #56]	; 0x38
 8006740:	e00b      	b.n	800675a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006746:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006752:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006760:	461a      	mov	r2, r3
 8006762:	2300      	movs	r3, #0
 8006764:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800676c:	4619      	mov	r1, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006774:	461a      	mov	r2, r3
 8006776:	680b      	ldr	r3, [r1, #0]
 8006778:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800677a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677c:	2b01      	cmp	r3, #1
 800677e:	d10c      	bne.n	800679a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006782:	2b00      	cmp	r3, #0
 8006784:	d104      	bne.n	8006790 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006786:	2100      	movs	r1, #0
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f965 	bl	8006a58 <USB_SetDevSpeed>
 800678e:	e008      	b.n	80067a2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006790:	2101      	movs	r1, #1
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f960 	bl	8006a58 <USB_SetDevSpeed>
 8006798:	e003      	b.n	80067a2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800679a:	2103      	movs	r1, #3
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f95b 	bl	8006a58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067a2:	2110      	movs	r1, #16
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f8f3 	bl	8006990 <USB_FlushTxFifo>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d001      	beq.n	80067b4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f91f 	bl	80069f8 <USB_FlushRxFifo>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ca:	461a      	mov	r2, r3
 80067cc:	2300      	movs	r3, #0
 80067ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d6:	461a      	mov	r2, r3
 80067d8:	2300      	movs	r3, #0
 80067da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e2:	461a      	mov	r2, r3
 80067e4:	2300      	movs	r3, #0
 80067e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067e8:	2300      	movs	r3, #0
 80067ea:	613b      	str	r3, [r7, #16]
 80067ec:	e043      	b.n	8006876 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006800:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006804:	d118      	bne.n	8006838 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10a      	bne.n	8006822 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4413      	add	r3, r2
 8006814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006818:	461a      	mov	r2, r3
 800681a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800681e:	6013      	str	r3, [r2, #0]
 8006820:	e013      	b.n	800684a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	4413      	add	r3, r2
 800682a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800682e:	461a      	mov	r2, r3
 8006830:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	e008      	b.n	800684a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006844:	461a      	mov	r2, r3
 8006846:	2300      	movs	r3, #0
 8006848:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4413      	add	r3, r2
 8006852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006856:	461a      	mov	r2, r3
 8006858:	2300      	movs	r3, #0
 800685a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	015a      	lsls	r2, r3, #5
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4413      	add	r3, r2
 8006864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006868:	461a      	mov	r2, r3
 800686a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800686e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	3301      	adds	r3, #1
 8006874:	613b      	str	r3, [r7, #16]
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	429a      	cmp	r2, r3
 800687c:	d3b7      	bcc.n	80067ee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800687e:	2300      	movs	r3, #0
 8006880:	613b      	str	r3, [r7, #16]
 8006882:	e043      	b.n	800690c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4413      	add	r3, r2
 800688c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006896:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800689a:	d118      	bne.n	80068ce <USB_DevInit+0x206>
    {
      if (i == 0U)
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10a      	bne.n	80068b8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	015a      	lsls	r2, r3, #5
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	4413      	add	r3, r2
 80068aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ae:	461a      	mov	r2, r3
 80068b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80068b4:	6013      	str	r3, [r2, #0]
 80068b6:	e013      	b.n	80068e0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c4:	461a      	mov	r2, r3
 80068c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80068ca:	6013      	str	r3, [r2, #0]
 80068cc:	e008      	b.n	80068e0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068da:	461a      	mov	r2, r3
 80068dc:	2300      	movs	r3, #0
 80068de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ec:	461a      	mov	r2, r3
 80068ee:	2300      	movs	r3, #0
 80068f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fe:	461a      	mov	r2, r3
 8006900:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006904:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	3301      	adds	r3, #1
 800690a:	613b      	str	r3, [r7, #16]
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	429a      	cmp	r2, r3
 8006912:	d3b7      	bcc.n	8006884 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006922:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006926:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006934:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	2b00      	cmp	r3, #0
 800693a:	d105      	bne.n	8006948 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	f043 0210 	orr.w	r2, r3, #16
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	699a      	ldr	r2, [r3, #24]
 800694c:	4b0f      	ldr	r3, [pc, #60]	; (800698c <USB_DevInit+0x2c4>)
 800694e:	4313      	orrs	r3, r2
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006956:	2b00      	cmp	r3, #0
 8006958:	d005      	beq.n	8006966 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	f043 0208 	orr.w	r2, r3, #8
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006968:	2b01      	cmp	r3, #1
 800696a:	d107      	bne.n	800697c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006974:	f043 0304 	orr.w	r3, r3, #4
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800697c:	7dfb      	ldrb	r3, [r7, #23]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3718      	adds	r7, #24
 8006982:	46bd      	mov	sp, r7
 8006984:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006988:	b004      	add	sp, #16
 800698a:	4770      	bx	lr
 800698c:	803c3800 	.word	0x803c3800

08006990 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	3301      	adds	r3, #1
 80069a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4a13      	ldr	r2, [pc, #76]	; (80069f4 <USB_FlushTxFifo+0x64>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d901      	bls.n	80069b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e01b      	b.n	80069e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	daf2      	bge.n	800699e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	019b      	lsls	r3, r3, #6
 80069c0:	f043 0220 	orr.w	r2, r3, #32
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	3301      	adds	r3, #1
 80069cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	4a08      	ldr	r2, [pc, #32]	; (80069f4 <USB_FlushTxFifo+0x64>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d901      	bls.n	80069da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e006      	b.n	80069e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	f003 0320 	and.w	r3, r3, #32
 80069e2:	2b20      	cmp	r3, #32
 80069e4:	d0f0      	beq.n	80069c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr
 80069f4:	00030d40 	.word	0x00030d40

080069f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	3301      	adds	r3, #1
 8006a08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4a11      	ldr	r2, [pc, #68]	; (8006a54 <USB_FlushRxFifo+0x5c>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d901      	bls.n	8006a16 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e018      	b.n	8006a48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	daf2      	bge.n	8006a04 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2210      	movs	r2, #16
 8006a26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	4a08      	ldr	r2, [pc, #32]	; (8006a54 <USB_FlushRxFifo+0x5c>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d901      	bls.n	8006a3a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e006      	b.n	8006a48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	f003 0310 	and.w	r3, r3, #16
 8006a42:	2b10      	cmp	r3, #16
 8006a44:	d0f0      	beq.n	8006a28 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr
 8006a54:	00030d40 	.word	0x00030d40

08006a58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	460b      	mov	r3, r1
 8006a62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	78fb      	ldrb	r3, [r7, #3]
 8006a72:	68f9      	ldr	r1, [r7, #12]
 8006a74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b087      	sub	sp, #28
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f003 0306 	and.w	r3, r3, #6
 8006aa2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d102      	bne.n	8006ab0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	75fb      	strb	r3, [r7, #23]
 8006aae:	e00a      	b.n	8006ac6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d002      	beq.n	8006abc <USB_GetDevSpeed+0x32>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2b06      	cmp	r3, #6
 8006aba:	d102      	bne.n	8006ac2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006abc:	2302      	movs	r3, #2
 8006abe:	75fb      	strb	r3, [r7, #23]
 8006ac0:	e001      	b.n	8006ac6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006ac2:	230f      	movs	r3, #15
 8006ac4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	371c      	adds	r7, #28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	785b      	ldrb	r3, [r3, #1]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d13a      	bne.n	8006b66 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006af6:	69da      	ldr	r2, [r3, #28]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	f003 030f 	and.w	r3, r3, #15
 8006b00:	2101      	movs	r1, #1
 8006b02:	fa01 f303 	lsl.w	r3, r1, r3
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	68f9      	ldr	r1, [r7, #12]
 8006b0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d155      	bne.n	8006bd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	791b      	ldrb	r3, [r3, #4]
 8006b42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	059b      	lsls	r3, r3, #22
 8006b4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	0151      	lsls	r1, r2, #5
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	440a      	add	r2, r1
 8006b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b62:	6013      	str	r3, [r2, #0]
 8006b64:	e036      	b.n	8006bd4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b6c:	69da      	ldr	r2, [r3, #28]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	f003 030f 	and.w	r3, r3, #15
 8006b76:	2101      	movs	r1, #1
 8006b78:	fa01 f303 	lsl.w	r3, r1, r3
 8006b7c:	041b      	lsls	r3, r3, #16
 8006b7e:	68f9      	ldr	r1, [r7, #12]
 8006b80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b84:	4313      	orrs	r3, r2
 8006b86:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d11a      	bne.n	8006bd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	791b      	ldrb	r3, [r3, #4]
 8006bb8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006bba:	430b      	orrs	r3, r1
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	0151      	lsls	r1, r2, #5
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	440a      	add	r2, r1
 8006bc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bd2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
	...

08006be4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	785b      	ldrb	r3, [r3, #1]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d161      	bne.n	8006cc4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c16:	d11f      	bne.n	8006c58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	0151      	lsls	r1, r2, #5
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	440a      	add	r2, r1
 8006c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	0151      	lsls	r1, r2, #5
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	440a      	add	r2, r1
 8006c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	f003 030f 	and.w	r3, r3, #15
 8006c68:	2101      	movs	r1, #1
 8006c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	43db      	mvns	r3, r3
 8006c72:	68f9      	ldr	r1, [r7, #12]
 8006c74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c78:	4013      	ands	r3, r2
 8006c7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c82:	69da      	ldr	r2, [r3, #28]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	f003 030f 	and.w	r3, r3, #15
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	43db      	mvns	r3, r3
 8006c96:	68f9      	ldr	r1, [r7, #12]
 8006c98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	0159      	lsls	r1, r3, #5
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	440b      	add	r3, r1
 8006cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cba:	4619      	mov	r1, r3
 8006cbc:	4b35      	ldr	r3, [pc, #212]	; (8006d94 <USB_DeactivateEndpoint+0x1b0>)
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	600b      	str	r3, [r1, #0]
 8006cc2:	e060      	b.n	8006d86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cda:	d11f      	bne.n	8006d1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	015a      	lsls	r2, r3, #5
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	0151      	lsls	r1, r2, #5
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	440a      	add	r2, r1
 8006cf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cf6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006cfa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	0151      	lsls	r1, r2, #5
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	440a      	add	r2, r1
 8006d12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	f003 030f 	and.w	r3, r3, #15
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d32:	041b      	lsls	r3, r3, #16
 8006d34:	43db      	mvns	r3, r3
 8006d36:	68f9      	ldr	r1, [r7, #12]
 8006d38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d46:	69da      	ldr	r2, [r3, #28]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	f003 030f 	and.w	r3, r3, #15
 8006d50:	2101      	movs	r1, #1
 8006d52:	fa01 f303 	lsl.w	r3, r1, r3
 8006d56:	041b      	lsls	r3, r3, #16
 8006d58:	43db      	mvns	r3, r3
 8006d5a:	68f9      	ldr	r1, [r7, #12]
 8006d5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d60:	4013      	ands	r3, r2
 8006d62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	0159      	lsls	r1, r3, #5
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	440b      	add	r3, r1
 8006d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d7e:	4619      	mov	r1, r3
 8006d80:	4b05      	ldr	r3, [pc, #20]	; (8006d98 <USB_DeactivateEndpoint+0x1b4>)
 8006d82:	4013      	ands	r3, r2
 8006d84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3714      	adds	r7, #20
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	ec337800 	.word	0xec337800
 8006d98:	eff37800 	.word	0xeff37800

08006d9c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b08a      	sub	sp, #40	; 0x28
 8006da0:	af02      	add	r7, sp, #8
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	4613      	mov	r3, r2
 8006da8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	785b      	ldrb	r3, [r3, #1]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	f040 815c 	bne.w	8007076 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d132      	bne.n	8006e2c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	69ba      	ldr	r2, [r7, #24]
 8006dd6:	0151      	lsls	r1, r2, #5
 8006dd8:	69fa      	ldr	r2, [r7, #28]
 8006dda:	440a      	add	r2, r1
 8006ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006de0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006de4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006de8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	015a      	lsls	r2, r3, #5
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	4413      	add	r3, r2
 8006df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	69ba      	ldr	r2, [r7, #24]
 8006dfa:	0151      	lsls	r1, r2, #5
 8006dfc:	69fa      	ldr	r2, [r7, #28]
 8006dfe:	440a      	add	r2, r1
 8006e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	015a      	lsls	r2, r3, #5
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	4413      	add	r3, r2
 8006e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	0151      	lsls	r1, r2, #5
 8006e1c:	69fa      	ldr	r2, [r7, #28]
 8006e1e:	440a      	add	r2, r1
 8006e20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e24:	0cdb      	lsrs	r3, r3, #19
 8006e26:	04db      	lsls	r3, r3, #19
 8006e28:	6113      	str	r3, [r2, #16]
 8006e2a:	e074      	b.n	8006f16 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	0151      	lsls	r1, r2, #5
 8006e3e:	69fa      	ldr	r2, [r7, #28]
 8006e40:	440a      	add	r2, r1
 8006e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e46:	0cdb      	lsrs	r3, r3, #19
 8006e48:	04db      	lsls	r3, r3, #19
 8006e4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	015a      	lsls	r2, r3, #5
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	69ba      	ldr	r2, [r7, #24]
 8006e5c:	0151      	lsls	r1, r2, #5
 8006e5e:	69fa      	ldr	r2, [r7, #28]
 8006e60:	440a      	add	r2, r1
 8006e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e7c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	6999      	ldr	r1, [r3, #24]
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	440b      	add	r3, r1
 8006e88:	1e59      	subs	r1, r3, #1
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e92:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006e94:	4b9d      	ldr	r3, [pc, #628]	; (800710c <USB_EPStartXfer+0x370>)
 8006e96:	400b      	ands	r3, r1
 8006e98:	69b9      	ldr	r1, [r7, #24]
 8006e9a:	0148      	lsls	r0, r1, #5
 8006e9c:	69f9      	ldr	r1, [r7, #28]
 8006e9e:	4401      	add	r1, r0
 8006ea0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	015a      	lsls	r2, r3, #5
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb4:	691a      	ldr	r2, [r3, #16]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ebe:	69b9      	ldr	r1, [r7, #24]
 8006ec0:	0148      	lsls	r0, r1, #5
 8006ec2:	69f9      	ldr	r1, [r7, #28]
 8006ec4:	4401      	add	r1, r0
 8006ec6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	791b      	ldrb	r3, [r3, #4]
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d11f      	bne.n	8006f16 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	015a      	lsls	r2, r3, #5
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	4413      	add	r3, r2
 8006ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	69ba      	ldr	r2, [r7, #24]
 8006ee6:	0151      	lsls	r1, r2, #5
 8006ee8:	69fa      	ldr	r2, [r7, #28]
 8006eea:	440a      	add	r2, r1
 8006eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ef0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006ef4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	69ba      	ldr	r2, [r7, #24]
 8006f06:	0151      	lsls	r1, r2, #5
 8006f08:	69fa      	ldr	r2, [r7, #28]
 8006f0a:	440a      	add	r2, r1
 8006f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f14:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006f16:	79fb      	ldrb	r3, [r7, #7]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d14b      	bne.n	8006fb4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d009      	beq.n	8006f38 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f30:	461a      	mov	r2, r3
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	791b      	ldrb	r3, [r3, #4]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d128      	bne.n	8006f92 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d110      	bne.n	8006f72 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	015a      	lsls	r2, r3, #5
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	4413      	add	r3, r2
 8006f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	69ba      	ldr	r2, [r7, #24]
 8006f60:	0151      	lsls	r1, r2, #5
 8006f62:	69fa      	ldr	r2, [r7, #28]
 8006f64:	440a      	add	r2, r1
 8006f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f6e:	6013      	str	r3, [r2, #0]
 8006f70:	e00f      	b.n	8006f92 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	015a      	lsls	r2, r3, #5
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	4413      	add	r3, r2
 8006f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	69ba      	ldr	r2, [r7, #24]
 8006f82:	0151      	lsls	r1, r2, #5
 8006f84:	69fa      	ldr	r2, [r7, #28]
 8006f86:	440a      	add	r2, r1
 8006f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f90:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	0151      	lsls	r1, r2, #5
 8006fa4:	69fa      	ldr	r2, [r7, #28]
 8006fa6:	440a      	add	r2, r1
 8006fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fb0:	6013      	str	r3, [r2, #0]
 8006fb2:	e133      	b.n	800721c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	69ba      	ldr	r2, [r7, #24]
 8006fc4:	0151      	lsls	r1, r2, #5
 8006fc6:	69fa      	ldr	r2, [r7, #28]
 8006fc8:	440a      	add	r2, r1
 8006fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fd2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	791b      	ldrb	r3, [r3, #4]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d015      	beq.n	8007008 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 811b 	beq.w	800721c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	f003 030f 	and.w	r3, r3, #15
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8006ffc:	69f9      	ldr	r1, [r7, #28]
 8006ffe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007002:	4313      	orrs	r3, r2
 8007004:	634b      	str	r3, [r1, #52]	; 0x34
 8007006:	e109      	b.n	800721c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007014:	2b00      	cmp	r3, #0
 8007016:	d110      	bne.n	800703a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	015a      	lsls	r2, r3, #5
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	4413      	add	r3, r2
 8007020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	0151      	lsls	r1, r2, #5
 800702a:	69fa      	ldr	r2, [r7, #28]
 800702c:	440a      	add	r2, r1
 800702e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007032:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007036:	6013      	str	r3, [r2, #0]
 8007038:	e00f      	b.n	800705a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	4413      	add	r3, r2
 8007042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	69ba      	ldr	r2, [r7, #24]
 800704a:	0151      	lsls	r1, r2, #5
 800704c:	69fa      	ldr	r2, [r7, #28]
 800704e:	440a      	add	r2, r1
 8007050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007058:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	6919      	ldr	r1, [r3, #16]
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	781a      	ldrb	r2, [r3, #0]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	b298      	uxth	r0, r3
 8007068:	79fb      	ldrb	r3, [r7, #7]
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	4603      	mov	r3, r0
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 fade 	bl	8007630 <USB_WritePacket>
 8007074:	e0d2      	b.n	800721c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	4413      	add	r3, r2
 800707e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	0151      	lsls	r1, r2, #5
 8007088:	69fa      	ldr	r2, [r7, #28]
 800708a:	440a      	add	r2, r1
 800708c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007090:	0cdb      	lsrs	r3, r3, #19
 8007092:	04db      	lsls	r3, r3, #19
 8007094:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	015a      	lsls	r2, r3, #5
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	4413      	add	r3, r2
 800709e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	69ba      	ldr	r2, [r7, #24]
 80070a6:	0151      	lsls	r1, r2, #5
 80070a8:	69fa      	ldr	r2, [r7, #28]
 80070aa:	440a      	add	r2, r1
 80070ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d126      	bne.n	8007110 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ce:	691a      	ldr	r2, [r3, #16]
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070d8:	69b9      	ldr	r1, [r7, #24]
 80070da:	0148      	lsls	r0, r1, #5
 80070dc:	69f9      	ldr	r1, [r7, #28]
 80070de:	4401      	add	r1, r0
 80070e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070e4:	4313      	orrs	r3, r2
 80070e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	015a      	lsls	r2, r3, #5
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	4413      	add	r3, r2
 80070f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	69ba      	ldr	r2, [r7, #24]
 80070f8:	0151      	lsls	r1, r2, #5
 80070fa:	69fa      	ldr	r2, [r7, #28]
 80070fc:	440a      	add	r2, r1
 80070fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007102:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007106:	6113      	str	r3, [r2, #16]
 8007108:	e03a      	b.n	8007180 <USB_EPStartXfer+0x3e4>
 800710a:	bf00      	nop
 800710c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	699a      	ldr	r2, [r3, #24]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	4413      	add	r3, r2
 800711a:	1e5a      	subs	r2, r3, #1
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	fbb2 f3f3 	udiv	r3, r2, r3
 8007124:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	8afa      	ldrh	r2, [r7, #22]
 800712c:	fb03 f202 	mul.w	r2, r3, r2
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	4413      	add	r3, r2
 800713c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007140:	691a      	ldr	r2, [r3, #16]
 8007142:	8afb      	ldrh	r3, [r7, #22]
 8007144:	04d9      	lsls	r1, r3, #19
 8007146:	4b38      	ldr	r3, [pc, #224]	; (8007228 <USB_EPStartXfer+0x48c>)
 8007148:	400b      	ands	r3, r1
 800714a:	69b9      	ldr	r1, [r7, #24]
 800714c:	0148      	lsls	r0, r1, #5
 800714e:	69f9      	ldr	r1, [r7, #28]
 8007150:	4401      	add	r1, r0
 8007152:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007156:	4313      	orrs	r3, r2
 8007158:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	4413      	add	r3, r2
 8007162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007166:	691a      	ldr	r2, [r3, #16]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	69db      	ldr	r3, [r3, #28]
 800716c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007170:	69b9      	ldr	r1, [r7, #24]
 8007172:	0148      	lsls	r0, r1, #5
 8007174:	69f9      	ldr	r1, [r7, #28]
 8007176:	4401      	add	r1, r0
 8007178:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800717c:	4313      	orrs	r3, r2
 800717e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007180:	79fb      	ldrb	r3, [r7, #7]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d10d      	bne.n	80071a2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d009      	beq.n	80071a2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	6919      	ldr	r1, [r3, #16]
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	015a      	lsls	r2, r3, #5
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	4413      	add	r3, r2
 800719a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800719e:	460a      	mov	r2, r1
 80071a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	791b      	ldrb	r3, [r3, #4]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d128      	bne.n	80071fc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d110      	bne.n	80071dc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	015a      	lsls	r2, r3, #5
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	4413      	add	r3, r2
 80071c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	69ba      	ldr	r2, [r7, #24]
 80071ca:	0151      	lsls	r1, r2, #5
 80071cc:	69fa      	ldr	r2, [r7, #28]
 80071ce:	440a      	add	r2, r1
 80071d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071d8:	6013      	str	r3, [r2, #0]
 80071da:	e00f      	b.n	80071fc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	015a      	lsls	r2, r3, #5
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	4413      	add	r3, r2
 80071e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	69ba      	ldr	r2, [r7, #24]
 80071ec:	0151      	lsls	r1, r2, #5
 80071ee:	69fa      	ldr	r2, [r7, #28]
 80071f0:	440a      	add	r2, r1
 80071f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	69ba      	ldr	r2, [r7, #24]
 800720c:	0151      	lsls	r1, r2, #5
 800720e:	69fa      	ldr	r2, [r7, #28]
 8007210:	440a      	add	r2, r1
 8007212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007216:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800721a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3720      	adds	r7, #32
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	1ff80000 	.word	0x1ff80000

0800722c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800722c:	b480      	push	{r7}
 800722e:	b087      	sub	sp, #28
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	4613      	mov	r3, r2
 8007238:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	785b      	ldrb	r3, [r3, #1]
 8007248:	2b01      	cmp	r3, #1
 800724a:	f040 80ce 	bne.w	80073ea <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d132      	bne.n	80072bc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	4413      	add	r3, r2
 800725e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	0151      	lsls	r1, r2, #5
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	440a      	add	r2, r1
 800726c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007270:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007274:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007278:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	4413      	add	r3, r2
 8007282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	0151      	lsls	r1, r2, #5
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	440a      	add	r2, r1
 8007290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007294:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007298:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	015a      	lsls	r2, r3, #5
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	4413      	add	r3, r2
 80072a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	0151      	lsls	r1, r2, #5
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	440a      	add	r2, r1
 80072b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072b4:	0cdb      	lsrs	r3, r3, #19
 80072b6:	04db      	lsls	r3, r3, #19
 80072b8:	6113      	str	r3, [r2, #16]
 80072ba:	e04e      	b.n	800735a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	0151      	lsls	r1, r2, #5
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	440a      	add	r2, r1
 80072d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072d6:	0cdb      	lsrs	r3, r3, #19
 80072d8:	04db      	lsls	r3, r3, #19
 80072da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	0151      	lsls	r1, r2, #5
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	440a      	add	r2, r1
 80072f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072fe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	699a      	ldr	r2, [r3, #24]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	429a      	cmp	r2, r3
 800730a:	d903      	bls.n	8007314 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	68da      	ldr	r2, [r3, #12]
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	0151      	lsls	r1, r2, #5
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	440a      	add	r2, r1
 800732a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800732e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007332:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	015a      	lsls	r2, r3, #5
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	4413      	add	r3, r2
 800733c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007340:	691a      	ldr	r2, [r3, #16]
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800734a:	6939      	ldr	r1, [r7, #16]
 800734c:	0148      	lsls	r0, r1, #5
 800734e:	6979      	ldr	r1, [r7, #20]
 8007350:	4401      	add	r1, r0
 8007352:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007356:	4313      	orrs	r3, r2
 8007358:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800735a:	79fb      	ldrb	r3, [r7, #7]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d11e      	bne.n	800739e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d009      	beq.n	800737c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	015a      	lsls	r2, r3, #5
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	4413      	add	r3, r2
 8007370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007374:	461a      	mov	r2, r3
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	4413      	add	r3, r2
 8007384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	0151      	lsls	r1, r2, #5
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	440a      	add	r2, r1
 8007392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007396:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800739a:	6013      	str	r3, [r2, #0]
 800739c:	e097      	b.n	80074ce <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	0151      	lsls	r1, r2, #5
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	440a      	add	r2, r1
 80073b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073bc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f000 8083 	beq.w	80074ce <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	f003 030f 	and.w	r3, r3, #15
 80073d8:	2101      	movs	r1, #1
 80073da:	fa01 f303 	lsl.w	r3, r1, r3
 80073de:	6979      	ldr	r1, [r7, #20]
 80073e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073e4:	4313      	orrs	r3, r2
 80073e6:	634b      	str	r3, [r1, #52]	; 0x34
 80073e8:	e071      	b.n	80074ce <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	015a      	lsls	r2, r3, #5
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	0151      	lsls	r1, r2, #5
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	440a      	add	r2, r1
 8007400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007404:	0cdb      	lsrs	r3, r3, #19
 8007406:	04db      	lsls	r3, r3, #19
 8007408:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	4413      	add	r3, r2
 8007412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	0151      	lsls	r1, r2, #5
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	440a      	add	r2, r1
 8007420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007424:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007428:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800742c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d003      	beq.n	800743e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	68da      	ldr	r2, [r3, #12]
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	68da      	ldr	r2, [r3, #12]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	4413      	add	r3, r2
 800744e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	0151      	lsls	r1, r2, #5
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	440a      	add	r2, r1
 800745c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007460:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007464:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	4413      	add	r3, r2
 800746e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007472:	691a      	ldr	r2, [r3, #16]
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	69db      	ldr	r3, [r3, #28]
 8007478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800747c:	6939      	ldr	r1, [r7, #16]
 800747e:	0148      	lsls	r0, r1, #5
 8007480:	6979      	ldr	r1, [r7, #20]
 8007482:	4401      	add	r1, r0
 8007484:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007488:	4313      	orrs	r3, r2
 800748a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800748c:	79fb      	ldrb	r3, [r7, #7]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d10d      	bne.n	80074ae <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d009      	beq.n	80074ae <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	6919      	ldr	r1, [r3, #16]
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	015a      	lsls	r2, r3, #5
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	4413      	add	r3, r2
 80074a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074aa:	460a      	mov	r2, r1
 80074ac:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	0151      	lsls	r1, r2, #5
 80074c0:	697a      	ldr	r2, [r7, #20]
 80074c2:	440a      	add	r2, r1
 80074c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	371c      	adds	r7, #28
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80074dc:	b480      	push	{r7}
 80074de:	b087      	sub	sp, #28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80074ea:	2300      	movs	r3, #0
 80074ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	785b      	ldrb	r3, [r3, #1]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d14a      	bne.n	8007590 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	015a      	lsls	r2, r3, #5
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	4413      	add	r3, r2
 8007504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800750e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007512:	f040 8086 	bne.w	8007622 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	015a      	lsls	r2, r3, #5
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	4413      	add	r3, r2
 8007520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	683a      	ldr	r2, [r7, #0]
 8007528:	7812      	ldrb	r2, [r2, #0]
 800752a:	0151      	lsls	r1, r2, #5
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	440a      	add	r2, r1
 8007530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007534:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007538:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	015a      	lsls	r2, r3, #5
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	4413      	add	r3, r2
 8007544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	7812      	ldrb	r2, [r2, #0]
 800754e:	0151      	lsls	r1, r2, #5
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	440a      	add	r2, r1
 8007554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007558:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800755c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	3301      	adds	r3, #1
 8007562:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f242 7210 	movw	r2, #10000	; 0x2710
 800756a:	4293      	cmp	r3, r2
 800756c:	d902      	bls.n	8007574 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	75fb      	strb	r3, [r7, #23]
          break;
 8007572:	e056      	b.n	8007622 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	4413      	add	r3, r2
 800757e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007588:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800758c:	d0e7      	beq.n	800755e <USB_EPStopXfer+0x82>
 800758e:	e048      	b.n	8007622 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	015a      	lsls	r2, r3, #5
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	4413      	add	r3, r2
 800759a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075a8:	d13b      	bne.n	8007622 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	015a      	lsls	r2, r3, #5
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	7812      	ldrb	r2, [r2, #0]
 80075be:	0151      	lsls	r1, r2, #5
 80075c0:	693a      	ldr	r2, [r7, #16]
 80075c2:	440a      	add	r2, r1
 80075c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80075cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	015a      	lsls	r2, r3, #5
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	7812      	ldrb	r2, [r2, #0]
 80075e2:	0151      	lsls	r1, r2, #5
 80075e4:	693a      	ldr	r2, [r7, #16]
 80075e6:	440a      	add	r2, r1
 80075e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	3301      	adds	r3, #1
 80075f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80075fe:	4293      	cmp	r3, r2
 8007600:	d902      	bls.n	8007608 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	75fb      	strb	r3, [r7, #23]
          break;
 8007606:	e00c      	b.n	8007622 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	015a      	lsls	r2, r3, #5
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	4413      	add	r3, r2
 8007612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800761c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007620:	d0e7      	beq.n	80075f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007622:	7dfb      	ldrb	r3, [r7, #23]
}
 8007624:	4618      	mov	r0, r3
 8007626:	371c      	adds	r7, #28
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007630:	b480      	push	{r7}
 8007632:	b089      	sub	sp, #36	; 0x24
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	4611      	mov	r1, r2
 800763c:	461a      	mov	r2, r3
 800763e:	460b      	mov	r3, r1
 8007640:	71fb      	strb	r3, [r7, #7]
 8007642:	4613      	mov	r3, r2
 8007644:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800764e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007652:	2b00      	cmp	r3, #0
 8007654:	d123      	bne.n	800769e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007656:	88bb      	ldrh	r3, [r7, #4]
 8007658:	3303      	adds	r3, #3
 800765a:	089b      	lsrs	r3, r3, #2
 800765c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800765e:	2300      	movs	r3, #0
 8007660:	61bb      	str	r3, [r7, #24]
 8007662:	e018      	b.n	8007696 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007664:	79fb      	ldrb	r3, [r7, #7]
 8007666:	031a      	lsls	r2, r3, #12
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	4413      	add	r3, r2
 800766c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007670:	461a      	mov	r2, r3
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	3301      	adds	r3, #1
 800767c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	3301      	adds	r3, #1
 8007682:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	3301      	adds	r3, #1
 8007688:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	3301      	adds	r3, #1
 800768e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	3301      	adds	r3, #1
 8007694:	61bb      	str	r3, [r7, #24]
 8007696:	69ba      	ldr	r2, [r7, #24]
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	429a      	cmp	r2, r3
 800769c:	d3e2      	bcc.n	8007664 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3724      	adds	r7, #36	; 0x24
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b08b      	sub	sp, #44	; 0x2c
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	4613      	mov	r3, r2
 80076b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80076c2:	88fb      	ldrh	r3, [r7, #6]
 80076c4:	089b      	lsrs	r3, r3, #2
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80076ca:	88fb      	ldrh	r3, [r7, #6]
 80076cc:	f003 0303 	and.w	r3, r3, #3
 80076d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80076d2:	2300      	movs	r3, #0
 80076d4:	623b      	str	r3, [r7, #32]
 80076d6:	e014      	b.n	8007702 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80076e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e6:	3301      	adds	r3, #1
 80076e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	3301      	adds	r3, #1
 80076ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80076f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f2:	3301      	adds	r3, #1
 80076f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80076f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f8:	3301      	adds	r3, #1
 80076fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	3301      	adds	r3, #1
 8007700:	623b      	str	r3, [r7, #32]
 8007702:	6a3a      	ldr	r2, [r7, #32]
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	429a      	cmp	r2, r3
 8007708:	d3e6      	bcc.n	80076d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800770a:	8bfb      	ldrh	r3, [r7, #30]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d01e      	beq.n	800774e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007710:	2300      	movs	r3, #0
 8007712:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800771a:	461a      	mov	r2, r3
 800771c:	f107 0310 	add.w	r3, r7, #16
 8007720:	6812      	ldr	r2, [r2, #0]
 8007722:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	6a3b      	ldr	r3, [r7, #32]
 8007728:	b2db      	uxtb	r3, r3
 800772a:	00db      	lsls	r3, r3, #3
 800772c:	fa22 f303 	lsr.w	r3, r2, r3
 8007730:	b2da      	uxtb	r2, r3
 8007732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007734:	701a      	strb	r2, [r3, #0]
      i++;
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	3301      	adds	r3, #1
 800773a:	623b      	str	r3, [r7, #32]
      pDest++;
 800773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773e:	3301      	adds	r3, #1
 8007740:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007742:	8bfb      	ldrh	r3, [r7, #30]
 8007744:	3b01      	subs	r3, #1
 8007746:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007748:	8bfb      	ldrh	r3, [r7, #30]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1ea      	bne.n	8007724 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007750:	4618      	mov	r0, r3
 8007752:	372c      	adds	r7, #44	; 0x2c
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	785b      	ldrb	r3, [r3, #1]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d12c      	bne.n	80077d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	015a      	lsls	r2, r3, #5
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	4413      	add	r3, r2
 8007780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	db12      	blt.n	80077b0 <USB_EPSetStall+0x54>
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00f      	beq.n	80077b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	015a      	lsls	r2, r3, #5
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	4413      	add	r3, r2
 8007798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	0151      	lsls	r1, r2, #5
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	440a      	add	r2, r1
 80077a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80077ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	015a      	lsls	r2, r3, #5
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	4413      	add	r3, r2
 80077b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	0151      	lsls	r1, r2, #5
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	440a      	add	r2, r1
 80077c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80077ce:	6013      	str	r3, [r2, #0]
 80077d0:	e02b      	b.n	800782a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	db12      	blt.n	800780a <USB_EPSetStall+0xae>
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00f      	beq.n	800780a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	015a      	lsls	r2, r3, #5
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	4413      	add	r3, r2
 80077f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	0151      	lsls	r1, r2, #5
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	440a      	add	r2, r1
 8007800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007804:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007808:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	015a      	lsls	r2, r3, #5
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	4413      	add	r3, r2
 8007812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	0151      	lsls	r1, r2, #5
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	440a      	add	r2, r1
 8007820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007828:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	785b      	ldrb	r3, [r3, #1]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d128      	bne.n	80078a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	4413      	add	r3, r2
 800785c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	0151      	lsls	r1, r2, #5
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	440a      	add	r2, r1
 800786a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800786e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007872:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	791b      	ldrb	r3, [r3, #4]
 8007878:	2b03      	cmp	r3, #3
 800787a:	d003      	beq.n	8007884 <USB_EPClearStall+0x4c>
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	791b      	ldrb	r3, [r3, #4]
 8007880:	2b02      	cmp	r3, #2
 8007882:	d138      	bne.n	80078f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	015a      	lsls	r2, r3, #5
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	4413      	add	r3, r2
 800788c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	0151      	lsls	r1, r2, #5
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	440a      	add	r2, r1
 800789a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800789e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078a2:	6013      	str	r3, [r2, #0]
 80078a4:	e027      	b.n	80078f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	015a      	lsls	r2, r3, #5
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	4413      	add	r3, r2
 80078ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	0151      	lsls	r1, r2, #5
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	440a      	add	r2, r1
 80078bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	791b      	ldrb	r3, [r3, #4]
 80078ca:	2b03      	cmp	r3, #3
 80078cc:	d003      	beq.n	80078d6 <USB_EPClearStall+0x9e>
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	791b      	ldrb	r3, [r3, #4]
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d10f      	bne.n	80078f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	015a      	lsls	r2, r3, #5
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	4413      	add	r3, r2
 80078de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	0151      	lsls	r1, r2, #5
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	440a      	add	r2, r1
 80078ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3714      	adds	r7, #20
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	460b      	mov	r3, r1
 800790e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007922:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007926:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	78fb      	ldrb	r3, [r7, #3]
 8007932:	011b      	lsls	r3, r3, #4
 8007934:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007938:	68f9      	ldr	r1, [r7, #12]
 800793a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800793e:	4313      	orrs	r3, r2
 8007940:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3714      	adds	r7, #20
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800796a:	f023 0303 	bic.w	r3, r3, #3
 800796e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800797e:	f023 0302 	bic.w	r3, r3, #2
 8007982:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007992:	b480      	push	{r7}
 8007994:	b085      	sub	sp, #20
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80079ac:	f023 0303 	bic.w	r3, r3, #3
 80079b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079c0:	f043 0302 	orr.w	r3, r3, #2
 80079c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3714      	adds	r7, #20
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	4013      	ands	r3, r2
 80079ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80079ec:	68fb      	ldr	r3, [r7, #12]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b085      	sub	sp, #20
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a16:	69db      	ldr	r3, [r3, #28]
 8007a18:	68ba      	ldr	r2, [r7, #8]
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	0c1b      	lsrs	r3, r3, #16
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3714      	adds	r7, #20
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a2e:	b480      	push	{r7}
 8007a30:	b085      	sub	sp, #20
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a4a:	69db      	ldr	r3, [r3, #28]
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	4013      	ands	r3, r2
 8007a50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	b29b      	uxth	r3, r3
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3714      	adds	r7, #20
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b085      	sub	sp, #20
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007a72:	78fb      	ldrb	r3, [r7, #3]
 8007a74:	015a      	lsls	r2, r3, #5
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	4413      	add	r3, r2
 8007a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007a90:	68bb      	ldr	r3, [r7, #8]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3714      	adds	r7, #20
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b087      	sub	sp, #28
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ac0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007ac2:	78fb      	ldrb	r3, [r7, #3]
 8007ac4:	f003 030f 	and.w	r3, r3, #15
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	fa22 f303 	lsr.w	r3, r2, r3
 8007ace:	01db      	lsls	r3, r3, #7
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007ad8:	78fb      	ldrb	r3, [r7, #3]
 8007ada:	015a      	lsls	r2, r3, #5
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	4413      	add	r3, r2
 8007ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	693a      	ldr	r2, [r7, #16]
 8007ae8:	4013      	ands	r3, r2
 8007aea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007aec:	68bb      	ldr	r3, [r7, #8]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	371c      	adds	r7, #28
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b083      	sub	sp, #12
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	f003 0301 	and.w	r3, r3, #1
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	370c      	adds	r7, #12
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b085      	sub	sp, #20
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007b34:	f023 0307 	bic.w	r3, r3, #7
 8007b38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3714      	adds	r7, #20
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b087      	sub	sp, #28
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	460b      	mov	r3, r1
 8007b66:	607a      	str	r2, [r7, #4]
 8007b68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	333c      	adds	r3, #60	; 0x3c
 8007b72:	3304      	adds	r3, #4
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	4a26      	ldr	r2, [pc, #152]	; (8007c14 <USB_EP0_OutStart+0xb8>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d90a      	bls.n	8007b96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b90:	d101      	bne.n	8007b96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	e037      	b.n	8007c06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bc4:	f043 0318 	orr.w	r3, r3, #24
 8007bc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bd8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007bdc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007bde:	7afb      	ldrb	r3, [r7, #11]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d10f      	bne.n	8007c04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bea:	461a      	mov	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bfe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007c02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	371c      	adds	r7, #28
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	4f54300a 	.word	0x4f54300a

08007c18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c20:	2300      	movs	r3, #0
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	3301      	adds	r3, #1
 8007c28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	4a13      	ldr	r2, [pc, #76]	; (8007c7c <USB_CoreReset+0x64>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d901      	bls.n	8007c36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c32:	2303      	movs	r3, #3
 8007c34:	e01b      	b.n	8007c6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	daf2      	bge.n	8007c24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	f043 0201 	orr.w	r2, r3, #1
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	3301      	adds	r3, #1
 8007c52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	4a09      	ldr	r2, [pc, #36]	; (8007c7c <USB_CoreReset+0x64>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d901      	bls.n	8007c60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e006      	b.n	8007c6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	f003 0301 	and.w	r3, r3, #1
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d0f0      	beq.n	8007c4e <USB_CoreReset+0x36>

  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3714      	adds	r7, #20
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	00030d40 	.word	0x00030d40

08007c80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007c8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007c90:	f002 fc94 	bl	800a5bc <USBD_static_malloc>
 8007c94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d109      	bne.n	8007cb0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	32b0      	adds	r2, #176	; 0xb0
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007cac:	2302      	movs	r3, #2
 8007cae:	e0d4      	b.n	8007e5a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007cb0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f003 fcaf 	bl	800b61a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	32b0      	adds	r2, #176	; 0xb0
 8007cc6:	68f9      	ldr	r1, [r7, #12]
 8007cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	32b0      	adds	r2, #176	; 0xb0
 8007cd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	7c1b      	ldrb	r3, [r3, #16]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d138      	bne.n	8007d5a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007ce8:	4b5e      	ldr	r3, [pc, #376]	; (8007e64 <USBD_CDC_Init+0x1e4>)
 8007cea:	7819      	ldrb	r1, [r3, #0]
 8007cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f002 fb3f 	bl	800a376 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007cf8:	4b5a      	ldr	r3, [pc, #360]	; (8007e64 <USBD_CDC_Init+0x1e4>)
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	f003 020f 	and.w	r2, r3, #15
 8007d00:	6879      	ldr	r1, [r7, #4]
 8007d02:	4613      	mov	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4413      	add	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	440b      	add	r3, r1
 8007d0c:	3324      	adds	r3, #36	; 0x24
 8007d0e:	2201      	movs	r2, #1
 8007d10:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007d12:	4b55      	ldr	r3, [pc, #340]	; (8007e68 <USBD_CDC_Init+0x1e8>)
 8007d14:	7819      	ldrb	r1, [r3, #0]
 8007d16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f002 fb2a 	bl	800a376 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007d22:	4b51      	ldr	r3, [pc, #324]	; (8007e68 <USBD_CDC_Init+0x1e8>)
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	f003 020f 	and.w	r2, r3, #15
 8007d2a:	6879      	ldr	r1, [r7, #4]
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4413      	add	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	440b      	add	r3, r1
 8007d36:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007d3e:	4b4b      	ldr	r3, [pc, #300]	; (8007e6c <USBD_CDC_Init+0x1ec>)
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	f003 020f 	and.w	r2, r3, #15
 8007d46:	6879      	ldr	r1, [r7, #4]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	440b      	add	r3, r1
 8007d52:	3326      	adds	r3, #38	; 0x26
 8007d54:	2210      	movs	r2, #16
 8007d56:	801a      	strh	r2, [r3, #0]
 8007d58:	e035      	b.n	8007dc6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007d5a:	4b42      	ldr	r3, [pc, #264]	; (8007e64 <USBD_CDC_Init+0x1e4>)
 8007d5c:	7819      	ldrb	r1, [r3, #0]
 8007d5e:	2340      	movs	r3, #64	; 0x40
 8007d60:	2202      	movs	r2, #2
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f002 fb07 	bl	800a376 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007d68:	4b3e      	ldr	r3, [pc, #248]	; (8007e64 <USBD_CDC_Init+0x1e4>)
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	f003 020f 	and.w	r2, r3, #15
 8007d70:	6879      	ldr	r1, [r7, #4]
 8007d72:	4613      	mov	r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	4413      	add	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	440b      	add	r3, r1
 8007d7c:	3324      	adds	r3, #36	; 0x24
 8007d7e:	2201      	movs	r2, #1
 8007d80:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007d82:	4b39      	ldr	r3, [pc, #228]	; (8007e68 <USBD_CDC_Init+0x1e8>)
 8007d84:	7819      	ldrb	r1, [r3, #0]
 8007d86:	2340      	movs	r3, #64	; 0x40
 8007d88:	2202      	movs	r2, #2
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f002 faf3 	bl	800a376 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007d90:	4b35      	ldr	r3, [pc, #212]	; (8007e68 <USBD_CDC_Init+0x1e8>)
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	f003 020f 	and.w	r2, r3, #15
 8007d98:	6879      	ldr	r1, [r7, #4]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	440b      	add	r3, r1
 8007da4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007da8:	2201      	movs	r2, #1
 8007daa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007dac:	4b2f      	ldr	r3, [pc, #188]	; (8007e6c <USBD_CDC_Init+0x1ec>)
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	f003 020f 	and.w	r2, r3, #15
 8007db4:	6879      	ldr	r1, [r7, #4]
 8007db6:	4613      	mov	r3, r2
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4413      	add	r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	440b      	add	r3, r1
 8007dc0:	3326      	adds	r3, #38	; 0x26
 8007dc2:	2210      	movs	r2, #16
 8007dc4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007dc6:	4b29      	ldr	r3, [pc, #164]	; (8007e6c <USBD_CDC_Init+0x1ec>)
 8007dc8:	7819      	ldrb	r1, [r3, #0]
 8007dca:	2308      	movs	r3, #8
 8007dcc:	2203      	movs	r2, #3
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f002 fad1 	bl	800a376 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007dd4:	4b25      	ldr	r3, [pc, #148]	; (8007e6c <USBD_CDC_Init+0x1ec>)
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	f003 020f 	and.w	r2, r3, #15
 8007ddc:	6879      	ldr	r1, [r7, #4]
 8007dde:	4613      	mov	r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	4413      	add	r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	440b      	add	r3, r1
 8007de8:	3324      	adds	r3, #36	; 0x24
 8007dea:	2201      	movs	r2, #1
 8007dec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	33b0      	adds	r3, #176	; 0xb0
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4413      	add	r3, r2
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d101      	bne.n	8007e28 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007e24:	2302      	movs	r3, #2
 8007e26:	e018      	b.n	8007e5a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	7c1b      	ldrb	r3, [r3, #16]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10a      	bne.n	8007e46 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e30:	4b0d      	ldr	r3, [pc, #52]	; (8007e68 <USBD_CDC_Init+0x1e8>)
 8007e32:	7819      	ldrb	r1, [r3, #0]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f002 fb88 	bl	800a554 <USBD_LL_PrepareReceive>
 8007e44:	e008      	b.n	8007e58 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e46:	4b08      	ldr	r3, [pc, #32]	; (8007e68 <USBD_CDC_Init+0x1e8>)
 8007e48:	7819      	ldrb	r1, [r3, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e50:	2340      	movs	r3, #64	; 0x40
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f002 fb7e 	bl	800a554 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	20000093 	.word	0x20000093
 8007e68:	20000094 	.word	0x20000094
 8007e6c:	20000095 	.word	0x20000095

08007e70 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	460b      	mov	r3, r1
 8007e7a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007e7c:	4b3a      	ldr	r3, [pc, #232]	; (8007f68 <USBD_CDC_DeInit+0xf8>)
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	4619      	mov	r1, r3
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f002 fa9d 	bl	800a3c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007e88:	4b37      	ldr	r3, [pc, #220]	; (8007f68 <USBD_CDC_DeInit+0xf8>)
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	f003 020f 	and.w	r2, r3, #15
 8007e90:	6879      	ldr	r1, [r7, #4]
 8007e92:	4613      	mov	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	4413      	add	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	440b      	add	r3, r1
 8007e9c:	3324      	adds	r3, #36	; 0x24
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007ea2:	4b32      	ldr	r3, [pc, #200]	; (8007f6c <USBD_CDC_DeInit+0xfc>)
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f002 fa8a 	bl	800a3c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007eae:	4b2f      	ldr	r3, [pc, #188]	; (8007f6c <USBD_CDC_DeInit+0xfc>)
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	f003 020f 	and.w	r2, r3, #15
 8007eb6:	6879      	ldr	r1, [r7, #4]
 8007eb8:	4613      	mov	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	440b      	add	r3, r1
 8007ec2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007eca:	4b29      	ldr	r3, [pc, #164]	; (8007f70 <USBD_CDC_DeInit+0x100>)
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	4619      	mov	r1, r3
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f002 fa76 	bl	800a3c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007ed6:	4b26      	ldr	r3, [pc, #152]	; (8007f70 <USBD_CDC_DeInit+0x100>)
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	f003 020f 	and.w	r2, r3, #15
 8007ede:	6879      	ldr	r1, [r7, #4]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	440b      	add	r3, r1
 8007eea:	3324      	adds	r3, #36	; 0x24
 8007eec:	2200      	movs	r2, #0
 8007eee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007ef0:	4b1f      	ldr	r3, [pc, #124]	; (8007f70 <USBD_CDC_DeInit+0x100>)
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	f003 020f 	and.w	r2, r3, #15
 8007ef8:	6879      	ldr	r1, [r7, #4]
 8007efa:	4613      	mov	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	440b      	add	r3, r1
 8007f04:	3326      	adds	r3, #38	; 0x26
 8007f06:	2200      	movs	r2, #0
 8007f08:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	32b0      	adds	r2, #176	; 0xb0
 8007f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d01f      	beq.n	8007f5c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	33b0      	adds	r3, #176	; 0xb0
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4413      	add	r3, r2
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	32b0      	adds	r2, #176	; 0xb0
 8007f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f002 fb4a 	bl	800a5d8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	32b0      	adds	r2, #176	; 0xb0
 8007f4e:	2100      	movs	r1, #0
 8007f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	20000093 	.word	0x20000093
 8007f6c:	20000094 	.word	0x20000094
 8007f70:	20000095 	.word	0x20000095

08007f74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b086      	sub	sp, #24
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	32b0      	adds	r2, #176	; 0xb0
 8007f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f8c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007f92:	2300      	movs	r3, #0
 8007f94:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e0bf      	b.n	8008124 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d050      	beq.n	8008052 <USBD_CDC_Setup+0xde>
 8007fb0:	2b20      	cmp	r3, #32
 8007fb2:	f040 80af 	bne.w	8008114 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	88db      	ldrh	r3, [r3, #6]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d03a      	beq.n	8008034 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	b25b      	sxtb	r3, r3
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	da1b      	bge.n	8008000 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	33b0      	adds	r3, #176	; 0xb0
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4413      	add	r3, r2
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007fde:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007fe0:	683a      	ldr	r2, [r7, #0]
 8007fe2:	88d2      	ldrh	r2, [r2, #6]
 8007fe4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	88db      	ldrh	r3, [r3, #6]
 8007fea:	2b07      	cmp	r3, #7
 8007fec:	bf28      	it	cs
 8007fee:	2307      	movcs	r3, #7
 8007ff0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	89fa      	ldrh	r2, [r7, #14]
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f001 fd89 	bl	8009b10 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007ffe:	e090      	b.n	8008122 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	785a      	ldrb	r2, [r3, #1]
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	88db      	ldrh	r3, [r3, #6]
 800800e:	2b3f      	cmp	r3, #63	; 0x3f
 8008010:	d803      	bhi.n	800801a <USBD_CDC_Setup+0xa6>
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	88db      	ldrh	r3, [r3, #6]
 8008016:	b2da      	uxtb	r2, r3
 8008018:	e000      	b.n	800801c <USBD_CDC_Setup+0xa8>
 800801a:	2240      	movs	r2, #64	; 0x40
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008022:	6939      	ldr	r1, [r7, #16]
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800802a:	461a      	mov	r2, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f001 fd9b 	bl	8009b68 <USBD_CtlPrepareRx>
      break;
 8008032:	e076      	b.n	8008122 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	33b0      	adds	r3, #176	; 0xb0
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4413      	add	r3, r2
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	7850      	ldrb	r0, [r2, #1]
 800804a:	2200      	movs	r2, #0
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	4798      	blx	r3
      break;
 8008050:	e067      	b.n	8008122 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	785b      	ldrb	r3, [r3, #1]
 8008056:	2b0b      	cmp	r3, #11
 8008058:	d851      	bhi.n	80080fe <USBD_CDC_Setup+0x18a>
 800805a:	a201      	add	r2, pc, #4	; (adr r2, 8008060 <USBD_CDC_Setup+0xec>)
 800805c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008060:	08008091 	.word	0x08008091
 8008064:	0800810d 	.word	0x0800810d
 8008068:	080080ff 	.word	0x080080ff
 800806c:	080080ff 	.word	0x080080ff
 8008070:	080080ff 	.word	0x080080ff
 8008074:	080080ff 	.word	0x080080ff
 8008078:	080080ff 	.word	0x080080ff
 800807c:	080080ff 	.word	0x080080ff
 8008080:	080080ff 	.word	0x080080ff
 8008084:	080080ff 	.word	0x080080ff
 8008088:	080080bb 	.word	0x080080bb
 800808c:	080080e5 	.word	0x080080e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2b03      	cmp	r3, #3
 800809a:	d107      	bne.n	80080ac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800809c:	f107 030a 	add.w	r3, r7, #10
 80080a0:	2202      	movs	r2, #2
 80080a2:	4619      	mov	r1, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f001 fd33 	bl	8009b10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80080aa:	e032      	b.n	8008112 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80080ac:	6839      	ldr	r1, [r7, #0]
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f001 fcbd 	bl	8009a2e <USBD_CtlError>
            ret = USBD_FAIL;
 80080b4:	2303      	movs	r3, #3
 80080b6:	75fb      	strb	r3, [r7, #23]
          break;
 80080b8:	e02b      	b.n	8008112 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b03      	cmp	r3, #3
 80080c4:	d107      	bne.n	80080d6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80080c6:	f107 030d 	add.w	r3, r7, #13
 80080ca:	2201      	movs	r2, #1
 80080cc:	4619      	mov	r1, r3
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f001 fd1e 	bl	8009b10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80080d4:	e01d      	b.n	8008112 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80080d6:	6839      	ldr	r1, [r7, #0]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f001 fca8 	bl	8009a2e <USBD_CtlError>
            ret = USBD_FAIL;
 80080de:	2303      	movs	r3, #3
 80080e0:	75fb      	strb	r3, [r7, #23]
          break;
 80080e2:	e016      	b.n	8008112 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b03      	cmp	r3, #3
 80080ee:	d00f      	beq.n	8008110 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80080f0:	6839      	ldr	r1, [r7, #0]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f001 fc9b 	bl	8009a2e <USBD_CtlError>
            ret = USBD_FAIL;
 80080f8:	2303      	movs	r3, #3
 80080fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80080fc:	e008      	b.n	8008110 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f001 fc94 	bl	8009a2e <USBD_CtlError>
          ret = USBD_FAIL;
 8008106:	2303      	movs	r3, #3
 8008108:	75fb      	strb	r3, [r7, #23]
          break;
 800810a:	e002      	b.n	8008112 <USBD_CDC_Setup+0x19e>
          break;
 800810c:	bf00      	nop
 800810e:	e008      	b.n	8008122 <USBD_CDC_Setup+0x1ae>
          break;
 8008110:	bf00      	nop
      }
      break;
 8008112:	e006      	b.n	8008122 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008114:	6839      	ldr	r1, [r7, #0]
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f001 fc89 	bl	8009a2e <USBD_CtlError>
      ret = USBD_FAIL;
 800811c:	2303      	movs	r3, #3
 800811e:	75fb      	strb	r3, [r7, #23]
      break;
 8008120:	bf00      	nop
  }

  return (uint8_t)ret;
 8008122:	7dfb      	ldrb	r3, [r7, #23]
}
 8008124:	4618      	mov	r0, r3
 8008126:	3718      	adds	r7, #24
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	460b      	mov	r3, r1
 8008136:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800813e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	32b0      	adds	r2, #176	; 0xb0
 800814a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008152:	2303      	movs	r3, #3
 8008154:	e065      	b.n	8008222 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	32b0      	adds	r2, #176	; 0xb0
 8008160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008164:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008166:	78fb      	ldrb	r3, [r7, #3]
 8008168:	f003 020f 	and.w	r2, r3, #15
 800816c:	6879      	ldr	r1, [r7, #4]
 800816e:	4613      	mov	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4413      	add	r3, r2
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	440b      	add	r3, r1
 8008178:	3318      	adds	r3, #24
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d02f      	beq.n	80081e0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008180:	78fb      	ldrb	r3, [r7, #3]
 8008182:	f003 020f 	and.w	r2, r3, #15
 8008186:	6879      	ldr	r1, [r7, #4]
 8008188:	4613      	mov	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	440b      	add	r3, r1
 8008192:	3318      	adds	r3, #24
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	78fb      	ldrb	r3, [r7, #3]
 8008198:	f003 010f 	and.w	r1, r3, #15
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	460b      	mov	r3, r1
 80081a0:	00db      	lsls	r3, r3, #3
 80081a2:	440b      	add	r3, r1
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4403      	add	r3, r0
 80081a8:	3348      	adds	r3, #72	; 0x48
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80081b0:	fb01 f303 	mul.w	r3, r1, r3
 80081b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d112      	bne.n	80081e0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80081ba:	78fb      	ldrb	r3, [r7, #3]
 80081bc:	f003 020f 	and.w	r2, r3, #15
 80081c0:	6879      	ldr	r1, [r7, #4]
 80081c2:	4613      	mov	r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4413      	add	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	440b      	add	r3, r1
 80081cc:	3318      	adds	r3, #24
 80081ce:	2200      	movs	r2, #0
 80081d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80081d2:	78f9      	ldrb	r1, [r7, #3]
 80081d4:	2300      	movs	r3, #0
 80081d6:	2200      	movs	r2, #0
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f002 f99a 	bl	800a512 <USBD_LL_Transmit>
 80081de:	e01f      	b.n	8008220 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	33b0      	adds	r3, #176	; 0xb0
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4413      	add	r3, r2
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d010      	beq.n	8008220 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	33b0      	adds	r3, #176	; 0xb0
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	691b      	ldr	r3, [r3, #16]
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800821c:	78fa      	ldrb	r2, [r7, #3]
 800821e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b084      	sub	sp, #16
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	460b      	mov	r3, r1
 8008234:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	32b0      	adds	r2, #176	; 0xb0
 8008240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008244:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	32b0      	adds	r2, #176	; 0xb0
 8008250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d101      	bne.n	800825c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008258:	2303      	movs	r3, #3
 800825a:	e01a      	b.n	8008292 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800825c:	78fb      	ldrb	r3, [r7, #3]
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f002 f998 	bl	800a596 <USBD_LL_GetRxDataSize>
 8008266:	4602      	mov	r2, r0
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	33b0      	adds	r3, #176	; 0xb0
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4413      	add	r3, r2
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800828c:	4611      	mov	r1, r2
 800828e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b084      	sub	sp, #16
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	32b0      	adds	r2, #176	; 0xb0
 80082ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d101      	bne.n	80082bc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80082b8:	2303      	movs	r3, #3
 80082ba:	e025      	b.n	8008308 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	33b0      	adds	r3, #176	; 0xb0
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4413      	add	r3, r2
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d01a      	beq.n	8008306 <USBD_CDC_EP0_RxReady+0x6c>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80082d6:	2bff      	cmp	r3, #255	; 0xff
 80082d8:	d015      	beq.n	8008306 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	33b0      	adds	r3, #176	; 0xb0
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	4413      	add	r3, r2
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80082f2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80082fa:	b292      	uxth	r2, r2
 80082fc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	22ff      	movs	r2, #255	; 0xff
 8008302:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008318:	2182      	movs	r1, #130	; 0x82
 800831a:	4818      	ldr	r0, [pc, #96]	; (800837c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800831c:	f000 fd4f 	bl	8008dbe <USBD_GetEpDesc>
 8008320:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008322:	2101      	movs	r1, #1
 8008324:	4815      	ldr	r0, [pc, #84]	; (800837c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008326:	f000 fd4a 	bl	8008dbe <USBD_GetEpDesc>
 800832a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800832c:	2181      	movs	r1, #129	; 0x81
 800832e:	4813      	ldr	r0, [pc, #76]	; (800837c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008330:	f000 fd45 	bl	8008dbe <USBD_GetEpDesc>
 8008334:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	2210      	movs	r2, #16
 8008340:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d006      	beq.n	8008356 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	2200      	movs	r2, #0
 800834c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008350:	711a      	strb	r2, [r3, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d006      	beq.n	800836a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008364:	711a      	strb	r2, [r3, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2243      	movs	r2, #67	; 0x43
 800836e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008370:	4b02      	ldr	r3, [pc, #8]	; (800837c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008372:	4618      	mov	r0, r3
 8008374:	3718      	adds	r7, #24
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	20000050 	.word	0x20000050

08008380 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b086      	sub	sp, #24
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008388:	2182      	movs	r1, #130	; 0x82
 800838a:	4818      	ldr	r0, [pc, #96]	; (80083ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800838c:	f000 fd17 	bl	8008dbe <USBD_GetEpDesc>
 8008390:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008392:	2101      	movs	r1, #1
 8008394:	4815      	ldr	r0, [pc, #84]	; (80083ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008396:	f000 fd12 	bl	8008dbe <USBD_GetEpDesc>
 800839a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800839c:	2181      	movs	r1, #129	; 0x81
 800839e:	4813      	ldr	r0, [pc, #76]	; (80083ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 80083a0:	f000 fd0d 	bl	8008dbe <USBD_GetEpDesc>
 80083a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d002      	beq.n	80083b2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	2210      	movs	r2, #16
 80083b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d006      	beq.n	80083c6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	2200      	movs	r2, #0
 80083bc:	711a      	strb	r2, [r3, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	f042 0202 	orr.w	r2, r2, #2
 80083c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d006      	beq.n	80083da <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	711a      	strb	r2, [r3, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f042 0202 	orr.w	r2, r2, #2
 80083d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2243      	movs	r2, #67	; 0x43
 80083de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80083e0:	4b02      	ldr	r3, [pc, #8]	; (80083ec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3718      	adds	r7, #24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	20000050 	.word	0x20000050

080083f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80083f8:	2182      	movs	r1, #130	; 0x82
 80083fa:	4818      	ldr	r0, [pc, #96]	; (800845c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80083fc:	f000 fcdf 	bl	8008dbe <USBD_GetEpDesc>
 8008400:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008402:	2101      	movs	r1, #1
 8008404:	4815      	ldr	r0, [pc, #84]	; (800845c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008406:	f000 fcda 	bl	8008dbe <USBD_GetEpDesc>
 800840a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800840c:	2181      	movs	r1, #129	; 0x81
 800840e:	4813      	ldr	r0, [pc, #76]	; (800845c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008410:	f000 fcd5 	bl	8008dbe <USBD_GetEpDesc>
 8008414:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d002      	beq.n	8008422 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	2210      	movs	r2, #16
 8008420:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d006      	beq.n	8008436 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	2200      	movs	r2, #0
 800842c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008430:	711a      	strb	r2, [r3, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d006      	beq.n	800844a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008444:	711a      	strb	r2, [r3, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2243      	movs	r2, #67	; 0x43
 800844e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008450:	4b02      	ldr	r3, [pc, #8]	; (800845c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008452:	4618      	mov	r0, r3
 8008454:	3718      	adds	r7, #24
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	20000050 	.word	0x20000050

08008460 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	220a      	movs	r2, #10
 800846c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800846e:	4b03      	ldr	r3, [pc, #12]	; (800847c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008470:	4618      	mov	r0, r3
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr
 800847c:	2000000c 	.word	0x2000000c

08008480 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d101      	bne.n	8008494 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008490:	2303      	movs	r3, #3
 8008492:	e009      	b.n	80084a8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	33b0      	adds	r3, #176	; 0xb0
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	4413      	add	r3, r2
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b087      	sub	sp, #28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	32b0      	adds	r2, #176	; 0xb0
 80084ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ce:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d101      	bne.n	80084da <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80084d6:	2303      	movs	r3, #3
 80084d8:	e008      	b.n	80084ec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	371c      	adds	r7, #28
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	32b0      	adds	r2, #176	; 0xb0
 800850c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008510:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d101      	bne.n	800851c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008518:	2303      	movs	r3, #3
 800851a:	e004      	b.n	8008526 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3714      	adds	r7, #20
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
	...

08008534 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	32b0      	adds	r2, #176	; 0xb0
 8008546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800854a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800854c:	2301      	movs	r3, #1
 800854e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	32b0      	adds	r2, #176	; 0xb0
 800855a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d101      	bne.n	8008566 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008562:	2303      	movs	r3, #3
 8008564:	e025      	b.n	80085b2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800856c:	2b00      	cmp	r3, #0
 800856e:	d11f      	bne.n	80085b0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2201      	movs	r2, #1
 8008574:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008578:	4b10      	ldr	r3, [pc, #64]	; (80085bc <USBD_CDC_TransmitPacket+0x88>)
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	f003 020f 	and.w	r2, r3, #15
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	4613      	mov	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4403      	add	r3, r0
 8008592:	3318      	adds	r3, #24
 8008594:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008596:	4b09      	ldr	r3, [pc, #36]	; (80085bc <USBD_CDC_TransmitPacket+0x88>)
 8008598:	7819      	ldrb	r1, [r3, #0]
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f001 ffb3 	bl	800a512 <USBD_LL_Transmit>

    ret = USBD_OK;
 80085ac:	2300      	movs	r3, #0
 80085ae:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	20000093 	.word	0x20000093

080085c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	32b0      	adds	r2, #176	; 0xb0
 80085d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	32b0      	adds	r2, #176	; 0xb0
 80085e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d101      	bne.n	80085ee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e018      	b.n	8008620 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	7c1b      	ldrb	r3, [r3, #16]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d10a      	bne.n	800860c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80085f6:	4b0c      	ldr	r3, [pc, #48]	; (8008628 <USBD_CDC_ReceivePacket+0x68>)
 80085f8:	7819      	ldrb	r1, [r3, #0]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f001 ffa5 	bl	800a554 <USBD_LL_PrepareReceive>
 800860a:	e008      	b.n	800861e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800860c:	4b06      	ldr	r3, [pc, #24]	; (8008628 <USBD_CDC_ReceivePacket+0x68>)
 800860e:	7819      	ldrb	r1, [r3, #0]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008616:	2340      	movs	r3, #64	; 0x40
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f001 ff9b 	bl	800a554 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	20000094 	.word	0x20000094

0800862c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	4613      	mov	r3, r2
 8008638:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d101      	bne.n	8008644 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008640:	2303      	movs	r3, #3
 8008642:	e01f      	b.n	8008684 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2200      	movs	r2, #0
 8008648:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d003      	beq.n	800866a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	68ba      	ldr	r2, [r7, #8]
 8008666:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2201      	movs	r2, #1
 800866e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	79fa      	ldrb	r2, [r7, #7]
 8008676:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	f001 fe15 	bl	800a2a8 <USBD_LL_Init>
 800867e:	4603      	mov	r3, r0
 8008680:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008682:	7dfb      	ldrb	r3, [r7, #23]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3718      	adds	r7, #24
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008696:	2300      	movs	r3, #0
 8008698:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d101      	bne.n	80086a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80086a0:	2303      	movs	r3, #3
 80086a2:	e025      	b.n	80086f0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	683a      	ldr	r2, [r7, #0]
 80086a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	32ae      	adds	r2, #174	; 0xae
 80086b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d00f      	beq.n	80086e0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	32ae      	adds	r2, #174	; 0xae
 80086ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d0:	f107 020e 	add.w	r2, r7, #14
 80086d4:	4610      	mov	r0, r2
 80086d6:	4798      	blx	r3
 80086d8:	4602      	mov	r2, r0
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80086e6:	1c5a      	adds	r2, r3, #1
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f001 fe1d 	bl	800a340 <USBD_LL_Start>
 8008706:	4603      	mov	r3, r0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008718:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800871a:	4618      	mov	r0, r3
 800871c:	370c      	adds	r7, #12
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr

08008726 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b084      	sub	sp, #16
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	460b      	mov	r3, r1
 8008730:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800873c:	2b00      	cmp	r3, #0
 800873e:	d009      	beq.n	8008754 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	78fa      	ldrb	r2, [r7, #3]
 800874a:	4611      	mov	r1, r2
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	4798      	blx	r3
 8008750:	4603      	mov	r3, r0
 8008752:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008754:	7bfb      	ldrb	r3, [r7, #15]
}
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	460b      	mov	r3, r1
 8008768:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	78fa      	ldrb	r2, [r7, #3]
 8008778:	4611      	mov	r1, r2
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	4798      	blx	r3
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d001      	beq.n	8008788 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008784:	2303      	movs	r3, #3
 8008786:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008788:	7bfb      	ldrb	r3, [r7, #15]
}
 800878a:	4618      	mov	r0, r3
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b084      	sub	sp, #16
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80087a2:	6839      	ldr	r1, [r7, #0]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f001 f908 	bl	80099ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80087b8:	461a      	mov	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80087c6:	f003 031f 	and.w	r3, r3, #31
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d01a      	beq.n	8008804 <USBD_LL_SetupStage+0x72>
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d822      	bhi.n	8008818 <USBD_LL_SetupStage+0x86>
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d002      	beq.n	80087dc <USBD_LL_SetupStage+0x4a>
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d00a      	beq.n	80087f0 <USBD_LL_SetupStage+0x5e>
 80087da:	e01d      	b.n	8008818 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80087e2:	4619      	mov	r1, r3
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fb5f 	bl	8008ea8 <USBD_StdDevReq>
 80087ea:	4603      	mov	r3, r0
 80087ec:	73fb      	strb	r3, [r7, #15]
      break;
 80087ee:	e020      	b.n	8008832 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80087f6:	4619      	mov	r1, r3
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 fbc7 	bl	8008f8c <USBD_StdItfReq>
 80087fe:	4603      	mov	r3, r0
 8008800:	73fb      	strb	r3, [r7, #15]
      break;
 8008802:	e016      	b.n	8008832 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800880a:	4619      	mov	r1, r3
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fc29 	bl	8009064 <USBD_StdEPReq>
 8008812:	4603      	mov	r3, r0
 8008814:	73fb      	strb	r3, [r7, #15]
      break;
 8008816:	e00c      	b.n	8008832 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800881e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008822:	b2db      	uxtb	r3, r3
 8008824:	4619      	mov	r1, r3
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f001 fdea 	bl	800a400 <USBD_LL_StallEP>
 800882c:	4603      	mov	r3, r0
 800882e:	73fb      	strb	r3, [r7, #15]
      break;
 8008830:	bf00      	nop
  }

  return ret;
 8008832:	7bfb      	ldrb	r3, [r7, #15]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	460b      	mov	r3, r1
 8008846:	607a      	str	r2, [r7, #4]
 8008848:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800884e:	7afb      	ldrb	r3, [r7, #11]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d16e      	bne.n	8008932 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800885a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008862:	2b03      	cmp	r3, #3
 8008864:	f040 8098 	bne.w	8008998 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	689a      	ldr	r2, [r3, #8]
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	429a      	cmp	r2, r3
 8008872:	d913      	bls.n	800889c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	689a      	ldr	r2, [r3, #8]
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	1ad2      	subs	r2, r2, r3
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	68da      	ldr	r2, [r3, #12]
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	4293      	cmp	r3, r2
 800888c:	bf28      	it	cs
 800888e:	4613      	movcs	r3, r2
 8008890:	461a      	mov	r2, r3
 8008892:	6879      	ldr	r1, [r7, #4]
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f001 f984 	bl	8009ba2 <USBD_CtlContinueRx>
 800889a:	e07d      	b.n	8008998 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80088a2:	f003 031f 	and.w	r3, r3, #31
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d014      	beq.n	80088d4 <USBD_LL_DataOutStage+0x98>
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d81d      	bhi.n	80088ea <USBD_LL_DataOutStage+0xae>
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d002      	beq.n	80088b8 <USBD_LL_DataOutStage+0x7c>
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d003      	beq.n	80088be <USBD_LL_DataOutStage+0x82>
 80088b6:	e018      	b.n	80088ea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80088b8:	2300      	movs	r3, #0
 80088ba:	75bb      	strb	r3, [r7, #22]
            break;
 80088bc:	e018      	b.n	80088f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	4619      	mov	r1, r3
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f000 fa5e 	bl	8008d8a <USBD_CoreFindIF>
 80088ce:	4603      	mov	r3, r0
 80088d0:	75bb      	strb	r3, [r7, #22]
            break;
 80088d2:	e00d      	b.n	80088f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	4619      	mov	r1, r3
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f000 fa60 	bl	8008da4 <USBD_CoreFindEP>
 80088e4:	4603      	mov	r3, r0
 80088e6:	75bb      	strb	r3, [r7, #22]
            break;
 80088e8:	e002      	b.n	80088f0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80088ea:	2300      	movs	r3, #0
 80088ec:	75bb      	strb	r3, [r7, #22]
            break;
 80088ee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80088f0:	7dbb      	ldrb	r3, [r7, #22]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d119      	bne.n	800892a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	2b03      	cmp	r3, #3
 8008900:	d113      	bne.n	800892a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008902:	7dba      	ldrb	r2, [r7, #22]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	32ae      	adds	r2, #174	; 0xae
 8008908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00b      	beq.n	800892a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008912:	7dba      	ldrb	r2, [r7, #22]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800891a:	7dba      	ldrb	r2, [r7, #22]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	32ae      	adds	r2, #174	; 0xae
 8008920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f001 f94a 	bl	8009bc4 <USBD_CtlSendStatus>
 8008930:	e032      	b.n	8008998 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008932:	7afb      	ldrb	r3, [r7, #11]
 8008934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008938:	b2db      	uxtb	r3, r3
 800893a:	4619      	mov	r1, r3
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f000 fa31 	bl	8008da4 <USBD_CoreFindEP>
 8008942:	4603      	mov	r3, r0
 8008944:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008946:	7dbb      	ldrb	r3, [r7, #22]
 8008948:	2bff      	cmp	r3, #255	; 0xff
 800894a:	d025      	beq.n	8008998 <USBD_LL_DataOutStage+0x15c>
 800894c:	7dbb      	ldrb	r3, [r7, #22]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d122      	bne.n	8008998 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008958:	b2db      	uxtb	r3, r3
 800895a:	2b03      	cmp	r3, #3
 800895c:	d117      	bne.n	800898e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800895e:	7dba      	ldrb	r2, [r7, #22]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	32ae      	adds	r2, #174	; 0xae
 8008964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00f      	beq.n	800898e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800896e:	7dba      	ldrb	r2, [r7, #22]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008976:	7dba      	ldrb	r2, [r7, #22]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	32ae      	adds	r2, #174	; 0xae
 800897c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	7afa      	ldrb	r2, [r7, #11]
 8008984:	4611      	mov	r1, r2
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	4798      	blx	r3
 800898a:	4603      	mov	r3, r0
 800898c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800898e:	7dfb      	ldrb	r3, [r7, #23]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d001      	beq.n	8008998 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008994:	7dfb      	ldrb	r3, [r7, #23]
 8008996:	e000      	b.n	800899a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3718      	adds	r7, #24
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b086      	sub	sp, #24
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	60f8      	str	r0, [r7, #12]
 80089aa:	460b      	mov	r3, r1
 80089ac:	607a      	str	r2, [r7, #4]
 80089ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80089b0:	7afb      	ldrb	r3, [r7, #11]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d16f      	bne.n	8008a96 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	3314      	adds	r3, #20
 80089ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d15a      	bne.n	8008a7c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	689a      	ldr	r2, [r3, #8]
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d914      	bls.n	80089fc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	689a      	ldr	r2, [r3, #8]
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	1ad2      	subs	r2, r2, r3
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	461a      	mov	r2, r3
 80089e6:	6879      	ldr	r1, [r7, #4]
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f001 f8ac 	bl	8009b46 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089ee:	2300      	movs	r3, #0
 80089f0:	2200      	movs	r2, #0
 80089f2:	2100      	movs	r1, #0
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	f001 fdad 	bl	800a554 <USBD_LL_PrepareReceive>
 80089fa:	e03f      	b.n	8008a7c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	68da      	ldr	r2, [r3, #12]
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d11c      	bne.n	8008a42 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	685a      	ldr	r2, [r3, #4]
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d316      	bcc.n	8008a42 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	685a      	ldr	r2, [r3, #4]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d20f      	bcs.n	8008a42 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008a22:	2200      	movs	r2, #0
 8008a24:	2100      	movs	r1, #0
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f001 f88d 	bl	8009b46 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a34:	2300      	movs	r3, #0
 8008a36:	2200      	movs	r2, #0
 8008a38:	2100      	movs	r1, #0
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f001 fd8a 	bl	800a554 <USBD_LL_PrepareReceive>
 8008a40:	e01c      	b.n	8008a7c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	2b03      	cmp	r3, #3
 8008a4c:	d10f      	bne.n	8008a6e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d009      	beq.n	8008a6e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a6e:	2180      	movs	r1, #128	; 0x80
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f001 fcc5 	bl	800a400 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f001 f8b7 	bl	8009bea <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d03a      	beq.n	8008afc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f7ff fe42 	bl	8008710 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008a94:	e032      	b.n	8008afc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008a96:	7afb      	ldrb	r3, [r7, #11]
 8008a98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f000 f97f 	bl	8008da4 <USBD_CoreFindEP>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008aaa:	7dfb      	ldrb	r3, [r7, #23]
 8008aac:	2bff      	cmp	r3, #255	; 0xff
 8008aae:	d025      	beq.n	8008afc <USBD_LL_DataInStage+0x15a>
 8008ab0:	7dfb      	ldrb	r3, [r7, #23]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d122      	bne.n	8008afc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	d11c      	bne.n	8008afc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008ac2:	7dfa      	ldrb	r2, [r7, #23]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	32ae      	adds	r2, #174	; 0xae
 8008ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d014      	beq.n	8008afc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008ad2:	7dfa      	ldrb	r2, [r7, #23]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008ada:	7dfa      	ldrb	r2, [r7, #23]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	32ae      	adds	r2, #174	; 0xae
 8008ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	7afa      	ldrb	r2, [r7, #11]
 8008ae8:	4611      	mov	r1, r2
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	4798      	blx	r3
 8008aee:	4603      	mov	r3, r0
 8008af0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008af2:	7dbb      	ldrb	r3, [r7, #22]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d001      	beq.n	8008afc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008af8:	7dbb      	ldrb	r3, [r7, #22]
 8008afa:	e000      	b.n	8008afe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3718      	adds	r7, #24
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b084      	sub	sp, #16
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d014      	beq.n	8008b6c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00e      	beq.n	8008b6c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	6852      	ldr	r2, [r2, #4]
 8008b5a:	b2d2      	uxtb	r2, r2
 8008b5c:	4611      	mov	r1, r2
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	4798      	blx	r3
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d001      	beq.n	8008b6c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008b6c:	2340      	movs	r3, #64	; 0x40
 8008b6e:	2200      	movs	r2, #0
 8008b70:	2100      	movs	r1, #0
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f001 fbff 	bl	800a376 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2240      	movs	r2, #64	; 0x40
 8008b84:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008b88:	2340      	movs	r3, #64	; 0x40
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	2180      	movs	r1, #128	; 0x80
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f001 fbf1 	bl	800a376 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2240      	movs	r2, #64	; 0x40
 8008b9e:	621a      	str	r2, [r3, #32]

  return ret;
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b083      	sub	sp, #12
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	78fa      	ldrb	r2, [r7, #3]
 8008bba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	370c      	adds	r7, #12
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008bca:	b480      	push	{r7}
 8008bcc:	b083      	sub	sp, #12
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bd8:	b2da      	uxtb	r2, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2204      	movs	r2, #4
 8008be4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr

08008bf6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008bf6:	b480      	push	{r7}
 8008bf8:	b083      	sub	sp, #12
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b04      	cmp	r3, #4
 8008c08:	d106      	bne.n	8008c18 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008c10:	b2da      	uxtb	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	370c      	adds	r7, #12
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr

08008c26 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b082      	sub	sp, #8
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	d110      	bne.n	8008c5c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00b      	beq.n	8008c5c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c4a:	69db      	ldr	r3, [r3, #28]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d005      	beq.n	8008c5c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c56:	69db      	ldr	r3, [r3, #28]
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b082      	sub	sp, #8
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	460b      	mov	r3, r1
 8008c70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	32ae      	adds	r2, #174	; 0xae
 8008c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d101      	bne.n	8008c88 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008c84:	2303      	movs	r3, #3
 8008c86:	e01c      	b.n	8008cc2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	2b03      	cmp	r3, #3
 8008c92:	d115      	bne.n	8008cc0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	32ae      	adds	r2, #174	; 0xae
 8008c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ca2:	6a1b      	ldr	r3, [r3, #32]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00b      	beq.n	8008cc0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	32ae      	adds	r2, #174	; 0xae
 8008cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb6:	6a1b      	ldr	r3, [r3, #32]
 8008cb8:	78fa      	ldrb	r2, [r7, #3]
 8008cba:	4611      	mov	r1, r2
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b082      	sub	sp, #8
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	32ae      	adds	r2, #174	; 0xae
 8008ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d101      	bne.n	8008cec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	e01c      	b.n	8008d26 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b03      	cmp	r3, #3
 8008cf6:	d115      	bne.n	8008d24 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	32ae      	adds	r2, #174	; 0xae
 8008d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00b      	beq.n	8008d24 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	32ae      	adds	r2, #174	; 0xae
 8008d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1c:	78fa      	ldrb	r2, [r7, #3]
 8008d1e:	4611      	mov	r1, r2
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008d2e:	b480      	push	{r7}
 8008d30:	b083      	sub	sp, #12
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00e      	beq.n	8008d80 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	6852      	ldr	r2, [r2, #4]
 8008d6e:	b2d2      	uxtb	r2, r2
 8008d70:	4611      	mov	r1, r2
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	4798      	blx	r3
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d001      	beq.n	8008d80 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b083      	sub	sp, #12
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	460b      	mov	r3, r1
 8008d94:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008d96:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	460b      	mov	r3, r1
 8008dae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008db0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	370c      	adds	r7, #12
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b086      	sub	sp, #24
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	885b      	ldrh	r3, [r3, #2]
 8008dda:	b29a      	uxth	r2, r3
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d920      	bls.n	8008e28 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008dee:	e013      	b.n	8008e18 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008df0:	f107 030a 	add.w	r3, r7, #10
 8008df4:	4619      	mov	r1, r3
 8008df6:	6978      	ldr	r0, [r7, #20]
 8008df8:	f000 f81b 	bl	8008e32 <USBD_GetNextDesc>
 8008dfc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	785b      	ldrb	r3, [r3, #1]
 8008e02:	2b05      	cmp	r3, #5
 8008e04:	d108      	bne.n	8008e18 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	789b      	ldrb	r3, [r3, #2]
 8008e0e:	78fa      	ldrb	r2, [r7, #3]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d008      	beq.n	8008e26 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008e14:	2300      	movs	r3, #0
 8008e16:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	885b      	ldrh	r3, [r3, #2]
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	897b      	ldrh	r3, [r7, #10]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d8e5      	bhi.n	8008df0 <USBD_GetEpDesc+0x32>
 8008e24:	e000      	b.n	8008e28 <USBD_GetEpDesc+0x6a>
          break;
 8008e26:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008e28:	693b      	ldr	r3, [r7, #16]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3718      	adds	r7, #24
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008e32:	b480      	push	{r7}
 8008e34:	b085      	sub	sp, #20
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	881a      	ldrh	r2, [r3, #0]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	4413      	add	r3, r2
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	461a      	mov	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b087      	sub	sp, #28
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	3301      	adds	r3, #1
 8008e82:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008e8a:	8a3b      	ldrh	r3, [r7, #16]
 8008e8c:	021b      	lsls	r3, r3, #8
 8008e8e:	b21a      	sxth	r2, r3
 8008e90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	b21b      	sxth	r3, r3
 8008e98:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008e9a:	89fb      	ldrh	r3, [r7, #14]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	371c      	adds	r7, #28
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ebe:	2b40      	cmp	r3, #64	; 0x40
 8008ec0:	d005      	beq.n	8008ece <USBD_StdDevReq+0x26>
 8008ec2:	2b40      	cmp	r3, #64	; 0x40
 8008ec4:	d857      	bhi.n	8008f76 <USBD_StdDevReq+0xce>
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00f      	beq.n	8008eea <USBD_StdDevReq+0x42>
 8008eca:	2b20      	cmp	r3, #32
 8008ecc:	d153      	bne.n	8008f76 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	32ae      	adds	r2, #174	; 0xae
 8008ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	6839      	ldr	r1, [r7, #0]
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	4798      	blx	r3
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ee8:	e04a      	b.n	8008f80 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	785b      	ldrb	r3, [r3, #1]
 8008eee:	2b09      	cmp	r3, #9
 8008ef0:	d83b      	bhi.n	8008f6a <USBD_StdDevReq+0xc2>
 8008ef2:	a201      	add	r2, pc, #4	; (adr r2, 8008ef8 <USBD_StdDevReq+0x50>)
 8008ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef8:	08008f4d 	.word	0x08008f4d
 8008efc:	08008f61 	.word	0x08008f61
 8008f00:	08008f6b 	.word	0x08008f6b
 8008f04:	08008f57 	.word	0x08008f57
 8008f08:	08008f6b 	.word	0x08008f6b
 8008f0c:	08008f2b 	.word	0x08008f2b
 8008f10:	08008f21 	.word	0x08008f21
 8008f14:	08008f6b 	.word	0x08008f6b
 8008f18:	08008f43 	.word	0x08008f43
 8008f1c:	08008f35 	.word	0x08008f35
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008f20:	6839      	ldr	r1, [r7, #0]
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fa3c 	bl	80093a0 <USBD_GetDescriptor>
          break;
 8008f28:	e024      	b.n	8008f74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fba1 	bl	8009674 <USBD_SetAddress>
          break;
 8008f32:	e01f      	b.n	8008f74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008f34:	6839      	ldr	r1, [r7, #0]
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fbe0 	bl	80096fc <USBD_SetConfig>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	73fb      	strb	r3, [r7, #15]
          break;
 8008f40:	e018      	b.n	8008f74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 fc83 	bl	8009850 <USBD_GetConfig>
          break;
 8008f4a:	e013      	b.n	8008f74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fcb4 	bl	80098bc <USBD_GetStatus>
          break;
 8008f54:	e00e      	b.n	8008f74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008f56:	6839      	ldr	r1, [r7, #0]
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 fce3 	bl	8009924 <USBD_SetFeature>
          break;
 8008f5e:	e009      	b.n	8008f74 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008f60:	6839      	ldr	r1, [r7, #0]
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 fd07 	bl	8009976 <USBD_ClrFeature>
          break;
 8008f68:	e004      	b.n	8008f74 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008f6a:	6839      	ldr	r1, [r7, #0]
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 fd5e 	bl	8009a2e <USBD_CtlError>
          break;
 8008f72:	bf00      	nop
      }
      break;
 8008f74:	e004      	b.n	8008f80 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 fd58 	bl	8009a2e <USBD_CtlError>
      break;
 8008f7e:	bf00      	nop
  }

  return ret;
 8008f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop

08008f8c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fa2:	2b40      	cmp	r3, #64	; 0x40
 8008fa4:	d005      	beq.n	8008fb2 <USBD_StdItfReq+0x26>
 8008fa6:	2b40      	cmp	r3, #64	; 0x40
 8008fa8:	d852      	bhi.n	8009050 <USBD_StdItfReq+0xc4>
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d001      	beq.n	8008fb2 <USBD_StdItfReq+0x26>
 8008fae:	2b20      	cmp	r3, #32
 8008fb0:	d14e      	bne.n	8009050 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d840      	bhi.n	8009042 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	889b      	ldrh	r3, [r3, #4]
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d836      	bhi.n	8009038 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	889b      	ldrh	r3, [r3, #4]
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7ff fed9 	bl	8008d8a <USBD_CoreFindIF>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
 8008fde:	2bff      	cmp	r3, #255	; 0xff
 8008fe0:	d01d      	beq.n	800901e <USBD_StdItfReq+0x92>
 8008fe2:	7bbb      	ldrb	r3, [r7, #14]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d11a      	bne.n	800901e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008fe8:	7bba      	ldrb	r2, [r7, #14]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	32ae      	adds	r2, #174	; 0xae
 8008fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d00f      	beq.n	8009018 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008ff8:	7bba      	ldrb	r2, [r7, #14]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009000:	7bba      	ldrb	r2, [r7, #14]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	32ae      	adds	r2, #174	; 0xae
 8009006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	6839      	ldr	r1, [r7, #0]
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	4798      	blx	r3
 8009012:	4603      	mov	r3, r0
 8009014:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009016:	e004      	b.n	8009022 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009018:	2303      	movs	r3, #3
 800901a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800901c:	e001      	b.n	8009022 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800901e:	2303      	movs	r3, #3
 8009020:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	88db      	ldrh	r3, [r3, #6]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d110      	bne.n	800904c <USBD_StdItfReq+0xc0>
 800902a:	7bfb      	ldrb	r3, [r7, #15]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d10d      	bne.n	800904c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fdc7 	bl	8009bc4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009036:	e009      	b.n	800904c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009038:	6839      	ldr	r1, [r7, #0]
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fcf7 	bl	8009a2e <USBD_CtlError>
          break;
 8009040:	e004      	b.n	800904c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009042:	6839      	ldr	r1, [r7, #0]
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 fcf2 	bl	8009a2e <USBD_CtlError>
          break;
 800904a:	e000      	b.n	800904e <USBD_StdItfReq+0xc2>
          break;
 800904c:	bf00      	nop
      }
      break;
 800904e:	e004      	b.n	800905a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fceb 	bl	8009a2e <USBD_CtlError>
      break;
 8009058:	bf00      	nop
  }

  return ret;
 800905a:	7bfb      	ldrb	r3, [r7, #15]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800906e:	2300      	movs	r3, #0
 8009070:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	889b      	ldrh	r3, [r3, #4]
 8009076:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009080:	2b40      	cmp	r3, #64	; 0x40
 8009082:	d007      	beq.n	8009094 <USBD_StdEPReq+0x30>
 8009084:	2b40      	cmp	r3, #64	; 0x40
 8009086:	f200 817f 	bhi.w	8009388 <USBD_StdEPReq+0x324>
 800908a:	2b00      	cmp	r3, #0
 800908c:	d02a      	beq.n	80090e4 <USBD_StdEPReq+0x80>
 800908e:	2b20      	cmp	r3, #32
 8009090:	f040 817a 	bne.w	8009388 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009094:	7bbb      	ldrb	r3, [r7, #14]
 8009096:	4619      	mov	r1, r3
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f7ff fe83 	bl	8008da4 <USBD_CoreFindEP>
 800909e:	4603      	mov	r3, r0
 80090a0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090a2:	7b7b      	ldrb	r3, [r7, #13]
 80090a4:	2bff      	cmp	r3, #255	; 0xff
 80090a6:	f000 8174 	beq.w	8009392 <USBD_StdEPReq+0x32e>
 80090aa:	7b7b      	ldrb	r3, [r7, #13]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f040 8170 	bne.w	8009392 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80090b2:	7b7a      	ldrb	r2, [r7, #13]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80090ba:	7b7a      	ldrb	r2, [r7, #13]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	32ae      	adds	r2, #174	; 0xae
 80090c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f000 8163 	beq.w	8009392 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80090cc:	7b7a      	ldrb	r2, [r7, #13]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	32ae      	adds	r2, #174	; 0xae
 80090d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	6839      	ldr	r1, [r7, #0]
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	4798      	blx	r3
 80090de:	4603      	mov	r3, r0
 80090e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80090e2:	e156      	b.n	8009392 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	785b      	ldrb	r3, [r3, #1]
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	d008      	beq.n	80090fe <USBD_StdEPReq+0x9a>
 80090ec:	2b03      	cmp	r3, #3
 80090ee:	f300 8145 	bgt.w	800937c <USBD_StdEPReq+0x318>
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 809b 	beq.w	800922e <USBD_StdEPReq+0x1ca>
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d03c      	beq.n	8009176 <USBD_StdEPReq+0x112>
 80090fc:	e13e      	b.n	800937c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009104:	b2db      	uxtb	r3, r3
 8009106:	2b02      	cmp	r3, #2
 8009108:	d002      	beq.n	8009110 <USBD_StdEPReq+0xac>
 800910a:	2b03      	cmp	r3, #3
 800910c:	d016      	beq.n	800913c <USBD_StdEPReq+0xd8>
 800910e:	e02c      	b.n	800916a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009110:	7bbb      	ldrb	r3, [r7, #14]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00d      	beq.n	8009132 <USBD_StdEPReq+0xce>
 8009116:	7bbb      	ldrb	r3, [r7, #14]
 8009118:	2b80      	cmp	r3, #128	; 0x80
 800911a:	d00a      	beq.n	8009132 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800911c:	7bbb      	ldrb	r3, [r7, #14]
 800911e:	4619      	mov	r1, r3
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f001 f96d 	bl	800a400 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009126:	2180      	movs	r1, #128	; 0x80
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f001 f969 	bl	800a400 <USBD_LL_StallEP>
 800912e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009130:	e020      	b.n	8009174 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 fc7a 	bl	8009a2e <USBD_CtlError>
              break;
 800913a:	e01b      	b.n	8009174 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	885b      	ldrh	r3, [r3, #2]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d10e      	bne.n	8009162 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009144:	7bbb      	ldrb	r3, [r7, #14]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00b      	beq.n	8009162 <USBD_StdEPReq+0xfe>
 800914a:	7bbb      	ldrb	r3, [r7, #14]
 800914c:	2b80      	cmp	r3, #128	; 0x80
 800914e:	d008      	beq.n	8009162 <USBD_StdEPReq+0xfe>
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	88db      	ldrh	r3, [r3, #6]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d104      	bne.n	8009162 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009158:	7bbb      	ldrb	r3, [r7, #14]
 800915a:	4619      	mov	r1, r3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f001 f94f 	bl	800a400 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 fd2e 	bl	8009bc4 <USBD_CtlSendStatus>

              break;
 8009168:	e004      	b.n	8009174 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800916a:	6839      	ldr	r1, [r7, #0]
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fc5e 	bl	8009a2e <USBD_CtlError>
              break;
 8009172:	bf00      	nop
          }
          break;
 8009174:	e107      	b.n	8009386 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800917c:	b2db      	uxtb	r3, r3
 800917e:	2b02      	cmp	r3, #2
 8009180:	d002      	beq.n	8009188 <USBD_StdEPReq+0x124>
 8009182:	2b03      	cmp	r3, #3
 8009184:	d016      	beq.n	80091b4 <USBD_StdEPReq+0x150>
 8009186:	e04b      	b.n	8009220 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009188:	7bbb      	ldrb	r3, [r7, #14]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00d      	beq.n	80091aa <USBD_StdEPReq+0x146>
 800918e:	7bbb      	ldrb	r3, [r7, #14]
 8009190:	2b80      	cmp	r3, #128	; 0x80
 8009192:	d00a      	beq.n	80091aa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009194:	7bbb      	ldrb	r3, [r7, #14]
 8009196:	4619      	mov	r1, r3
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f001 f931 	bl	800a400 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800919e:	2180      	movs	r1, #128	; 0x80
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f001 f92d 	bl	800a400 <USBD_LL_StallEP>
 80091a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80091a8:	e040      	b.n	800922c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80091aa:	6839      	ldr	r1, [r7, #0]
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 fc3e 	bl	8009a2e <USBD_CtlError>
              break;
 80091b2:	e03b      	b.n	800922c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	885b      	ldrh	r3, [r3, #2]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d136      	bne.n	800922a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80091bc:	7bbb      	ldrb	r3, [r7, #14]
 80091be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d004      	beq.n	80091d0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80091c6:	7bbb      	ldrb	r3, [r7, #14]
 80091c8:	4619      	mov	r1, r3
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f001 f937 	bl	800a43e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fcf7 	bl	8009bc4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80091d6:	7bbb      	ldrb	r3, [r7, #14]
 80091d8:	4619      	mov	r1, r3
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f7ff fde2 	bl	8008da4 <USBD_CoreFindEP>
 80091e0:	4603      	mov	r3, r0
 80091e2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80091e4:	7b7b      	ldrb	r3, [r7, #13]
 80091e6:	2bff      	cmp	r3, #255	; 0xff
 80091e8:	d01f      	beq.n	800922a <USBD_StdEPReq+0x1c6>
 80091ea:	7b7b      	ldrb	r3, [r7, #13]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d11c      	bne.n	800922a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80091f0:	7b7a      	ldrb	r2, [r7, #13]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80091f8:	7b7a      	ldrb	r2, [r7, #13]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	32ae      	adds	r2, #174	; 0xae
 80091fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d010      	beq.n	800922a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009208:	7b7a      	ldrb	r2, [r7, #13]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	32ae      	adds	r2, #174	; 0xae
 800920e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	6839      	ldr	r1, [r7, #0]
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	4798      	blx	r3
 800921a:	4603      	mov	r3, r0
 800921c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800921e:	e004      	b.n	800922a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009220:	6839      	ldr	r1, [r7, #0]
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fc03 	bl	8009a2e <USBD_CtlError>
              break;
 8009228:	e000      	b.n	800922c <USBD_StdEPReq+0x1c8>
              break;
 800922a:	bf00      	nop
          }
          break;
 800922c:	e0ab      	b.n	8009386 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b02      	cmp	r3, #2
 8009238:	d002      	beq.n	8009240 <USBD_StdEPReq+0x1dc>
 800923a:	2b03      	cmp	r3, #3
 800923c:	d032      	beq.n	80092a4 <USBD_StdEPReq+0x240>
 800923e:	e097      	b.n	8009370 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009240:	7bbb      	ldrb	r3, [r7, #14]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d007      	beq.n	8009256 <USBD_StdEPReq+0x1f2>
 8009246:	7bbb      	ldrb	r3, [r7, #14]
 8009248:	2b80      	cmp	r3, #128	; 0x80
 800924a:	d004      	beq.n	8009256 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800924c:	6839      	ldr	r1, [r7, #0]
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 fbed 	bl	8009a2e <USBD_CtlError>
                break;
 8009254:	e091      	b.n	800937a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009256:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800925a:	2b00      	cmp	r3, #0
 800925c:	da0b      	bge.n	8009276 <USBD_StdEPReq+0x212>
 800925e:	7bbb      	ldrb	r3, [r7, #14]
 8009260:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009264:	4613      	mov	r3, r2
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	4413      	add	r3, r2
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	3310      	adds	r3, #16
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	4413      	add	r3, r2
 8009272:	3304      	adds	r3, #4
 8009274:	e00b      	b.n	800928e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009276:	7bbb      	ldrb	r3, [r7, #14]
 8009278:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800927c:	4613      	mov	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4413      	add	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	4413      	add	r3, r2
 800928c:	3304      	adds	r3, #4
 800928e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	2200      	movs	r2, #0
 8009294:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	2202      	movs	r2, #2
 800929a:	4619      	mov	r1, r3
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 fc37 	bl	8009b10 <USBD_CtlSendData>
              break;
 80092a2:	e06a      	b.n	800937a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80092a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	da11      	bge.n	80092d0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80092ac:	7bbb      	ldrb	r3, [r7, #14]
 80092ae:	f003 020f 	and.w	r2, r3, #15
 80092b2:	6879      	ldr	r1, [r7, #4]
 80092b4:	4613      	mov	r3, r2
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	4413      	add	r3, r2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	440b      	add	r3, r1
 80092be:	3324      	adds	r3, #36	; 0x24
 80092c0:	881b      	ldrh	r3, [r3, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d117      	bne.n	80092f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80092c6:	6839      	ldr	r1, [r7, #0]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 fbb0 	bl	8009a2e <USBD_CtlError>
                  break;
 80092ce:	e054      	b.n	800937a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80092d0:	7bbb      	ldrb	r3, [r7, #14]
 80092d2:	f003 020f 	and.w	r2, r3, #15
 80092d6:	6879      	ldr	r1, [r7, #4]
 80092d8:	4613      	mov	r3, r2
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	4413      	add	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	440b      	add	r3, r1
 80092e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80092e6:	881b      	ldrh	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d104      	bne.n	80092f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80092ec:	6839      	ldr	r1, [r7, #0]
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 fb9d 	bl	8009a2e <USBD_CtlError>
                  break;
 80092f4:	e041      	b.n	800937a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	da0b      	bge.n	8009316 <USBD_StdEPReq+0x2b2>
 80092fe:	7bbb      	ldrb	r3, [r7, #14]
 8009300:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009304:	4613      	mov	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4413      	add	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	3310      	adds	r3, #16
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	4413      	add	r3, r2
 8009312:	3304      	adds	r3, #4
 8009314:	e00b      	b.n	800932e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009316:	7bbb      	ldrb	r3, [r7, #14]
 8009318:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800931c:	4613      	mov	r3, r2
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	4413      	add	r3, r2
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	4413      	add	r3, r2
 800932c:	3304      	adds	r3, #4
 800932e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009330:	7bbb      	ldrb	r3, [r7, #14]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d002      	beq.n	800933c <USBD_StdEPReq+0x2d8>
 8009336:	7bbb      	ldrb	r3, [r7, #14]
 8009338:	2b80      	cmp	r3, #128	; 0x80
 800933a:	d103      	bne.n	8009344 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	2200      	movs	r2, #0
 8009340:	601a      	str	r2, [r3, #0]
 8009342:	e00e      	b.n	8009362 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009344:	7bbb      	ldrb	r3, [r7, #14]
 8009346:	4619      	mov	r1, r3
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f001 f897 	bl	800a47c <USBD_LL_IsStallEP>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d003      	beq.n	800935c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	2201      	movs	r2, #1
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	e002      	b.n	8009362 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	2200      	movs	r2, #0
 8009360:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	2202      	movs	r2, #2
 8009366:	4619      	mov	r1, r3
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 fbd1 	bl	8009b10 <USBD_CtlSendData>
              break;
 800936e:	e004      	b.n	800937a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009370:	6839      	ldr	r1, [r7, #0]
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 fb5b 	bl	8009a2e <USBD_CtlError>
              break;
 8009378:	bf00      	nop
          }
          break;
 800937a:	e004      	b.n	8009386 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800937c:	6839      	ldr	r1, [r7, #0]
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fb55 	bl	8009a2e <USBD_CtlError>
          break;
 8009384:	bf00      	nop
      }
      break;
 8009386:	e005      	b.n	8009394 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009388:	6839      	ldr	r1, [r7, #0]
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 fb4f 	bl	8009a2e <USBD_CtlError>
      break;
 8009390:	e000      	b.n	8009394 <USBD_StdEPReq+0x330>
      break;
 8009392:	bf00      	nop
  }

  return ret;
 8009394:	7bfb      	ldrb	r3, [r7, #15]
}
 8009396:	4618      	mov	r0, r3
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
	...

080093a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80093aa:	2300      	movs	r3, #0
 80093ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80093b2:	2300      	movs	r3, #0
 80093b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	885b      	ldrh	r3, [r3, #2]
 80093ba:	0a1b      	lsrs	r3, r3, #8
 80093bc:	b29b      	uxth	r3, r3
 80093be:	3b01      	subs	r3, #1
 80093c0:	2b06      	cmp	r3, #6
 80093c2:	f200 8128 	bhi.w	8009616 <USBD_GetDescriptor+0x276>
 80093c6:	a201      	add	r2, pc, #4	; (adr r2, 80093cc <USBD_GetDescriptor+0x2c>)
 80093c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093cc:	080093e9 	.word	0x080093e9
 80093d0:	08009401 	.word	0x08009401
 80093d4:	08009441 	.word	0x08009441
 80093d8:	08009617 	.word	0x08009617
 80093dc:	08009617 	.word	0x08009617
 80093e0:	080095b7 	.word	0x080095b7
 80093e4:	080095e3 	.word	0x080095e3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	7c12      	ldrb	r2, [r2, #16]
 80093f4:	f107 0108 	add.w	r1, r7, #8
 80093f8:	4610      	mov	r0, r2
 80093fa:	4798      	blx	r3
 80093fc:	60f8      	str	r0, [r7, #12]
      break;
 80093fe:	e112      	b.n	8009626 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	7c1b      	ldrb	r3, [r3, #16]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d10d      	bne.n	8009424 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800940e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009410:	f107 0208 	add.w	r2, r7, #8
 8009414:	4610      	mov	r0, r2
 8009416:	4798      	blx	r3
 8009418:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	3301      	adds	r3, #1
 800941e:	2202      	movs	r2, #2
 8009420:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009422:	e100      	b.n	8009626 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800942a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942c:	f107 0208 	add.w	r2, r7, #8
 8009430:	4610      	mov	r0, r2
 8009432:	4798      	blx	r3
 8009434:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	3301      	adds	r3, #1
 800943a:	2202      	movs	r2, #2
 800943c:	701a      	strb	r2, [r3, #0]
      break;
 800943e:	e0f2      	b.n	8009626 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	885b      	ldrh	r3, [r3, #2]
 8009444:	b2db      	uxtb	r3, r3
 8009446:	2b05      	cmp	r3, #5
 8009448:	f200 80ac 	bhi.w	80095a4 <USBD_GetDescriptor+0x204>
 800944c:	a201      	add	r2, pc, #4	; (adr r2, 8009454 <USBD_GetDescriptor+0xb4>)
 800944e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009452:	bf00      	nop
 8009454:	0800946d 	.word	0x0800946d
 8009458:	080094a1 	.word	0x080094a1
 800945c:	080094d5 	.word	0x080094d5
 8009460:	08009509 	.word	0x08009509
 8009464:	0800953d 	.word	0x0800953d
 8009468:	08009571 	.word	0x08009571
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d00b      	beq.n	8009490 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	7c12      	ldrb	r2, [r2, #16]
 8009484:	f107 0108 	add.w	r1, r7, #8
 8009488:	4610      	mov	r0, r2
 800948a:	4798      	blx	r3
 800948c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800948e:	e091      	b.n	80095b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009490:	6839      	ldr	r1, [r7, #0]
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 facb 	bl	8009a2e <USBD_CtlError>
            err++;
 8009498:	7afb      	ldrb	r3, [r7, #11]
 800949a:	3301      	adds	r3, #1
 800949c:	72fb      	strb	r3, [r7, #11]
          break;
 800949e:	e089      	b.n	80095b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00b      	beq.n	80094c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	7c12      	ldrb	r2, [r2, #16]
 80094b8:	f107 0108 	add.w	r1, r7, #8
 80094bc:	4610      	mov	r0, r2
 80094be:	4798      	blx	r3
 80094c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094c2:	e077      	b.n	80095b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094c4:	6839      	ldr	r1, [r7, #0]
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 fab1 	bl	8009a2e <USBD_CtlError>
            err++;
 80094cc:	7afb      	ldrb	r3, [r7, #11]
 80094ce:	3301      	adds	r3, #1
 80094d0:	72fb      	strb	r3, [r7, #11]
          break;
 80094d2:	e06f      	b.n	80095b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00b      	beq.n	80094f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	7c12      	ldrb	r2, [r2, #16]
 80094ec:	f107 0108 	add.w	r1, r7, #8
 80094f0:	4610      	mov	r0, r2
 80094f2:	4798      	blx	r3
 80094f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094f6:	e05d      	b.n	80095b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094f8:	6839      	ldr	r1, [r7, #0]
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 fa97 	bl	8009a2e <USBD_CtlError>
            err++;
 8009500:	7afb      	ldrb	r3, [r7, #11]
 8009502:	3301      	adds	r3, #1
 8009504:	72fb      	strb	r3, [r7, #11]
          break;
 8009506:	e055      	b.n	80095b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d00b      	beq.n	800952c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800951a:	691b      	ldr	r3, [r3, #16]
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	7c12      	ldrb	r2, [r2, #16]
 8009520:	f107 0108 	add.w	r1, r7, #8
 8009524:	4610      	mov	r0, r2
 8009526:	4798      	blx	r3
 8009528:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800952a:	e043      	b.n	80095b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 fa7d 	bl	8009a2e <USBD_CtlError>
            err++;
 8009534:	7afb      	ldrb	r3, [r7, #11]
 8009536:	3301      	adds	r3, #1
 8009538:	72fb      	strb	r3, [r7, #11]
          break;
 800953a:	e03b      	b.n	80095b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009542:	695b      	ldr	r3, [r3, #20]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d00b      	beq.n	8009560 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800954e:	695b      	ldr	r3, [r3, #20]
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	7c12      	ldrb	r2, [r2, #16]
 8009554:	f107 0108 	add.w	r1, r7, #8
 8009558:	4610      	mov	r0, r2
 800955a:	4798      	blx	r3
 800955c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800955e:	e029      	b.n	80095b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009560:	6839      	ldr	r1, [r7, #0]
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 fa63 	bl	8009a2e <USBD_CtlError>
            err++;
 8009568:	7afb      	ldrb	r3, [r7, #11]
 800956a:	3301      	adds	r3, #1
 800956c:	72fb      	strb	r3, [r7, #11]
          break;
 800956e:	e021      	b.n	80095b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d00b      	beq.n	8009594 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009582:	699b      	ldr	r3, [r3, #24]
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	7c12      	ldrb	r2, [r2, #16]
 8009588:	f107 0108 	add.w	r1, r7, #8
 800958c:	4610      	mov	r0, r2
 800958e:	4798      	blx	r3
 8009590:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009592:	e00f      	b.n	80095b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009594:	6839      	ldr	r1, [r7, #0]
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 fa49 	bl	8009a2e <USBD_CtlError>
            err++;
 800959c:	7afb      	ldrb	r3, [r7, #11]
 800959e:	3301      	adds	r3, #1
 80095a0:	72fb      	strb	r3, [r7, #11]
          break;
 80095a2:	e007      	b.n	80095b4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80095a4:	6839      	ldr	r1, [r7, #0]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fa41 	bl	8009a2e <USBD_CtlError>
          err++;
 80095ac:	7afb      	ldrb	r3, [r7, #11]
 80095ae:	3301      	adds	r3, #1
 80095b0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80095b2:	bf00      	nop
      }
      break;
 80095b4:	e037      	b.n	8009626 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	7c1b      	ldrb	r3, [r3, #16]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d109      	bne.n	80095d2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c6:	f107 0208 	add.w	r2, r7, #8
 80095ca:	4610      	mov	r0, r2
 80095cc:	4798      	blx	r3
 80095ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095d0:	e029      	b.n	8009626 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80095d2:	6839      	ldr	r1, [r7, #0]
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fa2a 	bl	8009a2e <USBD_CtlError>
        err++;
 80095da:	7afb      	ldrb	r3, [r7, #11]
 80095dc:	3301      	adds	r3, #1
 80095de:	72fb      	strb	r3, [r7, #11]
      break;
 80095e0:	e021      	b.n	8009626 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	7c1b      	ldrb	r3, [r3, #16]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d10d      	bne.n	8009606 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f2:	f107 0208 	add.w	r2, r7, #8
 80095f6:	4610      	mov	r0, r2
 80095f8:	4798      	blx	r3
 80095fa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	3301      	adds	r3, #1
 8009600:	2207      	movs	r2, #7
 8009602:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009604:	e00f      	b.n	8009626 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009606:	6839      	ldr	r1, [r7, #0]
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fa10 	bl	8009a2e <USBD_CtlError>
        err++;
 800960e:	7afb      	ldrb	r3, [r7, #11]
 8009610:	3301      	adds	r3, #1
 8009612:	72fb      	strb	r3, [r7, #11]
      break;
 8009614:	e007      	b.n	8009626 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009616:	6839      	ldr	r1, [r7, #0]
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 fa08 	bl	8009a2e <USBD_CtlError>
      err++;
 800961e:	7afb      	ldrb	r3, [r7, #11]
 8009620:	3301      	adds	r3, #1
 8009622:	72fb      	strb	r3, [r7, #11]
      break;
 8009624:	bf00      	nop
  }

  if (err != 0U)
 8009626:	7afb      	ldrb	r3, [r7, #11]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d11e      	bne.n	800966a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	88db      	ldrh	r3, [r3, #6]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d016      	beq.n	8009662 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009634:	893b      	ldrh	r3, [r7, #8]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00e      	beq.n	8009658 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	88da      	ldrh	r2, [r3, #6]
 800963e:	893b      	ldrh	r3, [r7, #8]
 8009640:	4293      	cmp	r3, r2
 8009642:	bf28      	it	cs
 8009644:	4613      	movcs	r3, r2
 8009646:	b29b      	uxth	r3, r3
 8009648:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800964a:	893b      	ldrh	r3, [r7, #8]
 800964c:	461a      	mov	r2, r3
 800964e:	68f9      	ldr	r1, [r7, #12]
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 fa5d 	bl	8009b10 <USBD_CtlSendData>
 8009656:	e009      	b.n	800966c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009658:	6839      	ldr	r1, [r7, #0]
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 f9e7 	bl	8009a2e <USBD_CtlError>
 8009660:	e004      	b.n	800966c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 faae 	bl	8009bc4 <USBD_CtlSendStatus>
 8009668:	e000      	b.n	800966c <USBD_GetDescriptor+0x2cc>
    return;
 800966a:	bf00      	nop
  }
}
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop

08009674 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	889b      	ldrh	r3, [r3, #4]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d131      	bne.n	80096ea <USBD_SetAddress+0x76>
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	88db      	ldrh	r3, [r3, #6]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d12d      	bne.n	80096ea <USBD_SetAddress+0x76>
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	885b      	ldrh	r3, [r3, #2]
 8009692:	2b7f      	cmp	r3, #127	; 0x7f
 8009694:	d829      	bhi.n	80096ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	885b      	ldrh	r3, [r3, #2]
 800969a:	b2db      	uxtb	r3, r3
 800969c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	2b03      	cmp	r3, #3
 80096ac:	d104      	bne.n	80096b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80096ae:	6839      	ldr	r1, [r7, #0]
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 f9bc 	bl	8009a2e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096b6:	e01d      	b.n	80096f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	7bfa      	ldrb	r2, [r7, #15]
 80096bc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80096c0:	7bfb      	ldrb	r3, [r7, #15]
 80096c2:	4619      	mov	r1, r3
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 ff05 	bl	800a4d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fa7a 	bl	8009bc4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80096d0:	7bfb      	ldrb	r3, [r7, #15]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d004      	beq.n	80096e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2202      	movs	r2, #2
 80096da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096de:	e009      	b.n	80096f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096e8:	e004      	b.n	80096f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80096ea:	6839      	ldr	r1, [r7, #0]
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 f99e 	bl	8009a2e <USBD_CtlError>
  }
}
 80096f2:	bf00      	nop
 80096f4:	bf00      	nop
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009706:	2300      	movs	r3, #0
 8009708:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	885b      	ldrh	r3, [r3, #2]
 800970e:	b2da      	uxtb	r2, r3
 8009710:	4b4e      	ldr	r3, [pc, #312]	; (800984c <USBD_SetConfig+0x150>)
 8009712:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009714:	4b4d      	ldr	r3, [pc, #308]	; (800984c <USBD_SetConfig+0x150>)
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	2b01      	cmp	r3, #1
 800971a:	d905      	bls.n	8009728 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800971c:	6839      	ldr	r1, [r7, #0]
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f985 	bl	8009a2e <USBD_CtlError>
    return USBD_FAIL;
 8009724:	2303      	movs	r3, #3
 8009726:	e08c      	b.n	8009842 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800972e:	b2db      	uxtb	r3, r3
 8009730:	2b02      	cmp	r3, #2
 8009732:	d002      	beq.n	800973a <USBD_SetConfig+0x3e>
 8009734:	2b03      	cmp	r3, #3
 8009736:	d029      	beq.n	800978c <USBD_SetConfig+0x90>
 8009738:	e075      	b.n	8009826 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800973a:	4b44      	ldr	r3, [pc, #272]	; (800984c <USBD_SetConfig+0x150>)
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d020      	beq.n	8009784 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009742:	4b42      	ldr	r3, [pc, #264]	; (800984c <USBD_SetConfig+0x150>)
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	461a      	mov	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800974c:	4b3f      	ldr	r3, [pc, #252]	; (800984c <USBD_SetConfig+0x150>)
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	4619      	mov	r1, r3
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f7fe ffe7 	bl	8008726 <USBD_SetClassConfig>
 8009758:	4603      	mov	r3, r0
 800975a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800975c:	7bfb      	ldrb	r3, [r7, #15]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d008      	beq.n	8009774 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009762:	6839      	ldr	r1, [r7, #0]
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 f962 	bl	8009a2e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2202      	movs	r2, #2
 800976e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009772:	e065      	b.n	8009840 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 fa25 	bl	8009bc4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2203      	movs	r2, #3
 800977e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009782:	e05d      	b.n	8009840 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fa1d 	bl	8009bc4 <USBD_CtlSendStatus>
      break;
 800978a:	e059      	b.n	8009840 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800978c:	4b2f      	ldr	r3, [pc, #188]	; (800984c <USBD_SetConfig+0x150>)
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d112      	bne.n	80097ba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2202      	movs	r2, #2
 8009798:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800979c:	4b2b      	ldr	r3, [pc, #172]	; (800984c <USBD_SetConfig+0x150>)
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	461a      	mov	r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80097a6:	4b29      	ldr	r3, [pc, #164]	; (800984c <USBD_SetConfig+0x150>)
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	4619      	mov	r1, r3
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f7fe ffd6 	bl	800875e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fa06 	bl	8009bc4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80097b8:	e042      	b.n	8009840 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80097ba:	4b24      	ldr	r3, [pc, #144]	; (800984c <USBD_SetConfig+0x150>)
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	461a      	mov	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d02a      	beq.n	800981e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	4619      	mov	r1, r3
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f7fe ffc4 	bl	800875e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80097d6:	4b1d      	ldr	r3, [pc, #116]	; (800984c <USBD_SetConfig+0x150>)
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	461a      	mov	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80097e0:	4b1a      	ldr	r3, [pc, #104]	; (800984c <USBD_SetConfig+0x150>)
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	4619      	mov	r1, r3
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f7fe ff9d 	bl	8008726 <USBD_SetClassConfig>
 80097ec:	4603      	mov	r3, r0
 80097ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00f      	beq.n	8009816 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80097f6:	6839      	ldr	r1, [r7, #0]
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 f918 	bl	8009a2e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	b2db      	uxtb	r3, r3
 8009804:	4619      	mov	r1, r3
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f7fe ffa9 	bl	800875e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2202      	movs	r2, #2
 8009810:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009814:	e014      	b.n	8009840 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 f9d4 	bl	8009bc4 <USBD_CtlSendStatus>
      break;
 800981c:	e010      	b.n	8009840 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f9d0 	bl	8009bc4 <USBD_CtlSendStatus>
      break;
 8009824:	e00c      	b.n	8009840 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009826:	6839      	ldr	r1, [r7, #0]
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 f900 	bl	8009a2e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800982e:	4b07      	ldr	r3, [pc, #28]	; (800984c <USBD_SetConfig+0x150>)
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	4619      	mov	r1, r3
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f7fe ff92 	bl	800875e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800983a:	2303      	movs	r3, #3
 800983c:	73fb      	strb	r3, [r7, #15]
      break;
 800983e:	bf00      	nop
  }

  return ret;
 8009840:	7bfb      	ldrb	r3, [r7, #15]
}
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	200003d8 	.word	0x200003d8

08009850 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	88db      	ldrh	r3, [r3, #6]
 800985e:	2b01      	cmp	r3, #1
 8009860:	d004      	beq.n	800986c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009862:	6839      	ldr	r1, [r7, #0]
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 f8e2 	bl	8009a2e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800986a:	e023      	b.n	80098b4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b02      	cmp	r3, #2
 8009876:	dc02      	bgt.n	800987e <USBD_GetConfig+0x2e>
 8009878:	2b00      	cmp	r3, #0
 800987a:	dc03      	bgt.n	8009884 <USBD_GetConfig+0x34>
 800987c:	e015      	b.n	80098aa <USBD_GetConfig+0x5a>
 800987e:	2b03      	cmp	r3, #3
 8009880:	d00b      	beq.n	800989a <USBD_GetConfig+0x4a>
 8009882:	e012      	b.n	80098aa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	3308      	adds	r3, #8
 800988e:	2201      	movs	r2, #1
 8009890:	4619      	mov	r1, r3
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f93c 	bl	8009b10 <USBD_CtlSendData>
        break;
 8009898:	e00c      	b.n	80098b4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	3304      	adds	r3, #4
 800989e:	2201      	movs	r2, #1
 80098a0:	4619      	mov	r1, r3
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 f934 	bl	8009b10 <USBD_CtlSendData>
        break;
 80098a8:	e004      	b.n	80098b4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80098aa:	6839      	ldr	r1, [r7, #0]
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 f8be 	bl	8009a2e <USBD_CtlError>
        break;
 80098b2:	bf00      	nop
}
 80098b4:	bf00      	nop
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	3b01      	subs	r3, #1
 80098d0:	2b02      	cmp	r3, #2
 80098d2:	d81e      	bhi.n	8009912 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	88db      	ldrh	r3, [r3, #6]
 80098d8:	2b02      	cmp	r3, #2
 80098da:	d004      	beq.n	80098e6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80098dc:	6839      	ldr	r1, [r7, #0]
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 f8a5 	bl	8009a2e <USBD_CtlError>
        break;
 80098e4:	e01a      	b.n	800991c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2201      	movs	r2, #1
 80098ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d005      	beq.n	8009902 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	f043 0202 	orr.w	r2, r3, #2
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	330c      	adds	r3, #12
 8009906:	2202      	movs	r2, #2
 8009908:	4619      	mov	r1, r3
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 f900 	bl	8009b10 <USBD_CtlSendData>
      break;
 8009910:	e004      	b.n	800991c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009912:	6839      	ldr	r1, [r7, #0]
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 f88a 	bl	8009a2e <USBD_CtlError>
      break;
 800991a:	bf00      	nop
  }
}
 800991c:	bf00      	nop
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	885b      	ldrh	r3, [r3, #2]
 8009932:	2b01      	cmp	r3, #1
 8009934:	d107      	bne.n	8009946 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2201      	movs	r2, #1
 800993a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f940 	bl	8009bc4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009944:	e013      	b.n	800996e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	885b      	ldrh	r3, [r3, #2]
 800994a:	2b02      	cmp	r3, #2
 800994c:	d10b      	bne.n	8009966 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	889b      	ldrh	r3, [r3, #4]
 8009952:	0a1b      	lsrs	r3, r3, #8
 8009954:	b29b      	uxth	r3, r3
 8009956:	b2da      	uxtb	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 f930 	bl	8009bc4 <USBD_CtlSendStatus>
}
 8009964:	e003      	b.n	800996e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009966:	6839      	ldr	r1, [r7, #0]
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 f860 	bl	8009a2e <USBD_CtlError>
}
 800996e:	bf00      	nop
 8009970:	3708      	adds	r7, #8
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b082      	sub	sp, #8
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009986:	b2db      	uxtb	r3, r3
 8009988:	3b01      	subs	r3, #1
 800998a:	2b02      	cmp	r3, #2
 800998c:	d80b      	bhi.n	80099a6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	885b      	ldrh	r3, [r3, #2]
 8009992:	2b01      	cmp	r3, #1
 8009994:	d10c      	bne.n	80099b0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 f910 	bl	8009bc4 <USBD_CtlSendStatus>
      }
      break;
 80099a4:	e004      	b.n	80099b0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80099a6:	6839      	ldr	r1, [r7, #0]
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 f840 	bl	8009a2e <USBD_CtlError>
      break;
 80099ae:	e000      	b.n	80099b2 <USBD_ClrFeature+0x3c>
      break;
 80099b0:	bf00      	nop
  }
}
 80099b2:	bf00      	nop
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b084      	sub	sp, #16
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	781a      	ldrb	r2, [r3, #0]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	3301      	adds	r3, #1
 80099d4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	781a      	ldrb	r2, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	3301      	adds	r3, #1
 80099e2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f7ff fa41 	bl	8008e6c <SWAPBYTE>
 80099ea:	4603      	mov	r3, r0
 80099ec:	461a      	mov	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	3301      	adds	r3, #1
 80099f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	3301      	adds	r3, #1
 80099fc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	f7ff fa34 	bl	8008e6c <SWAPBYTE>
 8009a04:	4603      	mov	r3, r0
 8009a06:	461a      	mov	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	3301      	adds	r3, #1
 8009a16:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009a18:	68f8      	ldr	r0, [r7, #12]
 8009a1a:	f7ff fa27 	bl	8008e6c <SWAPBYTE>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	461a      	mov	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	80da      	strh	r2, [r3, #6]
}
 8009a26:	bf00      	nop
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b082      	sub	sp, #8
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
 8009a36:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a38:	2180      	movs	r1, #128	; 0x80
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fce0 	bl	800a400 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009a40:	2100      	movs	r1, #0
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 fcdc 	bl	800a400 <USBD_LL_StallEP>
}
 8009a48:	bf00      	nop
 8009a4a:	3708      	adds	r7, #8
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b086      	sub	sp, #24
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d036      	beq.n	8009ad4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009a6a:	6938      	ldr	r0, [r7, #16]
 8009a6c:	f000 f836 	bl	8009adc <USBD_GetLen>
 8009a70:	4603      	mov	r3, r0
 8009a72:	3301      	adds	r3, #1
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	005b      	lsls	r3, r3, #1
 8009a78:	b29a      	uxth	r2, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009a7e:	7dfb      	ldrb	r3, [r7, #23]
 8009a80:	68ba      	ldr	r2, [r7, #8]
 8009a82:	4413      	add	r3, r2
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	7812      	ldrb	r2, [r2, #0]
 8009a88:	701a      	strb	r2, [r3, #0]
  idx++;
 8009a8a:	7dfb      	ldrb	r3, [r7, #23]
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009a90:	7dfb      	ldrb	r3, [r7, #23]
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	4413      	add	r3, r2
 8009a96:	2203      	movs	r2, #3
 8009a98:	701a      	strb	r2, [r3, #0]
  idx++;
 8009a9a:	7dfb      	ldrb	r3, [r7, #23]
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009aa0:	e013      	b.n	8009aca <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009aa2:	7dfb      	ldrb	r3, [r7, #23]
 8009aa4:	68ba      	ldr	r2, [r7, #8]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	693a      	ldr	r2, [r7, #16]
 8009aaa:	7812      	ldrb	r2, [r2, #0]
 8009aac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	613b      	str	r3, [r7, #16]
    idx++;
 8009ab4:	7dfb      	ldrb	r3, [r7, #23]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009aba:	7dfb      	ldrb	r3, [r7, #23]
 8009abc:	68ba      	ldr	r2, [r7, #8]
 8009abe:	4413      	add	r3, r2
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	701a      	strb	r2, [r3, #0]
    idx++;
 8009ac4:	7dfb      	ldrb	r3, [r7, #23]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1e7      	bne.n	8009aa2 <USBD_GetString+0x52>
 8009ad2:	e000      	b.n	8009ad6 <USBD_GetString+0x86>
    return;
 8009ad4:	bf00      	nop
  }
}
 8009ad6:	3718      	adds	r7, #24
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b085      	sub	sp, #20
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009aec:	e005      	b.n	8009afa <USBD_GetLen+0x1e>
  {
    len++;
 8009aee:	7bfb      	ldrb	r3, [r7, #15]
 8009af0:	3301      	adds	r3, #1
 8009af2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	3301      	adds	r3, #1
 8009af8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1f5      	bne.n	8009aee <USBD_GetLen+0x12>
  }

  return len;
 8009b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3714      	adds	r7, #20
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2202      	movs	r2, #2
 8009b20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	68ba      	ldr	r2, [r7, #8]
 8009b34:	2100      	movs	r1, #0
 8009b36:	68f8      	ldr	r0, [r7, #12]
 8009b38:	f000 fceb 	bl	800a512 <USBD_LL_Transmit>

  return USBD_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b084      	sub	sp, #16
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	60f8      	str	r0, [r7, #12]
 8009b4e:	60b9      	str	r1, [r7, #8]
 8009b50:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	68ba      	ldr	r2, [r7, #8]
 8009b56:	2100      	movs	r1, #0
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f000 fcda 	bl	800a512 <USBD_LL_Transmit>

  return USBD_OK;
 8009b5e:	2300      	movs	r3, #0
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2203      	movs	r2, #3
 8009b78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	68ba      	ldr	r2, [r7, #8]
 8009b90:	2100      	movs	r1, #0
 8009b92:	68f8      	ldr	r0, [r7, #12]
 8009b94:	f000 fcde 	bl	800a554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b084      	sub	sp, #16
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	60f8      	str	r0, [r7, #12]
 8009baa:	60b9      	str	r1, [r7, #8]
 8009bac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f000 fccd 	bl	800a554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009bba:	2300      	movs	r3, #0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3710      	adds	r7, #16
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2204      	movs	r2, #4
 8009bd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	2100      	movs	r1, #0
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fc99 	bl	800a512 <USBD_LL_Transmit>

  return USBD_OK;
 8009be0:	2300      	movs	r3, #0
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3708      	adds	r7, #8
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b082      	sub	sp, #8
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2205      	movs	r2, #5
 8009bf6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	2100      	movs	r1, #0
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 fca7 	bl	800a554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3708      	adds	r7, #8
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009c14:	2200      	movs	r2, #0
 8009c16:	4912      	ldr	r1, [pc, #72]	; (8009c60 <MX_USB_DEVICE_Init+0x50>)
 8009c18:	4812      	ldr	r0, [pc, #72]	; (8009c64 <MX_USB_DEVICE_Init+0x54>)
 8009c1a:	f7fe fd07 	bl	800862c <USBD_Init>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d001      	beq.n	8009c28 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009c24:	f7f8 fbce 	bl	80023c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009c28:	490f      	ldr	r1, [pc, #60]	; (8009c68 <MX_USB_DEVICE_Init+0x58>)
 8009c2a:	480e      	ldr	r0, [pc, #56]	; (8009c64 <MX_USB_DEVICE_Init+0x54>)
 8009c2c:	f7fe fd2e 	bl	800868c <USBD_RegisterClass>
 8009c30:	4603      	mov	r3, r0
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d001      	beq.n	8009c3a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009c36:	f7f8 fbc5 	bl	80023c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009c3a:	490c      	ldr	r1, [pc, #48]	; (8009c6c <MX_USB_DEVICE_Init+0x5c>)
 8009c3c:	4809      	ldr	r0, [pc, #36]	; (8009c64 <MX_USB_DEVICE_Init+0x54>)
 8009c3e:	f7fe fc1f 	bl	8008480 <USBD_CDC_RegisterInterface>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d001      	beq.n	8009c4c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009c48:	f7f8 fbbc 	bl	80023c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009c4c:	4805      	ldr	r0, [pc, #20]	; (8009c64 <MX_USB_DEVICE_Init+0x54>)
 8009c4e:	f7fe fd53 	bl	80086f8 <USBD_Start>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d001      	beq.n	8009c5c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009c58:	f7f8 fbb4 	bl	80023c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009c5c:	bf00      	nop
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	200000ac 	.word	0x200000ac
 8009c64:	200003dc 	.word	0x200003dc
 8009c68:	20000018 	.word	0x20000018
 8009c6c:	20000098 	.word	0x20000098

08009c70 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009c74:	2200      	movs	r2, #0
 8009c76:	4905      	ldr	r1, [pc, #20]	; (8009c8c <CDC_Init_FS+0x1c>)
 8009c78:	4805      	ldr	r0, [pc, #20]	; (8009c90 <CDC_Init_FS+0x20>)
 8009c7a:	f7fe fc1b 	bl	80084b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009c7e:	4905      	ldr	r1, [pc, #20]	; (8009c94 <CDC_Init_FS+0x24>)
 8009c80:	4803      	ldr	r0, [pc, #12]	; (8009c90 <CDC_Init_FS+0x20>)
 8009c82:	f7fe fc39 	bl	80084f8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009c86:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	20000eb8 	.word	0x20000eb8
 8009c90:	200003dc 	.word	0x200003dc
 8009c94:	200006b8 	.word	0x200006b8

08009c98 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009c9c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	4603      	mov	r3, r0
 8009cb0:	6039      	str	r1, [r7, #0]
 8009cb2:	71fb      	strb	r3, [r7, #7]
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009cb8:	79fb      	ldrb	r3, [r7, #7]
 8009cba:	2b23      	cmp	r3, #35	; 0x23
 8009cbc:	d84a      	bhi.n	8009d54 <CDC_Control_FS+0xac>
 8009cbe:	a201      	add	r2, pc, #4	; (adr r2, 8009cc4 <CDC_Control_FS+0x1c>)
 8009cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc4:	08009d55 	.word	0x08009d55
 8009cc8:	08009d55 	.word	0x08009d55
 8009ccc:	08009d55 	.word	0x08009d55
 8009cd0:	08009d55 	.word	0x08009d55
 8009cd4:	08009d55 	.word	0x08009d55
 8009cd8:	08009d55 	.word	0x08009d55
 8009cdc:	08009d55 	.word	0x08009d55
 8009ce0:	08009d55 	.word	0x08009d55
 8009ce4:	08009d55 	.word	0x08009d55
 8009ce8:	08009d55 	.word	0x08009d55
 8009cec:	08009d55 	.word	0x08009d55
 8009cf0:	08009d55 	.word	0x08009d55
 8009cf4:	08009d55 	.word	0x08009d55
 8009cf8:	08009d55 	.word	0x08009d55
 8009cfc:	08009d55 	.word	0x08009d55
 8009d00:	08009d55 	.word	0x08009d55
 8009d04:	08009d55 	.word	0x08009d55
 8009d08:	08009d55 	.word	0x08009d55
 8009d0c:	08009d55 	.word	0x08009d55
 8009d10:	08009d55 	.word	0x08009d55
 8009d14:	08009d55 	.word	0x08009d55
 8009d18:	08009d55 	.word	0x08009d55
 8009d1c:	08009d55 	.word	0x08009d55
 8009d20:	08009d55 	.word	0x08009d55
 8009d24:	08009d55 	.word	0x08009d55
 8009d28:	08009d55 	.word	0x08009d55
 8009d2c:	08009d55 	.word	0x08009d55
 8009d30:	08009d55 	.word	0x08009d55
 8009d34:	08009d55 	.word	0x08009d55
 8009d38:	08009d55 	.word	0x08009d55
 8009d3c:	08009d55 	.word	0x08009d55
 8009d40:	08009d55 	.word	0x08009d55
 8009d44:	08009d55 	.word	0x08009d55
 8009d48:	08009d55 	.word	0x08009d55
 8009d4c:	08009d55 	.word	0x08009d55
 8009d50:	08009d55 	.word	0x08009d55
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009d54:	bf00      	nop
  }

  return (USBD_OK);
 8009d56:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009d6e:	6879      	ldr	r1, [r7, #4]
 8009d70:	4805      	ldr	r0, [pc, #20]	; (8009d88 <CDC_Receive_FS+0x24>)
 8009d72:	f7fe fbc1 	bl	80084f8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009d76:	4804      	ldr	r0, [pc, #16]	; (8009d88 <CDC_Receive_FS+0x24>)
 8009d78:	f7fe fc22 	bl	80085c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009d7c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3708      	adds	r7, #8
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	200003dc 	.word	0x200003dc

08009d8c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	460b      	mov	r3, r1
 8009d96:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009d9c:	4b0d      	ldr	r3, [pc, #52]	; (8009dd4 <CDC_Transmit_FS+0x48>)
 8009d9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009da2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d001      	beq.n	8009db2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009dae:	2301      	movs	r3, #1
 8009db0:	e00b      	b.n	8009dca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009db2:	887b      	ldrh	r3, [r7, #2]
 8009db4:	461a      	mov	r2, r3
 8009db6:	6879      	ldr	r1, [r7, #4]
 8009db8:	4806      	ldr	r0, [pc, #24]	; (8009dd4 <CDC_Transmit_FS+0x48>)
 8009dba:	f7fe fb7b 	bl	80084b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009dbe:	4805      	ldr	r0, [pc, #20]	; (8009dd4 <CDC_Transmit_FS+0x48>)
 8009dc0:	f7fe fbb8 	bl	8008534 <USBD_CDC_TransmitPacket>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3710      	adds	r7, #16
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	200003dc 	.word	0x200003dc

08009dd8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b087      	sub	sp, #28
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	4613      	mov	r3, r2
 8009de4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009de6:	2300      	movs	r3, #0
 8009de8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009dea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	371c      	adds	r7, #28
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr
	...

08009dfc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	4603      	mov	r3, r0
 8009e04:	6039      	str	r1, [r7, #0]
 8009e06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	2212      	movs	r2, #18
 8009e0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009e0e:	4b03      	ldr	r3, [pc, #12]	; (8009e1c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr
 8009e1c:	200000c8 	.word	0x200000c8

08009e20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	4603      	mov	r3, r0
 8009e28:	6039      	str	r1, [r7, #0]
 8009e2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	2204      	movs	r2, #4
 8009e30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009e32:	4b03      	ldr	r3, [pc, #12]	; (8009e40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr
 8009e40:	200000dc 	.word	0x200000dc

08009e44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	6039      	str	r1, [r7, #0]
 8009e4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e50:	79fb      	ldrb	r3, [r7, #7]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d105      	bne.n	8009e62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e56:	683a      	ldr	r2, [r7, #0]
 8009e58:	4907      	ldr	r1, [pc, #28]	; (8009e78 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e5a:	4808      	ldr	r0, [pc, #32]	; (8009e7c <USBD_FS_ProductStrDescriptor+0x38>)
 8009e5c:	f7ff fdf8 	bl	8009a50 <USBD_GetString>
 8009e60:	e004      	b.n	8009e6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	4904      	ldr	r1, [pc, #16]	; (8009e78 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e66:	4805      	ldr	r0, [pc, #20]	; (8009e7c <USBD_FS_ProductStrDescriptor+0x38>)
 8009e68:	f7ff fdf2 	bl	8009a50 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e6c:	4b02      	ldr	r3, [pc, #8]	; (8009e78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	200016b8 	.word	0x200016b8
 8009e7c:	08010f80 	.word	0x08010f80

08009e80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	4603      	mov	r3, r0
 8009e88:	6039      	str	r1, [r7, #0]
 8009e8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009e8c:	683a      	ldr	r2, [r7, #0]
 8009e8e:	4904      	ldr	r1, [pc, #16]	; (8009ea0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009e90:	4804      	ldr	r0, [pc, #16]	; (8009ea4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009e92:	f7ff fddd 	bl	8009a50 <USBD_GetString>
  return USBD_StrDesc;
 8009e96:	4b02      	ldr	r3, [pc, #8]	; (8009ea0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	200016b8 	.word	0x200016b8
 8009ea4:	08010f98 	.word	0x08010f98

08009ea8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	4603      	mov	r3, r0
 8009eb0:	6039      	str	r1, [r7, #0]
 8009eb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	221a      	movs	r2, #26
 8009eb8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009eba:	f000 f843 	bl	8009f44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009ebe:	4b02      	ldr	r3, [pc, #8]	; (8009ec8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3708      	adds	r7, #8
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	200000e0 	.word	0x200000e0

08009ecc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	6039      	str	r1, [r7, #0]
 8009ed6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ed8:	79fb      	ldrb	r3, [r7, #7]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d105      	bne.n	8009eea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ede:	683a      	ldr	r2, [r7, #0]
 8009ee0:	4907      	ldr	r1, [pc, #28]	; (8009f00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009ee2:	4808      	ldr	r0, [pc, #32]	; (8009f04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ee4:	f7ff fdb4 	bl	8009a50 <USBD_GetString>
 8009ee8:	e004      	b.n	8009ef4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009eea:	683a      	ldr	r2, [r7, #0]
 8009eec:	4904      	ldr	r1, [pc, #16]	; (8009f00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009eee:	4805      	ldr	r0, [pc, #20]	; (8009f04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ef0:	f7ff fdae 	bl	8009a50 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ef4:	4b02      	ldr	r3, [pc, #8]	; (8009f00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3708      	adds	r7, #8
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	200016b8 	.word	0x200016b8
 8009f04:	08010fac 	.word	0x08010fac

08009f08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	4603      	mov	r3, r0
 8009f10:	6039      	str	r1, [r7, #0]
 8009f12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f14:	79fb      	ldrb	r3, [r7, #7]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d105      	bne.n	8009f26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f1a:	683a      	ldr	r2, [r7, #0]
 8009f1c:	4907      	ldr	r1, [pc, #28]	; (8009f3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009f1e:	4808      	ldr	r0, [pc, #32]	; (8009f40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f20:	f7ff fd96 	bl	8009a50 <USBD_GetString>
 8009f24:	e004      	b.n	8009f30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f26:	683a      	ldr	r2, [r7, #0]
 8009f28:	4904      	ldr	r1, [pc, #16]	; (8009f3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009f2a:	4805      	ldr	r0, [pc, #20]	; (8009f40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f2c:	f7ff fd90 	bl	8009a50 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f30:	4b02      	ldr	r3, [pc, #8]	; (8009f3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3708      	adds	r7, #8
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	200016b8 	.word	0x200016b8
 8009f40:	08010fb8 	.word	0x08010fb8

08009f44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009f4a:	4b0f      	ldr	r3, [pc, #60]	; (8009f88 <Get_SerialNum+0x44>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009f50:	4b0e      	ldr	r3, [pc, #56]	; (8009f8c <Get_SerialNum+0x48>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009f56:	4b0e      	ldr	r3, [pc, #56]	; (8009f90 <Get_SerialNum+0x4c>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	4413      	add	r3, r2
 8009f62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d009      	beq.n	8009f7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009f6a:	2208      	movs	r2, #8
 8009f6c:	4909      	ldr	r1, [pc, #36]	; (8009f94 <Get_SerialNum+0x50>)
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f000 f814 	bl	8009f9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009f74:	2204      	movs	r2, #4
 8009f76:	4908      	ldr	r1, [pc, #32]	; (8009f98 <Get_SerialNum+0x54>)
 8009f78:	68b8      	ldr	r0, [r7, #8]
 8009f7a:	f000 f80f 	bl	8009f9c <IntToUnicode>
  }
}
 8009f7e:	bf00      	nop
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	1fff7a10 	.word	0x1fff7a10
 8009f8c:	1fff7a14 	.word	0x1fff7a14
 8009f90:	1fff7a18 	.word	0x1fff7a18
 8009f94:	200000e2 	.word	0x200000e2
 8009f98:	200000f2 	.word	0x200000f2

08009f9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b087      	sub	sp, #28
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009faa:	2300      	movs	r3, #0
 8009fac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009fae:	2300      	movs	r3, #0
 8009fb0:	75fb      	strb	r3, [r7, #23]
 8009fb2:	e027      	b.n	800a004 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	0f1b      	lsrs	r3, r3, #28
 8009fb8:	2b09      	cmp	r3, #9
 8009fba:	d80b      	bhi.n	8009fd4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	0f1b      	lsrs	r3, r3, #28
 8009fc0:	b2da      	uxtb	r2, r3
 8009fc2:	7dfb      	ldrb	r3, [r7, #23]
 8009fc4:	005b      	lsls	r3, r3, #1
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	440b      	add	r3, r1
 8009fcc:	3230      	adds	r2, #48	; 0x30
 8009fce:	b2d2      	uxtb	r2, r2
 8009fd0:	701a      	strb	r2, [r3, #0]
 8009fd2:	e00a      	b.n	8009fea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	0f1b      	lsrs	r3, r3, #28
 8009fd8:	b2da      	uxtb	r2, r3
 8009fda:	7dfb      	ldrb	r3, [r7, #23]
 8009fdc:	005b      	lsls	r3, r3, #1
 8009fde:	4619      	mov	r1, r3
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	440b      	add	r3, r1
 8009fe4:	3237      	adds	r2, #55	; 0x37
 8009fe6:	b2d2      	uxtb	r2, r2
 8009fe8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	011b      	lsls	r3, r3, #4
 8009fee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ff0:	7dfb      	ldrb	r3, [r7, #23]
 8009ff2:	005b      	lsls	r3, r3, #1
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009ffe:	7dfb      	ldrb	r3, [r7, #23]
 800a000:	3301      	adds	r3, #1
 800a002:	75fb      	strb	r3, [r7, #23]
 800a004:	7dfa      	ldrb	r2, [r7, #23]
 800a006:	79fb      	ldrb	r3, [r7, #7]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d3d3      	bcc.n	8009fb4 <IntToUnicode+0x18>
  }
}
 800a00c:	bf00      	nop
 800a00e:	bf00      	nop
 800a010:	371c      	adds	r7, #28
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
	...

0800a01c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b08a      	sub	sp, #40	; 0x28
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a024:	f107 0314 	add.w	r3, r7, #20
 800a028:	2200      	movs	r2, #0
 800a02a:	601a      	str	r2, [r3, #0]
 800a02c:	605a      	str	r2, [r3, #4]
 800a02e:	609a      	str	r2, [r3, #8]
 800a030:	60da      	str	r2, [r3, #12]
 800a032:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a03c:	d13a      	bne.n	800a0b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a03e:	2300      	movs	r3, #0
 800a040:	613b      	str	r3, [r7, #16]
 800a042:	4b1e      	ldr	r3, [pc, #120]	; (800a0bc <HAL_PCD_MspInit+0xa0>)
 800a044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a046:	4a1d      	ldr	r2, [pc, #116]	; (800a0bc <HAL_PCD_MspInit+0xa0>)
 800a048:	f043 0301 	orr.w	r3, r3, #1
 800a04c:	6313      	str	r3, [r2, #48]	; 0x30
 800a04e:	4b1b      	ldr	r3, [pc, #108]	; (800a0bc <HAL_PCD_MspInit+0xa0>)
 800a050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a052:	f003 0301 	and.w	r3, r3, #1
 800a056:	613b      	str	r3, [r7, #16]
 800a058:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a05a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a05e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a060:	2302      	movs	r3, #2
 800a062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a064:	2300      	movs	r3, #0
 800a066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a068:	2303      	movs	r3, #3
 800a06a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a06c:	230a      	movs	r3, #10
 800a06e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a070:	f107 0314 	add.w	r3, r7, #20
 800a074:	4619      	mov	r1, r3
 800a076:	4812      	ldr	r0, [pc, #72]	; (800a0c0 <HAL_PCD_MspInit+0xa4>)
 800a078:	f7f8 fd40 	bl	8002afc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a07c:	4b0f      	ldr	r3, [pc, #60]	; (800a0bc <HAL_PCD_MspInit+0xa0>)
 800a07e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a080:	4a0e      	ldr	r2, [pc, #56]	; (800a0bc <HAL_PCD_MspInit+0xa0>)
 800a082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a086:	6353      	str	r3, [r2, #52]	; 0x34
 800a088:	2300      	movs	r3, #0
 800a08a:	60fb      	str	r3, [r7, #12]
 800a08c:	4b0b      	ldr	r3, [pc, #44]	; (800a0bc <HAL_PCD_MspInit+0xa0>)
 800a08e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a090:	4a0a      	ldr	r2, [pc, #40]	; (800a0bc <HAL_PCD_MspInit+0xa0>)
 800a092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a096:	6453      	str	r3, [r2, #68]	; 0x44
 800a098:	4b08      	ldr	r3, [pc, #32]	; (800a0bc <HAL_PCD_MspInit+0xa0>)
 800a09a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a09c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0a0:	60fb      	str	r3, [r7, #12]
 800a0a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	2100      	movs	r1, #0
 800a0a8:	2043      	movs	r0, #67	; 0x43
 800a0aa:	f7f8 fcf0 	bl	8002a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a0ae:	2043      	movs	r0, #67	; 0x43
 800a0b0:	f7f8 fd09 	bl	8002ac6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a0b4:	bf00      	nop
 800a0b6:	3728      	adds	r7, #40	; 0x28
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	40023800 	.word	0x40023800
 800a0c0:	40020000 	.word	0x40020000

0800a0c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a0d8:	4619      	mov	r1, r3
 800a0da:	4610      	mov	r0, r2
 800a0dc:	f7fe fb59 	bl	8008792 <USBD_LL_SetupStage>
}
 800a0e0:	bf00      	nop
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a0fa:	78fa      	ldrb	r2, [r7, #3]
 800a0fc:	6879      	ldr	r1, [r7, #4]
 800a0fe:	4613      	mov	r3, r2
 800a100:	00db      	lsls	r3, r3, #3
 800a102:	4413      	add	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	440b      	add	r3, r1
 800a108:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	78fb      	ldrb	r3, [r7, #3]
 800a110:	4619      	mov	r1, r3
 800a112:	f7fe fb93 	bl	800883c <USBD_LL_DataOutStage>
}
 800a116:	bf00      	nop
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b082      	sub	sp, #8
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
 800a126:	460b      	mov	r3, r1
 800a128:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a130:	78fa      	ldrb	r2, [r7, #3]
 800a132:	6879      	ldr	r1, [r7, #4]
 800a134:	4613      	mov	r3, r2
 800a136:	00db      	lsls	r3, r3, #3
 800a138:	4413      	add	r3, r2
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	440b      	add	r3, r1
 800a13e:	334c      	adds	r3, #76	; 0x4c
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	78fb      	ldrb	r3, [r7, #3]
 800a144:	4619      	mov	r1, r3
 800a146:	f7fe fc2c 	bl	80089a2 <USBD_LL_DataInStage>
}
 800a14a:	bf00      	nop
 800a14c:	3708      	adds	r7, #8
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b082      	sub	sp, #8
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a160:	4618      	mov	r0, r3
 800a162:	f7fe fd60 	bl	8008c26 <USBD_LL_SOF>
}
 800a166:	bf00      	nop
 800a168:	3708      	adds	r7, #8
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a16e:	b580      	push	{r7, lr}
 800a170:	b084      	sub	sp, #16
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a176:	2301      	movs	r3, #1
 800a178:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d102      	bne.n	800a188 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a182:	2300      	movs	r3, #0
 800a184:	73fb      	strb	r3, [r7, #15]
 800a186:	e008      	b.n	800a19a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	2b02      	cmp	r3, #2
 800a18e:	d102      	bne.n	800a196 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a190:	2301      	movs	r3, #1
 800a192:	73fb      	strb	r3, [r7, #15]
 800a194:	e001      	b.n	800a19a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a196:	f7f8 f915 	bl	80023c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a1a0:	7bfa      	ldrb	r2, [r7, #15]
 800a1a2:	4611      	mov	r1, r2
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7fe fd00 	bl	8008baa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7fe fca8 	bl	8008b06 <USBD_LL_Reset>
}
 800a1b6:	bf00      	nop
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
	...

0800a1c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7fe fcfb 	bl	8008bca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	6812      	ldr	r2, [r2, #0]
 800a1e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a1e6:	f043 0301 	orr.w	r3, r3, #1
 800a1ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6a1b      	ldr	r3, [r3, #32]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d005      	beq.n	800a200 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a1f4:	4b04      	ldr	r3, [pc, #16]	; (800a208 <HAL_PCD_SuspendCallback+0x48>)
 800a1f6:	691b      	ldr	r3, [r3, #16]
 800a1f8:	4a03      	ldr	r2, [pc, #12]	; (800a208 <HAL_PCD_SuspendCallback+0x48>)
 800a1fa:	f043 0306 	orr.w	r3, r3, #6
 800a1fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a200:	bf00      	nop
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	e000ed00 	.word	0xe000ed00

0800a20c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7fe fceb 	bl	8008bf6 <USBD_LL_Resume>
}
 800a220:	bf00      	nop
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	460b      	mov	r3, r1
 800a232:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a23a:	78fa      	ldrb	r2, [r7, #3]
 800a23c:	4611      	mov	r1, r2
 800a23e:	4618      	mov	r0, r3
 800a240:	f7fe fd43 	bl	8008cca <USBD_LL_IsoOUTIncomplete>
}
 800a244:	bf00      	nop
 800a246:	3708      	adds	r7, #8
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	460b      	mov	r3, r1
 800a256:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a25e:	78fa      	ldrb	r2, [r7, #3]
 800a260:	4611      	mov	r1, r2
 800a262:	4618      	mov	r0, r3
 800a264:	f7fe fcff 	bl	8008c66 <USBD_LL_IsoINIncomplete>
}
 800a268:	bf00      	nop
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a27e:	4618      	mov	r0, r3
 800a280:	f7fe fd55 	bl	8008d2e <USBD_LL_DevConnected>
}
 800a284:	bf00      	nop
 800a286:	3708      	adds	r7, #8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7fe fd52 	bl	8008d44 <USBD_LL_DevDisconnected>
}
 800a2a0:	bf00      	nop
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d13c      	bne.n	800a332 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a2b8:	4a20      	ldr	r2, [pc, #128]	; (800a33c <USBD_LL_Init+0x94>)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	4a1e      	ldr	r2, [pc, #120]	; (800a33c <USBD_LL_Init+0x94>)
 800a2c4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a2c8:	4b1c      	ldr	r3, [pc, #112]	; (800a33c <USBD_LL_Init+0x94>)
 800a2ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a2ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a2d0:	4b1a      	ldr	r3, [pc, #104]	; (800a33c <USBD_LL_Init+0x94>)
 800a2d2:	2204      	movs	r2, #4
 800a2d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a2d6:	4b19      	ldr	r3, [pc, #100]	; (800a33c <USBD_LL_Init+0x94>)
 800a2d8:	2202      	movs	r2, #2
 800a2da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a2dc:	4b17      	ldr	r3, [pc, #92]	; (800a33c <USBD_LL_Init+0x94>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a2e2:	4b16      	ldr	r3, [pc, #88]	; (800a33c <USBD_LL_Init+0x94>)
 800a2e4:	2202      	movs	r2, #2
 800a2e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a2e8:	4b14      	ldr	r3, [pc, #80]	; (800a33c <USBD_LL_Init+0x94>)
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a2ee:	4b13      	ldr	r3, [pc, #76]	; (800a33c <USBD_LL_Init+0x94>)
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a2f4:	4b11      	ldr	r3, [pc, #68]	; (800a33c <USBD_LL_Init+0x94>)
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a2fa:	4b10      	ldr	r3, [pc, #64]	; (800a33c <USBD_LL_Init+0x94>)
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a300:	4b0e      	ldr	r3, [pc, #56]	; (800a33c <USBD_LL_Init+0x94>)
 800a302:	2200      	movs	r2, #0
 800a304:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a306:	480d      	ldr	r0, [pc, #52]	; (800a33c <USBD_LL_Init+0x94>)
 800a308:	f7f9 fd85 	bl	8003e16 <HAL_PCD_Init>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d001      	beq.n	800a316 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a312:	f7f8 f857 	bl	80023c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a316:	2180      	movs	r1, #128	; 0x80
 800a318:	4808      	ldr	r0, [pc, #32]	; (800a33c <USBD_LL_Init+0x94>)
 800a31a:	f7fa ffdc 	bl	80052d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a31e:	2240      	movs	r2, #64	; 0x40
 800a320:	2100      	movs	r1, #0
 800a322:	4806      	ldr	r0, [pc, #24]	; (800a33c <USBD_LL_Init+0x94>)
 800a324:	f7fa ff90 	bl	8005248 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a328:	2280      	movs	r2, #128	; 0x80
 800a32a:	2101      	movs	r1, #1
 800a32c:	4803      	ldr	r0, [pc, #12]	; (800a33c <USBD_LL_Init+0x94>)
 800a32e:	f7fa ff8b 	bl	8005248 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a332:	2300      	movs	r3, #0
}
 800a334:	4618      	mov	r0, r3
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	200018b8 	.word	0x200018b8

0800a340 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a348:	2300      	movs	r3, #0
 800a34a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a356:	4618      	mov	r0, r3
 800a358:	f7f9 fe7a 	bl	8004050 <HAL_PCD_Start>
 800a35c:	4603      	mov	r3, r0
 800a35e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a360:	7bfb      	ldrb	r3, [r7, #15]
 800a362:	4618      	mov	r0, r3
 800a364:	f000 f942 	bl	800a5ec <USBD_Get_USB_Status>
 800a368:	4603      	mov	r3, r0
 800a36a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a36c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3710      	adds	r7, #16
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b084      	sub	sp, #16
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
 800a37e:	4608      	mov	r0, r1
 800a380:	4611      	mov	r1, r2
 800a382:	461a      	mov	r2, r3
 800a384:	4603      	mov	r3, r0
 800a386:	70fb      	strb	r3, [r7, #3]
 800a388:	460b      	mov	r3, r1
 800a38a:	70bb      	strb	r3, [r7, #2]
 800a38c:	4613      	mov	r3, r2
 800a38e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a390:	2300      	movs	r3, #0
 800a392:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a394:	2300      	movs	r3, #0
 800a396:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a39e:	78bb      	ldrb	r3, [r7, #2]
 800a3a0:	883a      	ldrh	r2, [r7, #0]
 800a3a2:	78f9      	ldrb	r1, [r7, #3]
 800a3a4:	f7fa fb4b 	bl	8004a3e <HAL_PCD_EP_Open>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3ac:	7bfb      	ldrb	r3, [r7, #15]
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f000 f91c 	bl	800a5ec <USBD_Get_USB_Status>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b084      	sub	sp, #16
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a3dc:	78fa      	ldrb	r2, [r7, #3]
 800a3de:	4611      	mov	r1, r2
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7fa fb94 	bl	8004b0e <HAL_PCD_EP_Close>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3ea:	7bfb      	ldrb	r3, [r7, #15]
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f000 f8fd 	bl	800a5ec <USBD_Get_USB_Status>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3710      	adds	r7, #16
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	460b      	mov	r3, r1
 800a40a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a40c:	2300      	movs	r3, #0
 800a40e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a410:	2300      	movs	r3, #0
 800a412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a41a:	78fa      	ldrb	r2, [r7, #3]
 800a41c:	4611      	mov	r1, r2
 800a41e:	4618      	mov	r0, r3
 800a420:	f7fa fc6c 	bl	8004cfc <HAL_PCD_EP_SetStall>
 800a424:	4603      	mov	r3, r0
 800a426:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a428:	7bfb      	ldrb	r3, [r7, #15]
 800a42a:	4618      	mov	r0, r3
 800a42c:	f000 f8de 	bl	800a5ec <USBD_Get_USB_Status>
 800a430:	4603      	mov	r3, r0
 800a432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a434:	7bbb      	ldrb	r3, [r7, #14]
}
 800a436:	4618      	mov	r0, r3
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}

0800a43e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b084      	sub	sp, #16
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
 800a446:	460b      	mov	r3, r1
 800a448:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a44a:	2300      	movs	r3, #0
 800a44c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a44e:	2300      	movs	r3, #0
 800a450:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a458:	78fa      	ldrb	r2, [r7, #3]
 800a45a:	4611      	mov	r1, r2
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7fa fcb1 	bl	8004dc4 <HAL_PCD_EP_ClrStall>
 800a462:	4603      	mov	r3, r0
 800a464:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a466:	7bfb      	ldrb	r3, [r7, #15]
 800a468:	4618      	mov	r0, r3
 800a46a:	f000 f8bf 	bl	800a5ec <USBD_Get_USB_Status>
 800a46e:	4603      	mov	r3, r0
 800a470:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a472:	7bbb      	ldrb	r3, [r7, #14]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b085      	sub	sp, #20
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	460b      	mov	r3, r1
 800a486:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a48e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a490:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a494:	2b00      	cmp	r3, #0
 800a496:	da0b      	bge.n	800a4b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a498:	78fb      	ldrb	r3, [r7, #3]
 800a49a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a49e:	68f9      	ldr	r1, [r7, #12]
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	00db      	lsls	r3, r3, #3
 800a4a4:	4413      	add	r3, r2
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	440b      	add	r3, r1
 800a4aa:	333e      	adds	r3, #62	; 0x3e
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	e00b      	b.n	800a4c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a4b0:	78fb      	ldrb	r3, [r7, #3]
 800a4b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4b6:	68f9      	ldr	r1, [r7, #12]
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	00db      	lsls	r3, r3, #3
 800a4bc:	4413      	add	r3, r2
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	440b      	add	r3, r1
 800a4c2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a4c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3714      	adds	r7, #20
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	460b      	mov	r3, r1
 800a4de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a4ee:	78fa      	ldrb	r2, [r7, #3]
 800a4f0:	4611      	mov	r1, r2
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fa fa7e 	bl	80049f4 <HAL_PCD_SetAddress>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4fc:	7bfb      	ldrb	r3, [r7, #15]
 800a4fe:	4618      	mov	r0, r3
 800a500:	f000 f874 	bl	800a5ec <USBD_Get_USB_Status>
 800a504:	4603      	mov	r3, r0
 800a506:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a508:	7bbb      	ldrb	r3, [r7, #14]
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b086      	sub	sp, #24
 800a516:	af00      	add	r7, sp, #0
 800a518:	60f8      	str	r0, [r7, #12]
 800a51a:	607a      	str	r2, [r7, #4]
 800a51c:	603b      	str	r3, [r7, #0]
 800a51e:	460b      	mov	r3, r1
 800a520:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a522:	2300      	movs	r3, #0
 800a524:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a530:	7af9      	ldrb	r1, [r7, #11]
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	f7fa fb97 	bl	8004c68 <HAL_PCD_EP_Transmit>
 800a53a:	4603      	mov	r3, r0
 800a53c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a53e:	7dfb      	ldrb	r3, [r7, #23]
 800a540:	4618      	mov	r0, r3
 800a542:	f000 f853 	bl	800a5ec <USBD_Get_USB_Status>
 800a546:	4603      	mov	r3, r0
 800a548:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a54a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3718      	adds	r7, #24
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b086      	sub	sp, #24
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	607a      	str	r2, [r7, #4]
 800a55e:	603b      	str	r3, [r7, #0]
 800a560:	460b      	mov	r3, r1
 800a562:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a564:	2300      	movs	r3, #0
 800a566:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a568:	2300      	movs	r3, #0
 800a56a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a572:	7af9      	ldrb	r1, [r7, #11]
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	f7fa fb13 	bl	8004ba2 <HAL_PCD_EP_Receive>
 800a57c:	4603      	mov	r3, r0
 800a57e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a580:	7dfb      	ldrb	r3, [r7, #23]
 800a582:	4618      	mov	r0, r3
 800a584:	f000 f832 	bl	800a5ec <USBD_Get_USB_Status>
 800a588:	4603      	mov	r3, r0
 800a58a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a58c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3718      	adds	r7, #24
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b082      	sub	sp, #8
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
 800a59e:	460b      	mov	r3, r1
 800a5a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a5a8:	78fa      	ldrb	r2, [r7, #3]
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7fa fb43 	bl	8004c38 <HAL_PCD_EP_GetRxCount>
 800a5b2:	4603      	mov	r3, r0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a5c4:	4b03      	ldr	r3, [pc, #12]	; (800a5d4 <USBD_static_malloc+0x18>)
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	370c      	adds	r7, #12
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop
 800a5d4:	20001dc4 	.word	0x20001dc4

0800a5d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]

}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a5fa:	79fb      	ldrb	r3, [r7, #7]
 800a5fc:	2b03      	cmp	r3, #3
 800a5fe:	d817      	bhi.n	800a630 <USBD_Get_USB_Status+0x44>
 800a600:	a201      	add	r2, pc, #4	; (adr r2, 800a608 <USBD_Get_USB_Status+0x1c>)
 800a602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a606:	bf00      	nop
 800a608:	0800a619 	.word	0x0800a619
 800a60c:	0800a61f 	.word	0x0800a61f
 800a610:	0800a625 	.word	0x0800a625
 800a614:	0800a62b 	.word	0x0800a62b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a618:	2300      	movs	r3, #0
 800a61a:	73fb      	strb	r3, [r7, #15]
    break;
 800a61c:	e00b      	b.n	800a636 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a61e:	2303      	movs	r3, #3
 800a620:	73fb      	strb	r3, [r7, #15]
    break;
 800a622:	e008      	b.n	800a636 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a624:	2301      	movs	r3, #1
 800a626:	73fb      	strb	r3, [r7, #15]
    break;
 800a628:	e005      	b.n	800a636 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a62a:	2303      	movs	r3, #3
 800a62c:	73fb      	strb	r3, [r7, #15]
    break;
 800a62e:	e002      	b.n	800a636 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a630:	2303      	movs	r3, #3
 800a632:	73fb      	strb	r3, [r7, #15]
    break;
 800a634:	bf00      	nop
  }
  return usb_status;
 800a636:	7bfb      	ldrb	r3, [r7, #15]
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3714      	adds	r7, #20
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <__cvt>:
 800a644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a648:	ec55 4b10 	vmov	r4, r5, d0
 800a64c:	2d00      	cmp	r5, #0
 800a64e:	460e      	mov	r6, r1
 800a650:	4619      	mov	r1, r3
 800a652:	462b      	mov	r3, r5
 800a654:	bfbb      	ittet	lt
 800a656:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a65a:	461d      	movlt	r5, r3
 800a65c:	2300      	movge	r3, #0
 800a65e:	232d      	movlt	r3, #45	; 0x2d
 800a660:	700b      	strb	r3, [r1, #0]
 800a662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a664:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a668:	4691      	mov	r9, r2
 800a66a:	f023 0820 	bic.w	r8, r3, #32
 800a66e:	bfbc      	itt	lt
 800a670:	4622      	movlt	r2, r4
 800a672:	4614      	movlt	r4, r2
 800a674:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a678:	d005      	beq.n	800a686 <__cvt+0x42>
 800a67a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a67e:	d100      	bne.n	800a682 <__cvt+0x3e>
 800a680:	3601      	adds	r6, #1
 800a682:	2102      	movs	r1, #2
 800a684:	e000      	b.n	800a688 <__cvt+0x44>
 800a686:	2103      	movs	r1, #3
 800a688:	ab03      	add	r3, sp, #12
 800a68a:	9301      	str	r3, [sp, #4]
 800a68c:	ab02      	add	r3, sp, #8
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	ec45 4b10 	vmov	d0, r4, r5
 800a694:	4653      	mov	r3, sl
 800a696:	4632      	mov	r2, r6
 800a698:	f001 f902 	bl	800b8a0 <_dtoa_r>
 800a69c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a6a0:	4607      	mov	r7, r0
 800a6a2:	d102      	bne.n	800a6aa <__cvt+0x66>
 800a6a4:	f019 0f01 	tst.w	r9, #1
 800a6a8:	d022      	beq.n	800a6f0 <__cvt+0xac>
 800a6aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a6ae:	eb07 0906 	add.w	r9, r7, r6
 800a6b2:	d110      	bne.n	800a6d6 <__cvt+0x92>
 800a6b4:	783b      	ldrb	r3, [r7, #0]
 800a6b6:	2b30      	cmp	r3, #48	; 0x30
 800a6b8:	d10a      	bne.n	800a6d0 <__cvt+0x8c>
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	2300      	movs	r3, #0
 800a6be:	4620      	mov	r0, r4
 800a6c0:	4629      	mov	r1, r5
 800a6c2:	f7f6 fa01 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6c6:	b918      	cbnz	r0, 800a6d0 <__cvt+0x8c>
 800a6c8:	f1c6 0601 	rsb	r6, r6, #1
 800a6cc:	f8ca 6000 	str.w	r6, [sl]
 800a6d0:	f8da 3000 	ldr.w	r3, [sl]
 800a6d4:	4499      	add	r9, r3
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	2300      	movs	r3, #0
 800a6da:	4620      	mov	r0, r4
 800a6dc:	4629      	mov	r1, r5
 800a6de:	f7f6 f9f3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6e2:	b108      	cbz	r0, 800a6e8 <__cvt+0xa4>
 800a6e4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a6e8:	2230      	movs	r2, #48	; 0x30
 800a6ea:	9b03      	ldr	r3, [sp, #12]
 800a6ec:	454b      	cmp	r3, r9
 800a6ee:	d307      	bcc.n	800a700 <__cvt+0xbc>
 800a6f0:	9b03      	ldr	r3, [sp, #12]
 800a6f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6f4:	1bdb      	subs	r3, r3, r7
 800a6f6:	4638      	mov	r0, r7
 800a6f8:	6013      	str	r3, [r2, #0]
 800a6fa:	b004      	add	sp, #16
 800a6fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a700:	1c59      	adds	r1, r3, #1
 800a702:	9103      	str	r1, [sp, #12]
 800a704:	701a      	strb	r2, [r3, #0]
 800a706:	e7f0      	b.n	800a6ea <__cvt+0xa6>

0800a708 <__exponent>:
 800a708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a70a:	4603      	mov	r3, r0
 800a70c:	2900      	cmp	r1, #0
 800a70e:	bfb8      	it	lt
 800a710:	4249      	neglt	r1, r1
 800a712:	f803 2b02 	strb.w	r2, [r3], #2
 800a716:	bfb4      	ite	lt
 800a718:	222d      	movlt	r2, #45	; 0x2d
 800a71a:	222b      	movge	r2, #43	; 0x2b
 800a71c:	2909      	cmp	r1, #9
 800a71e:	7042      	strb	r2, [r0, #1]
 800a720:	dd2a      	ble.n	800a778 <__exponent+0x70>
 800a722:	f10d 0207 	add.w	r2, sp, #7
 800a726:	4617      	mov	r7, r2
 800a728:	260a      	movs	r6, #10
 800a72a:	4694      	mov	ip, r2
 800a72c:	fb91 f5f6 	sdiv	r5, r1, r6
 800a730:	fb06 1415 	mls	r4, r6, r5, r1
 800a734:	3430      	adds	r4, #48	; 0x30
 800a736:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a73a:	460c      	mov	r4, r1
 800a73c:	2c63      	cmp	r4, #99	; 0x63
 800a73e:	f102 32ff 	add.w	r2, r2, #4294967295
 800a742:	4629      	mov	r1, r5
 800a744:	dcf1      	bgt.n	800a72a <__exponent+0x22>
 800a746:	3130      	adds	r1, #48	; 0x30
 800a748:	f1ac 0402 	sub.w	r4, ip, #2
 800a74c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a750:	1c41      	adds	r1, r0, #1
 800a752:	4622      	mov	r2, r4
 800a754:	42ba      	cmp	r2, r7
 800a756:	d30a      	bcc.n	800a76e <__exponent+0x66>
 800a758:	f10d 0209 	add.w	r2, sp, #9
 800a75c:	eba2 020c 	sub.w	r2, r2, ip
 800a760:	42bc      	cmp	r4, r7
 800a762:	bf88      	it	hi
 800a764:	2200      	movhi	r2, #0
 800a766:	4413      	add	r3, r2
 800a768:	1a18      	subs	r0, r3, r0
 800a76a:	b003      	add	sp, #12
 800a76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a76e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a772:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a776:	e7ed      	b.n	800a754 <__exponent+0x4c>
 800a778:	2330      	movs	r3, #48	; 0x30
 800a77a:	3130      	adds	r1, #48	; 0x30
 800a77c:	7083      	strb	r3, [r0, #2]
 800a77e:	70c1      	strb	r1, [r0, #3]
 800a780:	1d03      	adds	r3, r0, #4
 800a782:	e7f1      	b.n	800a768 <__exponent+0x60>

0800a784 <_printf_float>:
 800a784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a788:	ed2d 8b02 	vpush	{d8}
 800a78c:	b08d      	sub	sp, #52	; 0x34
 800a78e:	460c      	mov	r4, r1
 800a790:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a794:	4616      	mov	r6, r2
 800a796:	461f      	mov	r7, r3
 800a798:	4605      	mov	r5, r0
 800a79a:	f000 ff7d 	bl	800b698 <_localeconv_r>
 800a79e:	f8d0 a000 	ldr.w	sl, [r0]
 800a7a2:	4650      	mov	r0, sl
 800a7a4:	f7f5 fd64 	bl	8000270 <strlen>
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	930a      	str	r3, [sp, #40]	; 0x28
 800a7ac:	6823      	ldr	r3, [r4, #0]
 800a7ae:	9305      	str	r3, [sp, #20]
 800a7b0:	f8d8 3000 	ldr.w	r3, [r8]
 800a7b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a7b8:	3307      	adds	r3, #7
 800a7ba:	f023 0307 	bic.w	r3, r3, #7
 800a7be:	f103 0208 	add.w	r2, r3, #8
 800a7c2:	f8c8 2000 	str.w	r2, [r8]
 800a7c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a7ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a7ce:	9307      	str	r3, [sp, #28]
 800a7d0:	f8cd 8018 	str.w	r8, [sp, #24]
 800a7d4:	ee08 0a10 	vmov	s16, r0
 800a7d8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a7dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7e0:	4b9e      	ldr	r3, [pc, #632]	; (800aa5c <_printf_float+0x2d8>)
 800a7e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a7e6:	f7f6 f9a1 	bl	8000b2c <__aeabi_dcmpun>
 800a7ea:	bb88      	cbnz	r0, 800a850 <_printf_float+0xcc>
 800a7ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7f0:	4b9a      	ldr	r3, [pc, #616]	; (800aa5c <_printf_float+0x2d8>)
 800a7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a7f6:	f7f6 f97b 	bl	8000af0 <__aeabi_dcmple>
 800a7fa:	bb48      	cbnz	r0, 800a850 <_printf_float+0xcc>
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	2300      	movs	r3, #0
 800a800:	4640      	mov	r0, r8
 800a802:	4649      	mov	r1, r9
 800a804:	f7f6 f96a 	bl	8000adc <__aeabi_dcmplt>
 800a808:	b110      	cbz	r0, 800a810 <_printf_float+0x8c>
 800a80a:	232d      	movs	r3, #45	; 0x2d
 800a80c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a810:	4a93      	ldr	r2, [pc, #588]	; (800aa60 <_printf_float+0x2dc>)
 800a812:	4b94      	ldr	r3, [pc, #592]	; (800aa64 <_printf_float+0x2e0>)
 800a814:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a818:	bf94      	ite	ls
 800a81a:	4690      	movls	r8, r2
 800a81c:	4698      	movhi	r8, r3
 800a81e:	2303      	movs	r3, #3
 800a820:	6123      	str	r3, [r4, #16]
 800a822:	9b05      	ldr	r3, [sp, #20]
 800a824:	f023 0304 	bic.w	r3, r3, #4
 800a828:	6023      	str	r3, [r4, #0]
 800a82a:	f04f 0900 	mov.w	r9, #0
 800a82e:	9700      	str	r7, [sp, #0]
 800a830:	4633      	mov	r3, r6
 800a832:	aa0b      	add	r2, sp, #44	; 0x2c
 800a834:	4621      	mov	r1, r4
 800a836:	4628      	mov	r0, r5
 800a838:	f000 f9da 	bl	800abf0 <_printf_common>
 800a83c:	3001      	adds	r0, #1
 800a83e:	f040 8090 	bne.w	800a962 <_printf_float+0x1de>
 800a842:	f04f 30ff 	mov.w	r0, #4294967295
 800a846:	b00d      	add	sp, #52	; 0x34
 800a848:	ecbd 8b02 	vpop	{d8}
 800a84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a850:	4642      	mov	r2, r8
 800a852:	464b      	mov	r3, r9
 800a854:	4640      	mov	r0, r8
 800a856:	4649      	mov	r1, r9
 800a858:	f7f6 f968 	bl	8000b2c <__aeabi_dcmpun>
 800a85c:	b140      	cbz	r0, 800a870 <_printf_float+0xec>
 800a85e:	464b      	mov	r3, r9
 800a860:	2b00      	cmp	r3, #0
 800a862:	bfbc      	itt	lt
 800a864:	232d      	movlt	r3, #45	; 0x2d
 800a866:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a86a:	4a7f      	ldr	r2, [pc, #508]	; (800aa68 <_printf_float+0x2e4>)
 800a86c:	4b7f      	ldr	r3, [pc, #508]	; (800aa6c <_printf_float+0x2e8>)
 800a86e:	e7d1      	b.n	800a814 <_printf_float+0x90>
 800a870:	6863      	ldr	r3, [r4, #4]
 800a872:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a876:	9206      	str	r2, [sp, #24]
 800a878:	1c5a      	adds	r2, r3, #1
 800a87a:	d13f      	bne.n	800a8fc <_printf_float+0x178>
 800a87c:	2306      	movs	r3, #6
 800a87e:	6063      	str	r3, [r4, #4]
 800a880:	9b05      	ldr	r3, [sp, #20]
 800a882:	6861      	ldr	r1, [r4, #4]
 800a884:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a888:	2300      	movs	r3, #0
 800a88a:	9303      	str	r3, [sp, #12]
 800a88c:	ab0a      	add	r3, sp, #40	; 0x28
 800a88e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a892:	ab09      	add	r3, sp, #36	; 0x24
 800a894:	ec49 8b10 	vmov	d0, r8, r9
 800a898:	9300      	str	r3, [sp, #0]
 800a89a:	6022      	str	r2, [r4, #0]
 800a89c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	f7ff fecf 	bl	800a644 <__cvt>
 800a8a6:	9b06      	ldr	r3, [sp, #24]
 800a8a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8aa:	2b47      	cmp	r3, #71	; 0x47
 800a8ac:	4680      	mov	r8, r0
 800a8ae:	d108      	bne.n	800a8c2 <_printf_float+0x13e>
 800a8b0:	1cc8      	adds	r0, r1, #3
 800a8b2:	db02      	blt.n	800a8ba <_printf_float+0x136>
 800a8b4:	6863      	ldr	r3, [r4, #4]
 800a8b6:	4299      	cmp	r1, r3
 800a8b8:	dd41      	ble.n	800a93e <_printf_float+0x1ba>
 800a8ba:	f1ab 0302 	sub.w	r3, fp, #2
 800a8be:	fa5f fb83 	uxtb.w	fp, r3
 800a8c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a8c6:	d820      	bhi.n	800a90a <_printf_float+0x186>
 800a8c8:	3901      	subs	r1, #1
 800a8ca:	465a      	mov	r2, fp
 800a8cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a8d0:	9109      	str	r1, [sp, #36]	; 0x24
 800a8d2:	f7ff ff19 	bl	800a708 <__exponent>
 800a8d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8d8:	1813      	adds	r3, r2, r0
 800a8da:	2a01      	cmp	r2, #1
 800a8dc:	4681      	mov	r9, r0
 800a8de:	6123      	str	r3, [r4, #16]
 800a8e0:	dc02      	bgt.n	800a8e8 <_printf_float+0x164>
 800a8e2:	6822      	ldr	r2, [r4, #0]
 800a8e4:	07d2      	lsls	r2, r2, #31
 800a8e6:	d501      	bpl.n	800a8ec <_printf_float+0x168>
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	6123      	str	r3, [r4, #16]
 800a8ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d09c      	beq.n	800a82e <_printf_float+0xaa>
 800a8f4:	232d      	movs	r3, #45	; 0x2d
 800a8f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8fa:	e798      	b.n	800a82e <_printf_float+0xaa>
 800a8fc:	9a06      	ldr	r2, [sp, #24]
 800a8fe:	2a47      	cmp	r2, #71	; 0x47
 800a900:	d1be      	bne.n	800a880 <_printf_float+0xfc>
 800a902:	2b00      	cmp	r3, #0
 800a904:	d1bc      	bne.n	800a880 <_printf_float+0xfc>
 800a906:	2301      	movs	r3, #1
 800a908:	e7b9      	b.n	800a87e <_printf_float+0xfa>
 800a90a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a90e:	d118      	bne.n	800a942 <_printf_float+0x1be>
 800a910:	2900      	cmp	r1, #0
 800a912:	6863      	ldr	r3, [r4, #4]
 800a914:	dd0b      	ble.n	800a92e <_printf_float+0x1aa>
 800a916:	6121      	str	r1, [r4, #16]
 800a918:	b913      	cbnz	r3, 800a920 <_printf_float+0x19c>
 800a91a:	6822      	ldr	r2, [r4, #0]
 800a91c:	07d0      	lsls	r0, r2, #31
 800a91e:	d502      	bpl.n	800a926 <_printf_float+0x1a2>
 800a920:	3301      	adds	r3, #1
 800a922:	440b      	add	r3, r1
 800a924:	6123      	str	r3, [r4, #16]
 800a926:	65a1      	str	r1, [r4, #88]	; 0x58
 800a928:	f04f 0900 	mov.w	r9, #0
 800a92c:	e7de      	b.n	800a8ec <_printf_float+0x168>
 800a92e:	b913      	cbnz	r3, 800a936 <_printf_float+0x1b2>
 800a930:	6822      	ldr	r2, [r4, #0]
 800a932:	07d2      	lsls	r2, r2, #31
 800a934:	d501      	bpl.n	800a93a <_printf_float+0x1b6>
 800a936:	3302      	adds	r3, #2
 800a938:	e7f4      	b.n	800a924 <_printf_float+0x1a0>
 800a93a:	2301      	movs	r3, #1
 800a93c:	e7f2      	b.n	800a924 <_printf_float+0x1a0>
 800a93e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a944:	4299      	cmp	r1, r3
 800a946:	db05      	blt.n	800a954 <_printf_float+0x1d0>
 800a948:	6823      	ldr	r3, [r4, #0]
 800a94a:	6121      	str	r1, [r4, #16]
 800a94c:	07d8      	lsls	r0, r3, #31
 800a94e:	d5ea      	bpl.n	800a926 <_printf_float+0x1a2>
 800a950:	1c4b      	adds	r3, r1, #1
 800a952:	e7e7      	b.n	800a924 <_printf_float+0x1a0>
 800a954:	2900      	cmp	r1, #0
 800a956:	bfd4      	ite	le
 800a958:	f1c1 0202 	rsble	r2, r1, #2
 800a95c:	2201      	movgt	r2, #1
 800a95e:	4413      	add	r3, r2
 800a960:	e7e0      	b.n	800a924 <_printf_float+0x1a0>
 800a962:	6823      	ldr	r3, [r4, #0]
 800a964:	055a      	lsls	r2, r3, #21
 800a966:	d407      	bmi.n	800a978 <_printf_float+0x1f4>
 800a968:	6923      	ldr	r3, [r4, #16]
 800a96a:	4642      	mov	r2, r8
 800a96c:	4631      	mov	r1, r6
 800a96e:	4628      	mov	r0, r5
 800a970:	47b8      	blx	r7
 800a972:	3001      	adds	r0, #1
 800a974:	d12c      	bne.n	800a9d0 <_printf_float+0x24c>
 800a976:	e764      	b.n	800a842 <_printf_float+0xbe>
 800a978:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a97c:	f240 80e0 	bls.w	800ab40 <_printf_float+0x3bc>
 800a980:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a984:	2200      	movs	r2, #0
 800a986:	2300      	movs	r3, #0
 800a988:	f7f6 f89e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a98c:	2800      	cmp	r0, #0
 800a98e:	d034      	beq.n	800a9fa <_printf_float+0x276>
 800a990:	4a37      	ldr	r2, [pc, #220]	; (800aa70 <_printf_float+0x2ec>)
 800a992:	2301      	movs	r3, #1
 800a994:	4631      	mov	r1, r6
 800a996:	4628      	mov	r0, r5
 800a998:	47b8      	blx	r7
 800a99a:	3001      	adds	r0, #1
 800a99c:	f43f af51 	beq.w	800a842 <_printf_float+0xbe>
 800a9a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	db02      	blt.n	800a9ae <_printf_float+0x22a>
 800a9a8:	6823      	ldr	r3, [r4, #0]
 800a9aa:	07d8      	lsls	r0, r3, #31
 800a9ac:	d510      	bpl.n	800a9d0 <_printf_float+0x24c>
 800a9ae:	ee18 3a10 	vmov	r3, s16
 800a9b2:	4652      	mov	r2, sl
 800a9b4:	4631      	mov	r1, r6
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	47b8      	blx	r7
 800a9ba:	3001      	adds	r0, #1
 800a9bc:	f43f af41 	beq.w	800a842 <_printf_float+0xbe>
 800a9c0:	f04f 0800 	mov.w	r8, #0
 800a9c4:	f104 091a 	add.w	r9, r4, #26
 800a9c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9ca:	3b01      	subs	r3, #1
 800a9cc:	4543      	cmp	r3, r8
 800a9ce:	dc09      	bgt.n	800a9e4 <_printf_float+0x260>
 800a9d0:	6823      	ldr	r3, [r4, #0]
 800a9d2:	079b      	lsls	r3, r3, #30
 800a9d4:	f100 8107 	bmi.w	800abe6 <_printf_float+0x462>
 800a9d8:	68e0      	ldr	r0, [r4, #12]
 800a9da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9dc:	4298      	cmp	r0, r3
 800a9de:	bfb8      	it	lt
 800a9e0:	4618      	movlt	r0, r3
 800a9e2:	e730      	b.n	800a846 <_printf_float+0xc2>
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	464a      	mov	r2, r9
 800a9e8:	4631      	mov	r1, r6
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	47b8      	blx	r7
 800a9ee:	3001      	adds	r0, #1
 800a9f0:	f43f af27 	beq.w	800a842 <_printf_float+0xbe>
 800a9f4:	f108 0801 	add.w	r8, r8, #1
 800a9f8:	e7e6      	b.n	800a9c8 <_printf_float+0x244>
 800a9fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	dc39      	bgt.n	800aa74 <_printf_float+0x2f0>
 800aa00:	4a1b      	ldr	r2, [pc, #108]	; (800aa70 <_printf_float+0x2ec>)
 800aa02:	2301      	movs	r3, #1
 800aa04:	4631      	mov	r1, r6
 800aa06:	4628      	mov	r0, r5
 800aa08:	47b8      	blx	r7
 800aa0a:	3001      	adds	r0, #1
 800aa0c:	f43f af19 	beq.w	800a842 <_printf_float+0xbe>
 800aa10:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aa14:	4313      	orrs	r3, r2
 800aa16:	d102      	bne.n	800aa1e <_printf_float+0x29a>
 800aa18:	6823      	ldr	r3, [r4, #0]
 800aa1a:	07d9      	lsls	r1, r3, #31
 800aa1c:	d5d8      	bpl.n	800a9d0 <_printf_float+0x24c>
 800aa1e:	ee18 3a10 	vmov	r3, s16
 800aa22:	4652      	mov	r2, sl
 800aa24:	4631      	mov	r1, r6
 800aa26:	4628      	mov	r0, r5
 800aa28:	47b8      	blx	r7
 800aa2a:	3001      	adds	r0, #1
 800aa2c:	f43f af09 	beq.w	800a842 <_printf_float+0xbe>
 800aa30:	f04f 0900 	mov.w	r9, #0
 800aa34:	f104 0a1a 	add.w	sl, r4, #26
 800aa38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa3a:	425b      	negs	r3, r3
 800aa3c:	454b      	cmp	r3, r9
 800aa3e:	dc01      	bgt.n	800aa44 <_printf_float+0x2c0>
 800aa40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa42:	e792      	b.n	800a96a <_printf_float+0x1e6>
 800aa44:	2301      	movs	r3, #1
 800aa46:	4652      	mov	r2, sl
 800aa48:	4631      	mov	r1, r6
 800aa4a:	4628      	mov	r0, r5
 800aa4c:	47b8      	blx	r7
 800aa4e:	3001      	adds	r0, #1
 800aa50:	f43f aef7 	beq.w	800a842 <_printf_float+0xbe>
 800aa54:	f109 0901 	add.w	r9, r9, #1
 800aa58:	e7ee      	b.n	800aa38 <_printf_float+0x2b4>
 800aa5a:	bf00      	nop
 800aa5c:	7fefffff 	.word	0x7fefffff
 800aa60:	08010fec 	.word	0x08010fec
 800aa64:	08010ff0 	.word	0x08010ff0
 800aa68:	08010ff4 	.word	0x08010ff4
 800aa6c:	08010ff8 	.word	0x08010ff8
 800aa70:	08011388 	.word	0x08011388
 800aa74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	bfa8      	it	ge
 800aa7c:	461a      	movge	r2, r3
 800aa7e:	2a00      	cmp	r2, #0
 800aa80:	4691      	mov	r9, r2
 800aa82:	dc37      	bgt.n	800aaf4 <_printf_float+0x370>
 800aa84:	f04f 0b00 	mov.w	fp, #0
 800aa88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa8c:	f104 021a 	add.w	r2, r4, #26
 800aa90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa92:	9305      	str	r3, [sp, #20]
 800aa94:	eba3 0309 	sub.w	r3, r3, r9
 800aa98:	455b      	cmp	r3, fp
 800aa9a:	dc33      	bgt.n	800ab04 <_printf_float+0x380>
 800aa9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	db3b      	blt.n	800ab1c <_printf_float+0x398>
 800aaa4:	6823      	ldr	r3, [r4, #0]
 800aaa6:	07da      	lsls	r2, r3, #31
 800aaa8:	d438      	bmi.n	800ab1c <_printf_float+0x398>
 800aaaa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aaae:	eba2 0903 	sub.w	r9, r2, r3
 800aab2:	9b05      	ldr	r3, [sp, #20]
 800aab4:	1ad2      	subs	r2, r2, r3
 800aab6:	4591      	cmp	r9, r2
 800aab8:	bfa8      	it	ge
 800aaba:	4691      	movge	r9, r2
 800aabc:	f1b9 0f00 	cmp.w	r9, #0
 800aac0:	dc35      	bgt.n	800ab2e <_printf_float+0x3aa>
 800aac2:	f04f 0800 	mov.w	r8, #0
 800aac6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aaca:	f104 0a1a 	add.w	sl, r4, #26
 800aace:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aad2:	1a9b      	subs	r3, r3, r2
 800aad4:	eba3 0309 	sub.w	r3, r3, r9
 800aad8:	4543      	cmp	r3, r8
 800aada:	f77f af79 	ble.w	800a9d0 <_printf_float+0x24c>
 800aade:	2301      	movs	r3, #1
 800aae0:	4652      	mov	r2, sl
 800aae2:	4631      	mov	r1, r6
 800aae4:	4628      	mov	r0, r5
 800aae6:	47b8      	blx	r7
 800aae8:	3001      	adds	r0, #1
 800aaea:	f43f aeaa 	beq.w	800a842 <_printf_float+0xbe>
 800aaee:	f108 0801 	add.w	r8, r8, #1
 800aaf2:	e7ec      	b.n	800aace <_printf_float+0x34a>
 800aaf4:	4613      	mov	r3, r2
 800aaf6:	4631      	mov	r1, r6
 800aaf8:	4642      	mov	r2, r8
 800aafa:	4628      	mov	r0, r5
 800aafc:	47b8      	blx	r7
 800aafe:	3001      	adds	r0, #1
 800ab00:	d1c0      	bne.n	800aa84 <_printf_float+0x300>
 800ab02:	e69e      	b.n	800a842 <_printf_float+0xbe>
 800ab04:	2301      	movs	r3, #1
 800ab06:	4631      	mov	r1, r6
 800ab08:	4628      	mov	r0, r5
 800ab0a:	9205      	str	r2, [sp, #20]
 800ab0c:	47b8      	blx	r7
 800ab0e:	3001      	adds	r0, #1
 800ab10:	f43f ae97 	beq.w	800a842 <_printf_float+0xbe>
 800ab14:	9a05      	ldr	r2, [sp, #20]
 800ab16:	f10b 0b01 	add.w	fp, fp, #1
 800ab1a:	e7b9      	b.n	800aa90 <_printf_float+0x30c>
 800ab1c:	ee18 3a10 	vmov	r3, s16
 800ab20:	4652      	mov	r2, sl
 800ab22:	4631      	mov	r1, r6
 800ab24:	4628      	mov	r0, r5
 800ab26:	47b8      	blx	r7
 800ab28:	3001      	adds	r0, #1
 800ab2a:	d1be      	bne.n	800aaaa <_printf_float+0x326>
 800ab2c:	e689      	b.n	800a842 <_printf_float+0xbe>
 800ab2e:	9a05      	ldr	r2, [sp, #20]
 800ab30:	464b      	mov	r3, r9
 800ab32:	4442      	add	r2, r8
 800ab34:	4631      	mov	r1, r6
 800ab36:	4628      	mov	r0, r5
 800ab38:	47b8      	blx	r7
 800ab3a:	3001      	adds	r0, #1
 800ab3c:	d1c1      	bne.n	800aac2 <_printf_float+0x33e>
 800ab3e:	e680      	b.n	800a842 <_printf_float+0xbe>
 800ab40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab42:	2a01      	cmp	r2, #1
 800ab44:	dc01      	bgt.n	800ab4a <_printf_float+0x3c6>
 800ab46:	07db      	lsls	r3, r3, #31
 800ab48:	d53a      	bpl.n	800abc0 <_printf_float+0x43c>
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	4642      	mov	r2, r8
 800ab4e:	4631      	mov	r1, r6
 800ab50:	4628      	mov	r0, r5
 800ab52:	47b8      	blx	r7
 800ab54:	3001      	adds	r0, #1
 800ab56:	f43f ae74 	beq.w	800a842 <_printf_float+0xbe>
 800ab5a:	ee18 3a10 	vmov	r3, s16
 800ab5e:	4652      	mov	r2, sl
 800ab60:	4631      	mov	r1, r6
 800ab62:	4628      	mov	r0, r5
 800ab64:	47b8      	blx	r7
 800ab66:	3001      	adds	r0, #1
 800ab68:	f43f ae6b 	beq.w	800a842 <_printf_float+0xbe>
 800ab6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab70:	2200      	movs	r2, #0
 800ab72:	2300      	movs	r3, #0
 800ab74:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ab78:	f7f5 ffa6 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab7c:	b9d8      	cbnz	r0, 800abb6 <_printf_float+0x432>
 800ab7e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ab82:	f108 0201 	add.w	r2, r8, #1
 800ab86:	4631      	mov	r1, r6
 800ab88:	4628      	mov	r0, r5
 800ab8a:	47b8      	blx	r7
 800ab8c:	3001      	adds	r0, #1
 800ab8e:	d10e      	bne.n	800abae <_printf_float+0x42a>
 800ab90:	e657      	b.n	800a842 <_printf_float+0xbe>
 800ab92:	2301      	movs	r3, #1
 800ab94:	4652      	mov	r2, sl
 800ab96:	4631      	mov	r1, r6
 800ab98:	4628      	mov	r0, r5
 800ab9a:	47b8      	blx	r7
 800ab9c:	3001      	adds	r0, #1
 800ab9e:	f43f ae50 	beq.w	800a842 <_printf_float+0xbe>
 800aba2:	f108 0801 	add.w	r8, r8, #1
 800aba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aba8:	3b01      	subs	r3, #1
 800abaa:	4543      	cmp	r3, r8
 800abac:	dcf1      	bgt.n	800ab92 <_printf_float+0x40e>
 800abae:	464b      	mov	r3, r9
 800abb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800abb4:	e6da      	b.n	800a96c <_printf_float+0x1e8>
 800abb6:	f04f 0800 	mov.w	r8, #0
 800abba:	f104 0a1a 	add.w	sl, r4, #26
 800abbe:	e7f2      	b.n	800aba6 <_printf_float+0x422>
 800abc0:	2301      	movs	r3, #1
 800abc2:	4642      	mov	r2, r8
 800abc4:	e7df      	b.n	800ab86 <_printf_float+0x402>
 800abc6:	2301      	movs	r3, #1
 800abc8:	464a      	mov	r2, r9
 800abca:	4631      	mov	r1, r6
 800abcc:	4628      	mov	r0, r5
 800abce:	47b8      	blx	r7
 800abd0:	3001      	adds	r0, #1
 800abd2:	f43f ae36 	beq.w	800a842 <_printf_float+0xbe>
 800abd6:	f108 0801 	add.w	r8, r8, #1
 800abda:	68e3      	ldr	r3, [r4, #12]
 800abdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abde:	1a5b      	subs	r3, r3, r1
 800abe0:	4543      	cmp	r3, r8
 800abe2:	dcf0      	bgt.n	800abc6 <_printf_float+0x442>
 800abe4:	e6f8      	b.n	800a9d8 <_printf_float+0x254>
 800abe6:	f04f 0800 	mov.w	r8, #0
 800abea:	f104 0919 	add.w	r9, r4, #25
 800abee:	e7f4      	b.n	800abda <_printf_float+0x456>

0800abf0 <_printf_common>:
 800abf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abf4:	4616      	mov	r6, r2
 800abf6:	4699      	mov	r9, r3
 800abf8:	688a      	ldr	r2, [r1, #8]
 800abfa:	690b      	ldr	r3, [r1, #16]
 800abfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac00:	4293      	cmp	r3, r2
 800ac02:	bfb8      	it	lt
 800ac04:	4613      	movlt	r3, r2
 800ac06:	6033      	str	r3, [r6, #0]
 800ac08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac0c:	4607      	mov	r7, r0
 800ac0e:	460c      	mov	r4, r1
 800ac10:	b10a      	cbz	r2, 800ac16 <_printf_common+0x26>
 800ac12:	3301      	adds	r3, #1
 800ac14:	6033      	str	r3, [r6, #0]
 800ac16:	6823      	ldr	r3, [r4, #0]
 800ac18:	0699      	lsls	r1, r3, #26
 800ac1a:	bf42      	ittt	mi
 800ac1c:	6833      	ldrmi	r3, [r6, #0]
 800ac1e:	3302      	addmi	r3, #2
 800ac20:	6033      	strmi	r3, [r6, #0]
 800ac22:	6825      	ldr	r5, [r4, #0]
 800ac24:	f015 0506 	ands.w	r5, r5, #6
 800ac28:	d106      	bne.n	800ac38 <_printf_common+0x48>
 800ac2a:	f104 0a19 	add.w	sl, r4, #25
 800ac2e:	68e3      	ldr	r3, [r4, #12]
 800ac30:	6832      	ldr	r2, [r6, #0]
 800ac32:	1a9b      	subs	r3, r3, r2
 800ac34:	42ab      	cmp	r3, r5
 800ac36:	dc26      	bgt.n	800ac86 <_printf_common+0x96>
 800ac38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac3c:	1e13      	subs	r3, r2, #0
 800ac3e:	6822      	ldr	r2, [r4, #0]
 800ac40:	bf18      	it	ne
 800ac42:	2301      	movne	r3, #1
 800ac44:	0692      	lsls	r2, r2, #26
 800ac46:	d42b      	bmi.n	800aca0 <_printf_common+0xb0>
 800ac48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac4c:	4649      	mov	r1, r9
 800ac4e:	4638      	mov	r0, r7
 800ac50:	47c0      	blx	r8
 800ac52:	3001      	adds	r0, #1
 800ac54:	d01e      	beq.n	800ac94 <_printf_common+0xa4>
 800ac56:	6823      	ldr	r3, [r4, #0]
 800ac58:	6922      	ldr	r2, [r4, #16]
 800ac5a:	f003 0306 	and.w	r3, r3, #6
 800ac5e:	2b04      	cmp	r3, #4
 800ac60:	bf02      	ittt	eq
 800ac62:	68e5      	ldreq	r5, [r4, #12]
 800ac64:	6833      	ldreq	r3, [r6, #0]
 800ac66:	1aed      	subeq	r5, r5, r3
 800ac68:	68a3      	ldr	r3, [r4, #8]
 800ac6a:	bf0c      	ite	eq
 800ac6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac70:	2500      	movne	r5, #0
 800ac72:	4293      	cmp	r3, r2
 800ac74:	bfc4      	itt	gt
 800ac76:	1a9b      	subgt	r3, r3, r2
 800ac78:	18ed      	addgt	r5, r5, r3
 800ac7a:	2600      	movs	r6, #0
 800ac7c:	341a      	adds	r4, #26
 800ac7e:	42b5      	cmp	r5, r6
 800ac80:	d11a      	bne.n	800acb8 <_printf_common+0xc8>
 800ac82:	2000      	movs	r0, #0
 800ac84:	e008      	b.n	800ac98 <_printf_common+0xa8>
 800ac86:	2301      	movs	r3, #1
 800ac88:	4652      	mov	r2, sl
 800ac8a:	4649      	mov	r1, r9
 800ac8c:	4638      	mov	r0, r7
 800ac8e:	47c0      	blx	r8
 800ac90:	3001      	adds	r0, #1
 800ac92:	d103      	bne.n	800ac9c <_printf_common+0xac>
 800ac94:	f04f 30ff 	mov.w	r0, #4294967295
 800ac98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac9c:	3501      	adds	r5, #1
 800ac9e:	e7c6      	b.n	800ac2e <_printf_common+0x3e>
 800aca0:	18e1      	adds	r1, r4, r3
 800aca2:	1c5a      	adds	r2, r3, #1
 800aca4:	2030      	movs	r0, #48	; 0x30
 800aca6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800acaa:	4422      	add	r2, r4
 800acac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800acb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800acb4:	3302      	adds	r3, #2
 800acb6:	e7c7      	b.n	800ac48 <_printf_common+0x58>
 800acb8:	2301      	movs	r3, #1
 800acba:	4622      	mov	r2, r4
 800acbc:	4649      	mov	r1, r9
 800acbe:	4638      	mov	r0, r7
 800acc0:	47c0      	blx	r8
 800acc2:	3001      	adds	r0, #1
 800acc4:	d0e6      	beq.n	800ac94 <_printf_common+0xa4>
 800acc6:	3601      	adds	r6, #1
 800acc8:	e7d9      	b.n	800ac7e <_printf_common+0x8e>
	...

0800accc <_printf_i>:
 800accc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acd0:	7e0f      	ldrb	r7, [r1, #24]
 800acd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800acd4:	2f78      	cmp	r7, #120	; 0x78
 800acd6:	4691      	mov	r9, r2
 800acd8:	4680      	mov	r8, r0
 800acda:	460c      	mov	r4, r1
 800acdc:	469a      	mov	sl, r3
 800acde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ace2:	d807      	bhi.n	800acf4 <_printf_i+0x28>
 800ace4:	2f62      	cmp	r7, #98	; 0x62
 800ace6:	d80a      	bhi.n	800acfe <_printf_i+0x32>
 800ace8:	2f00      	cmp	r7, #0
 800acea:	f000 80d4 	beq.w	800ae96 <_printf_i+0x1ca>
 800acee:	2f58      	cmp	r7, #88	; 0x58
 800acf0:	f000 80c0 	beq.w	800ae74 <_printf_i+0x1a8>
 800acf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800acf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800acfc:	e03a      	b.n	800ad74 <_printf_i+0xa8>
 800acfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad02:	2b15      	cmp	r3, #21
 800ad04:	d8f6      	bhi.n	800acf4 <_printf_i+0x28>
 800ad06:	a101      	add	r1, pc, #4	; (adr r1, 800ad0c <_printf_i+0x40>)
 800ad08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad0c:	0800ad65 	.word	0x0800ad65
 800ad10:	0800ad79 	.word	0x0800ad79
 800ad14:	0800acf5 	.word	0x0800acf5
 800ad18:	0800acf5 	.word	0x0800acf5
 800ad1c:	0800acf5 	.word	0x0800acf5
 800ad20:	0800acf5 	.word	0x0800acf5
 800ad24:	0800ad79 	.word	0x0800ad79
 800ad28:	0800acf5 	.word	0x0800acf5
 800ad2c:	0800acf5 	.word	0x0800acf5
 800ad30:	0800acf5 	.word	0x0800acf5
 800ad34:	0800acf5 	.word	0x0800acf5
 800ad38:	0800ae7d 	.word	0x0800ae7d
 800ad3c:	0800ada5 	.word	0x0800ada5
 800ad40:	0800ae37 	.word	0x0800ae37
 800ad44:	0800acf5 	.word	0x0800acf5
 800ad48:	0800acf5 	.word	0x0800acf5
 800ad4c:	0800ae9f 	.word	0x0800ae9f
 800ad50:	0800acf5 	.word	0x0800acf5
 800ad54:	0800ada5 	.word	0x0800ada5
 800ad58:	0800acf5 	.word	0x0800acf5
 800ad5c:	0800acf5 	.word	0x0800acf5
 800ad60:	0800ae3f 	.word	0x0800ae3f
 800ad64:	682b      	ldr	r3, [r5, #0]
 800ad66:	1d1a      	adds	r2, r3, #4
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	602a      	str	r2, [r5, #0]
 800ad6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad74:	2301      	movs	r3, #1
 800ad76:	e09f      	b.n	800aeb8 <_printf_i+0x1ec>
 800ad78:	6820      	ldr	r0, [r4, #0]
 800ad7a:	682b      	ldr	r3, [r5, #0]
 800ad7c:	0607      	lsls	r7, r0, #24
 800ad7e:	f103 0104 	add.w	r1, r3, #4
 800ad82:	6029      	str	r1, [r5, #0]
 800ad84:	d501      	bpl.n	800ad8a <_printf_i+0xbe>
 800ad86:	681e      	ldr	r6, [r3, #0]
 800ad88:	e003      	b.n	800ad92 <_printf_i+0xc6>
 800ad8a:	0646      	lsls	r6, r0, #25
 800ad8c:	d5fb      	bpl.n	800ad86 <_printf_i+0xba>
 800ad8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ad92:	2e00      	cmp	r6, #0
 800ad94:	da03      	bge.n	800ad9e <_printf_i+0xd2>
 800ad96:	232d      	movs	r3, #45	; 0x2d
 800ad98:	4276      	negs	r6, r6
 800ad9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad9e:	485a      	ldr	r0, [pc, #360]	; (800af08 <_printf_i+0x23c>)
 800ada0:	230a      	movs	r3, #10
 800ada2:	e012      	b.n	800adca <_printf_i+0xfe>
 800ada4:	682b      	ldr	r3, [r5, #0]
 800ada6:	6820      	ldr	r0, [r4, #0]
 800ada8:	1d19      	adds	r1, r3, #4
 800adaa:	6029      	str	r1, [r5, #0]
 800adac:	0605      	lsls	r5, r0, #24
 800adae:	d501      	bpl.n	800adb4 <_printf_i+0xe8>
 800adb0:	681e      	ldr	r6, [r3, #0]
 800adb2:	e002      	b.n	800adba <_printf_i+0xee>
 800adb4:	0641      	lsls	r1, r0, #25
 800adb6:	d5fb      	bpl.n	800adb0 <_printf_i+0xe4>
 800adb8:	881e      	ldrh	r6, [r3, #0]
 800adba:	4853      	ldr	r0, [pc, #332]	; (800af08 <_printf_i+0x23c>)
 800adbc:	2f6f      	cmp	r7, #111	; 0x6f
 800adbe:	bf0c      	ite	eq
 800adc0:	2308      	moveq	r3, #8
 800adc2:	230a      	movne	r3, #10
 800adc4:	2100      	movs	r1, #0
 800adc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800adca:	6865      	ldr	r5, [r4, #4]
 800adcc:	60a5      	str	r5, [r4, #8]
 800adce:	2d00      	cmp	r5, #0
 800add0:	bfa2      	ittt	ge
 800add2:	6821      	ldrge	r1, [r4, #0]
 800add4:	f021 0104 	bicge.w	r1, r1, #4
 800add8:	6021      	strge	r1, [r4, #0]
 800adda:	b90e      	cbnz	r6, 800ade0 <_printf_i+0x114>
 800addc:	2d00      	cmp	r5, #0
 800adde:	d04b      	beq.n	800ae78 <_printf_i+0x1ac>
 800ade0:	4615      	mov	r5, r2
 800ade2:	fbb6 f1f3 	udiv	r1, r6, r3
 800ade6:	fb03 6711 	mls	r7, r3, r1, r6
 800adea:	5dc7      	ldrb	r7, [r0, r7]
 800adec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800adf0:	4637      	mov	r7, r6
 800adf2:	42bb      	cmp	r3, r7
 800adf4:	460e      	mov	r6, r1
 800adf6:	d9f4      	bls.n	800ade2 <_printf_i+0x116>
 800adf8:	2b08      	cmp	r3, #8
 800adfa:	d10b      	bne.n	800ae14 <_printf_i+0x148>
 800adfc:	6823      	ldr	r3, [r4, #0]
 800adfe:	07de      	lsls	r6, r3, #31
 800ae00:	d508      	bpl.n	800ae14 <_printf_i+0x148>
 800ae02:	6923      	ldr	r3, [r4, #16]
 800ae04:	6861      	ldr	r1, [r4, #4]
 800ae06:	4299      	cmp	r1, r3
 800ae08:	bfde      	ittt	le
 800ae0a:	2330      	movle	r3, #48	; 0x30
 800ae0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae10:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae14:	1b52      	subs	r2, r2, r5
 800ae16:	6122      	str	r2, [r4, #16]
 800ae18:	f8cd a000 	str.w	sl, [sp]
 800ae1c:	464b      	mov	r3, r9
 800ae1e:	aa03      	add	r2, sp, #12
 800ae20:	4621      	mov	r1, r4
 800ae22:	4640      	mov	r0, r8
 800ae24:	f7ff fee4 	bl	800abf0 <_printf_common>
 800ae28:	3001      	adds	r0, #1
 800ae2a:	d14a      	bne.n	800aec2 <_printf_i+0x1f6>
 800ae2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae30:	b004      	add	sp, #16
 800ae32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae36:	6823      	ldr	r3, [r4, #0]
 800ae38:	f043 0320 	orr.w	r3, r3, #32
 800ae3c:	6023      	str	r3, [r4, #0]
 800ae3e:	4833      	ldr	r0, [pc, #204]	; (800af0c <_printf_i+0x240>)
 800ae40:	2778      	movs	r7, #120	; 0x78
 800ae42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ae46:	6823      	ldr	r3, [r4, #0]
 800ae48:	6829      	ldr	r1, [r5, #0]
 800ae4a:	061f      	lsls	r7, r3, #24
 800ae4c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae50:	d402      	bmi.n	800ae58 <_printf_i+0x18c>
 800ae52:	065f      	lsls	r7, r3, #25
 800ae54:	bf48      	it	mi
 800ae56:	b2b6      	uxthmi	r6, r6
 800ae58:	07df      	lsls	r7, r3, #31
 800ae5a:	bf48      	it	mi
 800ae5c:	f043 0320 	orrmi.w	r3, r3, #32
 800ae60:	6029      	str	r1, [r5, #0]
 800ae62:	bf48      	it	mi
 800ae64:	6023      	strmi	r3, [r4, #0]
 800ae66:	b91e      	cbnz	r6, 800ae70 <_printf_i+0x1a4>
 800ae68:	6823      	ldr	r3, [r4, #0]
 800ae6a:	f023 0320 	bic.w	r3, r3, #32
 800ae6e:	6023      	str	r3, [r4, #0]
 800ae70:	2310      	movs	r3, #16
 800ae72:	e7a7      	b.n	800adc4 <_printf_i+0xf8>
 800ae74:	4824      	ldr	r0, [pc, #144]	; (800af08 <_printf_i+0x23c>)
 800ae76:	e7e4      	b.n	800ae42 <_printf_i+0x176>
 800ae78:	4615      	mov	r5, r2
 800ae7a:	e7bd      	b.n	800adf8 <_printf_i+0x12c>
 800ae7c:	682b      	ldr	r3, [r5, #0]
 800ae7e:	6826      	ldr	r6, [r4, #0]
 800ae80:	6961      	ldr	r1, [r4, #20]
 800ae82:	1d18      	adds	r0, r3, #4
 800ae84:	6028      	str	r0, [r5, #0]
 800ae86:	0635      	lsls	r5, r6, #24
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	d501      	bpl.n	800ae90 <_printf_i+0x1c4>
 800ae8c:	6019      	str	r1, [r3, #0]
 800ae8e:	e002      	b.n	800ae96 <_printf_i+0x1ca>
 800ae90:	0670      	lsls	r0, r6, #25
 800ae92:	d5fb      	bpl.n	800ae8c <_printf_i+0x1c0>
 800ae94:	8019      	strh	r1, [r3, #0]
 800ae96:	2300      	movs	r3, #0
 800ae98:	6123      	str	r3, [r4, #16]
 800ae9a:	4615      	mov	r5, r2
 800ae9c:	e7bc      	b.n	800ae18 <_printf_i+0x14c>
 800ae9e:	682b      	ldr	r3, [r5, #0]
 800aea0:	1d1a      	adds	r2, r3, #4
 800aea2:	602a      	str	r2, [r5, #0]
 800aea4:	681d      	ldr	r5, [r3, #0]
 800aea6:	6862      	ldr	r2, [r4, #4]
 800aea8:	2100      	movs	r1, #0
 800aeaa:	4628      	mov	r0, r5
 800aeac:	f7f5 f990 	bl	80001d0 <memchr>
 800aeb0:	b108      	cbz	r0, 800aeb6 <_printf_i+0x1ea>
 800aeb2:	1b40      	subs	r0, r0, r5
 800aeb4:	6060      	str	r0, [r4, #4]
 800aeb6:	6863      	ldr	r3, [r4, #4]
 800aeb8:	6123      	str	r3, [r4, #16]
 800aeba:	2300      	movs	r3, #0
 800aebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aec0:	e7aa      	b.n	800ae18 <_printf_i+0x14c>
 800aec2:	6923      	ldr	r3, [r4, #16]
 800aec4:	462a      	mov	r2, r5
 800aec6:	4649      	mov	r1, r9
 800aec8:	4640      	mov	r0, r8
 800aeca:	47d0      	blx	sl
 800aecc:	3001      	adds	r0, #1
 800aece:	d0ad      	beq.n	800ae2c <_printf_i+0x160>
 800aed0:	6823      	ldr	r3, [r4, #0]
 800aed2:	079b      	lsls	r3, r3, #30
 800aed4:	d413      	bmi.n	800aefe <_printf_i+0x232>
 800aed6:	68e0      	ldr	r0, [r4, #12]
 800aed8:	9b03      	ldr	r3, [sp, #12]
 800aeda:	4298      	cmp	r0, r3
 800aedc:	bfb8      	it	lt
 800aede:	4618      	movlt	r0, r3
 800aee0:	e7a6      	b.n	800ae30 <_printf_i+0x164>
 800aee2:	2301      	movs	r3, #1
 800aee4:	4632      	mov	r2, r6
 800aee6:	4649      	mov	r1, r9
 800aee8:	4640      	mov	r0, r8
 800aeea:	47d0      	blx	sl
 800aeec:	3001      	adds	r0, #1
 800aeee:	d09d      	beq.n	800ae2c <_printf_i+0x160>
 800aef0:	3501      	adds	r5, #1
 800aef2:	68e3      	ldr	r3, [r4, #12]
 800aef4:	9903      	ldr	r1, [sp, #12]
 800aef6:	1a5b      	subs	r3, r3, r1
 800aef8:	42ab      	cmp	r3, r5
 800aefa:	dcf2      	bgt.n	800aee2 <_printf_i+0x216>
 800aefc:	e7eb      	b.n	800aed6 <_printf_i+0x20a>
 800aefe:	2500      	movs	r5, #0
 800af00:	f104 0619 	add.w	r6, r4, #25
 800af04:	e7f5      	b.n	800aef2 <_printf_i+0x226>
 800af06:	bf00      	nop
 800af08:	08010ffc 	.word	0x08010ffc
 800af0c:	0801100d 	.word	0x0801100d

0800af10 <_scanf_float>:
 800af10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af14:	b087      	sub	sp, #28
 800af16:	4617      	mov	r7, r2
 800af18:	9303      	str	r3, [sp, #12]
 800af1a:	688b      	ldr	r3, [r1, #8]
 800af1c:	1e5a      	subs	r2, r3, #1
 800af1e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800af22:	bf83      	ittte	hi
 800af24:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800af28:	195b      	addhi	r3, r3, r5
 800af2a:	9302      	strhi	r3, [sp, #8]
 800af2c:	2300      	movls	r3, #0
 800af2e:	bf86      	itte	hi
 800af30:	f240 135d 	movwhi	r3, #349	; 0x15d
 800af34:	608b      	strhi	r3, [r1, #8]
 800af36:	9302      	strls	r3, [sp, #8]
 800af38:	680b      	ldr	r3, [r1, #0]
 800af3a:	468b      	mov	fp, r1
 800af3c:	2500      	movs	r5, #0
 800af3e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800af42:	f84b 3b1c 	str.w	r3, [fp], #28
 800af46:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800af4a:	4680      	mov	r8, r0
 800af4c:	460c      	mov	r4, r1
 800af4e:	465e      	mov	r6, fp
 800af50:	46aa      	mov	sl, r5
 800af52:	46a9      	mov	r9, r5
 800af54:	9501      	str	r5, [sp, #4]
 800af56:	68a2      	ldr	r2, [r4, #8]
 800af58:	b152      	cbz	r2, 800af70 <_scanf_float+0x60>
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	2b4e      	cmp	r3, #78	; 0x4e
 800af60:	d864      	bhi.n	800b02c <_scanf_float+0x11c>
 800af62:	2b40      	cmp	r3, #64	; 0x40
 800af64:	d83c      	bhi.n	800afe0 <_scanf_float+0xd0>
 800af66:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800af6a:	b2c8      	uxtb	r0, r1
 800af6c:	280e      	cmp	r0, #14
 800af6e:	d93a      	bls.n	800afe6 <_scanf_float+0xd6>
 800af70:	f1b9 0f00 	cmp.w	r9, #0
 800af74:	d003      	beq.n	800af7e <_scanf_float+0x6e>
 800af76:	6823      	ldr	r3, [r4, #0]
 800af78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af7c:	6023      	str	r3, [r4, #0]
 800af7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af82:	f1ba 0f01 	cmp.w	sl, #1
 800af86:	f200 8113 	bhi.w	800b1b0 <_scanf_float+0x2a0>
 800af8a:	455e      	cmp	r6, fp
 800af8c:	f200 8105 	bhi.w	800b19a <_scanf_float+0x28a>
 800af90:	2501      	movs	r5, #1
 800af92:	4628      	mov	r0, r5
 800af94:	b007      	add	sp, #28
 800af96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af9a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800af9e:	2a0d      	cmp	r2, #13
 800afa0:	d8e6      	bhi.n	800af70 <_scanf_float+0x60>
 800afa2:	a101      	add	r1, pc, #4	; (adr r1, 800afa8 <_scanf_float+0x98>)
 800afa4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800afa8:	0800b0e7 	.word	0x0800b0e7
 800afac:	0800af71 	.word	0x0800af71
 800afb0:	0800af71 	.word	0x0800af71
 800afb4:	0800af71 	.word	0x0800af71
 800afb8:	0800b147 	.word	0x0800b147
 800afbc:	0800b11f 	.word	0x0800b11f
 800afc0:	0800af71 	.word	0x0800af71
 800afc4:	0800af71 	.word	0x0800af71
 800afc8:	0800b0f5 	.word	0x0800b0f5
 800afcc:	0800af71 	.word	0x0800af71
 800afd0:	0800af71 	.word	0x0800af71
 800afd4:	0800af71 	.word	0x0800af71
 800afd8:	0800af71 	.word	0x0800af71
 800afdc:	0800b0ad 	.word	0x0800b0ad
 800afe0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800afe4:	e7db      	b.n	800af9e <_scanf_float+0x8e>
 800afe6:	290e      	cmp	r1, #14
 800afe8:	d8c2      	bhi.n	800af70 <_scanf_float+0x60>
 800afea:	a001      	add	r0, pc, #4	; (adr r0, 800aff0 <_scanf_float+0xe0>)
 800afec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800aff0:	0800b09f 	.word	0x0800b09f
 800aff4:	0800af71 	.word	0x0800af71
 800aff8:	0800b09f 	.word	0x0800b09f
 800affc:	0800b133 	.word	0x0800b133
 800b000:	0800af71 	.word	0x0800af71
 800b004:	0800b04d 	.word	0x0800b04d
 800b008:	0800b089 	.word	0x0800b089
 800b00c:	0800b089 	.word	0x0800b089
 800b010:	0800b089 	.word	0x0800b089
 800b014:	0800b089 	.word	0x0800b089
 800b018:	0800b089 	.word	0x0800b089
 800b01c:	0800b089 	.word	0x0800b089
 800b020:	0800b089 	.word	0x0800b089
 800b024:	0800b089 	.word	0x0800b089
 800b028:	0800b089 	.word	0x0800b089
 800b02c:	2b6e      	cmp	r3, #110	; 0x6e
 800b02e:	d809      	bhi.n	800b044 <_scanf_float+0x134>
 800b030:	2b60      	cmp	r3, #96	; 0x60
 800b032:	d8b2      	bhi.n	800af9a <_scanf_float+0x8a>
 800b034:	2b54      	cmp	r3, #84	; 0x54
 800b036:	d077      	beq.n	800b128 <_scanf_float+0x218>
 800b038:	2b59      	cmp	r3, #89	; 0x59
 800b03a:	d199      	bne.n	800af70 <_scanf_float+0x60>
 800b03c:	2d07      	cmp	r5, #7
 800b03e:	d197      	bne.n	800af70 <_scanf_float+0x60>
 800b040:	2508      	movs	r5, #8
 800b042:	e029      	b.n	800b098 <_scanf_float+0x188>
 800b044:	2b74      	cmp	r3, #116	; 0x74
 800b046:	d06f      	beq.n	800b128 <_scanf_float+0x218>
 800b048:	2b79      	cmp	r3, #121	; 0x79
 800b04a:	e7f6      	b.n	800b03a <_scanf_float+0x12a>
 800b04c:	6821      	ldr	r1, [r4, #0]
 800b04e:	05c8      	lsls	r0, r1, #23
 800b050:	d51a      	bpl.n	800b088 <_scanf_float+0x178>
 800b052:	9b02      	ldr	r3, [sp, #8]
 800b054:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b058:	6021      	str	r1, [r4, #0]
 800b05a:	f109 0901 	add.w	r9, r9, #1
 800b05e:	b11b      	cbz	r3, 800b068 <_scanf_float+0x158>
 800b060:	3b01      	subs	r3, #1
 800b062:	3201      	adds	r2, #1
 800b064:	9302      	str	r3, [sp, #8]
 800b066:	60a2      	str	r2, [r4, #8]
 800b068:	68a3      	ldr	r3, [r4, #8]
 800b06a:	3b01      	subs	r3, #1
 800b06c:	60a3      	str	r3, [r4, #8]
 800b06e:	6923      	ldr	r3, [r4, #16]
 800b070:	3301      	adds	r3, #1
 800b072:	6123      	str	r3, [r4, #16]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	3b01      	subs	r3, #1
 800b078:	2b00      	cmp	r3, #0
 800b07a:	607b      	str	r3, [r7, #4]
 800b07c:	f340 8084 	ble.w	800b188 <_scanf_float+0x278>
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	3301      	adds	r3, #1
 800b084:	603b      	str	r3, [r7, #0]
 800b086:	e766      	b.n	800af56 <_scanf_float+0x46>
 800b088:	eb1a 0f05 	cmn.w	sl, r5
 800b08c:	f47f af70 	bne.w	800af70 <_scanf_float+0x60>
 800b090:	6822      	ldr	r2, [r4, #0]
 800b092:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b096:	6022      	str	r2, [r4, #0]
 800b098:	f806 3b01 	strb.w	r3, [r6], #1
 800b09c:	e7e4      	b.n	800b068 <_scanf_float+0x158>
 800b09e:	6822      	ldr	r2, [r4, #0]
 800b0a0:	0610      	lsls	r0, r2, #24
 800b0a2:	f57f af65 	bpl.w	800af70 <_scanf_float+0x60>
 800b0a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b0aa:	e7f4      	b.n	800b096 <_scanf_float+0x186>
 800b0ac:	f1ba 0f00 	cmp.w	sl, #0
 800b0b0:	d10e      	bne.n	800b0d0 <_scanf_float+0x1c0>
 800b0b2:	f1b9 0f00 	cmp.w	r9, #0
 800b0b6:	d10e      	bne.n	800b0d6 <_scanf_float+0x1c6>
 800b0b8:	6822      	ldr	r2, [r4, #0]
 800b0ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b0be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b0c2:	d108      	bne.n	800b0d6 <_scanf_float+0x1c6>
 800b0c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b0c8:	6022      	str	r2, [r4, #0]
 800b0ca:	f04f 0a01 	mov.w	sl, #1
 800b0ce:	e7e3      	b.n	800b098 <_scanf_float+0x188>
 800b0d0:	f1ba 0f02 	cmp.w	sl, #2
 800b0d4:	d055      	beq.n	800b182 <_scanf_float+0x272>
 800b0d6:	2d01      	cmp	r5, #1
 800b0d8:	d002      	beq.n	800b0e0 <_scanf_float+0x1d0>
 800b0da:	2d04      	cmp	r5, #4
 800b0dc:	f47f af48 	bne.w	800af70 <_scanf_float+0x60>
 800b0e0:	3501      	adds	r5, #1
 800b0e2:	b2ed      	uxtb	r5, r5
 800b0e4:	e7d8      	b.n	800b098 <_scanf_float+0x188>
 800b0e6:	f1ba 0f01 	cmp.w	sl, #1
 800b0ea:	f47f af41 	bne.w	800af70 <_scanf_float+0x60>
 800b0ee:	f04f 0a02 	mov.w	sl, #2
 800b0f2:	e7d1      	b.n	800b098 <_scanf_float+0x188>
 800b0f4:	b97d      	cbnz	r5, 800b116 <_scanf_float+0x206>
 800b0f6:	f1b9 0f00 	cmp.w	r9, #0
 800b0fa:	f47f af3c 	bne.w	800af76 <_scanf_float+0x66>
 800b0fe:	6822      	ldr	r2, [r4, #0]
 800b100:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b104:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b108:	f47f af39 	bne.w	800af7e <_scanf_float+0x6e>
 800b10c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b110:	6022      	str	r2, [r4, #0]
 800b112:	2501      	movs	r5, #1
 800b114:	e7c0      	b.n	800b098 <_scanf_float+0x188>
 800b116:	2d03      	cmp	r5, #3
 800b118:	d0e2      	beq.n	800b0e0 <_scanf_float+0x1d0>
 800b11a:	2d05      	cmp	r5, #5
 800b11c:	e7de      	b.n	800b0dc <_scanf_float+0x1cc>
 800b11e:	2d02      	cmp	r5, #2
 800b120:	f47f af26 	bne.w	800af70 <_scanf_float+0x60>
 800b124:	2503      	movs	r5, #3
 800b126:	e7b7      	b.n	800b098 <_scanf_float+0x188>
 800b128:	2d06      	cmp	r5, #6
 800b12a:	f47f af21 	bne.w	800af70 <_scanf_float+0x60>
 800b12e:	2507      	movs	r5, #7
 800b130:	e7b2      	b.n	800b098 <_scanf_float+0x188>
 800b132:	6822      	ldr	r2, [r4, #0]
 800b134:	0591      	lsls	r1, r2, #22
 800b136:	f57f af1b 	bpl.w	800af70 <_scanf_float+0x60>
 800b13a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b13e:	6022      	str	r2, [r4, #0]
 800b140:	f8cd 9004 	str.w	r9, [sp, #4]
 800b144:	e7a8      	b.n	800b098 <_scanf_float+0x188>
 800b146:	6822      	ldr	r2, [r4, #0]
 800b148:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b14c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b150:	d006      	beq.n	800b160 <_scanf_float+0x250>
 800b152:	0550      	lsls	r0, r2, #21
 800b154:	f57f af0c 	bpl.w	800af70 <_scanf_float+0x60>
 800b158:	f1b9 0f00 	cmp.w	r9, #0
 800b15c:	f43f af0f 	beq.w	800af7e <_scanf_float+0x6e>
 800b160:	0591      	lsls	r1, r2, #22
 800b162:	bf58      	it	pl
 800b164:	9901      	ldrpl	r1, [sp, #4]
 800b166:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b16a:	bf58      	it	pl
 800b16c:	eba9 0101 	subpl.w	r1, r9, r1
 800b170:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b174:	bf58      	it	pl
 800b176:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b17a:	6022      	str	r2, [r4, #0]
 800b17c:	f04f 0900 	mov.w	r9, #0
 800b180:	e78a      	b.n	800b098 <_scanf_float+0x188>
 800b182:	f04f 0a03 	mov.w	sl, #3
 800b186:	e787      	b.n	800b098 <_scanf_float+0x188>
 800b188:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b18c:	4639      	mov	r1, r7
 800b18e:	4640      	mov	r0, r8
 800b190:	4798      	blx	r3
 800b192:	2800      	cmp	r0, #0
 800b194:	f43f aedf 	beq.w	800af56 <_scanf_float+0x46>
 800b198:	e6ea      	b.n	800af70 <_scanf_float+0x60>
 800b19a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b19e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b1a2:	463a      	mov	r2, r7
 800b1a4:	4640      	mov	r0, r8
 800b1a6:	4798      	blx	r3
 800b1a8:	6923      	ldr	r3, [r4, #16]
 800b1aa:	3b01      	subs	r3, #1
 800b1ac:	6123      	str	r3, [r4, #16]
 800b1ae:	e6ec      	b.n	800af8a <_scanf_float+0x7a>
 800b1b0:	1e6b      	subs	r3, r5, #1
 800b1b2:	2b06      	cmp	r3, #6
 800b1b4:	d825      	bhi.n	800b202 <_scanf_float+0x2f2>
 800b1b6:	2d02      	cmp	r5, #2
 800b1b8:	d836      	bhi.n	800b228 <_scanf_float+0x318>
 800b1ba:	455e      	cmp	r6, fp
 800b1bc:	f67f aee8 	bls.w	800af90 <_scanf_float+0x80>
 800b1c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b1c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b1c8:	463a      	mov	r2, r7
 800b1ca:	4640      	mov	r0, r8
 800b1cc:	4798      	blx	r3
 800b1ce:	6923      	ldr	r3, [r4, #16]
 800b1d0:	3b01      	subs	r3, #1
 800b1d2:	6123      	str	r3, [r4, #16]
 800b1d4:	e7f1      	b.n	800b1ba <_scanf_float+0x2aa>
 800b1d6:	9802      	ldr	r0, [sp, #8]
 800b1d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b1dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b1e0:	9002      	str	r0, [sp, #8]
 800b1e2:	463a      	mov	r2, r7
 800b1e4:	4640      	mov	r0, r8
 800b1e6:	4798      	blx	r3
 800b1e8:	6923      	ldr	r3, [r4, #16]
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	6123      	str	r3, [r4, #16]
 800b1ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1f2:	fa5f fa8a 	uxtb.w	sl, sl
 800b1f6:	f1ba 0f02 	cmp.w	sl, #2
 800b1fa:	d1ec      	bne.n	800b1d6 <_scanf_float+0x2c6>
 800b1fc:	3d03      	subs	r5, #3
 800b1fe:	b2ed      	uxtb	r5, r5
 800b200:	1b76      	subs	r6, r6, r5
 800b202:	6823      	ldr	r3, [r4, #0]
 800b204:	05da      	lsls	r2, r3, #23
 800b206:	d52f      	bpl.n	800b268 <_scanf_float+0x358>
 800b208:	055b      	lsls	r3, r3, #21
 800b20a:	d510      	bpl.n	800b22e <_scanf_float+0x31e>
 800b20c:	455e      	cmp	r6, fp
 800b20e:	f67f aebf 	bls.w	800af90 <_scanf_float+0x80>
 800b212:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b216:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b21a:	463a      	mov	r2, r7
 800b21c:	4640      	mov	r0, r8
 800b21e:	4798      	blx	r3
 800b220:	6923      	ldr	r3, [r4, #16]
 800b222:	3b01      	subs	r3, #1
 800b224:	6123      	str	r3, [r4, #16]
 800b226:	e7f1      	b.n	800b20c <_scanf_float+0x2fc>
 800b228:	46aa      	mov	sl, r5
 800b22a:	9602      	str	r6, [sp, #8]
 800b22c:	e7df      	b.n	800b1ee <_scanf_float+0x2de>
 800b22e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b232:	6923      	ldr	r3, [r4, #16]
 800b234:	2965      	cmp	r1, #101	; 0x65
 800b236:	f103 33ff 	add.w	r3, r3, #4294967295
 800b23a:	f106 35ff 	add.w	r5, r6, #4294967295
 800b23e:	6123      	str	r3, [r4, #16]
 800b240:	d00c      	beq.n	800b25c <_scanf_float+0x34c>
 800b242:	2945      	cmp	r1, #69	; 0x45
 800b244:	d00a      	beq.n	800b25c <_scanf_float+0x34c>
 800b246:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b24a:	463a      	mov	r2, r7
 800b24c:	4640      	mov	r0, r8
 800b24e:	4798      	blx	r3
 800b250:	6923      	ldr	r3, [r4, #16]
 800b252:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b256:	3b01      	subs	r3, #1
 800b258:	1eb5      	subs	r5, r6, #2
 800b25a:	6123      	str	r3, [r4, #16]
 800b25c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b260:	463a      	mov	r2, r7
 800b262:	4640      	mov	r0, r8
 800b264:	4798      	blx	r3
 800b266:	462e      	mov	r6, r5
 800b268:	6825      	ldr	r5, [r4, #0]
 800b26a:	f015 0510 	ands.w	r5, r5, #16
 800b26e:	d158      	bne.n	800b322 <_scanf_float+0x412>
 800b270:	7035      	strb	r5, [r6, #0]
 800b272:	6823      	ldr	r3, [r4, #0]
 800b274:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b27c:	d11c      	bne.n	800b2b8 <_scanf_float+0x3a8>
 800b27e:	9b01      	ldr	r3, [sp, #4]
 800b280:	454b      	cmp	r3, r9
 800b282:	eba3 0209 	sub.w	r2, r3, r9
 800b286:	d124      	bne.n	800b2d2 <_scanf_float+0x3c2>
 800b288:	2200      	movs	r2, #0
 800b28a:	4659      	mov	r1, fp
 800b28c:	4640      	mov	r0, r8
 800b28e:	f002 fcb3 	bl	800dbf8 <_strtod_r>
 800b292:	9b03      	ldr	r3, [sp, #12]
 800b294:	6821      	ldr	r1, [r4, #0]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f011 0f02 	tst.w	r1, #2
 800b29c:	ec57 6b10 	vmov	r6, r7, d0
 800b2a0:	f103 0204 	add.w	r2, r3, #4
 800b2a4:	d020      	beq.n	800b2e8 <_scanf_float+0x3d8>
 800b2a6:	9903      	ldr	r1, [sp, #12]
 800b2a8:	600a      	str	r2, [r1, #0]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	e9c3 6700 	strd	r6, r7, [r3]
 800b2b0:	68e3      	ldr	r3, [r4, #12]
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	60e3      	str	r3, [r4, #12]
 800b2b6:	e66c      	b.n	800af92 <_scanf_float+0x82>
 800b2b8:	9b04      	ldr	r3, [sp, #16]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d0e4      	beq.n	800b288 <_scanf_float+0x378>
 800b2be:	9905      	ldr	r1, [sp, #20]
 800b2c0:	230a      	movs	r3, #10
 800b2c2:	462a      	mov	r2, r5
 800b2c4:	3101      	adds	r1, #1
 800b2c6:	4640      	mov	r0, r8
 800b2c8:	f002 fd1e 	bl	800dd08 <_strtol_r>
 800b2cc:	9b04      	ldr	r3, [sp, #16]
 800b2ce:	9e05      	ldr	r6, [sp, #20]
 800b2d0:	1ac2      	subs	r2, r0, r3
 800b2d2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b2d6:	429e      	cmp	r6, r3
 800b2d8:	bf28      	it	cs
 800b2da:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b2de:	4912      	ldr	r1, [pc, #72]	; (800b328 <_scanf_float+0x418>)
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	f000 f909 	bl	800b4f8 <siprintf>
 800b2e6:	e7cf      	b.n	800b288 <_scanf_float+0x378>
 800b2e8:	f011 0f04 	tst.w	r1, #4
 800b2ec:	9903      	ldr	r1, [sp, #12]
 800b2ee:	600a      	str	r2, [r1, #0]
 800b2f0:	d1db      	bne.n	800b2aa <_scanf_float+0x39a>
 800b2f2:	f8d3 8000 	ldr.w	r8, [r3]
 800b2f6:	ee10 2a10 	vmov	r2, s0
 800b2fa:	ee10 0a10 	vmov	r0, s0
 800b2fe:	463b      	mov	r3, r7
 800b300:	4639      	mov	r1, r7
 800b302:	f7f5 fc13 	bl	8000b2c <__aeabi_dcmpun>
 800b306:	b128      	cbz	r0, 800b314 <_scanf_float+0x404>
 800b308:	4808      	ldr	r0, [pc, #32]	; (800b32c <_scanf_float+0x41c>)
 800b30a:	f000 fa3b 	bl	800b784 <nanf>
 800b30e:	ed88 0a00 	vstr	s0, [r8]
 800b312:	e7cd      	b.n	800b2b0 <_scanf_float+0x3a0>
 800b314:	4630      	mov	r0, r6
 800b316:	4639      	mov	r1, r7
 800b318:	f7f5 fc66 	bl	8000be8 <__aeabi_d2f>
 800b31c:	f8c8 0000 	str.w	r0, [r8]
 800b320:	e7c6      	b.n	800b2b0 <_scanf_float+0x3a0>
 800b322:	2500      	movs	r5, #0
 800b324:	e635      	b.n	800af92 <_scanf_float+0x82>
 800b326:	bf00      	nop
 800b328:	0801101e 	.word	0x0801101e
 800b32c:	080113d0 	.word	0x080113d0

0800b330 <std>:
 800b330:	2300      	movs	r3, #0
 800b332:	b510      	push	{r4, lr}
 800b334:	4604      	mov	r4, r0
 800b336:	e9c0 3300 	strd	r3, r3, [r0]
 800b33a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b33e:	6083      	str	r3, [r0, #8]
 800b340:	8181      	strh	r1, [r0, #12]
 800b342:	6643      	str	r3, [r0, #100]	; 0x64
 800b344:	81c2      	strh	r2, [r0, #14]
 800b346:	6183      	str	r3, [r0, #24]
 800b348:	4619      	mov	r1, r3
 800b34a:	2208      	movs	r2, #8
 800b34c:	305c      	adds	r0, #92	; 0x5c
 800b34e:	f000 f964 	bl	800b61a <memset>
 800b352:	4b05      	ldr	r3, [pc, #20]	; (800b368 <std+0x38>)
 800b354:	6263      	str	r3, [r4, #36]	; 0x24
 800b356:	4b05      	ldr	r3, [pc, #20]	; (800b36c <std+0x3c>)
 800b358:	62a3      	str	r3, [r4, #40]	; 0x28
 800b35a:	4b05      	ldr	r3, [pc, #20]	; (800b370 <std+0x40>)
 800b35c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b35e:	4b05      	ldr	r3, [pc, #20]	; (800b374 <std+0x44>)
 800b360:	6224      	str	r4, [r4, #32]
 800b362:	6323      	str	r3, [r4, #48]	; 0x30
 800b364:	bd10      	pop	{r4, pc}
 800b366:	bf00      	nop
 800b368:	0800b591 	.word	0x0800b591
 800b36c:	0800b5b7 	.word	0x0800b5b7
 800b370:	0800b5ef 	.word	0x0800b5ef
 800b374:	0800b613 	.word	0x0800b613

0800b378 <stdio_exit_handler>:
 800b378:	4a02      	ldr	r2, [pc, #8]	; (800b384 <stdio_exit_handler+0xc>)
 800b37a:	4903      	ldr	r1, [pc, #12]	; (800b388 <stdio_exit_handler+0x10>)
 800b37c:	4803      	ldr	r0, [pc, #12]	; (800b38c <stdio_exit_handler+0x14>)
 800b37e:	f000 b869 	b.w	800b454 <_fwalk_sglue>
 800b382:	bf00      	nop
 800b384:	200000fc 	.word	0x200000fc
 800b388:	0800e709 	.word	0x0800e709
 800b38c:	20000108 	.word	0x20000108

0800b390 <cleanup_stdio>:
 800b390:	6841      	ldr	r1, [r0, #4]
 800b392:	4b0c      	ldr	r3, [pc, #48]	; (800b3c4 <cleanup_stdio+0x34>)
 800b394:	4299      	cmp	r1, r3
 800b396:	b510      	push	{r4, lr}
 800b398:	4604      	mov	r4, r0
 800b39a:	d001      	beq.n	800b3a0 <cleanup_stdio+0x10>
 800b39c:	f003 f9b4 	bl	800e708 <_fflush_r>
 800b3a0:	68a1      	ldr	r1, [r4, #8]
 800b3a2:	4b09      	ldr	r3, [pc, #36]	; (800b3c8 <cleanup_stdio+0x38>)
 800b3a4:	4299      	cmp	r1, r3
 800b3a6:	d002      	beq.n	800b3ae <cleanup_stdio+0x1e>
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	f003 f9ad 	bl	800e708 <_fflush_r>
 800b3ae:	68e1      	ldr	r1, [r4, #12]
 800b3b0:	4b06      	ldr	r3, [pc, #24]	; (800b3cc <cleanup_stdio+0x3c>)
 800b3b2:	4299      	cmp	r1, r3
 800b3b4:	d004      	beq.n	800b3c0 <cleanup_stdio+0x30>
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3bc:	f003 b9a4 	b.w	800e708 <_fflush_r>
 800b3c0:	bd10      	pop	{r4, pc}
 800b3c2:	bf00      	nop
 800b3c4:	20001fe4 	.word	0x20001fe4
 800b3c8:	2000204c 	.word	0x2000204c
 800b3cc:	200020b4 	.word	0x200020b4

0800b3d0 <global_stdio_init.part.0>:
 800b3d0:	b510      	push	{r4, lr}
 800b3d2:	4b0b      	ldr	r3, [pc, #44]	; (800b400 <global_stdio_init.part.0+0x30>)
 800b3d4:	4c0b      	ldr	r4, [pc, #44]	; (800b404 <global_stdio_init.part.0+0x34>)
 800b3d6:	4a0c      	ldr	r2, [pc, #48]	; (800b408 <global_stdio_init.part.0+0x38>)
 800b3d8:	601a      	str	r2, [r3, #0]
 800b3da:	4620      	mov	r0, r4
 800b3dc:	2200      	movs	r2, #0
 800b3de:	2104      	movs	r1, #4
 800b3e0:	f7ff ffa6 	bl	800b330 <std>
 800b3e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	2109      	movs	r1, #9
 800b3ec:	f7ff ffa0 	bl	800b330 <std>
 800b3f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b3f4:	2202      	movs	r2, #2
 800b3f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3fa:	2112      	movs	r1, #18
 800b3fc:	f7ff bf98 	b.w	800b330 <std>
 800b400:	2000211c 	.word	0x2000211c
 800b404:	20001fe4 	.word	0x20001fe4
 800b408:	0800b379 	.word	0x0800b379

0800b40c <__sfp_lock_acquire>:
 800b40c:	4801      	ldr	r0, [pc, #4]	; (800b414 <__sfp_lock_acquire+0x8>)
 800b40e:	f000 b9b7 	b.w	800b780 <__retarget_lock_acquire_recursive>
 800b412:	bf00      	nop
 800b414:	20002125 	.word	0x20002125

0800b418 <__sfp_lock_release>:
 800b418:	4801      	ldr	r0, [pc, #4]	; (800b420 <__sfp_lock_release+0x8>)
 800b41a:	f000 b9b2 	b.w	800b782 <__retarget_lock_release_recursive>
 800b41e:	bf00      	nop
 800b420:	20002125 	.word	0x20002125

0800b424 <__sinit>:
 800b424:	b510      	push	{r4, lr}
 800b426:	4604      	mov	r4, r0
 800b428:	f7ff fff0 	bl	800b40c <__sfp_lock_acquire>
 800b42c:	6a23      	ldr	r3, [r4, #32]
 800b42e:	b11b      	cbz	r3, 800b438 <__sinit+0x14>
 800b430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b434:	f7ff bff0 	b.w	800b418 <__sfp_lock_release>
 800b438:	4b04      	ldr	r3, [pc, #16]	; (800b44c <__sinit+0x28>)
 800b43a:	6223      	str	r3, [r4, #32]
 800b43c:	4b04      	ldr	r3, [pc, #16]	; (800b450 <__sinit+0x2c>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1f5      	bne.n	800b430 <__sinit+0xc>
 800b444:	f7ff ffc4 	bl	800b3d0 <global_stdio_init.part.0>
 800b448:	e7f2      	b.n	800b430 <__sinit+0xc>
 800b44a:	bf00      	nop
 800b44c:	0800b391 	.word	0x0800b391
 800b450:	2000211c 	.word	0x2000211c

0800b454 <_fwalk_sglue>:
 800b454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b458:	4607      	mov	r7, r0
 800b45a:	4688      	mov	r8, r1
 800b45c:	4614      	mov	r4, r2
 800b45e:	2600      	movs	r6, #0
 800b460:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b464:	f1b9 0901 	subs.w	r9, r9, #1
 800b468:	d505      	bpl.n	800b476 <_fwalk_sglue+0x22>
 800b46a:	6824      	ldr	r4, [r4, #0]
 800b46c:	2c00      	cmp	r4, #0
 800b46e:	d1f7      	bne.n	800b460 <_fwalk_sglue+0xc>
 800b470:	4630      	mov	r0, r6
 800b472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b476:	89ab      	ldrh	r3, [r5, #12]
 800b478:	2b01      	cmp	r3, #1
 800b47a:	d907      	bls.n	800b48c <_fwalk_sglue+0x38>
 800b47c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b480:	3301      	adds	r3, #1
 800b482:	d003      	beq.n	800b48c <_fwalk_sglue+0x38>
 800b484:	4629      	mov	r1, r5
 800b486:	4638      	mov	r0, r7
 800b488:	47c0      	blx	r8
 800b48a:	4306      	orrs	r6, r0
 800b48c:	3568      	adds	r5, #104	; 0x68
 800b48e:	e7e9      	b.n	800b464 <_fwalk_sglue+0x10>

0800b490 <sniprintf>:
 800b490:	b40c      	push	{r2, r3}
 800b492:	b530      	push	{r4, r5, lr}
 800b494:	4b17      	ldr	r3, [pc, #92]	; (800b4f4 <sniprintf+0x64>)
 800b496:	1e0c      	subs	r4, r1, #0
 800b498:	681d      	ldr	r5, [r3, #0]
 800b49a:	b09d      	sub	sp, #116	; 0x74
 800b49c:	da08      	bge.n	800b4b0 <sniprintf+0x20>
 800b49e:	238b      	movs	r3, #139	; 0x8b
 800b4a0:	602b      	str	r3, [r5, #0]
 800b4a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a6:	b01d      	add	sp, #116	; 0x74
 800b4a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4ac:	b002      	add	sp, #8
 800b4ae:	4770      	bx	lr
 800b4b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b4b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b4b8:	bf14      	ite	ne
 800b4ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b4be:	4623      	moveq	r3, r4
 800b4c0:	9304      	str	r3, [sp, #16]
 800b4c2:	9307      	str	r3, [sp, #28]
 800b4c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4c8:	9002      	str	r0, [sp, #8]
 800b4ca:	9006      	str	r0, [sp, #24]
 800b4cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b4d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b4d2:	ab21      	add	r3, sp, #132	; 0x84
 800b4d4:	a902      	add	r1, sp, #8
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	9301      	str	r3, [sp, #4]
 800b4da:	f002 fc71 	bl	800ddc0 <_svfiprintf_r>
 800b4de:	1c43      	adds	r3, r0, #1
 800b4e0:	bfbc      	itt	lt
 800b4e2:	238b      	movlt	r3, #139	; 0x8b
 800b4e4:	602b      	strlt	r3, [r5, #0]
 800b4e6:	2c00      	cmp	r4, #0
 800b4e8:	d0dd      	beq.n	800b4a6 <sniprintf+0x16>
 800b4ea:	9b02      	ldr	r3, [sp, #8]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	701a      	strb	r2, [r3, #0]
 800b4f0:	e7d9      	b.n	800b4a6 <sniprintf+0x16>
 800b4f2:	bf00      	nop
 800b4f4:	20000154 	.word	0x20000154

0800b4f8 <siprintf>:
 800b4f8:	b40e      	push	{r1, r2, r3}
 800b4fa:	b500      	push	{lr}
 800b4fc:	b09c      	sub	sp, #112	; 0x70
 800b4fe:	ab1d      	add	r3, sp, #116	; 0x74
 800b500:	9002      	str	r0, [sp, #8]
 800b502:	9006      	str	r0, [sp, #24]
 800b504:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b508:	4809      	ldr	r0, [pc, #36]	; (800b530 <siprintf+0x38>)
 800b50a:	9107      	str	r1, [sp, #28]
 800b50c:	9104      	str	r1, [sp, #16]
 800b50e:	4909      	ldr	r1, [pc, #36]	; (800b534 <siprintf+0x3c>)
 800b510:	f853 2b04 	ldr.w	r2, [r3], #4
 800b514:	9105      	str	r1, [sp, #20]
 800b516:	6800      	ldr	r0, [r0, #0]
 800b518:	9301      	str	r3, [sp, #4]
 800b51a:	a902      	add	r1, sp, #8
 800b51c:	f002 fc50 	bl	800ddc0 <_svfiprintf_r>
 800b520:	9b02      	ldr	r3, [sp, #8]
 800b522:	2200      	movs	r2, #0
 800b524:	701a      	strb	r2, [r3, #0]
 800b526:	b01c      	add	sp, #112	; 0x70
 800b528:	f85d eb04 	ldr.w	lr, [sp], #4
 800b52c:	b003      	add	sp, #12
 800b52e:	4770      	bx	lr
 800b530:	20000154 	.word	0x20000154
 800b534:	ffff0208 	.word	0xffff0208

0800b538 <siscanf>:
 800b538:	b40e      	push	{r1, r2, r3}
 800b53a:	b510      	push	{r4, lr}
 800b53c:	b09f      	sub	sp, #124	; 0x7c
 800b53e:	ac21      	add	r4, sp, #132	; 0x84
 800b540:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b544:	f854 2b04 	ldr.w	r2, [r4], #4
 800b548:	9201      	str	r2, [sp, #4]
 800b54a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b54e:	9004      	str	r0, [sp, #16]
 800b550:	9008      	str	r0, [sp, #32]
 800b552:	f7f4 fe8d 	bl	8000270 <strlen>
 800b556:	4b0c      	ldr	r3, [pc, #48]	; (800b588 <siscanf+0x50>)
 800b558:	9005      	str	r0, [sp, #20]
 800b55a:	9009      	str	r0, [sp, #36]	; 0x24
 800b55c:	930d      	str	r3, [sp, #52]	; 0x34
 800b55e:	480b      	ldr	r0, [pc, #44]	; (800b58c <siscanf+0x54>)
 800b560:	9a01      	ldr	r2, [sp, #4]
 800b562:	6800      	ldr	r0, [r0, #0]
 800b564:	9403      	str	r4, [sp, #12]
 800b566:	2300      	movs	r3, #0
 800b568:	9311      	str	r3, [sp, #68]	; 0x44
 800b56a:	9316      	str	r3, [sp, #88]	; 0x58
 800b56c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b570:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b574:	a904      	add	r1, sp, #16
 800b576:	4623      	mov	r3, r4
 800b578:	f002 fd7a 	bl	800e070 <__ssvfiscanf_r>
 800b57c:	b01f      	add	sp, #124	; 0x7c
 800b57e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b582:	b003      	add	sp, #12
 800b584:	4770      	bx	lr
 800b586:	bf00      	nop
 800b588:	0800b5b3 	.word	0x0800b5b3
 800b58c:	20000154 	.word	0x20000154

0800b590 <__sread>:
 800b590:	b510      	push	{r4, lr}
 800b592:	460c      	mov	r4, r1
 800b594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b598:	f000 f8a4 	bl	800b6e4 <_read_r>
 800b59c:	2800      	cmp	r0, #0
 800b59e:	bfab      	itete	ge
 800b5a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b5a2:	89a3      	ldrhlt	r3, [r4, #12]
 800b5a4:	181b      	addge	r3, r3, r0
 800b5a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5aa:	bfac      	ite	ge
 800b5ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5ae:	81a3      	strhlt	r3, [r4, #12]
 800b5b0:	bd10      	pop	{r4, pc}

0800b5b2 <__seofread>:
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	4770      	bx	lr

0800b5b6 <__swrite>:
 800b5b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ba:	461f      	mov	r7, r3
 800b5bc:	898b      	ldrh	r3, [r1, #12]
 800b5be:	05db      	lsls	r3, r3, #23
 800b5c0:	4605      	mov	r5, r0
 800b5c2:	460c      	mov	r4, r1
 800b5c4:	4616      	mov	r6, r2
 800b5c6:	d505      	bpl.n	800b5d4 <__swrite+0x1e>
 800b5c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5cc:	2302      	movs	r3, #2
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	f000 f876 	bl	800b6c0 <_lseek_r>
 800b5d4:	89a3      	ldrh	r3, [r4, #12]
 800b5d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5de:	81a3      	strh	r3, [r4, #12]
 800b5e0:	4632      	mov	r2, r6
 800b5e2:	463b      	mov	r3, r7
 800b5e4:	4628      	mov	r0, r5
 800b5e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ea:	f000 b88d 	b.w	800b708 <_write_r>

0800b5ee <__sseek>:
 800b5ee:	b510      	push	{r4, lr}
 800b5f0:	460c      	mov	r4, r1
 800b5f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5f6:	f000 f863 	bl	800b6c0 <_lseek_r>
 800b5fa:	1c43      	adds	r3, r0, #1
 800b5fc:	89a3      	ldrh	r3, [r4, #12]
 800b5fe:	bf15      	itete	ne
 800b600:	6560      	strne	r0, [r4, #84]	; 0x54
 800b602:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b606:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b60a:	81a3      	strheq	r3, [r4, #12]
 800b60c:	bf18      	it	ne
 800b60e:	81a3      	strhne	r3, [r4, #12]
 800b610:	bd10      	pop	{r4, pc}

0800b612 <__sclose>:
 800b612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b616:	f000 b843 	b.w	800b6a0 <_close_r>

0800b61a <memset>:
 800b61a:	4402      	add	r2, r0
 800b61c:	4603      	mov	r3, r0
 800b61e:	4293      	cmp	r3, r2
 800b620:	d100      	bne.n	800b624 <memset+0xa>
 800b622:	4770      	bx	lr
 800b624:	f803 1b01 	strb.w	r1, [r3], #1
 800b628:	e7f9      	b.n	800b61e <memset+0x4>

0800b62a <strchr>:
 800b62a:	b2c9      	uxtb	r1, r1
 800b62c:	4603      	mov	r3, r0
 800b62e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b632:	b11a      	cbz	r2, 800b63c <strchr+0x12>
 800b634:	428a      	cmp	r2, r1
 800b636:	d1f9      	bne.n	800b62c <strchr+0x2>
 800b638:	4618      	mov	r0, r3
 800b63a:	4770      	bx	lr
 800b63c:	2900      	cmp	r1, #0
 800b63e:	bf18      	it	ne
 800b640:	2300      	movne	r3, #0
 800b642:	e7f9      	b.n	800b638 <strchr+0xe>

0800b644 <strncpy>:
 800b644:	b510      	push	{r4, lr}
 800b646:	3901      	subs	r1, #1
 800b648:	4603      	mov	r3, r0
 800b64a:	b132      	cbz	r2, 800b65a <strncpy+0x16>
 800b64c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b650:	f803 4b01 	strb.w	r4, [r3], #1
 800b654:	3a01      	subs	r2, #1
 800b656:	2c00      	cmp	r4, #0
 800b658:	d1f7      	bne.n	800b64a <strncpy+0x6>
 800b65a:	441a      	add	r2, r3
 800b65c:	2100      	movs	r1, #0
 800b65e:	4293      	cmp	r3, r2
 800b660:	d100      	bne.n	800b664 <strncpy+0x20>
 800b662:	bd10      	pop	{r4, pc}
 800b664:	f803 1b01 	strb.w	r1, [r3], #1
 800b668:	e7f9      	b.n	800b65e <strncpy+0x1a>

0800b66a <strstr>:
 800b66a:	780a      	ldrb	r2, [r1, #0]
 800b66c:	b570      	push	{r4, r5, r6, lr}
 800b66e:	b96a      	cbnz	r2, 800b68c <strstr+0x22>
 800b670:	bd70      	pop	{r4, r5, r6, pc}
 800b672:	429a      	cmp	r2, r3
 800b674:	d109      	bne.n	800b68a <strstr+0x20>
 800b676:	460c      	mov	r4, r1
 800b678:	4605      	mov	r5, r0
 800b67a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d0f6      	beq.n	800b670 <strstr+0x6>
 800b682:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b686:	429e      	cmp	r6, r3
 800b688:	d0f7      	beq.n	800b67a <strstr+0x10>
 800b68a:	3001      	adds	r0, #1
 800b68c:	7803      	ldrb	r3, [r0, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d1ef      	bne.n	800b672 <strstr+0x8>
 800b692:	4618      	mov	r0, r3
 800b694:	e7ec      	b.n	800b670 <strstr+0x6>
	...

0800b698 <_localeconv_r>:
 800b698:	4800      	ldr	r0, [pc, #0]	; (800b69c <_localeconv_r+0x4>)
 800b69a:	4770      	bx	lr
 800b69c:	20000248 	.word	0x20000248

0800b6a0 <_close_r>:
 800b6a0:	b538      	push	{r3, r4, r5, lr}
 800b6a2:	4d06      	ldr	r5, [pc, #24]	; (800b6bc <_close_r+0x1c>)
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	4604      	mov	r4, r0
 800b6a8:	4608      	mov	r0, r1
 800b6aa:	602b      	str	r3, [r5, #0]
 800b6ac:	f7f6 ffd7 	bl	800265e <_close>
 800b6b0:	1c43      	adds	r3, r0, #1
 800b6b2:	d102      	bne.n	800b6ba <_close_r+0x1a>
 800b6b4:	682b      	ldr	r3, [r5, #0]
 800b6b6:	b103      	cbz	r3, 800b6ba <_close_r+0x1a>
 800b6b8:	6023      	str	r3, [r4, #0]
 800b6ba:	bd38      	pop	{r3, r4, r5, pc}
 800b6bc:	20002120 	.word	0x20002120

0800b6c0 <_lseek_r>:
 800b6c0:	b538      	push	{r3, r4, r5, lr}
 800b6c2:	4d07      	ldr	r5, [pc, #28]	; (800b6e0 <_lseek_r+0x20>)
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	4608      	mov	r0, r1
 800b6c8:	4611      	mov	r1, r2
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	602a      	str	r2, [r5, #0]
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	f7f6 ffec 	bl	80026ac <_lseek>
 800b6d4:	1c43      	adds	r3, r0, #1
 800b6d6:	d102      	bne.n	800b6de <_lseek_r+0x1e>
 800b6d8:	682b      	ldr	r3, [r5, #0]
 800b6da:	b103      	cbz	r3, 800b6de <_lseek_r+0x1e>
 800b6dc:	6023      	str	r3, [r4, #0]
 800b6de:	bd38      	pop	{r3, r4, r5, pc}
 800b6e0:	20002120 	.word	0x20002120

0800b6e4 <_read_r>:
 800b6e4:	b538      	push	{r3, r4, r5, lr}
 800b6e6:	4d07      	ldr	r5, [pc, #28]	; (800b704 <_read_r+0x20>)
 800b6e8:	4604      	mov	r4, r0
 800b6ea:	4608      	mov	r0, r1
 800b6ec:	4611      	mov	r1, r2
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	602a      	str	r2, [r5, #0]
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	f7f6 ff7a 	bl	80025ec <_read>
 800b6f8:	1c43      	adds	r3, r0, #1
 800b6fa:	d102      	bne.n	800b702 <_read_r+0x1e>
 800b6fc:	682b      	ldr	r3, [r5, #0]
 800b6fe:	b103      	cbz	r3, 800b702 <_read_r+0x1e>
 800b700:	6023      	str	r3, [r4, #0]
 800b702:	bd38      	pop	{r3, r4, r5, pc}
 800b704:	20002120 	.word	0x20002120

0800b708 <_write_r>:
 800b708:	b538      	push	{r3, r4, r5, lr}
 800b70a:	4d07      	ldr	r5, [pc, #28]	; (800b728 <_write_r+0x20>)
 800b70c:	4604      	mov	r4, r0
 800b70e:	4608      	mov	r0, r1
 800b710:	4611      	mov	r1, r2
 800b712:	2200      	movs	r2, #0
 800b714:	602a      	str	r2, [r5, #0]
 800b716:	461a      	mov	r2, r3
 800b718:	f7f6 ff85 	bl	8002626 <_write>
 800b71c:	1c43      	adds	r3, r0, #1
 800b71e:	d102      	bne.n	800b726 <_write_r+0x1e>
 800b720:	682b      	ldr	r3, [r5, #0]
 800b722:	b103      	cbz	r3, 800b726 <_write_r+0x1e>
 800b724:	6023      	str	r3, [r4, #0]
 800b726:	bd38      	pop	{r3, r4, r5, pc}
 800b728:	20002120 	.word	0x20002120

0800b72c <__errno>:
 800b72c:	4b01      	ldr	r3, [pc, #4]	; (800b734 <__errno+0x8>)
 800b72e:	6818      	ldr	r0, [r3, #0]
 800b730:	4770      	bx	lr
 800b732:	bf00      	nop
 800b734:	20000154 	.word	0x20000154

0800b738 <__libc_init_array>:
 800b738:	b570      	push	{r4, r5, r6, lr}
 800b73a:	4d0d      	ldr	r5, [pc, #52]	; (800b770 <__libc_init_array+0x38>)
 800b73c:	4c0d      	ldr	r4, [pc, #52]	; (800b774 <__libc_init_array+0x3c>)
 800b73e:	1b64      	subs	r4, r4, r5
 800b740:	10a4      	asrs	r4, r4, #2
 800b742:	2600      	movs	r6, #0
 800b744:	42a6      	cmp	r6, r4
 800b746:	d109      	bne.n	800b75c <__libc_init_array+0x24>
 800b748:	4d0b      	ldr	r5, [pc, #44]	; (800b778 <__libc_init_array+0x40>)
 800b74a:	4c0c      	ldr	r4, [pc, #48]	; (800b77c <__libc_init_array+0x44>)
 800b74c:	f005 fb94 	bl	8010e78 <_init>
 800b750:	1b64      	subs	r4, r4, r5
 800b752:	10a4      	asrs	r4, r4, #2
 800b754:	2600      	movs	r6, #0
 800b756:	42a6      	cmp	r6, r4
 800b758:	d105      	bne.n	800b766 <__libc_init_array+0x2e>
 800b75a:	bd70      	pop	{r4, r5, r6, pc}
 800b75c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b760:	4798      	blx	r3
 800b762:	3601      	adds	r6, #1
 800b764:	e7ee      	b.n	800b744 <__libc_init_array+0xc>
 800b766:	f855 3b04 	ldr.w	r3, [r5], #4
 800b76a:	4798      	blx	r3
 800b76c:	3601      	adds	r6, #1
 800b76e:	e7f2      	b.n	800b756 <__libc_init_array+0x1e>
 800b770:	08011688 	.word	0x08011688
 800b774:	08011688 	.word	0x08011688
 800b778:	08011688 	.word	0x08011688
 800b77c:	0801168c 	.word	0x0801168c

0800b780 <__retarget_lock_acquire_recursive>:
 800b780:	4770      	bx	lr

0800b782 <__retarget_lock_release_recursive>:
 800b782:	4770      	bx	lr

0800b784 <nanf>:
 800b784:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b78c <nanf+0x8>
 800b788:	4770      	bx	lr
 800b78a:	bf00      	nop
 800b78c:	7fc00000 	.word	0x7fc00000

0800b790 <quorem>:
 800b790:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b794:	6903      	ldr	r3, [r0, #16]
 800b796:	690c      	ldr	r4, [r1, #16]
 800b798:	42a3      	cmp	r3, r4
 800b79a:	4607      	mov	r7, r0
 800b79c:	db7e      	blt.n	800b89c <quorem+0x10c>
 800b79e:	3c01      	subs	r4, #1
 800b7a0:	f101 0814 	add.w	r8, r1, #20
 800b7a4:	f100 0514 	add.w	r5, r0, #20
 800b7a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7ac:	9301      	str	r3, [sp, #4]
 800b7ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b7b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b7be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b7c2:	fbb2 f6f3 	udiv	r6, r2, r3
 800b7c6:	d331      	bcc.n	800b82c <quorem+0x9c>
 800b7c8:	f04f 0e00 	mov.w	lr, #0
 800b7cc:	4640      	mov	r0, r8
 800b7ce:	46ac      	mov	ip, r5
 800b7d0:	46f2      	mov	sl, lr
 800b7d2:	f850 2b04 	ldr.w	r2, [r0], #4
 800b7d6:	b293      	uxth	r3, r2
 800b7d8:	fb06 e303 	mla	r3, r6, r3, lr
 800b7dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b7e0:	0c1a      	lsrs	r2, r3, #16
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	ebaa 0303 	sub.w	r3, sl, r3
 800b7e8:	f8dc a000 	ldr.w	sl, [ip]
 800b7ec:	fa13 f38a 	uxtah	r3, r3, sl
 800b7f0:	fb06 220e 	mla	r2, r6, lr, r2
 800b7f4:	9300      	str	r3, [sp, #0]
 800b7f6:	9b00      	ldr	r3, [sp, #0]
 800b7f8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b7fc:	b292      	uxth	r2, r2
 800b7fe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b802:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b806:	f8bd 3000 	ldrh.w	r3, [sp]
 800b80a:	4581      	cmp	r9, r0
 800b80c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b810:	f84c 3b04 	str.w	r3, [ip], #4
 800b814:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b818:	d2db      	bcs.n	800b7d2 <quorem+0x42>
 800b81a:	f855 300b 	ldr.w	r3, [r5, fp]
 800b81e:	b92b      	cbnz	r3, 800b82c <quorem+0x9c>
 800b820:	9b01      	ldr	r3, [sp, #4]
 800b822:	3b04      	subs	r3, #4
 800b824:	429d      	cmp	r5, r3
 800b826:	461a      	mov	r2, r3
 800b828:	d32c      	bcc.n	800b884 <quorem+0xf4>
 800b82a:	613c      	str	r4, [r7, #16]
 800b82c:	4638      	mov	r0, r7
 800b82e:	f001 f9ef 	bl	800cc10 <__mcmp>
 800b832:	2800      	cmp	r0, #0
 800b834:	db22      	blt.n	800b87c <quorem+0xec>
 800b836:	3601      	adds	r6, #1
 800b838:	4629      	mov	r1, r5
 800b83a:	2000      	movs	r0, #0
 800b83c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b840:	f8d1 c000 	ldr.w	ip, [r1]
 800b844:	b293      	uxth	r3, r2
 800b846:	1ac3      	subs	r3, r0, r3
 800b848:	0c12      	lsrs	r2, r2, #16
 800b84a:	fa13 f38c 	uxtah	r3, r3, ip
 800b84e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b852:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b856:	b29b      	uxth	r3, r3
 800b858:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b85c:	45c1      	cmp	r9, r8
 800b85e:	f841 3b04 	str.w	r3, [r1], #4
 800b862:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b866:	d2e9      	bcs.n	800b83c <quorem+0xac>
 800b868:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b86c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b870:	b922      	cbnz	r2, 800b87c <quorem+0xec>
 800b872:	3b04      	subs	r3, #4
 800b874:	429d      	cmp	r5, r3
 800b876:	461a      	mov	r2, r3
 800b878:	d30a      	bcc.n	800b890 <quorem+0x100>
 800b87a:	613c      	str	r4, [r7, #16]
 800b87c:	4630      	mov	r0, r6
 800b87e:	b003      	add	sp, #12
 800b880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b884:	6812      	ldr	r2, [r2, #0]
 800b886:	3b04      	subs	r3, #4
 800b888:	2a00      	cmp	r2, #0
 800b88a:	d1ce      	bne.n	800b82a <quorem+0x9a>
 800b88c:	3c01      	subs	r4, #1
 800b88e:	e7c9      	b.n	800b824 <quorem+0x94>
 800b890:	6812      	ldr	r2, [r2, #0]
 800b892:	3b04      	subs	r3, #4
 800b894:	2a00      	cmp	r2, #0
 800b896:	d1f0      	bne.n	800b87a <quorem+0xea>
 800b898:	3c01      	subs	r4, #1
 800b89a:	e7eb      	b.n	800b874 <quorem+0xe4>
 800b89c:	2000      	movs	r0, #0
 800b89e:	e7ee      	b.n	800b87e <quorem+0xee>

0800b8a0 <_dtoa_r>:
 800b8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a4:	ed2d 8b04 	vpush	{d8-d9}
 800b8a8:	69c5      	ldr	r5, [r0, #28]
 800b8aa:	b093      	sub	sp, #76	; 0x4c
 800b8ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b8b0:	ec57 6b10 	vmov	r6, r7, d0
 800b8b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b8b8:	9107      	str	r1, [sp, #28]
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	920a      	str	r2, [sp, #40]	; 0x28
 800b8be:	930d      	str	r3, [sp, #52]	; 0x34
 800b8c0:	b975      	cbnz	r5, 800b8e0 <_dtoa_r+0x40>
 800b8c2:	2010      	movs	r0, #16
 800b8c4:	f000 fe2a 	bl	800c51c <malloc>
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	61e0      	str	r0, [r4, #28]
 800b8cc:	b920      	cbnz	r0, 800b8d8 <_dtoa_r+0x38>
 800b8ce:	4bae      	ldr	r3, [pc, #696]	; (800bb88 <_dtoa_r+0x2e8>)
 800b8d0:	21ef      	movs	r1, #239	; 0xef
 800b8d2:	48ae      	ldr	r0, [pc, #696]	; (800bb8c <_dtoa_r+0x2ec>)
 800b8d4:	f003 f808 	bl	800e8e8 <__assert_func>
 800b8d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b8dc:	6005      	str	r5, [r0, #0]
 800b8de:	60c5      	str	r5, [r0, #12]
 800b8e0:	69e3      	ldr	r3, [r4, #28]
 800b8e2:	6819      	ldr	r1, [r3, #0]
 800b8e4:	b151      	cbz	r1, 800b8fc <_dtoa_r+0x5c>
 800b8e6:	685a      	ldr	r2, [r3, #4]
 800b8e8:	604a      	str	r2, [r1, #4]
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	4093      	lsls	r3, r2
 800b8ee:	608b      	str	r3, [r1, #8]
 800b8f0:	4620      	mov	r0, r4
 800b8f2:	f000 ff07 	bl	800c704 <_Bfree>
 800b8f6:	69e3      	ldr	r3, [r4, #28]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	601a      	str	r2, [r3, #0]
 800b8fc:	1e3b      	subs	r3, r7, #0
 800b8fe:	bfbb      	ittet	lt
 800b900:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b904:	9303      	strlt	r3, [sp, #12]
 800b906:	2300      	movge	r3, #0
 800b908:	2201      	movlt	r2, #1
 800b90a:	bfac      	ite	ge
 800b90c:	f8c8 3000 	strge.w	r3, [r8]
 800b910:	f8c8 2000 	strlt.w	r2, [r8]
 800b914:	4b9e      	ldr	r3, [pc, #632]	; (800bb90 <_dtoa_r+0x2f0>)
 800b916:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b91a:	ea33 0308 	bics.w	r3, r3, r8
 800b91e:	d11b      	bne.n	800b958 <_dtoa_r+0xb8>
 800b920:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b922:	f242 730f 	movw	r3, #9999	; 0x270f
 800b926:	6013      	str	r3, [r2, #0]
 800b928:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b92c:	4333      	orrs	r3, r6
 800b92e:	f000 8593 	beq.w	800c458 <_dtoa_r+0xbb8>
 800b932:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b934:	b963      	cbnz	r3, 800b950 <_dtoa_r+0xb0>
 800b936:	4b97      	ldr	r3, [pc, #604]	; (800bb94 <_dtoa_r+0x2f4>)
 800b938:	e027      	b.n	800b98a <_dtoa_r+0xea>
 800b93a:	4b97      	ldr	r3, [pc, #604]	; (800bb98 <_dtoa_r+0x2f8>)
 800b93c:	9300      	str	r3, [sp, #0]
 800b93e:	3308      	adds	r3, #8
 800b940:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b942:	6013      	str	r3, [r2, #0]
 800b944:	9800      	ldr	r0, [sp, #0]
 800b946:	b013      	add	sp, #76	; 0x4c
 800b948:	ecbd 8b04 	vpop	{d8-d9}
 800b94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b950:	4b90      	ldr	r3, [pc, #576]	; (800bb94 <_dtoa_r+0x2f4>)
 800b952:	9300      	str	r3, [sp, #0]
 800b954:	3303      	adds	r3, #3
 800b956:	e7f3      	b.n	800b940 <_dtoa_r+0xa0>
 800b958:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b95c:	2200      	movs	r2, #0
 800b95e:	ec51 0b17 	vmov	r0, r1, d7
 800b962:	eeb0 8a47 	vmov.f32	s16, s14
 800b966:	eef0 8a67 	vmov.f32	s17, s15
 800b96a:	2300      	movs	r3, #0
 800b96c:	f7f5 f8ac 	bl	8000ac8 <__aeabi_dcmpeq>
 800b970:	4681      	mov	r9, r0
 800b972:	b160      	cbz	r0, 800b98e <_dtoa_r+0xee>
 800b974:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b976:	2301      	movs	r3, #1
 800b978:	6013      	str	r3, [r2, #0]
 800b97a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	f000 8568 	beq.w	800c452 <_dtoa_r+0xbb2>
 800b982:	4b86      	ldr	r3, [pc, #536]	; (800bb9c <_dtoa_r+0x2fc>)
 800b984:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b986:	6013      	str	r3, [r2, #0]
 800b988:	3b01      	subs	r3, #1
 800b98a:	9300      	str	r3, [sp, #0]
 800b98c:	e7da      	b.n	800b944 <_dtoa_r+0xa4>
 800b98e:	aa10      	add	r2, sp, #64	; 0x40
 800b990:	a911      	add	r1, sp, #68	; 0x44
 800b992:	4620      	mov	r0, r4
 800b994:	eeb0 0a48 	vmov.f32	s0, s16
 800b998:	eef0 0a68 	vmov.f32	s1, s17
 800b99c:	f001 fa4e 	bl	800ce3c <__d2b>
 800b9a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b9a4:	4682      	mov	sl, r0
 800b9a6:	2d00      	cmp	r5, #0
 800b9a8:	d07f      	beq.n	800baaa <_dtoa_r+0x20a>
 800b9aa:	ee18 3a90 	vmov	r3, s17
 800b9ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b9b6:	ec51 0b18 	vmov	r0, r1, d8
 800b9ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b9be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b9c2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	4b75      	ldr	r3, [pc, #468]	; (800bba0 <_dtoa_r+0x300>)
 800b9cc:	f7f4 fc5c 	bl	8000288 <__aeabi_dsub>
 800b9d0:	a367      	add	r3, pc, #412	; (adr r3, 800bb70 <_dtoa_r+0x2d0>)
 800b9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d6:	f7f4 fe0f 	bl	80005f8 <__aeabi_dmul>
 800b9da:	a367      	add	r3, pc, #412	; (adr r3, 800bb78 <_dtoa_r+0x2d8>)
 800b9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e0:	f7f4 fc54 	bl	800028c <__adddf3>
 800b9e4:	4606      	mov	r6, r0
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	460f      	mov	r7, r1
 800b9ea:	f7f4 fd9b 	bl	8000524 <__aeabi_i2d>
 800b9ee:	a364      	add	r3, pc, #400	; (adr r3, 800bb80 <_dtoa_r+0x2e0>)
 800b9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f4:	f7f4 fe00 	bl	80005f8 <__aeabi_dmul>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	4630      	mov	r0, r6
 800b9fe:	4639      	mov	r1, r7
 800ba00:	f7f4 fc44 	bl	800028c <__adddf3>
 800ba04:	4606      	mov	r6, r0
 800ba06:	460f      	mov	r7, r1
 800ba08:	f7f5 f8a6 	bl	8000b58 <__aeabi_d2iz>
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	4683      	mov	fp, r0
 800ba10:	2300      	movs	r3, #0
 800ba12:	4630      	mov	r0, r6
 800ba14:	4639      	mov	r1, r7
 800ba16:	f7f5 f861 	bl	8000adc <__aeabi_dcmplt>
 800ba1a:	b148      	cbz	r0, 800ba30 <_dtoa_r+0x190>
 800ba1c:	4658      	mov	r0, fp
 800ba1e:	f7f4 fd81 	bl	8000524 <__aeabi_i2d>
 800ba22:	4632      	mov	r2, r6
 800ba24:	463b      	mov	r3, r7
 800ba26:	f7f5 f84f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba2a:	b908      	cbnz	r0, 800ba30 <_dtoa_r+0x190>
 800ba2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ba30:	f1bb 0f16 	cmp.w	fp, #22
 800ba34:	d857      	bhi.n	800bae6 <_dtoa_r+0x246>
 800ba36:	4b5b      	ldr	r3, [pc, #364]	; (800bba4 <_dtoa_r+0x304>)
 800ba38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ba3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba40:	ec51 0b18 	vmov	r0, r1, d8
 800ba44:	f7f5 f84a 	bl	8000adc <__aeabi_dcmplt>
 800ba48:	2800      	cmp	r0, #0
 800ba4a:	d04e      	beq.n	800baea <_dtoa_r+0x24a>
 800ba4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ba50:	2300      	movs	r3, #0
 800ba52:	930c      	str	r3, [sp, #48]	; 0x30
 800ba54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba56:	1b5b      	subs	r3, r3, r5
 800ba58:	1e5a      	subs	r2, r3, #1
 800ba5a:	bf45      	ittet	mi
 800ba5c:	f1c3 0301 	rsbmi	r3, r3, #1
 800ba60:	9305      	strmi	r3, [sp, #20]
 800ba62:	2300      	movpl	r3, #0
 800ba64:	2300      	movmi	r3, #0
 800ba66:	9206      	str	r2, [sp, #24]
 800ba68:	bf54      	ite	pl
 800ba6a:	9305      	strpl	r3, [sp, #20]
 800ba6c:	9306      	strmi	r3, [sp, #24]
 800ba6e:	f1bb 0f00 	cmp.w	fp, #0
 800ba72:	db3c      	blt.n	800baee <_dtoa_r+0x24e>
 800ba74:	9b06      	ldr	r3, [sp, #24]
 800ba76:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ba7a:	445b      	add	r3, fp
 800ba7c:	9306      	str	r3, [sp, #24]
 800ba7e:	2300      	movs	r3, #0
 800ba80:	9308      	str	r3, [sp, #32]
 800ba82:	9b07      	ldr	r3, [sp, #28]
 800ba84:	2b09      	cmp	r3, #9
 800ba86:	d868      	bhi.n	800bb5a <_dtoa_r+0x2ba>
 800ba88:	2b05      	cmp	r3, #5
 800ba8a:	bfc4      	itt	gt
 800ba8c:	3b04      	subgt	r3, #4
 800ba8e:	9307      	strgt	r3, [sp, #28]
 800ba90:	9b07      	ldr	r3, [sp, #28]
 800ba92:	f1a3 0302 	sub.w	r3, r3, #2
 800ba96:	bfcc      	ite	gt
 800ba98:	2500      	movgt	r5, #0
 800ba9a:	2501      	movle	r5, #1
 800ba9c:	2b03      	cmp	r3, #3
 800ba9e:	f200 8085 	bhi.w	800bbac <_dtoa_r+0x30c>
 800baa2:	e8df f003 	tbb	[pc, r3]
 800baa6:	3b2e      	.short	0x3b2e
 800baa8:	5839      	.short	0x5839
 800baaa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800baae:	441d      	add	r5, r3
 800bab0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bab4:	2b20      	cmp	r3, #32
 800bab6:	bfc1      	itttt	gt
 800bab8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800babc:	fa08 f803 	lslgt.w	r8, r8, r3
 800bac0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bac4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bac8:	bfd6      	itet	le
 800baca:	f1c3 0320 	rsble	r3, r3, #32
 800bace:	ea48 0003 	orrgt.w	r0, r8, r3
 800bad2:	fa06 f003 	lslle.w	r0, r6, r3
 800bad6:	f7f4 fd15 	bl	8000504 <__aeabi_ui2d>
 800bada:	2201      	movs	r2, #1
 800badc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bae0:	3d01      	subs	r5, #1
 800bae2:	920e      	str	r2, [sp, #56]	; 0x38
 800bae4:	e76f      	b.n	800b9c6 <_dtoa_r+0x126>
 800bae6:	2301      	movs	r3, #1
 800bae8:	e7b3      	b.n	800ba52 <_dtoa_r+0x1b2>
 800baea:	900c      	str	r0, [sp, #48]	; 0x30
 800baec:	e7b2      	b.n	800ba54 <_dtoa_r+0x1b4>
 800baee:	9b05      	ldr	r3, [sp, #20]
 800baf0:	eba3 030b 	sub.w	r3, r3, fp
 800baf4:	9305      	str	r3, [sp, #20]
 800baf6:	f1cb 0300 	rsb	r3, fp, #0
 800bafa:	9308      	str	r3, [sp, #32]
 800bafc:	2300      	movs	r3, #0
 800bafe:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb00:	e7bf      	b.n	800ba82 <_dtoa_r+0x1e2>
 800bb02:	2300      	movs	r3, #0
 800bb04:	9309      	str	r3, [sp, #36]	; 0x24
 800bb06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	dc52      	bgt.n	800bbb2 <_dtoa_r+0x312>
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	9301      	str	r3, [sp, #4]
 800bb10:	9304      	str	r3, [sp, #16]
 800bb12:	461a      	mov	r2, r3
 800bb14:	920a      	str	r2, [sp, #40]	; 0x28
 800bb16:	e00b      	b.n	800bb30 <_dtoa_r+0x290>
 800bb18:	2301      	movs	r3, #1
 800bb1a:	e7f3      	b.n	800bb04 <_dtoa_r+0x264>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	9309      	str	r3, [sp, #36]	; 0x24
 800bb20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb22:	445b      	add	r3, fp
 800bb24:	9301      	str	r3, [sp, #4]
 800bb26:	3301      	adds	r3, #1
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	9304      	str	r3, [sp, #16]
 800bb2c:	bfb8      	it	lt
 800bb2e:	2301      	movlt	r3, #1
 800bb30:	69e0      	ldr	r0, [r4, #28]
 800bb32:	2100      	movs	r1, #0
 800bb34:	2204      	movs	r2, #4
 800bb36:	f102 0614 	add.w	r6, r2, #20
 800bb3a:	429e      	cmp	r6, r3
 800bb3c:	d93d      	bls.n	800bbba <_dtoa_r+0x31a>
 800bb3e:	6041      	str	r1, [r0, #4]
 800bb40:	4620      	mov	r0, r4
 800bb42:	f000 fd9f 	bl	800c684 <_Balloc>
 800bb46:	9000      	str	r0, [sp, #0]
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	d139      	bne.n	800bbc0 <_dtoa_r+0x320>
 800bb4c:	4b16      	ldr	r3, [pc, #88]	; (800bba8 <_dtoa_r+0x308>)
 800bb4e:	4602      	mov	r2, r0
 800bb50:	f240 11af 	movw	r1, #431	; 0x1af
 800bb54:	e6bd      	b.n	800b8d2 <_dtoa_r+0x32>
 800bb56:	2301      	movs	r3, #1
 800bb58:	e7e1      	b.n	800bb1e <_dtoa_r+0x27e>
 800bb5a:	2501      	movs	r5, #1
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	9307      	str	r3, [sp, #28]
 800bb60:	9509      	str	r5, [sp, #36]	; 0x24
 800bb62:	f04f 33ff 	mov.w	r3, #4294967295
 800bb66:	9301      	str	r3, [sp, #4]
 800bb68:	9304      	str	r3, [sp, #16]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	2312      	movs	r3, #18
 800bb6e:	e7d1      	b.n	800bb14 <_dtoa_r+0x274>
 800bb70:	636f4361 	.word	0x636f4361
 800bb74:	3fd287a7 	.word	0x3fd287a7
 800bb78:	8b60c8b3 	.word	0x8b60c8b3
 800bb7c:	3fc68a28 	.word	0x3fc68a28
 800bb80:	509f79fb 	.word	0x509f79fb
 800bb84:	3fd34413 	.word	0x3fd34413
 800bb88:	08011030 	.word	0x08011030
 800bb8c:	08011047 	.word	0x08011047
 800bb90:	7ff00000 	.word	0x7ff00000
 800bb94:	0801102c 	.word	0x0801102c
 800bb98:	08011023 	.word	0x08011023
 800bb9c:	08011389 	.word	0x08011389
 800bba0:	3ff80000 	.word	0x3ff80000
 800bba4:	08011138 	.word	0x08011138
 800bba8:	0801109f 	.word	0x0801109f
 800bbac:	2301      	movs	r3, #1
 800bbae:	9309      	str	r3, [sp, #36]	; 0x24
 800bbb0:	e7d7      	b.n	800bb62 <_dtoa_r+0x2c2>
 800bbb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbb4:	9301      	str	r3, [sp, #4]
 800bbb6:	9304      	str	r3, [sp, #16]
 800bbb8:	e7ba      	b.n	800bb30 <_dtoa_r+0x290>
 800bbba:	3101      	adds	r1, #1
 800bbbc:	0052      	lsls	r2, r2, #1
 800bbbe:	e7ba      	b.n	800bb36 <_dtoa_r+0x296>
 800bbc0:	69e3      	ldr	r3, [r4, #28]
 800bbc2:	9a00      	ldr	r2, [sp, #0]
 800bbc4:	601a      	str	r2, [r3, #0]
 800bbc6:	9b04      	ldr	r3, [sp, #16]
 800bbc8:	2b0e      	cmp	r3, #14
 800bbca:	f200 80a8 	bhi.w	800bd1e <_dtoa_r+0x47e>
 800bbce:	2d00      	cmp	r5, #0
 800bbd0:	f000 80a5 	beq.w	800bd1e <_dtoa_r+0x47e>
 800bbd4:	f1bb 0f00 	cmp.w	fp, #0
 800bbd8:	dd38      	ble.n	800bc4c <_dtoa_r+0x3ac>
 800bbda:	4bc0      	ldr	r3, [pc, #768]	; (800bedc <_dtoa_r+0x63c>)
 800bbdc:	f00b 020f 	and.w	r2, fp, #15
 800bbe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbe4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bbe8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bbec:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bbf0:	d019      	beq.n	800bc26 <_dtoa_r+0x386>
 800bbf2:	4bbb      	ldr	r3, [pc, #748]	; (800bee0 <_dtoa_r+0x640>)
 800bbf4:	ec51 0b18 	vmov	r0, r1, d8
 800bbf8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bbfc:	f7f4 fe26 	bl	800084c <__aeabi_ddiv>
 800bc00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc04:	f008 080f 	and.w	r8, r8, #15
 800bc08:	2503      	movs	r5, #3
 800bc0a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800bee0 <_dtoa_r+0x640>
 800bc0e:	f1b8 0f00 	cmp.w	r8, #0
 800bc12:	d10a      	bne.n	800bc2a <_dtoa_r+0x38a>
 800bc14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc18:	4632      	mov	r2, r6
 800bc1a:	463b      	mov	r3, r7
 800bc1c:	f7f4 fe16 	bl	800084c <__aeabi_ddiv>
 800bc20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc24:	e02b      	b.n	800bc7e <_dtoa_r+0x3de>
 800bc26:	2502      	movs	r5, #2
 800bc28:	e7ef      	b.n	800bc0a <_dtoa_r+0x36a>
 800bc2a:	f018 0f01 	tst.w	r8, #1
 800bc2e:	d008      	beq.n	800bc42 <_dtoa_r+0x3a2>
 800bc30:	4630      	mov	r0, r6
 800bc32:	4639      	mov	r1, r7
 800bc34:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bc38:	f7f4 fcde 	bl	80005f8 <__aeabi_dmul>
 800bc3c:	3501      	adds	r5, #1
 800bc3e:	4606      	mov	r6, r0
 800bc40:	460f      	mov	r7, r1
 800bc42:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bc46:	f109 0908 	add.w	r9, r9, #8
 800bc4a:	e7e0      	b.n	800bc0e <_dtoa_r+0x36e>
 800bc4c:	f000 809f 	beq.w	800bd8e <_dtoa_r+0x4ee>
 800bc50:	f1cb 0600 	rsb	r6, fp, #0
 800bc54:	4ba1      	ldr	r3, [pc, #644]	; (800bedc <_dtoa_r+0x63c>)
 800bc56:	4fa2      	ldr	r7, [pc, #648]	; (800bee0 <_dtoa_r+0x640>)
 800bc58:	f006 020f 	and.w	r2, r6, #15
 800bc5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc64:	ec51 0b18 	vmov	r0, r1, d8
 800bc68:	f7f4 fcc6 	bl	80005f8 <__aeabi_dmul>
 800bc6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc70:	1136      	asrs	r6, r6, #4
 800bc72:	2300      	movs	r3, #0
 800bc74:	2502      	movs	r5, #2
 800bc76:	2e00      	cmp	r6, #0
 800bc78:	d17e      	bne.n	800bd78 <_dtoa_r+0x4d8>
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d1d0      	bne.n	800bc20 <_dtoa_r+0x380>
 800bc7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc80:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	f000 8084 	beq.w	800bd92 <_dtoa_r+0x4f2>
 800bc8a:	4b96      	ldr	r3, [pc, #600]	; (800bee4 <_dtoa_r+0x644>)
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	4640      	mov	r0, r8
 800bc90:	4649      	mov	r1, r9
 800bc92:	f7f4 ff23 	bl	8000adc <__aeabi_dcmplt>
 800bc96:	2800      	cmp	r0, #0
 800bc98:	d07b      	beq.n	800bd92 <_dtoa_r+0x4f2>
 800bc9a:	9b04      	ldr	r3, [sp, #16]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d078      	beq.n	800bd92 <_dtoa_r+0x4f2>
 800bca0:	9b01      	ldr	r3, [sp, #4]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	dd39      	ble.n	800bd1a <_dtoa_r+0x47a>
 800bca6:	4b90      	ldr	r3, [pc, #576]	; (800bee8 <_dtoa_r+0x648>)
 800bca8:	2200      	movs	r2, #0
 800bcaa:	4640      	mov	r0, r8
 800bcac:	4649      	mov	r1, r9
 800bcae:	f7f4 fca3 	bl	80005f8 <__aeabi_dmul>
 800bcb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcb6:	9e01      	ldr	r6, [sp, #4]
 800bcb8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bcbc:	3501      	adds	r5, #1
 800bcbe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	f7f4 fc2e 	bl	8000524 <__aeabi_i2d>
 800bcc8:	4642      	mov	r2, r8
 800bcca:	464b      	mov	r3, r9
 800bccc:	f7f4 fc94 	bl	80005f8 <__aeabi_dmul>
 800bcd0:	4b86      	ldr	r3, [pc, #536]	; (800beec <_dtoa_r+0x64c>)
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f7f4 fada 	bl	800028c <__adddf3>
 800bcd8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bcdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bce0:	9303      	str	r3, [sp, #12]
 800bce2:	2e00      	cmp	r6, #0
 800bce4:	d158      	bne.n	800bd98 <_dtoa_r+0x4f8>
 800bce6:	4b82      	ldr	r3, [pc, #520]	; (800bef0 <_dtoa_r+0x650>)
 800bce8:	2200      	movs	r2, #0
 800bcea:	4640      	mov	r0, r8
 800bcec:	4649      	mov	r1, r9
 800bcee:	f7f4 facb 	bl	8000288 <__aeabi_dsub>
 800bcf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bcf6:	4680      	mov	r8, r0
 800bcf8:	4689      	mov	r9, r1
 800bcfa:	f7f4 ff0d 	bl	8000b18 <__aeabi_dcmpgt>
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	f040 8296 	bne.w	800c230 <_dtoa_r+0x990>
 800bd04:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bd08:	4640      	mov	r0, r8
 800bd0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd0e:	4649      	mov	r1, r9
 800bd10:	f7f4 fee4 	bl	8000adc <__aeabi_dcmplt>
 800bd14:	2800      	cmp	r0, #0
 800bd16:	f040 8289 	bne.w	800c22c <_dtoa_r+0x98c>
 800bd1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bd1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	f2c0 814e 	blt.w	800bfc2 <_dtoa_r+0x722>
 800bd26:	f1bb 0f0e 	cmp.w	fp, #14
 800bd2a:	f300 814a 	bgt.w	800bfc2 <_dtoa_r+0x722>
 800bd2e:	4b6b      	ldr	r3, [pc, #428]	; (800bedc <_dtoa_r+0x63c>)
 800bd30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bd34:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f280 80dc 	bge.w	800bef8 <_dtoa_r+0x658>
 800bd40:	9b04      	ldr	r3, [sp, #16]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	f300 80d8 	bgt.w	800bef8 <_dtoa_r+0x658>
 800bd48:	f040 826f 	bne.w	800c22a <_dtoa_r+0x98a>
 800bd4c:	4b68      	ldr	r3, [pc, #416]	; (800bef0 <_dtoa_r+0x650>)
 800bd4e:	2200      	movs	r2, #0
 800bd50:	4640      	mov	r0, r8
 800bd52:	4649      	mov	r1, r9
 800bd54:	f7f4 fc50 	bl	80005f8 <__aeabi_dmul>
 800bd58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd5c:	f7f4 fed2 	bl	8000b04 <__aeabi_dcmpge>
 800bd60:	9e04      	ldr	r6, [sp, #16]
 800bd62:	4637      	mov	r7, r6
 800bd64:	2800      	cmp	r0, #0
 800bd66:	f040 8245 	bne.w	800c1f4 <_dtoa_r+0x954>
 800bd6a:	9d00      	ldr	r5, [sp, #0]
 800bd6c:	2331      	movs	r3, #49	; 0x31
 800bd6e:	f805 3b01 	strb.w	r3, [r5], #1
 800bd72:	f10b 0b01 	add.w	fp, fp, #1
 800bd76:	e241      	b.n	800c1fc <_dtoa_r+0x95c>
 800bd78:	07f2      	lsls	r2, r6, #31
 800bd7a:	d505      	bpl.n	800bd88 <_dtoa_r+0x4e8>
 800bd7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd80:	f7f4 fc3a 	bl	80005f8 <__aeabi_dmul>
 800bd84:	3501      	adds	r5, #1
 800bd86:	2301      	movs	r3, #1
 800bd88:	1076      	asrs	r6, r6, #1
 800bd8a:	3708      	adds	r7, #8
 800bd8c:	e773      	b.n	800bc76 <_dtoa_r+0x3d6>
 800bd8e:	2502      	movs	r5, #2
 800bd90:	e775      	b.n	800bc7e <_dtoa_r+0x3de>
 800bd92:	9e04      	ldr	r6, [sp, #16]
 800bd94:	465f      	mov	r7, fp
 800bd96:	e792      	b.n	800bcbe <_dtoa_r+0x41e>
 800bd98:	9900      	ldr	r1, [sp, #0]
 800bd9a:	4b50      	ldr	r3, [pc, #320]	; (800bedc <_dtoa_r+0x63c>)
 800bd9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bda0:	4431      	add	r1, r6
 800bda2:	9102      	str	r1, [sp, #8]
 800bda4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bda6:	eeb0 9a47 	vmov.f32	s18, s14
 800bdaa:	eef0 9a67 	vmov.f32	s19, s15
 800bdae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bdb2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bdb6:	2900      	cmp	r1, #0
 800bdb8:	d044      	beq.n	800be44 <_dtoa_r+0x5a4>
 800bdba:	494e      	ldr	r1, [pc, #312]	; (800bef4 <_dtoa_r+0x654>)
 800bdbc:	2000      	movs	r0, #0
 800bdbe:	f7f4 fd45 	bl	800084c <__aeabi_ddiv>
 800bdc2:	ec53 2b19 	vmov	r2, r3, d9
 800bdc6:	f7f4 fa5f 	bl	8000288 <__aeabi_dsub>
 800bdca:	9d00      	ldr	r5, [sp, #0]
 800bdcc:	ec41 0b19 	vmov	d9, r0, r1
 800bdd0:	4649      	mov	r1, r9
 800bdd2:	4640      	mov	r0, r8
 800bdd4:	f7f4 fec0 	bl	8000b58 <__aeabi_d2iz>
 800bdd8:	4606      	mov	r6, r0
 800bdda:	f7f4 fba3 	bl	8000524 <__aeabi_i2d>
 800bdde:	4602      	mov	r2, r0
 800bde0:	460b      	mov	r3, r1
 800bde2:	4640      	mov	r0, r8
 800bde4:	4649      	mov	r1, r9
 800bde6:	f7f4 fa4f 	bl	8000288 <__aeabi_dsub>
 800bdea:	3630      	adds	r6, #48	; 0x30
 800bdec:	f805 6b01 	strb.w	r6, [r5], #1
 800bdf0:	ec53 2b19 	vmov	r2, r3, d9
 800bdf4:	4680      	mov	r8, r0
 800bdf6:	4689      	mov	r9, r1
 800bdf8:	f7f4 fe70 	bl	8000adc <__aeabi_dcmplt>
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	d164      	bne.n	800beca <_dtoa_r+0x62a>
 800be00:	4642      	mov	r2, r8
 800be02:	464b      	mov	r3, r9
 800be04:	4937      	ldr	r1, [pc, #220]	; (800bee4 <_dtoa_r+0x644>)
 800be06:	2000      	movs	r0, #0
 800be08:	f7f4 fa3e 	bl	8000288 <__aeabi_dsub>
 800be0c:	ec53 2b19 	vmov	r2, r3, d9
 800be10:	f7f4 fe64 	bl	8000adc <__aeabi_dcmplt>
 800be14:	2800      	cmp	r0, #0
 800be16:	f040 80b6 	bne.w	800bf86 <_dtoa_r+0x6e6>
 800be1a:	9b02      	ldr	r3, [sp, #8]
 800be1c:	429d      	cmp	r5, r3
 800be1e:	f43f af7c 	beq.w	800bd1a <_dtoa_r+0x47a>
 800be22:	4b31      	ldr	r3, [pc, #196]	; (800bee8 <_dtoa_r+0x648>)
 800be24:	ec51 0b19 	vmov	r0, r1, d9
 800be28:	2200      	movs	r2, #0
 800be2a:	f7f4 fbe5 	bl	80005f8 <__aeabi_dmul>
 800be2e:	4b2e      	ldr	r3, [pc, #184]	; (800bee8 <_dtoa_r+0x648>)
 800be30:	ec41 0b19 	vmov	d9, r0, r1
 800be34:	2200      	movs	r2, #0
 800be36:	4640      	mov	r0, r8
 800be38:	4649      	mov	r1, r9
 800be3a:	f7f4 fbdd 	bl	80005f8 <__aeabi_dmul>
 800be3e:	4680      	mov	r8, r0
 800be40:	4689      	mov	r9, r1
 800be42:	e7c5      	b.n	800bdd0 <_dtoa_r+0x530>
 800be44:	ec51 0b17 	vmov	r0, r1, d7
 800be48:	f7f4 fbd6 	bl	80005f8 <__aeabi_dmul>
 800be4c:	9b02      	ldr	r3, [sp, #8]
 800be4e:	9d00      	ldr	r5, [sp, #0]
 800be50:	930f      	str	r3, [sp, #60]	; 0x3c
 800be52:	ec41 0b19 	vmov	d9, r0, r1
 800be56:	4649      	mov	r1, r9
 800be58:	4640      	mov	r0, r8
 800be5a:	f7f4 fe7d 	bl	8000b58 <__aeabi_d2iz>
 800be5e:	4606      	mov	r6, r0
 800be60:	f7f4 fb60 	bl	8000524 <__aeabi_i2d>
 800be64:	3630      	adds	r6, #48	; 0x30
 800be66:	4602      	mov	r2, r0
 800be68:	460b      	mov	r3, r1
 800be6a:	4640      	mov	r0, r8
 800be6c:	4649      	mov	r1, r9
 800be6e:	f7f4 fa0b 	bl	8000288 <__aeabi_dsub>
 800be72:	f805 6b01 	strb.w	r6, [r5], #1
 800be76:	9b02      	ldr	r3, [sp, #8]
 800be78:	429d      	cmp	r5, r3
 800be7a:	4680      	mov	r8, r0
 800be7c:	4689      	mov	r9, r1
 800be7e:	f04f 0200 	mov.w	r2, #0
 800be82:	d124      	bne.n	800bece <_dtoa_r+0x62e>
 800be84:	4b1b      	ldr	r3, [pc, #108]	; (800bef4 <_dtoa_r+0x654>)
 800be86:	ec51 0b19 	vmov	r0, r1, d9
 800be8a:	f7f4 f9ff 	bl	800028c <__adddf3>
 800be8e:	4602      	mov	r2, r0
 800be90:	460b      	mov	r3, r1
 800be92:	4640      	mov	r0, r8
 800be94:	4649      	mov	r1, r9
 800be96:	f7f4 fe3f 	bl	8000b18 <__aeabi_dcmpgt>
 800be9a:	2800      	cmp	r0, #0
 800be9c:	d173      	bne.n	800bf86 <_dtoa_r+0x6e6>
 800be9e:	ec53 2b19 	vmov	r2, r3, d9
 800bea2:	4914      	ldr	r1, [pc, #80]	; (800bef4 <_dtoa_r+0x654>)
 800bea4:	2000      	movs	r0, #0
 800bea6:	f7f4 f9ef 	bl	8000288 <__aeabi_dsub>
 800beaa:	4602      	mov	r2, r0
 800beac:	460b      	mov	r3, r1
 800beae:	4640      	mov	r0, r8
 800beb0:	4649      	mov	r1, r9
 800beb2:	f7f4 fe13 	bl	8000adc <__aeabi_dcmplt>
 800beb6:	2800      	cmp	r0, #0
 800beb8:	f43f af2f 	beq.w	800bd1a <_dtoa_r+0x47a>
 800bebc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bebe:	1e6b      	subs	r3, r5, #1
 800bec0:	930f      	str	r3, [sp, #60]	; 0x3c
 800bec2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bec6:	2b30      	cmp	r3, #48	; 0x30
 800bec8:	d0f8      	beq.n	800bebc <_dtoa_r+0x61c>
 800beca:	46bb      	mov	fp, r7
 800becc:	e04a      	b.n	800bf64 <_dtoa_r+0x6c4>
 800bece:	4b06      	ldr	r3, [pc, #24]	; (800bee8 <_dtoa_r+0x648>)
 800bed0:	f7f4 fb92 	bl	80005f8 <__aeabi_dmul>
 800bed4:	4680      	mov	r8, r0
 800bed6:	4689      	mov	r9, r1
 800bed8:	e7bd      	b.n	800be56 <_dtoa_r+0x5b6>
 800beda:	bf00      	nop
 800bedc:	08011138 	.word	0x08011138
 800bee0:	08011110 	.word	0x08011110
 800bee4:	3ff00000 	.word	0x3ff00000
 800bee8:	40240000 	.word	0x40240000
 800beec:	401c0000 	.word	0x401c0000
 800bef0:	40140000 	.word	0x40140000
 800bef4:	3fe00000 	.word	0x3fe00000
 800bef8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800befc:	9d00      	ldr	r5, [sp, #0]
 800befe:	4642      	mov	r2, r8
 800bf00:	464b      	mov	r3, r9
 800bf02:	4630      	mov	r0, r6
 800bf04:	4639      	mov	r1, r7
 800bf06:	f7f4 fca1 	bl	800084c <__aeabi_ddiv>
 800bf0a:	f7f4 fe25 	bl	8000b58 <__aeabi_d2iz>
 800bf0e:	9001      	str	r0, [sp, #4]
 800bf10:	f7f4 fb08 	bl	8000524 <__aeabi_i2d>
 800bf14:	4642      	mov	r2, r8
 800bf16:	464b      	mov	r3, r9
 800bf18:	f7f4 fb6e 	bl	80005f8 <__aeabi_dmul>
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	460b      	mov	r3, r1
 800bf20:	4630      	mov	r0, r6
 800bf22:	4639      	mov	r1, r7
 800bf24:	f7f4 f9b0 	bl	8000288 <__aeabi_dsub>
 800bf28:	9e01      	ldr	r6, [sp, #4]
 800bf2a:	9f04      	ldr	r7, [sp, #16]
 800bf2c:	3630      	adds	r6, #48	; 0x30
 800bf2e:	f805 6b01 	strb.w	r6, [r5], #1
 800bf32:	9e00      	ldr	r6, [sp, #0]
 800bf34:	1bae      	subs	r6, r5, r6
 800bf36:	42b7      	cmp	r7, r6
 800bf38:	4602      	mov	r2, r0
 800bf3a:	460b      	mov	r3, r1
 800bf3c:	d134      	bne.n	800bfa8 <_dtoa_r+0x708>
 800bf3e:	f7f4 f9a5 	bl	800028c <__adddf3>
 800bf42:	4642      	mov	r2, r8
 800bf44:	464b      	mov	r3, r9
 800bf46:	4606      	mov	r6, r0
 800bf48:	460f      	mov	r7, r1
 800bf4a:	f7f4 fde5 	bl	8000b18 <__aeabi_dcmpgt>
 800bf4e:	b9c8      	cbnz	r0, 800bf84 <_dtoa_r+0x6e4>
 800bf50:	4642      	mov	r2, r8
 800bf52:	464b      	mov	r3, r9
 800bf54:	4630      	mov	r0, r6
 800bf56:	4639      	mov	r1, r7
 800bf58:	f7f4 fdb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf5c:	b110      	cbz	r0, 800bf64 <_dtoa_r+0x6c4>
 800bf5e:	9b01      	ldr	r3, [sp, #4]
 800bf60:	07db      	lsls	r3, r3, #31
 800bf62:	d40f      	bmi.n	800bf84 <_dtoa_r+0x6e4>
 800bf64:	4651      	mov	r1, sl
 800bf66:	4620      	mov	r0, r4
 800bf68:	f000 fbcc 	bl	800c704 <_Bfree>
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf70:	702b      	strb	r3, [r5, #0]
 800bf72:	f10b 0301 	add.w	r3, fp, #1
 800bf76:	6013      	str	r3, [r2, #0]
 800bf78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	f43f ace2 	beq.w	800b944 <_dtoa_r+0xa4>
 800bf80:	601d      	str	r5, [r3, #0]
 800bf82:	e4df      	b.n	800b944 <_dtoa_r+0xa4>
 800bf84:	465f      	mov	r7, fp
 800bf86:	462b      	mov	r3, r5
 800bf88:	461d      	mov	r5, r3
 800bf8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf8e:	2a39      	cmp	r2, #57	; 0x39
 800bf90:	d106      	bne.n	800bfa0 <_dtoa_r+0x700>
 800bf92:	9a00      	ldr	r2, [sp, #0]
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d1f7      	bne.n	800bf88 <_dtoa_r+0x6e8>
 800bf98:	9900      	ldr	r1, [sp, #0]
 800bf9a:	2230      	movs	r2, #48	; 0x30
 800bf9c:	3701      	adds	r7, #1
 800bf9e:	700a      	strb	r2, [r1, #0]
 800bfa0:	781a      	ldrb	r2, [r3, #0]
 800bfa2:	3201      	adds	r2, #1
 800bfa4:	701a      	strb	r2, [r3, #0]
 800bfa6:	e790      	b.n	800beca <_dtoa_r+0x62a>
 800bfa8:	4ba3      	ldr	r3, [pc, #652]	; (800c238 <_dtoa_r+0x998>)
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f7f4 fb24 	bl	80005f8 <__aeabi_dmul>
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	4606      	mov	r6, r0
 800bfb6:	460f      	mov	r7, r1
 800bfb8:	f7f4 fd86 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfbc:	2800      	cmp	r0, #0
 800bfbe:	d09e      	beq.n	800befe <_dtoa_r+0x65e>
 800bfc0:	e7d0      	b.n	800bf64 <_dtoa_r+0x6c4>
 800bfc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfc4:	2a00      	cmp	r2, #0
 800bfc6:	f000 80ca 	beq.w	800c15e <_dtoa_r+0x8be>
 800bfca:	9a07      	ldr	r2, [sp, #28]
 800bfcc:	2a01      	cmp	r2, #1
 800bfce:	f300 80ad 	bgt.w	800c12c <_dtoa_r+0x88c>
 800bfd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfd4:	2a00      	cmp	r2, #0
 800bfd6:	f000 80a5 	beq.w	800c124 <_dtoa_r+0x884>
 800bfda:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bfde:	9e08      	ldr	r6, [sp, #32]
 800bfe0:	9d05      	ldr	r5, [sp, #20]
 800bfe2:	9a05      	ldr	r2, [sp, #20]
 800bfe4:	441a      	add	r2, r3
 800bfe6:	9205      	str	r2, [sp, #20]
 800bfe8:	9a06      	ldr	r2, [sp, #24]
 800bfea:	2101      	movs	r1, #1
 800bfec:	441a      	add	r2, r3
 800bfee:	4620      	mov	r0, r4
 800bff0:	9206      	str	r2, [sp, #24]
 800bff2:	f000 fc87 	bl	800c904 <__i2b>
 800bff6:	4607      	mov	r7, r0
 800bff8:	b165      	cbz	r5, 800c014 <_dtoa_r+0x774>
 800bffa:	9b06      	ldr	r3, [sp, #24]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	dd09      	ble.n	800c014 <_dtoa_r+0x774>
 800c000:	42ab      	cmp	r3, r5
 800c002:	9a05      	ldr	r2, [sp, #20]
 800c004:	bfa8      	it	ge
 800c006:	462b      	movge	r3, r5
 800c008:	1ad2      	subs	r2, r2, r3
 800c00a:	9205      	str	r2, [sp, #20]
 800c00c:	9a06      	ldr	r2, [sp, #24]
 800c00e:	1aed      	subs	r5, r5, r3
 800c010:	1ad3      	subs	r3, r2, r3
 800c012:	9306      	str	r3, [sp, #24]
 800c014:	9b08      	ldr	r3, [sp, #32]
 800c016:	b1f3      	cbz	r3, 800c056 <_dtoa_r+0x7b6>
 800c018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	f000 80a3 	beq.w	800c166 <_dtoa_r+0x8c6>
 800c020:	2e00      	cmp	r6, #0
 800c022:	dd10      	ble.n	800c046 <_dtoa_r+0x7a6>
 800c024:	4639      	mov	r1, r7
 800c026:	4632      	mov	r2, r6
 800c028:	4620      	mov	r0, r4
 800c02a:	f000 fd2b 	bl	800ca84 <__pow5mult>
 800c02e:	4652      	mov	r2, sl
 800c030:	4601      	mov	r1, r0
 800c032:	4607      	mov	r7, r0
 800c034:	4620      	mov	r0, r4
 800c036:	f000 fc7b 	bl	800c930 <__multiply>
 800c03a:	4651      	mov	r1, sl
 800c03c:	4680      	mov	r8, r0
 800c03e:	4620      	mov	r0, r4
 800c040:	f000 fb60 	bl	800c704 <_Bfree>
 800c044:	46c2      	mov	sl, r8
 800c046:	9b08      	ldr	r3, [sp, #32]
 800c048:	1b9a      	subs	r2, r3, r6
 800c04a:	d004      	beq.n	800c056 <_dtoa_r+0x7b6>
 800c04c:	4651      	mov	r1, sl
 800c04e:	4620      	mov	r0, r4
 800c050:	f000 fd18 	bl	800ca84 <__pow5mult>
 800c054:	4682      	mov	sl, r0
 800c056:	2101      	movs	r1, #1
 800c058:	4620      	mov	r0, r4
 800c05a:	f000 fc53 	bl	800c904 <__i2b>
 800c05e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c060:	2b00      	cmp	r3, #0
 800c062:	4606      	mov	r6, r0
 800c064:	f340 8081 	ble.w	800c16a <_dtoa_r+0x8ca>
 800c068:	461a      	mov	r2, r3
 800c06a:	4601      	mov	r1, r0
 800c06c:	4620      	mov	r0, r4
 800c06e:	f000 fd09 	bl	800ca84 <__pow5mult>
 800c072:	9b07      	ldr	r3, [sp, #28]
 800c074:	2b01      	cmp	r3, #1
 800c076:	4606      	mov	r6, r0
 800c078:	dd7a      	ble.n	800c170 <_dtoa_r+0x8d0>
 800c07a:	f04f 0800 	mov.w	r8, #0
 800c07e:	6933      	ldr	r3, [r6, #16]
 800c080:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c084:	6918      	ldr	r0, [r3, #16]
 800c086:	f000 fbef 	bl	800c868 <__hi0bits>
 800c08a:	f1c0 0020 	rsb	r0, r0, #32
 800c08e:	9b06      	ldr	r3, [sp, #24]
 800c090:	4418      	add	r0, r3
 800c092:	f010 001f 	ands.w	r0, r0, #31
 800c096:	f000 8094 	beq.w	800c1c2 <_dtoa_r+0x922>
 800c09a:	f1c0 0320 	rsb	r3, r0, #32
 800c09e:	2b04      	cmp	r3, #4
 800c0a0:	f340 8085 	ble.w	800c1ae <_dtoa_r+0x90e>
 800c0a4:	9b05      	ldr	r3, [sp, #20]
 800c0a6:	f1c0 001c 	rsb	r0, r0, #28
 800c0aa:	4403      	add	r3, r0
 800c0ac:	9305      	str	r3, [sp, #20]
 800c0ae:	9b06      	ldr	r3, [sp, #24]
 800c0b0:	4403      	add	r3, r0
 800c0b2:	4405      	add	r5, r0
 800c0b4:	9306      	str	r3, [sp, #24]
 800c0b6:	9b05      	ldr	r3, [sp, #20]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	dd05      	ble.n	800c0c8 <_dtoa_r+0x828>
 800c0bc:	4651      	mov	r1, sl
 800c0be:	461a      	mov	r2, r3
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	f000 fd39 	bl	800cb38 <__lshift>
 800c0c6:	4682      	mov	sl, r0
 800c0c8:	9b06      	ldr	r3, [sp, #24]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	dd05      	ble.n	800c0da <_dtoa_r+0x83a>
 800c0ce:	4631      	mov	r1, r6
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f000 fd30 	bl	800cb38 <__lshift>
 800c0d8:	4606      	mov	r6, r0
 800c0da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d072      	beq.n	800c1c6 <_dtoa_r+0x926>
 800c0e0:	4631      	mov	r1, r6
 800c0e2:	4650      	mov	r0, sl
 800c0e4:	f000 fd94 	bl	800cc10 <__mcmp>
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	da6c      	bge.n	800c1c6 <_dtoa_r+0x926>
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	4651      	mov	r1, sl
 800c0f0:	220a      	movs	r2, #10
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	f000 fb28 	bl	800c748 <__multadd>
 800c0f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c0fe:	4682      	mov	sl, r0
 800c100:	2b00      	cmp	r3, #0
 800c102:	f000 81b0 	beq.w	800c466 <_dtoa_r+0xbc6>
 800c106:	2300      	movs	r3, #0
 800c108:	4639      	mov	r1, r7
 800c10a:	220a      	movs	r2, #10
 800c10c:	4620      	mov	r0, r4
 800c10e:	f000 fb1b 	bl	800c748 <__multadd>
 800c112:	9b01      	ldr	r3, [sp, #4]
 800c114:	2b00      	cmp	r3, #0
 800c116:	4607      	mov	r7, r0
 800c118:	f300 8096 	bgt.w	800c248 <_dtoa_r+0x9a8>
 800c11c:	9b07      	ldr	r3, [sp, #28]
 800c11e:	2b02      	cmp	r3, #2
 800c120:	dc59      	bgt.n	800c1d6 <_dtoa_r+0x936>
 800c122:	e091      	b.n	800c248 <_dtoa_r+0x9a8>
 800c124:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c126:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c12a:	e758      	b.n	800bfde <_dtoa_r+0x73e>
 800c12c:	9b04      	ldr	r3, [sp, #16]
 800c12e:	1e5e      	subs	r6, r3, #1
 800c130:	9b08      	ldr	r3, [sp, #32]
 800c132:	42b3      	cmp	r3, r6
 800c134:	bfbf      	itttt	lt
 800c136:	9b08      	ldrlt	r3, [sp, #32]
 800c138:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c13a:	9608      	strlt	r6, [sp, #32]
 800c13c:	1af3      	sublt	r3, r6, r3
 800c13e:	bfb4      	ite	lt
 800c140:	18d2      	addlt	r2, r2, r3
 800c142:	1b9e      	subge	r6, r3, r6
 800c144:	9b04      	ldr	r3, [sp, #16]
 800c146:	bfbc      	itt	lt
 800c148:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c14a:	2600      	movlt	r6, #0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	bfb7      	itett	lt
 800c150:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c154:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c158:	1a9d      	sublt	r5, r3, r2
 800c15a:	2300      	movlt	r3, #0
 800c15c:	e741      	b.n	800bfe2 <_dtoa_r+0x742>
 800c15e:	9e08      	ldr	r6, [sp, #32]
 800c160:	9d05      	ldr	r5, [sp, #20]
 800c162:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c164:	e748      	b.n	800bff8 <_dtoa_r+0x758>
 800c166:	9a08      	ldr	r2, [sp, #32]
 800c168:	e770      	b.n	800c04c <_dtoa_r+0x7ac>
 800c16a:	9b07      	ldr	r3, [sp, #28]
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	dc19      	bgt.n	800c1a4 <_dtoa_r+0x904>
 800c170:	9b02      	ldr	r3, [sp, #8]
 800c172:	b9bb      	cbnz	r3, 800c1a4 <_dtoa_r+0x904>
 800c174:	9b03      	ldr	r3, [sp, #12]
 800c176:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c17a:	b99b      	cbnz	r3, 800c1a4 <_dtoa_r+0x904>
 800c17c:	9b03      	ldr	r3, [sp, #12]
 800c17e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c182:	0d1b      	lsrs	r3, r3, #20
 800c184:	051b      	lsls	r3, r3, #20
 800c186:	b183      	cbz	r3, 800c1aa <_dtoa_r+0x90a>
 800c188:	9b05      	ldr	r3, [sp, #20]
 800c18a:	3301      	adds	r3, #1
 800c18c:	9305      	str	r3, [sp, #20]
 800c18e:	9b06      	ldr	r3, [sp, #24]
 800c190:	3301      	adds	r3, #1
 800c192:	9306      	str	r3, [sp, #24]
 800c194:	f04f 0801 	mov.w	r8, #1
 800c198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	f47f af6f 	bne.w	800c07e <_dtoa_r+0x7de>
 800c1a0:	2001      	movs	r0, #1
 800c1a2:	e774      	b.n	800c08e <_dtoa_r+0x7ee>
 800c1a4:	f04f 0800 	mov.w	r8, #0
 800c1a8:	e7f6      	b.n	800c198 <_dtoa_r+0x8f8>
 800c1aa:	4698      	mov	r8, r3
 800c1ac:	e7f4      	b.n	800c198 <_dtoa_r+0x8f8>
 800c1ae:	d082      	beq.n	800c0b6 <_dtoa_r+0x816>
 800c1b0:	9a05      	ldr	r2, [sp, #20]
 800c1b2:	331c      	adds	r3, #28
 800c1b4:	441a      	add	r2, r3
 800c1b6:	9205      	str	r2, [sp, #20]
 800c1b8:	9a06      	ldr	r2, [sp, #24]
 800c1ba:	441a      	add	r2, r3
 800c1bc:	441d      	add	r5, r3
 800c1be:	9206      	str	r2, [sp, #24]
 800c1c0:	e779      	b.n	800c0b6 <_dtoa_r+0x816>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	e7f4      	b.n	800c1b0 <_dtoa_r+0x910>
 800c1c6:	9b04      	ldr	r3, [sp, #16]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	dc37      	bgt.n	800c23c <_dtoa_r+0x99c>
 800c1cc:	9b07      	ldr	r3, [sp, #28]
 800c1ce:	2b02      	cmp	r3, #2
 800c1d0:	dd34      	ble.n	800c23c <_dtoa_r+0x99c>
 800c1d2:	9b04      	ldr	r3, [sp, #16]
 800c1d4:	9301      	str	r3, [sp, #4]
 800c1d6:	9b01      	ldr	r3, [sp, #4]
 800c1d8:	b963      	cbnz	r3, 800c1f4 <_dtoa_r+0x954>
 800c1da:	4631      	mov	r1, r6
 800c1dc:	2205      	movs	r2, #5
 800c1de:	4620      	mov	r0, r4
 800c1e0:	f000 fab2 	bl	800c748 <__multadd>
 800c1e4:	4601      	mov	r1, r0
 800c1e6:	4606      	mov	r6, r0
 800c1e8:	4650      	mov	r0, sl
 800c1ea:	f000 fd11 	bl	800cc10 <__mcmp>
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	f73f adbb 	bgt.w	800bd6a <_dtoa_r+0x4ca>
 800c1f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1f6:	9d00      	ldr	r5, [sp, #0]
 800c1f8:	ea6f 0b03 	mvn.w	fp, r3
 800c1fc:	f04f 0800 	mov.w	r8, #0
 800c200:	4631      	mov	r1, r6
 800c202:	4620      	mov	r0, r4
 800c204:	f000 fa7e 	bl	800c704 <_Bfree>
 800c208:	2f00      	cmp	r7, #0
 800c20a:	f43f aeab 	beq.w	800bf64 <_dtoa_r+0x6c4>
 800c20e:	f1b8 0f00 	cmp.w	r8, #0
 800c212:	d005      	beq.n	800c220 <_dtoa_r+0x980>
 800c214:	45b8      	cmp	r8, r7
 800c216:	d003      	beq.n	800c220 <_dtoa_r+0x980>
 800c218:	4641      	mov	r1, r8
 800c21a:	4620      	mov	r0, r4
 800c21c:	f000 fa72 	bl	800c704 <_Bfree>
 800c220:	4639      	mov	r1, r7
 800c222:	4620      	mov	r0, r4
 800c224:	f000 fa6e 	bl	800c704 <_Bfree>
 800c228:	e69c      	b.n	800bf64 <_dtoa_r+0x6c4>
 800c22a:	2600      	movs	r6, #0
 800c22c:	4637      	mov	r7, r6
 800c22e:	e7e1      	b.n	800c1f4 <_dtoa_r+0x954>
 800c230:	46bb      	mov	fp, r7
 800c232:	4637      	mov	r7, r6
 800c234:	e599      	b.n	800bd6a <_dtoa_r+0x4ca>
 800c236:	bf00      	nop
 800c238:	40240000 	.word	0x40240000
 800c23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c23e:	2b00      	cmp	r3, #0
 800c240:	f000 80c8 	beq.w	800c3d4 <_dtoa_r+0xb34>
 800c244:	9b04      	ldr	r3, [sp, #16]
 800c246:	9301      	str	r3, [sp, #4]
 800c248:	2d00      	cmp	r5, #0
 800c24a:	dd05      	ble.n	800c258 <_dtoa_r+0x9b8>
 800c24c:	4639      	mov	r1, r7
 800c24e:	462a      	mov	r2, r5
 800c250:	4620      	mov	r0, r4
 800c252:	f000 fc71 	bl	800cb38 <__lshift>
 800c256:	4607      	mov	r7, r0
 800c258:	f1b8 0f00 	cmp.w	r8, #0
 800c25c:	d05b      	beq.n	800c316 <_dtoa_r+0xa76>
 800c25e:	6879      	ldr	r1, [r7, #4]
 800c260:	4620      	mov	r0, r4
 800c262:	f000 fa0f 	bl	800c684 <_Balloc>
 800c266:	4605      	mov	r5, r0
 800c268:	b928      	cbnz	r0, 800c276 <_dtoa_r+0x9d6>
 800c26a:	4b83      	ldr	r3, [pc, #524]	; (800c478 <_dtoa_r+0xbd8>)
 800c26c:	4602      	mov	r2, r0
 800c26e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c272:	f7ff bb2e 	b.w	800b8d2 <_dtoa_r+0x32>
 800c276:	693a      	ldr	r2, [r7, #16]
 800c278:	3202      	adds	r2, #2
 800c27a:	0092      	lsls	r2, r2, #2
 800c27c:	f107 010c 	add.w	r1, r7, #12
 800c280:	300c      	adds	r0, #12
 800c282:	f002 fb19 	bl	800e8b8 <memcpy>
 800c286:	2201      	movs	r2, #1
 800c288:	4629      	mov	r1, r5
 800c28a:	4620      	mov	r0, r4
 800c28c:	f000 fc54 	bl	800cb38 <__lshift>
 800c290:	9b00      	ldr	r3, [sp, #0]
 800c292:	3301      	adds	r3, #1
 800c294:	9304      	str	r3, [sp, #16]
 800c296:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c29a:	4413      	add	r3, r2
 800c29c:	9308      	str	r3, [sp, #32]
 800c29e:	9b02      	ldr	r3, [sp, #8]
 800c2a0:	f003 0301 	and.w	r3, r3, #1
 800c2a4:	46b8      	mov	r8, r7
 800c2a6:	9306      	str	r3, [sp, #24]
 800c2a8:	4607      	mov	r7, r0
 800c2aa:	9b04      	ldr	r3, [sp, #16]
 800c2ac:	4631      	mov	r1, r6
 800c2ae:	3b01      	subs	r3, #1
 800c2b0:	4650      	mov	r0, sl
 800c2b2:	9301      	str	r3, [sp, #4]
 800c2b4:	f7ff fa6c 	bl	800b790 <quorem>
 800c2b8:	4641      	mov	r1, r8
 800c2ba:	9002      	str	r0, [sp, #8]
 800c2bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c2c0:	4650      	mov	r0, sl
 800c2c2:	f000 fca5 	bl	800cc10 <__mcmp>
 800c2c6:	463a      	mov	r2, r7
 800c2c8:	9005      	str	r0, [sp, #20]
 800c2ca:	4631      	mov	r1, r6
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	f000 fcbb 	bl	800cc48 <__mdiff>
 800c2d2:	68c2      	ldr	r2, [r0, #12]
 800c2d4:	4605      	mov	r5, r0
 800c2d6:	bb02      	cbnz	r2, 800c31a <_dtoa_r+0xa7a>
 800c2d8:	4601      	mov	r1, r0
 800c2da:	4650      	mov	r0, sl
 800c2dc:	f000 fc98 	bl	800cc10 <__mcmp>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	4629      	mov	r1, r5
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	9209      	str	r2, [sp, #36]	; 0x24
 800c2e8:	f000 fa0c 	bl	800c704 <_Bfree>
 800c2ec:	9b07      	ldr	r3, [sp, #28]
 800c2ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2f0:	9d04      	ldr	r5, [sp, #16]
 800c2f2:	ea43 0102 	orr.w	r1, r3, r2
 800c2f6:	9b06      	ldr	r3, [sp, #24]
 800c2f8:	4319      	orrs	r1, r3
 800c2fa:	d110      	bne.n	800c31e <_dtoa_r+0xa7e>
 800c2fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c300:	d029      	beq.n	800c356 <_dtoa_r+0xab6>
 800c302:	9b05      	ldr	r3, [sp, #20]
 800c304:	2b00      	cmp	r3, #0
 800c306:	dd02      	ble.n	800c30e <_dtoa_r+0xa6e>
 800c308:	9b02      	ldr	r3, [sp, #8]
 800c30a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c30e:	9b01      	ldr	r3, [sp, #4]
 800c310:	f883 9000 	strb.w	r9, [r3]
 800c314:	e774      	b.n	800c200 <_dtoa_r+0x960>
 800c316:	4638      	mov	r0, r7
 800c318:	e7ba      	b.n	800c290 <_dtoa_r+0x9f0>
 800c31a:	2201      	movs	r2, #1
 800c31c:	e7e1      	b.n	800c2e2 <_dtoa_r+0xa42>
 800c31e:	9b05      	ldr	r3, [sp, #20]
 800c320:	2b00      	cmp	r3, #0
 800c322:	db04      	blt.n	800c32e <_dtoa_r+0xa8e>
 800c324:	9907      	ldr	r1, [sp, #28]
 800c326:	430b      	orrs	r3, r1
 800c328:	9906      	ldr	r1, [sp, #24]
 800c32a:	430b      	orrs	r3, r1
 800c32c:	d120      	bne.n	800c370 <_dtoa_r+0xad0>
 800c32e:	2a00      	cmp	r2, #0
 800c330:	dded      	ble.n	800c30e <_dtoa_r+0xa6e>
 800c332:	4651      	mov	r1, sl
 800c334:	2201      	movs	r2, #1
 800c336:	4620      	mov	r0, r4
 800c338:	f000 fbfe 	bl	800cb38 <__lshift>
 800c33c:	4631      	mov	r1, r6
 800c33e:	4682      	mov	sl, r0
 800c340:	f000 fc66 	bl	800cc10 <__mcmp>
 800c344:	2800      	cmp	r0, #0
 800c346:	dc03      	bgt.n	800c350 <_dtoa_r+0xab0>
 800c348:	d1e1      	bne.n	800c30e <_dtoa_r+0xa6e>
 800c34a:	f019 0f01 	tst.w	r9, #1
 800c34e:	d0de      	beq.n	800c30e <_dtoa_r+0xa6e>
 800c350:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c354:	d1d8      	bne.n	800c308 <_dtoa_r+0xa68>
 800c356:	9a01      	ldr	r2, [sp, #4]
 800c358:	2339      	movs	r3, #57	; 0x39
 800c35a:	7013      	strb	r3, [r2, #0]
 800c35c:	462b      	mov	r3, r5
 800c35e:	461d      	mov	r5, r3
 800c360:	3b01      	subs	r3, #1
 800c362:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c366:	2a39      	cmp	r2, #57	; 0x39
 800c368:	d06c      	beq.n	800c444 <_dtoa_r+0xba4>
 800c36a:	3201      	adds	r2, #1
 800c36c:	701a      	strb	r2, [r3, #0]
 800c36e:	e747      	b.n	800c200 <_dtoa_r+0x960>
 800c370:	2a00      	cmp	r2, #0
 800c372:	dd07      	ble.n	800c384 <_dtoa_r+0xae4>
 800c374:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c378:	d0ed      	beq.n	800c356 <_dtoa_r+0xab6>
 800c37a:	9a01      	ldr	r2, [sp, #4]
 800c37c:	f109 0301 	add.w	r3, r9, #1
 800c380:	7013      	strb	r3, [r2, #0]
 800c382:	e73d      	b.n	800c200 <_dtoa_r+0x960>
 800c384:	9b04      	ldr	r3, [sp, #16]
 800c386:	9a08      	ldr	r2, [sp, #32]
 800c388:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d043      	beq.n	800c418 <_dtoa_r+0xb78>
 800c390:	4651      	mov	r1, sl
 800c392:	2300      	movs	r3, #0
 800c394:	220a      	movs	r2, #10
 800c396:	4620      	mov	r0, r4
 800c398:	f000 f9d6 	bl	800c748 <__multadd>
 800c39c:	45b8      	cmp	r8, r7
 800c39e:	4682      	mov	sl, r0
 800c3a0:	f04f 0300 	mov.w	r3, #0
 800c3a4:	f04f 020a 	mov.w	r2, #10
 800c3a8:	4641      	mov	r1, r8
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	d107      	bne.n	800c3be <_dtoa_r+0xb1e>
 800c3ae:	f000 f9cb 	bl	800c748 <__multadd>
 800c3b2:	4680      	mov	r8, r0
 800c3b4:	4607      	mov	r7, r0
 800c3b6:	9b04      	ldr	r3, [sp, #16]
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	9304      	str	r3, [sp, #16]
 800c3bc:	e775      	b.n	800c2aa <_dtoa_r+0xa0a>
 800c3be:	f000 f9c3 	bl	800c748 <__multadd>
 800c3c2:	4639      	mov	r1, r7
 800c3c4:	4680      	mov	r8, r0
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	220a      	movs	r2, #10
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	f000 f9bc 	bl	800c748 <__multadd>
 800c3d0:	4607      	mov	r7, r0
 800c3d2:	e7f0      	b.n	800c3b6 <_dtoa_r+0xb16>
 800c3d4:	9b04      	ldr	r3, [sp, #16]
 800c3d6:	9301      	str	r3, [sp, #4]
 800c3d8:	9d00      	ldr	r5, [sp, #0]
 800c3da:	4631      	mov	r1, r6
 800c3dc:	4650      	mov	r0, sl
 800c3de:	f7ff f9d7 	bl	800b790 <quorem>
 800c3e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c3e6:	9b00      	ldr	r3, [sp, #0]
 800c3e8:	f805 9b01 	strb.w	r9, [r5], #1
 800c3ec:	1aea      	subs	r2, r5, r3
 800c3ee:	9b01      	ldr	r3, [sp, #4]
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	dd07      	ble.n	800c404 <_dtoa_r+0xb64>
 800c3f4:	4651      	mov	r1, sl
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	220a      	movs	r2, #10
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	f000 f9a4 	bl	800c748 <__multadd>
 800c400:	4682      	mov	sl, r0
 800c402:	e7ea      	b.n	800c3da <_dtoa_r+0xb3a>
 800c404:	9b01      	ldr	r3, [sp, #4]
 800c406:	2b00      	cmp	r3, #0
 800c408:	bfc8      	it	gt
 800c40a:	461d      	movgt	r5, r3
 800c40c:	9b00      	ldr	r3, [sp, #0]
 800c40e:	bfd8      	it	le
 800c410:	2501      	movle	r5, #1
 800c412:	441d      	add	r5, r3
 800c414:	f04f 0800 	mov.w	r8, #0
 800c418:	4651      	mov	r1, sl
 800c41a:	2201      	movs	r2, #1
 800c41c:	4620      	mov	r0, r4
 800c41e:	f000 fb8b 	bl	800cb38 <__lshift>
 800c422:	4631      	mov	r1, r6
 800c424:	4682      	mov	sl, r0
 800c426:	f000 fbf3 	bl	800cc10 <__mcmp>
 800c42a:	2800      	cmp	r0, #0
 800c42c:	dc96      	bgt.n	800c35c <_dtoa_r+0xabc>
 800c42e:	d102      	bne.n	800c436 <_dtoa_r+0xb96>
 800c430:	f019 0f01 	tst.w	r9, #1
 800c434:	d192      	bne.n	800c35c <_dtoa_r+0xabc>
 800c436:	462b      	mov	r3, r5
 800c438:	461d      	mov	r5, r3
 800c43a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c43e:	2a30      	cmp	r2, #48	; 0x30
 800c440:	d0fa      	beq.n	800c438 <_dtoa_r+0xb98>
 800c442:	e6dd      	b.n	800c200 <_dtoa_r+0x960>
 800c444:	9a00      	ldr	r2, [sp, #0]
 800c446:	429a      	cmp	r2, r3
 800c448:	d189      	bne.n	800c35e <_dtoa_r+0xabe>
 800c44a:	f10b 0b01 	add.w	fp, fp, #1
 800c44e:	2331      	movs	r3, #49	; 0x31
 800c450:	e796      	b.n	800c380 <_dtoa_r+0xae0>
 800c452:	4b0a      	ldr	r3, [pc, #40]	; (800c47c <_dtoa_r+0xbdc>)
 800c454:	f7ff ba99 	b.w	800b98a <_dtoa_r+0xea>
 800c458:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	f47f aa6d 	bne.w	800b93a <_dtoa_r+0x9a>
 800c460:	4b07      	ldr	r3, [pc, #28]	; (800c480 <_dtoa_r+0xbe0>)
 800c462:	f7ff ba92 	b.w	800b98a <_dtoa_r+0xea>
 800c466:	9b01      	ldr	r3, [sp, #4]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	dcb5      	bgt.n	800c3d8 <_dtoa_r+0xb38>
 800c46c:	9b07      	ldr	r3, [sp, #28]
 800c46e:	2b02      	cmp	r3, #2
 800c470:	f73f aeb1 	bgt.w	800c1d6 <_dtoa_r+0x936>
 800c474:	e7b0      	b.n	800c3d8 <_dtoa_r+0xb38>
 800c476:	bf00      	nop
 800c478:	0801109f 	.word	0x0801109f
 800c47c:	08011388 	.word	0x08011388
 800c480:	08011023 	.word	0x08011023

0800c484 <_free_r>:
 800c484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c486:	2900      	cmp	r1, #0
 800c488:	d044      	beq.n	800c514 <_free_r+0x90>
 800c48a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c48e:	9001      	str	r0, [sp, #4]
 800c490:	2b00      	cmp	r3, #0
 800c492:	f1a1 0404 	sub.w	r4, r1, #4
 800c496:	bfb8      	it	lt
 800c498:	18e4      	addlt	r4, r4, r3
 800c49a:	f000 f8e7 	bl	800c66c <__malloc_lock>
 800c49e:	4a1e      	ldr	r2, [pc, #120]	; (800c518 <_free_r+0x94>)
 800c4a0:	9801      	ldr	r0, [sp, #4]
 800c4a2:	6813      	ldr	r3, [r2, #0]
 800c4a4:	b933      	cbnz	r3, 800c4b4 <_free_r+0x30>
 800c4a6:	6063      	str	r3, [r4, #4]
 800c4a8:	6014      	str	r4, [r2, #0]
 800c4aa:	b003      	add	sp, #12
 800c4ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4b0:	f000 b8e2 	b.w	800c678 <__malloc_unlock>
 800c4b4:	42a3      	cmp	r3, r4
 800c4b6:	d908      	bls.n	800c4ca <_free_r+0x46>
 800c4b8:	6825      	ldr	r5, [r4, #0]
 800c4ba:	1961      	adds	r1, r4, r5
 800c4bc:	428b      	cmp	r3, r1
 800c4be:	bf01      	itttt	eq
 800c4c0:	6819      	ldreq	r1, [r3, #0]
 800c4c2:	685b      	ldreq	r3, [r3, #4]
 800c4c4:	1949      	addeq	r1, r1, r5
 800c4c6:	6021      	streq	r1, [r4, #0]
 800c4c8:	e7ed      	b.n	800c4a6 <_free_r+0x22>
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	b10b      	cbz	r3, 800c4d4 <_free_r+0x50>
 800c4d0:	42a3      	cmp	r3, r4
 800c4d2:	d9fa      	bls.n	800c4ca <_free_r+0x46>
 800c4d4:	6811      	ldr	r1, [r2, #0]
 800c4d6:	1855      	adds	r5, r2, r1
 800c4d8:	42a5      	cmp	r5, r4
 800c4da:	d10b      	bne.n	800c4f4 <_free_r+0x70>
 800c4dc:	6824      	ldr	r4, [r4, #0]
 800c4de:	4421      	add	r1, r4
 800c4e0:	1854      	adds	r4, r2, r1
 800c4e2:	42a3      	cmp	r3, r4
 800c4e4:	6011      	str	r1, [r2, #0]
 800c4e6:	d1e0      	bne.n	800c4aa <_free_r+0x26>
 800c4e8:	681c      	ldr	r4, [r3, #0]
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	6053      	str	r3, [r2, #4]
 800c4ee:	440c      	add	r4, r1
 800c4f0:	6014      	str	r4, [r2, #0]
 800c4f2:	e7da      	b.n	800c4aa <_free_r+0x26>
 800c4f4:	d902      	bls.n	800c4fc <_free_r+0x78>
 800c4f6:	230c      	movs	r3, #12
 800c4f8:	6003      	str	r3, [r0, #0]
 800c4fa:	e7d6      	b.n	800c4aa <_free_r+0x26>
 800c4fc:	6825      	ldr	r5, [r4, #0]
 800c4fe:	1961      	adds	r1, r4, r5
 800c500:	428b      	cmp	r3, r1
 800c502:	bf04      	itt	eq
 800c504:	6819      	ldreq	r1, [r3, #0]
 800c506:	685b      	ldreq	r3, [r3, #4]
 800c508:	6063      	str	r3, [r4, #4]
 800c50a:	bf04      	itt	eq
 800c50c:	1949      	addeq	r1, r1, r5
 800c50e:	6021      	streq	r1, [r4, #0]
 800c510:	6054      	str	r4, [r2, #4]
 800c512:	e7ca      	b.n	800c4aa <_free_r+0x26>
 800c514:	b003      	add	sp, #12
 800c516:	bd30      	pop	{r4, r5, pc}
 800c518:	20002128 	.word	0x20002128

0800c51c <malloc>:
 800c51c:	4b02      	ldr	r3, [pc, #8]	; (800c528 <malloc+0xc>)
 800c51e:	4601      	mov	r1, r0
 800c520:	6818      	ldr	r0, [r3, #0]
 800c522:	f000 b823 	b.w	800c56c <_malloc_r>
 800c526:	bf00      	nop
 800c528:	20000154 	.word	0x20000154

0800c52c <sbrk_aligned>:
 800c52c:	b570      	push	{r4, r5, r6, lr}
 800c52e:	4e0e      	ldr	r6, [pc, #56]	; (800c568 <sbrk_aligned+0x3c>)
 800c530:	460c      	mov	r4, r1
 800c532:	6831      	ldr	r1, [r6, #0]
 800c534:	4605      	mov	r5, r0
 800c536:	b911      	cbnz	r1, 800c53e <sbrk_aligned+0x12>
 800c538:	f002 f9ae 	bl	800e898 <_sbrk_r>
 800c53c:	6030      	str	r0, [r6, #0]
 800c53e:	4621      	mov	r1, r4
 800c540:	4628      	mov	r0, r5
 800c542:	f002 f9a9 	bl	800e898 <_sbrk_r>
 800c546:	1c43      	adds	r3, r0, #1
 800c548:	d00a      	beq.n	800c560 <sbrk_aligned+0x34>
 800c54a:	1cc4      	adds	r4, r0, #3
 800c54c:	f024 0403 	bic.w	r4, r4, #3
 800c550:	42a0      	cmp	r0, r4
 800c552:	d007      	beq.n	800c564 <sbrk_aligned+0x38>
 800c554:	1a21      	subs	r1, r4, r0
 800c556:	4628      	mov	r0, r5
 800c558:	f002 f99e 	bl	800e898 <_sbrk_r>
 800c55c:	3001      	adds	r0, #1
 800c55e:	d101      	bne.n	800c564 <sbrk_aligned+0x38>
 800c560:	f04f 34ff 	mov.w	r4, #4294967295
 800c564:	4620      	mov	r0, r4
 800c566:	bd70      	pop	{r4, r5, r6, pc}
 800c568:	2000212c 	.word	0x2000212c

0800c56c <_malloc_r>:
 800c56c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c570:	1ccd      	adds	r5, r1, #3
 800c572:	f025 0503 	bic.w	r5, r5, #3
 800c576:	3508      	adds	r5, #8
 800c578:	2d0c      	cmp	r5, #12
 800c57a:	bf38      	it	cc
 800c57c:	250c      	movcc	r5, #12
 800c57e:	2d00      	cmp	r5, #0
 800c580:	4607      	mov	r7, r0
 800c582:	db01      	blt.n	800c588 <_malloc_r+0x1c>
 800c584:	42a9      	cmp	r1, r5
 800c586:	d905      	bls.n	800c594 <_malloc_r+0x28>
 800c588:	230c      	movs	r3, #12
 800c58a:	603b      	str	r3, [r7, #0]
 800c58c:	2600      	movs	r6, #0
 800c58e:	4630      	mov	r0, r6
 800c590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c594:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c668 <_malloc_r+0xfc>
 800c598:	f000 f868 	bl	800c66c <__malloc_lock>
 800c59c:	f8d8 3000 	ldr.w	r3, [r8]
 800c5a0:	461c      	mov	r4, r3
 800c5a2:	bb5c      	cbnz	r4, 800c5fc <_malloc_r+0x90>
 800c5a4:	4629      	mov	r1, r5
 800c5a6:	4638      	mov	r0, r7
 800c5a8:	f7ff ffc0 	bl	800c52c <sbrk_aligned>
 800c5ac:	1c43      	adds	r3, r0, #1
 800c5ae:	4604      	mov	r4, r0
 800c5b0:	d155      	bne.n	800c65e <_malloc_r+0xf2>
 800c5b2:	f8d8 4000 	ldr.w	r4, [r8]
 800c5b6:	4626      	mov	r6, r4
 800c5b8:	2e00      	cmp	r6, #0
 800c5ba:	d145      	bne.n	800c648 <_malloc_r+0xdc>
 800c5bc:	2c00      	cmp	r4, #0
 800c5be:	d048      	beq.n	800c652 <_malloc_r+0xe6>
 800c5c0:	6823      	ldr	r3, [r4, #0]
 800c5c2:	4631      	mov	r1, r6
 800c5c4:	4638      	mov	r0, r7
 800c5c6:	eb04 0903 	add.w	r9, r4, r3
 800c5ca:	f002 f965 	bl	800e898 <_sbrk_r>
 800c5ce:	4581      	cmp	r9, r0
 800c5d0:	d13f      	bne.n	800c652 <_malloc_r+0xe6>
 800c5d2:	6821      	ldr	r1, [r4, #0]
 800c5d4:	1a6d      	subs	r5, r5, r1
 800c5d6:	4629      	mov	r1, r5
 800c5d8:	4638      	mov	r0, r7
 800c5da:	f7ff ffa7 	bl	800c52c <sbrk_aligned>
 800c5de:	3001      	adds	r0, #1
 800c5e0:	d037      	beq.n	800c652 <_malloc_r+0xe6>
 800c5e2:	6823      	ldr	r3, [r4, #0]
 800c5e4:	442b      	add	r3, r5
 800c5e6:	6023      	str	r3, [r4, #0]
 800c5e8:	f8d8 3000 	ldr.w	r3, [r8]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d038      	beq.n	800c662 <_malloc_r+0xf6>
 800c5f0:	685a      	ldr	r2, [r3, #4]
 800c5f2:	42a2      	cmp	r2, r4
 800c5f4:	d12b      	bne.n	800c64e <_malloc_r+0xe2>
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	605a      	str	r2, [r3, #4]
 800c5fa:	e00f      	b.n	800c61c <_malloc_r+0xb0>
 800c5fc:	6822      	ldr	r2, [r4, #0]
 800c5fe:	1b52      	subs	r2, r2, r5
 800c600:	d41f      	bmi.n	800c642 <_malloc_r+0xd6>
 800c602:	2a0b      	cmp	r2, #11
 800c604:	d917      	bls.n	800c636 <_malloc_r+0xca>
 800c606:	1961      	adds	r1, r4, r5
 800c608:	42a3      	cmp	r3, r4
 800c60a:	6025      	str	r5, [r4, #0]
 800c60c:	bf18      	it	ne
 800c60e:	6059      	strne	r1, [r3, #4]
 800c610:	6863      	ldr	r3, [r4, #4]
 800c612:	bf08      	it	eq
 800c614:	f8c8 1000 	streq.w	r1, [r8]
 800c618:	5162      	str	r2, [r4, r5]
 800c61a:	604b      	str	r3, [r1, #4]
 800c61c:	4638      	mov	r0, r7
 800c61e:	f104 060b 	add.w	r6, r4, #11
 800c622:	f000 f829 	bl	800c678 <__malloc_unlock>
 800c626:	f026 0607 	bic.w	r6, r6, #7
 800c62a:	1d23      	adds	r3, r4, #4
 800c62c:	1af2      	subs	r2, r6, r3
 800c62e:	d0ae      	beq.n	800c58e <_malloc_r+0x22>
 800c630:	1b9b      	subs	r3, r3, r6
 800c632:	50a3      	str	r3, [r4, r2]
 800c634:	e7ab      	b.n	800c58e <_malloc_r+0x22>
 800c636:	42a3      	cmp	r3, r4
 800c638:	6862      	ldr	r2, [r4, #4]
 800c63a:	d1dd      	bne.n	800c5f8 <_malloc_r+0x8c>
 800c63c:	f8c8 2000 	str.w	r2, [r8]
 800c640:	e7ec      	b.n	800c61c <_malloc_r+0xb0>
 800c642:	4623      	mov	r3, r4
 800c644:	6864      	ldr	r4, [r4, #4]
 800c646:	e7ac      	b.n	800c5a2 <_malloc_r+0x36>
 800c648:	4634      	mov	r4, r6
 800c64a:	6876      	ldr	r6, [r6, #4]
 800c64c:	e7b4      	b.n	800c5b8 <_malloc_r+0x4c>
 800c64e:	4613      	mov	r3, r2
 800c650:	e7cc      	b.n	800c5ec <_malloc_r+0x80>
 800c652:	230c      	movs	r3, #12
 800c654:	603b      	str	r3, [r7, #0]
 800c656:	4638      	mov	r0, r7
 800c658:	f000 f80e 	bl	800c678 <__malloc_unlock>
 800c65c:	e797      	b.n	800c58e <_malloc_r+0x22>
 800c65e:	6025      	str	r5, [r4, #0]
 800c660:	e7dc      	b.n	800c61c <_malloc_r+0xb0>
 800c662:	605b      	str	r3, [r3, #4]
 800c664:	deff      	udf	#255	; 0xff
 800c666:	bf00      	nop
 800c668:	20002128 	.word	0x20002128

0800c66c <__malloc_lock>:
 800c66c:	4801      	ldr	r0, [pc, #4]	; (800c674 <__malloc_lock+0x8>)
 800c66e:	f7ff b887 	b.w	800b780 <__retarget_lock_acquire_recursive>
 800c672:	bf00      	nop
 800c674:	20002124 	.word	0x20002124

0800c678 <__malloc_unlock>:
 800c678:	4801      	ldr	r0, [pc, #4]	; (800c680 <__malloc_unlock+0x8>)
 800c67a:	f7ff b882 	b.w	800b782 <__retarget_lock_release_recursive>
 800c67e:	bf00      	nop
 800c680:	20002124 	.word	0x20002124

0800c684 <_Balloc>:
 800c684:	b570      	push	{r4, r5, r6, lr}
 800c686:	69c6      	ldr	r6, [r0, #28]
 800c688:	4604      	mov	r4, r0
 800c68a:	460d      	mov	r5, r1
 800c68c:	b976      	cbnz	r6, 800c6ac <_Balloc+0x28>
 800c68e:	2010      	movs	r0, #16
 800c690:	f7ff ff44 	bl	800c51c <malloc>
 800c694:	4602      	mov	r2, r0
 800c696:	61e0      	str	r0, [r4, #28]
 800c698:	b920      	cbnz	r0, 800c6a4 <_Balloc+0x20>
 800c69a:	4b18      	ldr	r3, [pc, #96]	; (800c6fc <_Balloc+0x78>)
 800c69c:	4818      	ldr	r0, [pc, #96]	; (800c700 <_Balloc+0x7c>)
 800c69e:	216b      	movs	r1, #107	; 0x6b
 800c6a0:	f002 f922 	bl	800e8e8 <__assert_func>
 800c6a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6a8:	6006      	str	r6, [r0, #0]
 800c6aa:	60c6      	str	r6, [r0, #12]
 800c6ac:	69e6      	ldr	r6, [r4, #28]
 800c6ae:	68f3      	ldr	r3, [r6, #12]
 800c6b0:	b183      	cbz	r3, 800c6d4 <_Balloc+0x50>
 800c6b2:	69e3      	ldr	r3, [r4, #28]
 800c6b4:	68db      	ldr	r3, [r3, #12]
 800c6b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c6ba:	b9b8      	cbnz	r0, 800c6ec <_Balloc+0x68>
 800c6bc:	2101      	movs	r1, #1
 800c6be:	fa01 f605 	lsl.w	r6, r1, r5
 800c6c2:	1d72      	adds	r2, r6, #5
 800c6c4:	0092      	lsls	r2, r2, #2
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	f002 f92c 	bl	800e924 <_calloc_r>
 800c6cc:	b160      	cbz	r0, 800c6e8 <_Balloc+0x64>
 800c6ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c6d2:	e00e      	b.n	800c6f2 <_Balloc+0x6e>
 800c6d4:	2221      	movs	r2, #33	; 0x21
 800c6d6:	2104      	movs	r1, #4
 800c6d8:	4620      	mov	r0, r4
 800c6da:	f002 f923 	bl	800e924 <_calloc_r>
 800c6de:	69e3      	ldr	r3, [r4, #28]
 800c6e0:	60f0      	str	r0, [r6, #12]
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d1e4      	bne.n	800c6b2 <_Balloc+0x2e>
 800c6e8:	2000      	movs	r0, #0
 800c6ea:	bd70      	pop	{r4, r5, r6, pc}
 800c6ec:	6802      	ldr	r2, [r0, #0]
 800c6ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c6f8:	e7f7      	b.n	800c6ea <_Balloc+0x66>
 800c6fa:	bf00      	nop
 800c6fc:	08011030 	.word	0x08011030
 800c700:	080110b0 	.word	0x080110b0

0800c704 <_Bfree>:
 800c704:	b570      	push	{r4, r5, r6, lr}
 800c706:	69c6      	ldr	r6, [r0, #28]
 800c708:	4605      	mov	r5, r0
 800c70a:	460c      	mov	r4, r1
 800c70c:	b976      	cbnz	r6, 800c72c <_Bfree+0x28>
 800c70e:	2010      	movs	r0, #16
 800c710:	f7ff ff04 	bl	800c51c <malloc>
 800c714:	4602      	mov	r2, r0
 800c716:	61e8      	str	r0, [r5, #28]
 800c718:	b920      	cbnz	r0, 800c724 <_Bfree+0x20>
 800c71a:	4b09      	ldr	r3, [pc, #36]	; (800c740 <_Bfree+0x3c>)
 800c71c:	4809      	ldr	r0, [pc, #36]	; (800c744 <_Bfree+0x40>)
 800c71e:	218f      	movs	r1, #143	; 0x8f
 800c720:	f002 f8e2 	bl	800e8e8 <__assert_func>
 800c724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c728:	6006      	str	r6, [r0, #0]
 800c72a:	60c6      	str	r6, [r0, #12]
 800c72c:	b13c      	cbz	r4, 800c73e <_Bfree+0x3a>
 800c72e:	69eb      	ldr	r3, [r5, #28]
 800c730:	6862      	ldr	r2, [r4, #4]
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c738:	6021      	str	r1, [r4, #0]
 800c73a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c73e:	bd70      	pop	{r4, r5, r6, pc}
 800c740:	08011030 	.word	0x08011030
 800c744:	080110b0 	.word	0x080110b0

0800c748 <__multadd>:
 800c748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c74c:	690d      	ldr	r5, [r1, #16]
 800c74e:	4607      	mov	r7, r0
 800c750:	460c      	mov	r4, r1
 800c752:	461e      	mov	r6, r3
 800c754:	f101 0c14 	add.w	ip, r1, #20
 800c758:	2000      	movs	r0, #0
 800c75a:	f8dc 3000 	ldr.w	r3, [ip]
 800c75e:	b299      	uxth	r1, r3
 800c760:	fb02 6101 	mla	r1, r2, r1, r6
 800c764:	0c1e      	lsrs	r6, r3, #16
 800c766:	0c0b      	lsrs	r3, r1, #16
 800c768:	fb02 3306 	mla	r3, r2, r6, r3
 800c76c:	b289      	uxth	r1, r1
 800c76e:	3001      	adds	r0, #1
 800c770:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c774:	4285      	cmp	r5, r0
 800c776:	f84c 1b04 	str.w	r1, [ip], #4
 800c77a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c77e:	dcec      	bgt.n	800c75a <__multadd+0x12>
 800c780:	b30e      	cbz	r6, 800c7c6 <__multadd+0x7e>
 800c782:	68a3      	ldr	r3, [r4, #8]
 800c784:	42ab      	cmp	r3, r5
 800c786:	dc19      	bgt.n	800c7bc <__multadd+0x74>
 800c788:	6861      	ldr	r1, [r4, #4]
 800c78a:	4638      	mov	r0, r7
 800c78c:	3101      	adds	r1, #1
 800c78e:	f7ff ff79 	bl	800c684 <_Balloc>
 800c792:	4680      	mov	r8, r0
 800c794:	b928      	cbnz	r0, 800c7a2 <__multadd+0x5a>
 800c796:	4602      	mov	r2, r0
 800c798:	4b0c      	ldr	r3, [pc, #48]	; (800c7cc <__multadd+0x84>)
 800c79a:	480d      	ldr	r0, [pc, #52]	; (800c7d0 <__multadd+0x88>)
 800c79c:	21ba      	movs	r1, #186	; 0xba
 800c79e:	f002 f8a3 	bl	800e8e8 <__assert_func>
 800c7a2:	6922      	ldr	r2, [r4, #16]
 800c7a4:	3202      	adds	r2, #2
 800c7a6:	f104 010c 	add.w	r1, r4, #12
 800c7aa:	0092      	lsls	r2, r2, #2
 800c7ac:	300c      	adds	r0, #12
 800c7ae:	f002 f883 	bl	800e8b8 <memcpy>
 800c7b2:	4621      	mov	r1, r4
 800c7b4:	4638      	mov	r0, r7
 800c7b6:	f7ff ffa5 	bl	800c704 <_Bfree>
 800c7ba:	4644      	mov	r4, r8
 800c7bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c7c0:	3501      	adds	r5, #1
 800c7c2:	615e      	str	r6, [r3, #20]
 800c7c4:	6125      	str	r5, [r4, #16]
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7cc:	0801109f 	.word	0x0801109f
 800c7d0:	080110b0 	.word	0x080110b0

0800c7d4 <__s2b>:
 800c7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7d8:	460c      	mov	r4, r1
 800c7da:	4615      	mov	r5, r2
 800c7dc:	461f      	mov	r7, r3
 800c7de:	2209      	movs	r2, #9
 800c7e0:	3308      	adds	r3, #8
 800c7e2:	4606      	mov	r6, r0
 800c7e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7e8:	2100      	movs	r1, #0
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	db09      	blt.n	800c804 <__s2b+0x30>
 800c7f0:	4630      	mov	r0, r6
 800c7f2:	f7ff ff47 	bl	800c684 <_Balloc>
 800c7f6:	b940      	cbnz	r0, 800c80a <__s2b+0x36>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	4b19      	ldr	r3, [pc, #100]	; (800c860 <__s2b+0x8c>)
 800c7fc:	4819      	ldr	r0, [pc, #100]	; (800c864 <__s2b+0x90>)
 800c7fe:	21d3      	movs	r1, #211	; 0xd3
 800c800:	f002 f872 	bl	800e8e8 <__assert_func>
 800c804:	0052      	lsls	r2, r2, #1
 800c806:	3101      	adds	r1, #1
 800c808:	e7f0      	b.n	800c7ec <__s2b+0x18>
 800c80a:	9b08      	ldr	r3, [sp, #32]
 800c80c:	6143      	str	r3, [r0, #20]
 800c80e:	2d09      	cmp	r5, #9
 800c810:	f04f 0301 	mov.w	r3, #1
 800c814:	6103      	str	r3, [r0, #16]
 800c816:	dd16      	ble.n	800c846 <__s2b+0x72>
 800c818:	f104 0909 	add.w	r9, r4, #9
 800c81c:	46c8      	mov	r8, r9
 800c81e:	442c      	add	r4, r5
 800c820:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c824:	4601      	mov	r1, r0
 800c826:	3b30      	subs	r3, #48	; 0x30
 800c828:	220a      	movs	r2, #10
 800c82a:	4630      	mov	r0, r6
 800c82c:	f7ff ff8c 	bl	800c748 <__multadd>
 800c830:	45a0      	cmp	r8, r4
 800c832:	d1f5      	bne.n	800c820 <__s2b+0x4c>
 800c834:	f1a5 0408 	sub.w	r4, r5, #8
 800c838:	444c      	add	r4, r9
 800c83a:	1b2d      	subs	r5, r5, r4
 800c83c:	1963      	adds	r3, r4, r5
 800c83e:	42bb      	cmp	r3, r7
 800c840:	db04      	blt.n	800c84c <__s2b+0x78>
 800c842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c846:	340a      	adds	r4, #10
 800c848:	2509      	movs	r5, #9
 800c84a:	e7f6      	b.n	800c83a <__s2b+0x66>
 800c84c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c850:	4601      	mov	r1, r0
 800c852:	3b30      	subs	r3, #48	; 0x30
 800c854:	220a      	movs	r2, #10
 800c856:	4630      	mov	r0, r6
 800c858:	f7ff ff76 	bl	800c748 <__multadd>
 800c85c:	e7ee      	b.n	800c83c <__s2b+0x68>
 800c85e:	bf00      	nop
 800c860:	0801109f 	.word	0x0801109f
 800c864:	080110b0 	.word	0x080110b0

0800c868 <__hi0bits>:
 800c868:	0c03      	lsrs	r3, r0, #16
 800c86a:	041b      	lsls	r3, r3, #16
 800c86c:	b9d3      	cbnz	r3, 800c8a4 <__hi0bits+0x3c>
 800c86e:	0400      	lsls	r0, r0, #16
 800c870:	2310      	movs	r3, #16
 800c872:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c876:	bf04      	itt	eq
 800c878:	0200      	lsleq	r0, r0, #8
 800c87a:	3308      	addeq	r3, #8
 800c87c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c880:	bf04      	itt	eq
 800c882:	0100      	lsleq	r0, r0, #4
 800c884:	3304      	addeq	r3, #4
 800c886:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c88a:	bf04      	itt	eq
 800c88c:	0080      	lsleq	r0, r0, #2
 800c88e:	3302      	addeq	r3, #2
 800c890:	2800      	cmp	r0, #0
 800c892:	db05      	blt.n	800c8a0 <__hi0bits+0x38>
 800c894:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c898:	f103 0301 	add.w	r3, r3, #1
 800c89c:	bf08      	it	eq
 800c89e:	2320      	moveq	r3, #32
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	4770      	bx	lr
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	e7e4      	b.n	800c872 <__hi0bits+0xa>

0800c8a8 <__lo0bits>:
 800c8a8:	6803      	ldr	r3, [r0, #0]
 800c8aa:	f013 0207 	ands.w	r2, r3, #7
 800c8ae:	d00c      	beq.n	800c8ca <__lo0bits+0x22>
 800c8b0:	07d9      	lsls	r1, r3, #31
 800c8b2:	d422      	bmi.n	800c8fa <__lo0bits+0x52>
 800c8b4:	079a      	lsls	r2, r3, #30
 800c8b6:	bf49      	itett	mi
 800c8b8:	085b      	lsrmi	r3, r3, #1
 800c8ba:	089b      	lsrpl	r3, r3, #2
 800c8bc:	6003      	strmi	r3, [r0, #0]
 800c8be:	2201      	movmi	r2, #1
 800c8c0:	bf5c      	itt	pl
 800c8c2:	6003      	strpl	r3, [r0, #0]
 800c8c4:	2202      	movpl	r2, #2
 800c8c6:	4610      	mov	r0, r2
 800c8c8:	4770      	bx	lr
 800c8ca:	b299      	uxth	r1, r3
 800c8cc:	b909      	cbnz	r1, 800c8d2 <__lo0bits+0x2a>
 800c8ce:	0c1b      	lsrs	r3, r3, #16
 800c8d0:	2210      	movs	r2, #16
 800c8d2:	b2d9      	uxtb	r1, r3
 800c8d4:	b909      	cbnz	r1, 800c8da <__lo0bits+0x32>
 800c8d6:	3208      	adds	r2, #8
 800c8d8:	0a1b      	lsrs	r3, r3, #8
 800c8da:	0719      	lsls	r1, r3, #28
 800c8dc:	bf04      	itt	eq
 800c8de:	091b      	lsreq	r3, r3, #4
 800c8e0:	3204      	addeq	r2, #4
 800c8e2:	0799      	lsls	r1, r3, #30
 800c8e4:	bf04      	itt	eq
 800c8e6:	089b      	lsreq	r3, r3, #2
 800c8e8:	3202      	addeq	r2, #2
 800c8ea:	07d9      	lsls	r1, r3, #31
 800c8ec:	d403      	bmi.n	800c8f6 <__lo0bits+0x4e>
 800c8ee:	085b      	lsrs	r3, r3, #1
 800c8f0:	f102 0201 	add.w	r2, r2, #1
 800c8f4:	d003      	beq.n	800c8fe <__lo0bits+0x56>
 800c8f6:	6003      	str	r3, [r0, #0]
 800c8f8:	e7e5      	b.n	800c8c6 <__lo0bits+0x1e>
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	e7e3      	b.n	800c8c6 <__lo0bits+0x1e>
 800c8fe:	2220      	movs	r2, #32
 800c900:	e7e1      	b.n	800c8c6 <__lo0bits+0x1e>
	...

0800c904 <__i2b>:
 800c904:	b510      	push	{r4, lr}
 800c906:	460c      	mov	r4, r1
 800c908:	2101      	movs	r1, #1
 800c90a:	f7ff febb 	bl	800c684 <_Balloc>
 800c90e:	4602      	mov	r2, r0
 800c910:	b928      	cbnz	r0, 800c91e <__i2b+0x1a>
 800c912:	4b05      	ldr	r3, [pc, #20]	; (800c928 <__i2b+0x24>)
 800c914:	4805      	ldr	r0, [pc, #20]	; (800c92c <__i2b+0x28>)
 800c916:	f240 1145 	movw	r1, #325	; 0x145
 800c91a:	f001 ffe5 	bl	800e8e8 <__assert_func>
 800c91e:	2301      	movs	r3, #1
 800c920:	6144      	str	r4, [r0, #20]
 800c922:	6103      	str	r3, [r0, #16]
 800c924:	bd10      	pop	{r4, pc}
 800c926:	bf00      	nop
 800c928:	0801109f 	.word	0x0801109f
 800c92c:	080110b0 	.word	0x080110b0

0800c930 <__multiply>:
 800c930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c934:	4691      	mov	r9, r2
 800c936:	690a      	ldr	r2, [r1, #16]
 800c938:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c93c:	429a      	cmp	r2, r3
 800c93e:	bfb8      	it	lt
 800c940:	460b      	movlt	r3, r1
 800c942:	460c      	mov	r4, r1
 800c944:	bfbc      	itt	lt
 800c946:	464c      	movlt	r4, r9
 800c948:	4699      	movlt	r9, r3
 800c94a:	6927      	ldr	r7, [r4, #16]
 800c94c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c950:	68a3      	ldr	r3, [r4, #8]
 800c952:	6861      	ldr	r1, [r4, #4]
 800c954:	eb07 060a 	add.w	r6, r7, sl
 800c958:	42b3      	cmp	r3, r6
 800c95a:	b085      	sub	sp, #20
 800c95c:	bfb8      	it	lt
 800c95e:	3101      	addlt	r1, #1
 800c960:	f7ff fe90 	bl	800c684 <_Balloc>
 800c964:	b930      	cbnz	r0, 800c974 <__multiply+0x44>
 800c966:	4602      	mov	r2, r0
 800c968:	4b44      	ldr	r3, [pc, #272]	; (800ca7c <__multiply+0x14c>)
 800c96a:	4845      	ldr	r0, [pc, #276]	; (800ca80 <__multiply+0x150>)
 800c96c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c970:	f001 ffba 	bl	800e8e8 <__assert_func>
 800c974:	f100 0514 	add.w	r5, r0, #20
 800c978:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c97c:	462b      	mov	r3, r5
 800c97e:	2200      	movs	r2, #0
 800c980:	4543      	cmp	r3, r8
 800c982:	d321      	bcc.n	800c9c8 <__multiply+0x98>
 800c984:	f104 0314 	add.w	r3, r4, #20
 800c988:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c98c:	f109 0314 	add.w	r3, r9, #20
 800c990:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c994:	9202      	str	r2, [sp, #8]
 800c996:	1b3a      	subs	r2, r7, r4
 800c998:	3a15      	subs	r2, #21
 800c99a:	f022 0203 	bic.w	r2, r2, #3
 800c99e:	3204      	adds	r2, #4
 800c9a0:	f104 0115 	add.w	r1, r4, #21
 800c9a4:	428f      	cmp	r7, r1
 800c9a6:	bf38      	it	cc
 800c9a8:	2204      	movcc	r2, #4
 800c9aa:	9201      	str	r2, [sp, #4]
 800c9ac:	9a02      	ldr	r2, [sp, #8]
 800c9ae:	9303      	str	r3, [sp, #12]
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d80c      	bhi.n	800c9ce <__multiply+0x9e>
 800c9b4:	2e00      	cmp	r6, #0
 800c9b6:	dd03      	ble.n	800c9c0 <__multiply+0x90>
 800c9b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d05b      	beq.n	800ca78 <__multiply+0x148>
 800c9c0:	6106      	str	r6, [r0, #16]
 800c9c2:	b005      	add	sp, #20
 800c9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9c8:	f843 2b04 	str.w	r2, [r3], #4
 800c9cc:	e7d8      	b.n	800c980 <__multiply+0x50>
 800c9ce:	f8b3 a000 	ldrh.w	sl, [r3]
 800c9d2:	f1ba 0f00 	cmp.w	sl, #0
 800c9d6:	d024      	beq.n	800ca22 <__multiply+0xf2>
 800c9d8:	f104 0e14 	add.w	lr, r4, #20
 800c9dc:	46a9      	mov	r9, r5
 800c9de:	f04f 0c00 	mov.w	ip, #0
 800c9e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c9e6:	f8d9 1000 	ldr.w	r1, [r9]
 800c9ea:	fa1f fb82 	uxth.w	fp, r2
 800c9ee:	b289      	uxth	r1, r1
 800c9f0:	fb0a 110b 	mla	r1, sl, fp, r1
 800c9f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c9f8:	f8d9 2000 	ldr.w	r2, [r9]
 800c9fc:	4461      	add	r1, ip
 800c9fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ca02:	fb0a c20b 	mla	r2, sl, fp, ip
 800ca06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ca0a:	b289      	uxth	r1, r1
 800ca0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ca10:	4577      	cmp	r7, lr
 800ca12:	f849 1b04 	str.w	r1, [r9], #4
 800ca16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ca1a:	d8e2      	bhi.n	800c9e2 <__multiply+0xb2>
 800ca1c:	9a01      	ldr	r2, [sp, #4]
 800ca1e:	f845 c002 	str.w	ip, [r5, r2]
 800ca22:	9a03      	ldr	r2, [sp, #12]
 800ca24:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ca28:	3304      	adds	r3, #4
 800ca2a:	f1b9 0f00 	cmp.w	r9, #0
 800ca2e:	d021      	beq.n	800ca74 <__multiply+0x144>
 800ca30:	6829      	ldr	r1, [r5, #0]
 800ca32:	f104 0c14 	add.w	ip, r4, #20
 800ca36:	46ae      	mov	lr, r5
 800ca38:	f04f 0a00 	mov.w	sl, #0
 800ca3c:	f8bc b000 	ldrh.w	fp, [ip]
 800ca40:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ca44:	fb09 220b 	mla	r2, r9, fp, r2
 800ca48:	4452      	add	r2, sl
 800ca4a:	b289      	uxth	r1, r1
 800ca4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ca50:	f84e 1b04 	str.w	r1, [lr], #4
 800ca54:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ca58:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ca5c:	f8be 1000 	ldrh.w	r1, [lr]
 800ca60:	fb09 110a 	mla	r1, r9, sl, r1
 800ca64:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ca68:	4567      	cmp	r7, ip
 800ca6a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ca6e:	d8e5      	bhi.n	800ca3c <__multiply+0x10c>
 800ca70:	9a01      	ldr	r2, [sp, #4]
 800ca72:	50a9      	str	r1, [r5, r2]
 800ca74:	3504      	adds	r5, #4
 800ca76:	e799      	b.n	800c9ac <__multiply+0x7c>
 800ca78:	3e01      	subs	r6, #1
 800ca7a:	e79b      	b.n	800c9b4 <__multiply+0x84>
 800ca7c:	0801109f 	.word	0x0801109f
 800ca80:	080110b0 	.word	0x080110b0

0800ca84 <__pow5mult>:
 800ca84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca88:	4615      	mov	r5, r2
 800ca8a:	f012 0203 	ands.w	r2, r2, #3
 800ca8e:	4606      	mov	r6, r0
 800ca90:	460f      	mov	r7, r1
 800ca92:	d007      	beq.n	800caa4 <__pow5mult+0x20>
 800ca94:	4c25      	ldr	r4, [pc, #148]	; (800cb2c <__pow5mult+0xa8>)
 800ca96:	3a01      	subs	r2, #1
 800ca98:	2300      	movs	r3, #0
 800ca9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca9e:	f7ff fe53 	bl	800c748 <__multadd>
 800caa2:	4607      	mov	r7, r0
 800caa4:	10ad      	asrs	r5, r5, #2
 800caa6:	d03d      	beq.n	800cb24 <__pow5mult+0xa0>
 800caa8:	69f4      	ldr	r4, [r6, #28]
 800caaa:	b97c      	cbnz	r4, 800cacc <__pow5mult+0x48>
 800caac:	2010      	movs	r0, #16
 800caae:	f7ff fd35 	bl	800c51c <malloc>
 800cab2:	4602      	mov	r2, r0
 800cab4:	61f0      	str	r0, [r6, #28]
 800cab6:	b928      	cbnz	r0, 800cac4 <__pow5mult+0x40>
 800cab8:	4b1d      	ldr	r3, [pc, #116]	; (800cb30 <__pow5mult+0xac>)
 800caba:	481e      	ldr	r0, [pc, #120]	; (800cb34 <__pow5mult+0xb0>)
 800cabc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800cac0:	f001 ff12 	bl	800e8e8 <__assert_func>
 800cac4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cac8:	6004      	str	r4, [r0, #0]
 800caca:	60c4      	str	r4, [r0, #12]
 800cacc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800cad0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cad4:	b94c      	cbnz	r4, 800caea <__pow5mult+0x66>
 800cad6:	f240 2171 	movw	r1, #625	; 0x271
 800cada:	4630      	mov	r0, r6
 800cadc:	f7ff ff12 	bl	800c904 <__i2b>
 800cae0:	2300      	movs	r3, #0
 800cae2:	f8c8 0008 	str.w	r0, [r8, #8]
 800cae6:	4604      	mov	r4, r0
 800cae8:	6003      	str	r3, [r0, #0]
 800caea:	f04f 0900 	mov.w	r9, #0
 800caee:	07eb      	lsls	r3, r5, #31
 800caf0:	d50a      	bpl.n	800cb08 <__pow5mult+0x84>
 800caf2:	4639      	mov	r1, r7
 800caf4:	4622      	mov	r2, r4
 800caf6:	4630      	mov	r0, r6
 800caf8:	f7ff ff1a 	bl	800c930 <__multiply>
 800cafc:	4639      	mov	r1, r7
 800cafe:	4680      	mov	r8, r0
 800cb00:	4630      	mov	r0, r6
 800cb02:	f7ff fdff 	bl	800c704 <_Bfree>
 800cb06:	4647      	mov	r7, r8
 800cb08:	106d      	asrs	r5, r5, #1
 800cb0a:	d00b      	beq.n	800cb24 <__pow5mult+0xa0>
 800cb0c:	6820      	ldr	r0, [r4, #0]
 800cb0e:	b938      	cbnz	r0, 800cb20 <__pow5mult+0x9c>
 800cb10:	4622      	mov	r2, r4
 800cb12:	4621      	mov	r1, r4
 800cb14:	4630      	mov	r0, r6
 800cb16:	f7ff ff0b 	bl	800c930 <__multiply>
 800cb1a:	6020      	str	r0, [r4, #0]
 800cb1c:	f8c0 9000 	str.w	r9, [r0]
 800cb20:	4604      	mov	r4, r0
 800cb22:	e7e4      	b.n	800caee <__pow5mult+0x6a>
 800cb24:	4638      	mov	r0, r7
 800cb26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb2a:	bf00      	nop
 800cb2c:	08011200 	.word	0x08011200
 800cb30:	08011030 	.word	0x08011030
 800cb34:	080110b0 	.word	0x080110b0

0800cb38 <__lshift>:
 800cb38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb3c:	460c      	mov	r4, r1
 800cb3e:	6849      	ldr	r1, [r1, #4]
 800cb40:	6923      	ldr	r3, [r4, #16]
 800cb42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cb46:	68a3      	ldr	r3, [r4, #8]
 800cb48:	4607      	mov	r7, r0
 800cb4a:	4691      	mov	r9, r2
 800cb4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cb50:	f108 0601 	add.w	r6, r8, #1
 800cb54:	42b3      	cmp	r3, r6
 800cb56:	db0b      	blt.n	800cb70 <__lshift+0x38>
 800cb58:	4638      	mov	r0, r7
 800cb5a:	f7ff fd93 	bl	800c684 <_Balloc>
 800cb5e:	4605      	mov	r5, r0
 800cb60:	b948      	cbnz	r0, 800cb76 <__lshift+0x3e>
 800cb62:	4602      	mov	r2, r0
 800cb64:	4b28      	ldr	r3, [pc, #160]	; (800cc08 <__lshift+0xd0>)
 800cb66:	4829      	ldr	r0, [pc, #164]	; (800cc0c <__lshift+0xd4>)
 800cb68:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cb6c:	f001 febc 	bl	800e8e8 <__assert_func>
 800cb70:	3101      	adds	r1, #1
 800cb72:	005b      	lsls	r3, r3, #1
 800cb74:	e7ee      	b.n	800cb54 <__lshift+0x1c>
 800cb76:	2300      	movs	r3, #0
 800cb78:	f100 0114 	add.w	r1, r0, #20
 800cb7c:	f100 0210 	add.w	r2, r0, #16
 800cb80:	4618      	mov	r0, r3
 800cb82:	4553      	cmp	r3, sl
 800cb84:	db33      	blt.n	800cbee <__lshift+0xb6>
 800cb86:	6920      	ldr	r0, [r4, #16]
 800cb88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cb8c:	f104 0314 	add.w	r3, r4, #20
 800cb90:	f019 091f 	ands.w	r9, r9, #31
 800cb94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cb98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cb9c:	d02b      	beq.n	800cbf6 <__lshift+0xbe>
 800cb9e:	f1c9 0e20 	rsb	lr, r9, #32
 800cba2:	468a      	mov	sl, r1
 800cba4:	2200      	movs	r2, #0
 800cba6:	6818      	ldr	r0, [r3, #0]
 800cba8:	fa00 f009 	lsl.w	r0, r0, r9
 800cbac:	4310      	orrs	r0, r2
 800cbae:	f84a 0b04 	str.w	r0, [sl], #4
 800cbb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbb6:	459c      	cmp	ip, r3
 800cbb8:	fa22 f20e 	lsr.w	r2, r2, lr
 800cbbc:	d8f3      	bhi.n	800cba6 <__lshift+0x6e>
 800cbbe:	ebac 0304 	sub.w	r3, ip, r4
 800cbc2:	3b15      	subs	r3, #21
 800cbc4:	f023 0303 	bic.w	r3, r3, #3
 800cbc8:	3304      	adds	r3, #4
 800cbca:	f104 0015 	add.w	r0, r4, #21
 800cbce:	4584      	cmp	ip, r0
 800cbd0:	bf38      	it	cc
 800cbd2:	2304      	movcc	r3, #4
 800cbd4:	50ca      	str	r2, [r1, r3]
 800cbd6:	b10a      	cbz	r2, 800cbdc <__lshift+0xa4>
 800cbd8:	f108 0602 	add.w	r6, r8, #2
 800cbdc:	3e01      	subs	r6, #1
 800cbde:	4638      	mov	r0, r7
 800cbe0:	612e      	str	r6, [r5, #16]
 800cbe2:	4621      	mov	r1, r4
 800cbe4:	f7ff fd8e 	bl	800c704 <_Bfree>
 800cbe8:	4628      	mov	r0, r5
 800cbea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbee:	f842 0f04 	str.w	r0, [r2, #4]!
 800cbf2:	3301      	adds	r3, #1
 800cbf4:	e7c5      	b.n	800cb82 <__lshift+0x4a>
 800cbf6:	3904      	subs	r1, #4
 800cbf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbfc:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc00:	459c      	cmp	ip, r3
 800cc02:	d8f9      	bhi.n	800cbf8 <__lshift+0xc0>
 800cc04:	e7ea      	b.n	800cbdc <__lshift+0xa4>
 800cc06:	bf00      	nop
 800cc08:	0801109f 	.word	0x0801109f
 800cc0c:	080110b0 	.word	0x080110b0

0800cc10 <__mcmp>:
 800cc10:	b530      	push	{r4, r5, lr}
 800cc12:	6902      	ldr	r2, [r0, #16]
 800cc14:	690c      	ldr	r4, [r1, #16]
 800cc16:	1b12      	subs	r2, r2, r4
 800cc18:	d10e      	bne.n	800cc38 <__mcmp+0x28>
 800cc1a:	f100 0314 	add.w	r3, r0, #20
 800cc1e:	3114      	adds	r1, #20
 800cc20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cc24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cc28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cc2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cc30:	42a5      	cmp	r5, r4
 800cc32:	d003      	beq.n	800cc3c <__mcmp+0x2c>
 800cc34:	d305      	bcc.n	800cc42 <__mcmp+0x32>
 800cc36:	2201      	movs	r2, #1
 800cc38:	4610      	mov	r0, r2
 800cc3a:	bd30      	pop	{r4, r5, pc}
 800cc3c:	4283      	cmp	r3, r0
 800cc3e:	d3f3      	bcc.n	800cc28 <__mcmp+0x18>
 800cc40:	e7fa      	b.n	800cc38 <__mcmp+0x28>
 800cc42:	f04f 32ff 	mov.w	r2, #4294967295
 800cc46:	e7f7      	b.n	800cc38 <__mcmp+0x28>

0800cc48 <__mdiff>:
 800cc48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc4c:	460c      	mov	r4, r1
 800cc4e:	4606      	mov	r6, r0
 800cc50:	4611      	mov	r1, r2
 800cc52:	4620      	mov	r0, r4
 800cc54:	4690      	mov	r8, r2
 800cc56:	f7ff ffdb 	bl	800cc10 <__mcmp>
 800cc5a:	1e05      	subs	r5, r0, #0
 800cc5c:	d110      	bne.n	800cc80 <__mdiff+0x38>
 800cc5e:	4629      	mov	r1, r5
 800cc60:	4630      	mov	r0, r6
 800cc62:	f7ff fd0f 	bl	800c684 <_Balloc>
 800cc66:	b930      	cbnz	r0, 800cc76 <__mdiff+0x2e>
 800cc68:	4b3a      	ldr	r3, [pc, #232]	; (800cd54 <__mdiff+0x10c>)
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	f240 2137 	movw	r1, #567	; 0x237
 800cc70:	4839      	ldr	r0, [pc, #228]	; (800cd58 <__mdiff+0x110>)
 800cc72:	f001 fe39 	bl	800e8e8 <__assert_func>
 800cc76:	2301      	movs	r3, #1
 800cc78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cc7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc80:	bfa4      	itt	ge
 800cc82:	4643      	movge	r3, r8
 800cc84:	46a0      	movge	r8, r4
 800cc86:	4630      	mov	r0, r6
 800cc88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cc8c:	bfa6      	itte	ge
 800cc8e:	461c      	movge	r4, r3
 800cc90:	2500      	movge	r5, #0
 800cc92:	2501      	movlt	r5, #1
 800cc94:	f7ff fcf6 	bl	800c684 <_Balloc>
 800cc98:	b920      	cbnz	r0, 800cca4 <__mdiff+0x5c>
 800cc9a:	4b2e      	ldr	r3, [pc, #184]	; (800cd54 <__mdiff+0x10c>)
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	f240 2145 	movw	r1, #581	; 0x245
 800cca2:	e7e5      	b.n	800cc70 <__mdiff+0x28>
 800cca4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cca8:	6926      	ldr	r6, [r4, #16]
 800ccaa:	60c5      	str	r5, [r0, #12]
 800ccac:	f104 0914 	add.w	r9, r4, #20
 800ccb0:	f108 0514 	add.w	r5, r8, #20
 800ccb4:	f100 0e14 	add.w	lr, r0, #20
 800ccb8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ccbc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ccc0:	f108 0210 	add.w	r2, r8, #16
 800ccc4:	46f2      	mov	sl, lr
 800ccc6:	2100      	movs	r1, #0
 800ccc8:	f859 3b04 	ldr.w	r3, [r9], #4
 800cccc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ccd0:	fa11 f88b 	uxtah	r8, r1, fp
 800ccd4:	b299      	uxth	r1, r3
 800ccd6:	0c1b      	lsrs	r3, r3, #16
 800ccd8:	eba8 0801 	sub.w	r8, r8, r1
 800ccdc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cce0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cce4:	fa1f f888 	uxth.w	r8, r8
 800cce8:	1419      	asrs	r1, r3, #16
 800ccea:	454e      	cmp	r6, r9
 800ccec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ccf0:	f84a 3b04 	str.w	r3, [sl], #4
 800ccf4:	d8e8      	bhi.n	800ccc8 <__mdiff+0x80>
 800ccf6:	1b33      	subs	r3, r6, r4
 800ccf8:	3b15      	subs	r3, #21
 800ccfa:	f023 0303 	bic.w	r3, r3, #3
 800ccfe:	3304      	adds	r3, #4
 800cd00:	3415      	adds	r4, #21
 800cd02:	42a6      	cmp	r6, r4
 800cd04:	bf38      	it	cc
 800cd06:	2304      	movcc	r3, #4
 800cd08:	441d      	add	r5, r3
 800cd0a:	4473      	add	r3, lr
 800cd0c:	469e      	mov	lr, r3
 800cd0e:	462e      	mov	r6, r5
 800cd10:	4566      	cmp	r6, ip
 800cd12:	d30e      	bcc.n	800cd32 <__mdiff+0xea>
 800cd14:	f10c 0203 	add.w	r2, ip, #3
 800cd18:	1b52      	subs	r2, r2, r5
 800cd1a:	f022 0203 	bic.w	r2, r2, #3
 800cd1e:	3d03      	subs	r5, #3
 800cd20:	45ac      	cmp	ip, r5
 800cd22:	bf38      	it	cc
 800cd24:	2200      	movcc	r2, #0
 800cd26:	4413      	add	r3, r2
 800cd28:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cd2c:	b17a      	cbz	r2, 800cd4e <__mdiff+0x106>
 800cd2e:	6107      	str	r7, [r0, #16]
 800cd30:	e7a4      	b.n	800cc7c <__mdiff+0x34>
 800cd32:	f856 8b04 	ldr.w	r8, [r6], #4
 800cd36:	fa11 f288 	uxtah	r2, r1, r8
 800cd3a:	1414      	asrs	r4, r2, #16
 800cd3c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cd40:	b292      	uxth	r2, r2
 800cd42:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cd46:	f84e 2b04 	str.w	r2, [lr], #4
 800cd4a:	1421      	asrs	r1, r4, #16
 800cd4c:	e7e0      	b.n	800cd10 <__mdiff+0xc8>
 800cd4e:	3f01      	subs	r7, #1
 800cd50:	e7ea      	b.n	800cd28 <__mdiff+0xe0>
 800cd52:	bf00      	nop
 800cd54:	0801109f 	.word	0x0801109f
 800cd58:	080110b0 	.word	0x080110b0

0800cd5c <__ulp>:
 800cd5c:	b082      	sub	sp, #8
 800cd5e:	ed8d 0b00 	vstr	d0, [sp]
 800cd62:	9a01      	ldr	r2, [sp, #4]
 800cd64:	4b0f      	ldr	r3, [pc, #60]	; (800cda4 <__ulp+0x48>)
 800cd66:	4013      	ands	r3, r2
 800cd68:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	dc08      	bgt.n	800cd82 <__ulp+0x26>
 800cd70:	425b      	negs	r3, r3
 800cd72:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800cd76:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cd7a:	da04      	bge.n	800cd86 <__ulp+0x2a>
 800cd7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cd80:	4113      	asrs	r3, r2
 800cd82:	2200      	movs	r2, #0
 800cd84:	e008      	b.n	800cd98 <__ulp+0x3c>
 800cd86:	f1a2 0314 	sub.w	r3, r2, #20
 800cd8a:	2b1e      	cmp	r3, #30
 800cd8c:	bfda      	itte	le
 800cd8e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800cd92:	40da      	lsrle	r2, r3
 800cd94:	2201      	movgt	r2, #1
 800cd96:	2300      	movs	r3, #0
 800cd98:	4619      	mov	r1, r3
 800cd9a:	4610      	mov	r0, r2
 800cd9c:	ec41 0b10 	vmov	d0, r0, r1
 800cda0:	b002      	add	sp, #8
 800cda2:	4770      	bx	lr
 800cda4:	7ff00000 	.word	0x7ff00000

0800cda8 <__b2d>:
 800cda8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdac:	6906      	ldr	r6, [r0, #16]
 800cdae:	f100 0814 	add.w	r8, r0, #20
 800cdb2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cdb6:	1f37      	subs	r7, r6, #4
 800cdb8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cdbc:	4610      	mov	r0, r2
 800cdbe:	f7ff fd53 	bl	800c868 <__hi0bits>
 800cdc2:	f1c0 0320 	rsb	r3, r0, #32
 800cdc6:	280a      	cmp	r0, #10
 800cdc8:	600b      	str	r3, [r1, #0]
 800cdca:	491b      	ldr	r1, [pc, #108]	; (800ce38 <__b2d+0x90>)
 800cdcc:	dc15      	bgt.n	800cdfa <__b2d+0x52>
 800cdce:	f1c0 0c0b 	rsb	ip, r0, #11
 800cdd2:	fa22 f30c 	lsr.w	r3, r2, ip
 800cdd6:	45b8      	cmp	r8, r7
 800cdd8:	ea43 0501 	orr.w	r5, r3, r1
 800cddc:	bf34      	ite	cc
 800cdde:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cde2:	2300      	movcs	r3, #0
 800cde4:	3015      	adds	r0, #21
 800cde6:	fa02 f000 	lsl.w	r0, r2, r0
 800cdea:	fa23 f30c 	lsr.w	r3, r3, ip
 800cdee:	4303      	orrs	r3, r0
 800cdf0:	461c      	mov	r4, r3
 800cdf2:	ec45 4b10 	vmov	d0, r4, r5
 800cdf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdfa:	45b8      	cmp	r8, r7
 800cdfc:	bf3a      	itte	cc
 800cdfe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ce02:	f1a6 0708 	subcc.w	r7, r6, #8
 800ce06:	2300      	movcs	r3, #0
 800ce08:	380b      	subs	r0, #11
 800ce0a:	d012      	beq.n	800ce32 <__b2d+0x8a>
 800ce0c:	f1c0 0120 	rsb	r1, r0, #32
 800ce10:	fa23 f401 	lsr.w	r4, r3, r1
 800ce14:	4082      	lsls	r2, r0
 800ce16:	4322      	orrs	r2, r4
 800ce18:	4547      	cmp	r7, r8
 800ce1a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800ce1e:	bf8c      	ite	hi
 800ce20:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ce24:	2200      	movls	r2, #0
 800ce26:	4083      	lsls	r3, r0
 800ce28:	40ca      	lsrs	r2, r1
 800ce2a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	e7de      	b.n	800cdf0 <__b2d+0x48>
 800ce32:	ea42 0501 	orr.w	r5, r2, r1
 800ce36:	e7db      	b.n	800cdf0 <__b2d+0x48>
 800ce38:	3ff00000 	.word	0x3ff00000

0800ce3c <__d2b>:
 800ce3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ce40:	460f      	mov	r7, r1
 800ce42:	2101      	movs	r1, #1
 800ce44:	ec59 8b10 	vmov	r8, r9, d0
 800ce48:	4616      	mov	r6, r2
 800ce4a:	f7ff fc1b 	bl	800c684 <_Balloc>
 800ce4e:	4604      	mov	r4, r0
 800ce50:	b930      	cbnz	r0, 800ce60 <__d2b+0x24>
 800ce52:	4602      	mov	r2, r0
 800ce54:	4b24      	ldr	r3, [pc, #144]	; (800cee8 <__d2b+0xac>)
 800ce56:	4825      	ldr	r0, [pc, #148]	; (800ceec <__d2b+0xb0>)
 800ce58:	f240 310f 	movw	r1, #783	; 0x30f
 800ce5c:	f001 fd44 	bl	800e8e8 <__assert_func>
 800ce60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ce64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ce68:	bb2d      	cbnz	r5, 800ceb6 <__d2b+0x7a>
 800ce6a:	9301      	str	r3, [sp, #4]
 800ce6c:	f1b8 0300 	subs.w	r3, r8, #0
 800ce70:	d026      	beq.n	800cec0 <__d2b+0x84>
 800ce72:	4668      	mov	r0, sp
 800ce74:	9300      	str	r3, [sp, #0]
 800ce76:	f7ff fd17 	bl	800c8a8 <__lo0bits>
 800ce7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ce7e:	b1e8      	cbz	r0, 800cebc <__d2b+0x80>
 800ce80:	f1c0 0320 	rsb	r3, r0, #32
 800ce84:	fa02 f303 	lsl.w	r3, r2, r3
 800ce88:	430b      	orrs	r3, r1
 800ce8a:	40c2      	lsrs	r2, r0
 800ce8c:	6163      	str	r3, [r4, #20]
 800ce8e:	9201      	str	r2, [sp, #4]
 800ce90:	9b01      	ldr	r3, [sp, #4]
 800ce92:	61a3      	str	r3, [r4, #24]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	bf14      	ite	ne
 800ce98:	2202      	movne	r2, #2
 800ce9a:	2201      	moveq	r2, #1
 800ce9c:	6122      	str	r2, [r4, #16]
 800ce9e:	b1bd      	cbz	r5, 800ced0 <__d2b+0x94>
 800cea0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cea4:	4405      	add	r5, r0
 800cea6:	603d      	str	r5, [r7, #0]
 800cea8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ceac:	6030      	str	r0, [r6, #0]
 800ceae:	4620      	mov	r0, r4
 800ceb0:	b003      	add	sp, #12
 800ceb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ceb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ceba:	e7d6      	b.n	800ce6a <__d2b+0x2e>
 800cebc:	6161      	str	r1, [r4, #20]
 800cebe:	e7e7      	b.n	800ce90 <__d2b+0x54>
 800cec0:	a801      	add	r0, sp, #4
 800cec2:	f7ff fcf1 	bl	800c8a8 <__lo0bits>
 800cec6:	9b01      	ldr	r3, [sp, #4]
 800cec8:	6163      	str	r3, [r4, #20]
 800ceca:	3020      	adds	r0, #32
 800cecc:	2201      	movs	r2, #1
 800cece:	e7e5      	b.n	800ce9c <__d2b+0x60>
 800ced0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ced4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ced8:	6038      	str	r0, [r7, #0]
 800ceda:	6918      	ldr	r0, [r3, #16]
 800cedc:	f7ff fcc4 	bl	800c868 <__hi0bits>
 800cee0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cee4:	e7e2      	b.n	800ceac <__d2b+0x70>
 800cee6:	bf00      	nop
 800cee8:	0801109f 	.word	0x0801109f
 800ceec:	080110b0 	.word	0x080110b0

0800cef0 <__ratio>:
 800cef0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cef4:	4688      	mov	r8, r1
 800cef6:	4669      	mov	r1, sp
 800cef8:	4681      	mov	r9, r0
 800cefa:	f7ff ff55 	bl	800cda8 <__b2d>
 800cefe:	a901      	add	r1, sp, #4
 800cf00:	4640      	mov	r0, r8
 800cf02:	ec55 4b10 	vmov	r4, r5, d0
 800cf06:	f7ff ff4f 	bl	800cda8 <__b2d>
 800cf0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cf0e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cf12:	eba3 0c02 	sub.w	ip, r3, r2
 800cf16:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cf1a:	1a9b      	subs	r3, r3, r2
 800cf1c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cf20:	ec51 0b10 	vmov	r0, r1, d0
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	bfd6      	itet	le
 800cf28:	460a      	movle	r2, r1
 800cf2a:	462a      	movgt	r2, r5
 800cf2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cf30:	468b      	mov	fp, r1
 800cf32:	462f      	mov	r7, r5
 800cf34:	bfd4      	ite	le
 800cf36:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cf3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cf3e:	4620      	mov	r0, r4
 800cf40:	ee10 2a10 	vmov	r2, s0
 800cf44:	465b      	mov	r3, fp
 800cf46:	4639      	mov	r1, r7
 800cf48:	f7f3 fc80 	bl	800084c <__aeabi_ddiv>
 800cf4c:	ec41 0b10 	vmov	d0, r0, r1
 800cf50:	b003      	add	sp, #12
 800cf52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf56 <__copybits>:
 800cf56:	3901      	subs	r1, #1
 800cf58:	b570      	push	{r4, r5, r6, lr}
 800cf5a:	1149      	asrs	r1, r1, #5
 800cf5c:	6914      	ldr	r4, [r2, #16]
 800cf5e:	3101      	adds	r1, #1
 800cf60:	f102 0314 	add.w	r3, r2, #20
 800cf64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cf68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cf6c:	1f05      	subs	r5, r0, #4
 800cf6e:	42a3      	cmp	r3, r4
 800cf70:	d30c      	bcc.n	800cf8c <__copybits+0x36>
 800cf72:	1aa3      	subs	r3, r4, r2
 800cf74:	3b11      	subs	r3, #17
 800cf76:	f023 0303 	bic.w	r3, r3, #3
 800cf7a:	3211      	adds	r2, #17
 800cf7c:	42a2      	cmp	r2, r4
 800cf7e:	bf88      	it	hi
 800cf80:	2300      	movhi	r3, #0
 800cf82:	4418      	add	r0, r3
 800cf84:	2300      	movs	r3, #0
 800cf86:	4288      	cmp	r0, r1
 800cf88:	d305      	bcc.n	800cf96 <__copybits+0x40>
 800cf8a:	bd70      	pop	{r4, r5, r6, pc}
 800cf8c:	f853 6b04 	ldr.w	r6, [r3], #4
 800cf90:	f845 6f04 	str.w	r6, [r5, #4]!
 800cf94:	e7eb      	b.n	800cf6e <__copybits+0x18>
 800cf96:	f840 3b04 	str.w	r3, [r0], #4
 800cf9a:	e7f4      	b.n	800cf86 <__copybits+0x30>

0800cf9c <__any_on>:
 800cf9c:	f100 0214 	add.w	r2, r0, #20
 800cfa0:	6900      	ldr	r0, [r0, #16]
 800cfa2:	114b      	asrs	r3, r1, #5
 800cfa4:	4298      	cmp	r0, r3
 800cfa6:	b510      	push	{r4, lr}
 800cfa8:	db11      	blt.n	800cfce <__any_on+0x32>
 800cfaa:	dd0a      	ble.n	800cfc2 <__any_on+0x26>
 800cfac:	f011 011f 	ands.w	r1, r1, #31
 800cfb0:	d007      	beq.n	800cfc2 <__any_on+0x26>
 800cfb2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cfb6:	fa24 f001 	lsr.w	r0, r4, r1
 800cfba:	fa00 f101 	lsl.w	r1, r0, r1
 800cfbe:	428c      	cmp	r4, r1
 800cfc0:	d10b      	bne.n	800cfda <__any_on+0x3e>
 800cfc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d803      	bhi.n	800cfd2 <__any_on+0x36>
 800cfca:	2000      	movs	r0, #0
 800cfcc:	bd10      	pop	{r4, pc}
 800cfce:	4603      	mov	r3, r0
 800cfd0:	e7f7      	b.n	800cfc2 <__any_on+0x26>
 800cfd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cfd6:	2900      	cmp	r1, #0
 800cfd8:	d0f5      	beq.n	800cfc6 <__any_on+0x2a>
 800cfda:	2001      	movs	r0, #1
 800cfdc:	e7f6      	b.n	800cfcc <__any_on+0x30>

0800cfde <sulp>:
 800cfde:	b570      	push	{r4, r5, r6, lr}
 800cfe0:	4604      	mov	r4, r0
 800cfe2:	460d      	mov	r5, r1
 800cfe4:	ec45 4b10 	vmov	d0, r4, r5
 800cfe8:	4616      	mov	r6, r2
 800cfea:	f7ff feb7 	bl	800cd5c <__ulp>
 800cfee:	ec51 0b10 	vmov	r0, r1, d0
 800cff2:	b17e      	cbz	r6, 800d014 <sulp+0x36>
 800cff4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cff8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	dd09      	ble.n	800d014 <sulp+0x36>
 800d000:	051b      	lsls	r3, r3, #20
 800d002:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d006:	2400      	movs	r4, #0
 800d008:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d00c:	4622      	mov	r2, r4
 800d00e:	462b      	mov	r3, r5
 800d010:	f7f3 faf2 	bl	80005f8 <__aeabi_dmul>
 800d014:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d018 <_strtod_l>:
 800d018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d01c:	ed2d 8b02 	vpush	{d8}
 800d020:	b09b      	sub	sp, #108	; 0x6c
 800d022:	4604      	mov	r4, r0
 800d024:	9213      	str	r2, [sp, #76]	; 0x4c
 800d026:	2200      	movs	r2, #0
 800d028:	9216      	str	r2, [sp, #88]	; 0x58
 800d02a:	460d      	mov	r5, r1
 800d02c:	f04f 0800 	mov.w	r8, #0
 800d030:	f04f 0900 	mov.w	r9, #0
 800d034:	460a      	mov	r2, r1
 800d036:	9215      	str	r2, [sp, #84]	; 0x54
 800d038:	7811      	ldrb	r1, [r2, #0]
 800d03a:	292b      	cmp	r1, #43	; 0x2b
 800d03c:	d04c      	beq.n	800d0d8 <_strtod_l+0xc0>
 800d03e:	d83a      	bhi.n	800d0b6 <_strtod_l+0x9e>
 800d040:	290d      	cmp	r1, #13
 800d042:	d834      	bhi.n	800d0ae <_strtod_l+0x96>
 800d044:	2908      	cmp	r1, #8
 800d046:	d834      	bhi.n	800d0b2 <_strtod_l+0x9a>
 800d048:	2900      	cmp	r1, #0
 800d04a:	d03d      	beq.n	800d0c8 <_strtod_l+0xb0>
 800d04c:	2200      	movs	r2, #0
 800d04e:	920a      	str	r2, [sp, #40]	; 0x28
 800d050:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800d052:	7832      	ldrb	r2, [r6, #0]
 800d054:	2a30      	cmp	r2, #48	; 0x30
 800d056:	f040 80b4 	bne.w	800d1c2 <_strtod_l+0x1aa>
 800d05a:	7872      	ldrb	r2, [r6, #1]
 800d05c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800d060:	2a58      	cmp	r2, #88	; 0x58
 800d062:	d170      	bne.n	800d146 <_strtod_l+0x12e>
 800d064:	9302      	str	r3, [sp, #8]
 800d066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d068:	9301      	str	r3, [sp, #4]
 800d06a:	ab16      	add	r3, sp, #88	; 0x58
 800d06c:	9300      	str	r3, [sp, #0]
 800d06e:	4a8e      	ldr	r2, [pc, #568]	; (800d2a8 <_strtod_l+0x290>)
 800d070:	ab17      	add	r3, sp, #92	; 0x5c
 800d072:	a915      	add	r1, sp, #84	; 0x54
 800d074:	4620      	mov	r0, r4
 800d076:	f001 fcd3 	bl	800ea20 <__gethex>
 800d07a:	f010 070f 	ands.w	r7, r0, #15
 800d07e:	4605      	mov	r5, r0
 800d080:	d005      	beq.n	800d08e <_strtod_l+0x76>
 800d082:	2f06      	cmp	r7, #6
 800d084:	d12a      	bne.n	800d0dc <_strtod_l+0xc4>
 800d086:	3601      	adds	r6, #1
 800d088:	2300      	movs	r3, #0
 800d08a:	9615      	str	r6, [sp, #84]	; 0x54
 800d08c:	930a      	str	r3, [sp, #40]	; 0x28
 800d08e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d090:	2b00      	cmp	r3, #0
 800d092:	f040 857f 	bne.w	800db94 <_strtod_l+0xb7c>
 800d096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d098:	b1db      	cbz	r3, 800d0d2 <_strtod_l+0xba>
 800d09a:	4642      	mov	r2, r8
 800d09c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d0a0:	ec43 2b10 	vmov	d0, r2, r3
 800d0a4:	b01b      	add	sp, #108	; 0x6c
 800d0a6:	ecbd 8b02 	vpop	{d8}
 800d0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ae:	2920      	cmp	r1, #32
 800d0b0:	d1cc      	bne.n	800d04c <_strtod_l+0x34>
 800d0b2:	3201      	adds	r2, #1
 800d0b4:	e7bf      	b.n	800d036 <_strtod_l+0x1e>
 800d0b6:	292d      	cmp	r1, #45	; 0x2d
 800d0b8:	d1c8      	bne.n	800d04c <_strtod_l+0x34>
 800d0ba:	2101      	movs	r1, #1
 800d0bc:	910a      	str	r1, [sp, #40]	; 0x28
 800d0be:	1c51      	adds	r1, r2, #1
 800d0c0:	9115      	str	r1, [sp, #84]	; 0x54
 800d0c2:	7852      	ldrb	r2, [r2, #1]
 800d0c4:	2a00      	cmp	r2, #0
 800d0c6:	d1c3      	bne.n	800d050 <_strtod_l+0x38>
 800d0c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0ca:	9515      	str	r5, [sp, #84]	; 0x54
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	f040 855f 	bne.w	800db90 <_strtod_l+0xb78>
 800d0d2:	4642      	mov	r2, r8
 800d0d4:	464b      	mov	r3, r9
 800d0d6:	e7e3      	b.n	800d0a0 <_strtod_l+0x88>
 800d0d8:	2100      	movs	r1, #0
 800d0da:	e7ef      	b.n	800d0bc <_strtod_l+0xa4>
 800d0dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d0de:	b13a      	cbz	r2, 800d0f0 <_strtod_l+0xd8>
 800d0e0:	2135      	movs	r1, #53	; 0x35
 800d0e2:	a818      	add	r0, sp, #96	; 0x60
 800d0e4:	f7ff ff37 	bl	800cf56 <__copybits>
 800d0e8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	f7ff fb0a 	bl	800c704 <_Bfree>
 800d0f0:	3f01      	subs	r7, #1
 800d0f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d0f4:	2f04      	cmp	r7, #4
 800d0f6:	d806      	bhi.n	800d106 <_strtod_l+0xee>
 800d0f8:	e8df f007 	tbb	[pc, r7]
 800d0fc:	201d0314 	.word	0x201d0314
 800d100:	14          	.byte	0x14
 800d101:	00          	.byte	0x00
 800d102:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800d106:	05e9      	lsls	r1, r5, #23
 800d108:	bf48      	it	mi
 800d10a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800d10e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d112:	0d1b      	lsrs	r3, r3, #20
 800d114:	051b      	lsls	r3, r3, #20
 800d116:	2b00      	cmp	r3, #0
 800d118:	d1b9      	bne.n	800d08e <_strtod_l+0x76>
 800d11a:	f7fe fb07 	bl	800b72c <__errno>
 800d11e:	2322      	movs	r3, #34	; 0x22
 800d120:	6003      	str	r3, [r0, #0]
 800d122:	e7b4      	b.n	800d08e <_strtod_l+0x76>
 800d124:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800d128:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d12c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d130:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800d134:	e7e7      	b.n	800d106 <_strtod_l+0xee>
 800d136:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800d2b0 <_strtod_l+0x298>
 800d13a:	e7e4      	b.n	800d106 <_strtod_l+0xee>
 800d13c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800d140:	f04f 38ff 	mov.w	r8, #4294967295
 800d144:	e7df      	b.n	800d106 <_strtod_l+0xee>
 800d146:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d148:	1c5a      	adds	r2, r3, #1
 800d14a:	9215      	str	r2, [sp, #84]	; 0x54
 800d14c:	785b      	ldrb	r3, [r3, #1]
 800d14e:	2b30      	cmp	r3, #48	; 0x30
 800d150:	d0f9      	beq.n	800d146 <_strtod_l+0x12e>
 800d152:	2b00      	cmp	r3, #0
 800d154:	d09b      	beq.n	800d08e <_strtod_l+0x76>
 800d156:	2301      	movs	r3, #1
 800d158:	f04f 0a00 	mov.w	sl, #0
 800d15c:	9304      	str	r3, [sp, #16]
 800d15e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d160:	930b      	str	r3, [sp, #44]	; 0x2c
 800d162:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d166:	46d3      	mov	fp, sl
 800d168:	220a      	movs	r2, #10
 800d16a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800d16c:	7806      	ldrb	r6, [r0, #0]
 800d16e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d172:	b2d9      	uxtb	r1, r3
 800d174:	2909      	cmp	r1, #9
 800d176:	d926      	bls.n	800d1c6 <_strtod_l+0x1ae>
 800d178:	494c      	ldr	r1, [pc, #304]	; (800d2ac <_strtod_l+0x294>)
 800d17a:	2201      	movs	r2, #1
 800d17c:	f001 fb79 	bl	800e872 <strncmp>
 800d180:	2800      	cmp	r0, #0
 800d182:	d030      	beq.n	800d1e6 <_strtod_l+0x1ce>
 800d184:	2000      	movs	r0, #0
 800d186:	4632      	mov	r2, r6
 800d188:	9005      	str	r0, [sp, #20]
 800d18a:	465e      	mov	r6, fp
 800d18c:	4603      	mov	r3, r0
 800d18e:	2a65      	cmp	r2, #101	; 0x65
 800d190:	d001      	beq.n	800d196 <_strtod_l+0x17e>
 800d192:	2a45      	cmp	r2, #69	; 0x45
 800d194:	d113      	bne.n	800d1be <_strtod_l+0x1a6>
 800d196:	b91e      	cbnz	r6, 800d1a0 <_strtod_l+0x188>
 800d198:	9a04      	ldr	r2, [sp, #16]
 800d19a:	4302      	orrs	r2, r0
 800d19c:	d094      	beq.n	800d0c8 <_strtod_l+0xb0>
 800d19e:	2600      	movs	r6, #0
 800d1a0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800d1a2:	1c6a      	adds	r2, r5, #1
 800d1a4:	9215      	str	r2, [sp, #84]	; 0x54
 800d1a6:	786a      	ldrb	r2, [r5, #1]
 800d1a8:	2a2b      	cmp	r2, #43	; 0x2b
 800d1aa:	d074      	beq.n	800d296 <_strtod_l+0x27e>
 800d1ac:	2a2d      	cmp	r2, #45	; 0x2d
 800d1ae:	d078      	beq.n	800d2a2 <_strtod_l+0x28a>
 800d1b0:	f04f 0c00 	mov.w	ip, #0
 800d1b4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d1b8:	2909      	cmp	r1, #9
 800d1ba:	d97f      	bls.n	800d2bc <_strtod_l+0x2a4>
 800d1bc:	9515      	str	r5, [sp, #84]	; 0x54
 800d1be:	2700      	movs	r7, #0
 800d1c0:	e09e      	b.n	800d300 <_strtod_l+0x2e8>
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	e7c8      	b.n	800d158 <_strtod_l+0x140>
 800d1c6:	f1bb 0f08 	cmp.w	fp, #8
 800d1ca:	bfd8      	it	le
 800d1cc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d1ce:	f100 0001 	add.w	r0, r0, #1
 800d1d2:	bfda      	itte	le
 800d1d4:	fb02 3301 	mlale	r3, r2, r1, r3
 800d1d8:	9309      	strle	r3, [sp, #36]	; 0x24
 800d1da:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800d1de:	f10b 0b01 	add.w	fp, fp, #1
 800d1e2:	9015      	str	r0, [sp, #84]	; 0x54
 800d1e4:	e7c1      	b.n	800d16a <_strtod_l+0x152>
 800d1e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1e8:	1c5a      	adds	r2, r3, #1
 800d1ea:	9215      	str	r2, [sp, #84]	; 0x54
 800d1ec:	785a      	ldrb	r2, [r3, #1]
 800d1ee:	f1bb 0f00 	cmp.w	fp, #0
 800d1f2:	d037      	beq.n	800d264 <_strtod_l+0x24c>
 800d1f4:	9005      	str	r0, [sp, #20]
 800d1f6:	465e      	mov	r6, fp
 800d1f8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d1fc:	2b09      	cmp	r3, #9
 800d1fe:	d912      	bls.n	800d226 <_strtod_l+0x20e>
 800d200:	2301      	movs	r3, #1
 800d202:	e7c4      	b.n	800d18e <_strtod_l+0x176>
 800d204:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d206:	1c5a      	adds	r2, r3, #1
 800d208:	9215      	str	r2, [sp, #84]	; 0x54
 800d20a:	785a      	ldrb	r2, [r3, #1]
 800d20c:	3001      	adds	r0, #1
 800d20e:	2a30      	cmp	r2, #48	; 0x30
 800d210:	d0f8      	beq.n	800d204 <_strtod_l+0x1ec>
 800d212:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d216:	2b08      	cmp	r3, #8
 800d218:	f200 84c1 	bhi.w	800db9e <_strtod_l+0xb86>
 800d21c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d21e:	9005      	str	r0, [sp, #20]
 800d220:	2000      	movs	r0, #0
 800d222:	930b      	str	r3, [sp, #44]	; 0x2c
 800d224:	4606      	mov	r6, r0
 800d226:	3a30      	subs	r2, #48	; 0x30
 800d228:	f100 0301 	add.w	r3, r0, #1
 800d22c:	d014      	beq.n	800d258 <_strtod_l+0x240>
 800d22e:	9905      	ldr	r1, [sp, #20]
 800d230:	4419      	add	r1, r3
 800d232:	9105      	str	r1, [sp, #20]
 800d234:	4633      	mov	r3, r6
 800d236:	eb00 0c06 	add.w	ip, r0, r6
 800d23a:	210a      	movs	r1, #10
 800d23c:	4563      	cmp	r3, ip
 800d23e:	d113      	bne.n	800d268 <_strtod_l+0x250>
 800d240:	1833      	adds	r3, r6, r0
 800d242:	2b08      	cmp	r3, #8
 800d244:	f106 0601 	add.w	r6, r6, #1
 800d248:	4406      	add	r6, r0
 800d24a:	dc1a      	bgt.n	800d282 <_strtod_l+0x26a>
 800d24c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d24e:	230a      	movs	r3, #10
 800d250:	fb03 2301 	mla	r3, r3, r1, r2
 800d254:	9309      	str	r3, [sp, #36]	; 0x24
 800d256:	2300      	movs	r3, #0
 800d258:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d25a:	1c51      	adds	r1, r2, #1
 800d25c:	9115      	str	r1, [sp, #84]	; 0x54
 800d25e:	7852      	ldrb	r2, [r2, #1]
 800d260:	4618      	mov	r0, r3
 800d262:	e7c9      	b.n	800d1f8 <_strtod_l+0x1e0>
 800d264:	4658      	mov	r0, fp
 800d266:	e7d2      	b.n	800d20e <_strtod_l+0x1f6>
 800d268:	2b08      	cmp	r3, #8
 800d26a:	f103 0301 	add.w	r3, r3, #1
 800d26e:	dc03      	bgt.n	800d278 <_strtod_l+0x260>
 800d270:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d272:	434f      	muls	r7, r1
 800d274:	9709      	str	r7, [sp, #36]	; 0x24
 800d276:	e7e1      	b.n	800d23c <_strtod_l+0x224>
 800d278:	2b10      	cmp	r3, #16
 800d27a:	bfd8      	it	le
 800d27c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800d280:	e7dc      	b.n	800d23c <_strtod_l+0x224>
 800d282:	2e10      	cmp	r6, #16
 800d284:	bfdc      	itt	le
 800d286:	230a      	movle	r3, #10
 800d288:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800d28c:	e7e3      	b.n	800d256 <_strtod_l+0x23e>
 800d28e:	2300      	movs	r3, #0
 800d290:	9305      	str	r3, [sp, #20]
 800d292:	2301      	movs	r3, #1
 800d294:	e780      	b.n	800d198 <_strtod_l+0x180>
 800d296:	f04f 0c00 	mov.w	ip, #0
 800d29a:	1caa      	adds	r2, r5, #2
 800d29c:	9215      	str	r2, [sp, #84]	; 0x54
 800d29e:	78aa      	ldrb	r2, [r5, #2]
 800d2a0:	e788      	b.n	800d1b4 <_strtod_l+0x19c>
 800d2a2:	f04f 0c01 	mov.w	ip, #1
 800d2a6:	e7f8      	b.n	800d29a <_strtod_l+0x282>
 800d2a8:	08011210 	.word	0x08011210
 800d2ac:	0801120c 	.word	0x0801120c
 800d2b0:	7ff00000 	.word	0x7ff00000
 800d2b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d2b6:	1c51      	adds	r1, r2, #1
 800d2b8:	9115      	str	r1, [sp, #84]	; 0x54
 800d2ba:	7852      	ldrb	r2, [r2, #1]
 800d2bc:	2a30      	cmp	r2, #48	; 0x30
 800d2be:	d0f9      	beq.n	800d2b4 <_strtod_l+0x29c>
 800d2c0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d2c4:	2908      	cmp	r1, #8
 800d2c6:	f63f af7a 	bhi.w	800d1be <_strtod_l+0x1a6>
 800d2ca:	3a30      	subs	r2, #48	; 0x30
 800d2cc:	9208      	str	r2, [sp, #32]
 800d2ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d2d0:	920c      	str	r2, [sp, #48]	; 0x30
 800d2d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d2d4:	1c57      	adds	r7, r2, #1
 800d2d6:	9715      	str	r7, [sp, #84]	; 0x54
 800d2d8:	7852      	ldrb	r2, [r2, #1]
 800d2da:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d2de:	f1be 0f09 	cmp.w	lr, #9
 800d2e2:	d938      	bls.n	800d356 <_strtod_l+0x33e>
 800d2e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d2e6:	1a7f      	subs	r7, r7, r1
 800d2e8:	2f08      	cmp	r7, #8
 800d2ea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d2ee:	dc03      	bgt.n	800d2f8 <_strtod_l+0x2e0>
 800d2f0:	9908      	ldr	r1, [sp, #32]
 800d2f2:	428f      	cmp	r7, r1
 800d2f4:	bfa8      	it	ge
 800d2f6:	460f      	movge	r7, r1
 800d2f8:	f1bc 0f00 	cmp.w	ip, #0
 800d2fc:	d000      	beq.n	800d300 <_strtod_l+0x2e8>
 800d2fe:	427f      	negs	r7, r7
 800d300:	2e00      	cmp	r6, #0
 800d302:	d14f      	bne.n	800d3a4 <_strtod_l+0x38c>
 800d304:	9904      	ldr	r1, [sp, #16]
 800d306:	4301      	orrs	r1, r0
 800d308:	f47f aec1 	bne.w	800d08e <_strtod_l+0x76>
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	f47f aedb 	bne.w	800d0c8 <_strtod_l+0xb0>
 800d312:	2a69      	cmp	r2, #105	; 0x69
 800d314:	d029      	beq.n	800d36a <_strtod_l+0x352>
 800d316:	dc26      	bgt.n	800d366 <_strtod_l+0x34e>
 800d318:	2a49      	cmp	r2, #73	; 0x49
 800d31a:	d026      	beq.n	800d36a <_strtod_l+0x352>
 800d31c:	2a4e      	cmp	r2, #78	; 0x4e
 800d31e:	f47f aed3 	bne.w	800d0c8 <_strtod_l+0xb0>
 800d322:	499b      	ldr	r1, [pc, #620]	; (800d590 <_strtod_l+0x578>)
 800d324:	a815      	add	r0, sp, #84	; 0x54
 800d326:	f001 fdbb 	bl	800eea0 <__match>
 800d32a:	2800      	cmp	r0, #0
 800d32c:	f43f aecc 	beq.w	800d0c8 <_strtod_l+0xb0>
 800d330:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	2b28      	cmp	r3, #40	; 0x28
 800d336:	d12f      	bne.n	800d398 <_strtod_l+0x380>
 800d338:	4996      	ldr	r1, [pc, #600]	; (800d594 <_strtod_l+0x57c>)
 800d33a:	aa18      	add	r2, sp, #96	; 0x60
 800d33c:	a815      	add	r0, sp, #84	; 0x54
 800d33e:	f001 fdc3 	bl	800eec8 <__hexnan>
 800d342:	2805      	cmp	r0, #5
 800d344:	d128      	bne.n	800d398 <_strtod_l+0x380>
 800d346:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d348:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d34c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800d350:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800d354:	e69b      	b.n	800d08e <_strtod_l+0x76>
 800d356:	9f08      	ldr	r7, [sp, #32]
 800d358:	210a      	movs	r1, #10
 800d35a:	fb01 2107 	mla	r1, r1, r7, r2
 800d35e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800d362:	9208      	str	r2, [sp, #32]
 800d364:	e7b5      	b.n	800d2d2 <_strtod_l+0x2ba>
 800d366:	2a6e      	cmp	r2, #110	; 0x6e
 800d368:	e7d9      	b.n	800d31e <_strtod_l+0x306>
 800d36a:	498b      	ldr	r1, [pc, #556]	; (800d598 <_strtod_l+0x580>)
 800d36c:	a815      	add	r0, sp, #84	; 0x54
 800d36e:	f001 fd97 	bl	800eea0 <__match>
 800d372:	2800      	cmp	r0, #0
 800d374:	f43f aea8 	beq.w	800d0c8 <_strtod_l+0xb0>
 800d378:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d37a:	4988      	ldr	r1, [pc, #544]	; (800d59c <_strtod_l+0x584>)
 800d37c:	3b01      	subs	r3, #1
 800d37e:	a815      	add	r0, sp, #84	; 0x54
 800d380:	9315      	str	r3, [sp, #84]	; 0x54
 800d382:	f001 fd8d 	bl	800eea0 <__match>
 800d386:	b910      	cbnz	r0, 800d38e <_strtod_l+0x376>
 800d388:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d38a:	3301      	adds	r3, #1
 800d38c:	9315      	str	r3, [sp, #84]	; 0x54
 800d38e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800d5ac <_strtod_l+0x594>
 800d392:	f04f 0800 	mov.w	r8, #0
 800d396:	e67a      	b.n	800d08e <_strtod_l+0x76>
 800d398:	4881      	ldr	r0, [pc, #516]	; (800d5a0 <_strtod_l+0x588>)
 800d39a:	f001 fa9d 	bl	800e8d8 <nan>
 800d39e:	ec59 8b10 	vmov	r8, r9, d0
 800d3a2:	e674      	b.n	800d08e <_strtod_l+0x76>
 800d3a4:	9b05      	ldr	r3, [sp, #20]
 800d3a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3a8:	1afb      	subs	r3, r7, r3
 800d3aa:	f1bb 0f00 	cmp.w	fp, #0
 800d3ae:	bf08      	it	eq
 800d3b0:	46b3      	moveq	fp, r6
 800d3b2:	2e10      	cmp	r6, #16
 800d3b4:	9308      	str	r3, [sp, #32]
 800d3b6:	4635      	mov	r5, r6
 800d3b8:	bfa8      	it	ge
 800d3ba:	2510      	movge	r5, #16
 800d3bc:	f7f3 f8a2 	bl	8000504 <__aeabi_ui2d>
 800d3c0:	2e09      	cmp	r6, #9
 800d3c2:	4680      	mov	r8, r0
 800d3c4:	4689      	mov	r9, r1
 800d3c6:	dd13      	ble.n	800d3f0 <_strtod_l+0x3d8>
 800d3c8:	4b76      	ldr	r3, [pc, #472]	; (800d5a4 <_strtod_l+0x58c>)
 800d3ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d3ce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d3d2:	f7f3 f911 	bl	80005f8 <__aeabi_dmul>
 800d3d6:	4680      	mov	r8, r0
 800d3d8:	4650      	mov	r0, sl
 800d3da:	4689      	mov	r9, r1
 800d3dc:	f7f3 f892 	bl	8000504 <__aeabi_ui2d>
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	460b      	mov	r3, r1
 800d3e4:	4640      	mov	r0, r8
 800d3e6:	4649      	mov	r1, r9
 800d3e8:	f7f2 ff50 	bl	800028c <__adddf3>
 800d3ec:	4680      	mov	r8, r0
 800d3ee:	4689      	mov	r9, r1
 800d3f0:	2e0f      	cmp	r6, #15
 800d3f2:	dc38      	bgt.n	800d466 <_strtod_l+0x44e>
 800d3f4:	9b08      	ldr	r3, [sp, #32]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	f43f ae49 	beq.w	800d08e <_strtod_l+0x76>
 800d3fc:	dd24      	ble.n	800d448 <_strtod_l+0x430>
 800d3fe:	2b16      	cmp	r3, #22
 800d400:	dc0b      	bgt.n	800d41a <_strtod_l+0x402>
 800d402:	4968      	ldr	r1, [pc, #416]	; (800d5a4 <_strtod_l+0x58c>)
 800d404:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d40c:	4642      	mov	r2, r8
 800d40e:	464b      	mov	r3, r9
 800d410:	f7f3 f8f2 	bl	80005f8 <__aeabi_dmul>
 800d414:	4680      	mov	r8, r0
 800d416:	4689      	mov	r9, r1
 800d418:	e639      	b.n	800d08e <_strtod_l+0x76>
 800d41a:	9a08      	ldr	r2, [sp, #32]
 800d41c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800d420:	4293      	cmp	r3, r2
 800d422:	db20      	blt.n	800d466 <_strtod_l+0x44e>
 800d424:	4c5f      	ldr	r4, [pc, #380]	; (800d5a4 <_strtod_l+0x58c>)
 800d426:	f1c6 060f 	rsb	r6, r6, #15
 800d42a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800d42e:	4642      	mov	r2, r8
 800d430:	464b      	mov	r3, r9
 800d432:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d436:	f7f3 f8df 	bl	80005f8 <__aeabi_dmul>
 800d43a:	9b08      	ldr	r3, [sp, #32]
 800d43c:	1b9e      	subs	r6, r3, r6
 800d43e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800d442:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d446:	e7e3      	b.n	800d410 <_strtod_l+0x3f8>
 800d448:	9b08      	ldr	r3, [sp, #32]
 800d44a:	3316      	adds	r3, #22
 800d44c:	db0b      	blt.n	800d466 <_strtod_l+0x44e>
 800d44e:	9b05      	ldr	r3, [sp, #20]
 800d450:	1bdf      	subs	r7, r3, r7
 800d452:	4b54      	ldr	r3, [pc, #336]	; (800d5a4 <_strtod_l+0x58c>)
 800d454:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d45c:	4640      	mov	r0, r8
 800d45e:	4649      	mov	r1, r9
 800d460:	f7f3 f9f4 	bl	800084c <__aeabi_ddiv>
 800d464:	e7d6      	b.n	800d414 <_strtod_l+0x3fc>
 800d466:	9b08      	ldr	r3, [sp, #32]
 800d468:	1b75      	subs	r5, r6, r5
 800d46a:	441d      	add	r5, r3
 800d46c:	2d00      	cmp	r5, #0
 800d46e:	dd70      	ble.n	800d552 <_strtod_l+0x53a>
 800d470:	f015 030f 	ands.w	r3, r5, #15
 800d474:	d00a      	beq.n	800d48c <_strtod_l+0x474>
 800d476:	494b      	ldr	r1, [pc, #300]	; (800d5a4 <_strtod_l+0x58c>)
 800d478:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d47c:	4642      	mov	r2, r8
 800d47e:	464b      	mov	r3, r9
 800d480:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d484:	f7f3 f8b8 	bl	80005f8 <__aeabi_dmul>
 800d488:	4680      	mov	r8, r0
 800d48a:	4689      	mov	r9, r1
 800d48c:	f035 050f 	bics.w	r5, r5, #15
 800d490:	d04d      	beq.n	800d52e <_strtod_l+0x516>
 800d492:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800d496:	dd22      	ble.n	800d4de <_strtod_l+0x4c6>
 800d498:	2500      	movs	r5, #0
 800d49a:	46ab      	mov	fp, r5
 800d49c:	9509      	str	r5, [sp, #36]	; 0x24
 800d49e:	9505      	str	r5, [sp, #20]
 800d4a0:	2322      	movs	r3, #34	; 0x22
 800d4a2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800d5ac <_strtod_l+0x594>
 800d4a6:	6023      	str	r3, [r4, #0]
 800d4a8:	f04f 0800 	mov.w	r8, #0
 800d4ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	f43f aded 	beq.w	800d08e <_strtod_l+0x76>
 800d4b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	f7ff f924 	bl	800c704 <_Bfree>
 800d4bc:	9905      	ldr	r1, [sp, #20]
 800d4be:	4620      	mov	r0, r4
 800d4c0:	f7ff f920 	bl	800c704 <_Bfree>
 800d4c4:	4659      	mov	r1, fp
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	f7ff f91c 	bl	800c704 <_Bfree>
 800d4cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d4ce:	4620      	mov	r0, r4
 800d4d0:	f7ff f918 	bl	800c704 <_Bfree>
 800d4d4:	4629      	mov	r1, r5
 800d4d6:	4620      	mov	r0, r4
 800d4d8:	f7ff f914 	bl	800c704 <_Bfree>
 800d4dc:	e5d7      	b.n	800d08e <_strtod_l+0x76>
 800d4de:	4b32      	ldr	r3, [pc, #200]	; (800d5a8 <_strtod_l+0x590>)
 800d4e0:	9304      	str	r3, [sp, #16]
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	112d      	asrs	r5, r5, #4
 800d4e6:	4640      	mov	r0, r8
 800d4e8:	4649      	mov	r1, r9
 800d4ea:	469a      	mov	sl, r3
 800d4ec:	2d01      	cmp	r5, #1
 800d4ee:	dc21      	bgt.n	800d534 <_strtod_l+0x51c>
 800d4f0:	b10b      	cbz	r3, 800d4f6 <_strtod_l+0x4de>
 800d4f2:	4680      	mov	r8, r0
 800d4f4:	4689      	mov	r9, r1
 800d4f6:	492c      	ldr	r1, [pc, #176]	; (800d5a8 <_strtod_l+0x590>)
 800d4f8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800d4fc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d500:	4642      	mov	r2, r8
 800d502:	464b      	mov	r3, r9
 800d504:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d508:	f7f3 f876 	bl	80005f8 <__aeabi_dmul>
 800d50c:	4b27      	ldr	r3, [pc, #156]	; (800d5ac <_strtod_l+0x594>)
 800d50e:	460a      	mov	r2, r1
 800d510:	400b      	ands	r3, r1
 800d512:	4927      	ldr	r1, [pc, #156]	; (800d5b0 <_strtod_l+0x598>)
 800d514:	428b      	cmp	r3, r1
 800d516:	4680      	mov	r8, r0
 800d518:	d8be      	bhi.n	800d498 <_strtod_l+0x480>
 800d51a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d51e:	428b      	cmp	r3, r1
 800d520:	bf86      	itte	hi
 800d522:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800d5b4 <_strtod_l+0x59c>
 800d526:	f04f 38ff 	movhi.w	r8, #4294967295
 800d52a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800d52e:	2300      	movs	r3, #0
 800d530:	9304      	str	r3, [sp, #16]
 800d532:	e07b      	b.n	800d62c <_strtod_l+0x614>
 800d534:	07ea      	lsls	r2, r5, #31
 800d536:	d505      	bpl.n	800d544 <_strtod_l+0x52c>
 800d538:	9b04      	ldr	r3, [sp, #16]
 800d53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53e:	f7f3 f85b 	bl	80005f8 <__aeabi_dmul>
 800d542:	2301      	movs	r3, #1
 800d544:	9a04      	ldr	r2, [sp, #16]
 800d546:	3208      	adds	r2, #8
 800d548:	f10a 0a01 	add.w	sl, sl, #1
 800d54c:	106d      	asrs	r5, r5, #1
 800d54e:	9204      	str	r2, [sp, #16]
 800d550:	e7cc      	b.n	800d4ec <_strtod_l+0x4d4>
 800d552:	d0ec      	beq.n	800d52e <_strtod_l+0x516>
 800d554:	426d      	negs	r5, r5
 800d556:	f015 020f 	ands.w	r2, r5, #15
 800d55a:	d00a      	beq.n	800d572 <_strtod_l+0x55a>
 800d55c:	4b11      	ldr	r3, [pc, #68]	; (800d5a4 <_strtod_l+0x58c>)
 800d55e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d562:	4640      	mov	r0, r8
 800d564:	4649      	mov	r1, r9
 800d566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d56a:	f7f3 f96f 	bl	800084c <__aeabi_ddiv>
 800d56e:	4680      	mov	r8, r0
 800d570:	4689      	mov	r9, r1
 800d572:	112d      	asrs	r5, r5, #4
 800d574:	d0db      	beq.n	800d52e <_strtod_l+0x516>
 800d576:	2d1f      	cmp	r5, #31
 800d578:	dd1e      	ble.n	800d5b8 <_strtod_l+0x5a0>
 800d57a:	2500      	movs	r5, #0
 800d57c:	46ab      	mov	fp, r5
 800d57e:	9509      	str	r5, [sp, #36]	; 0x24
 800d580:	9505      	str	r5, [sp, #20]
 800d582:	2322      	movs	r3, #34	; 0x22
 800d584:	f04f 0800 	mov.w	r8, #0
 800d588:	f04f 0900 	mov.w	r9, #0
 800d58c:	6023      	str	r3, [r4, #0]
 800d58e:	e78d      	b.n	800d4ac <_strtod_l+0x494>
 800d590:	08010ff9 	.word	0x08010ff9
 800d594:	08011224 	.word	0x08011224
 800d598:	08010ff1 	.word	0x08010ff1
 800d59c:	08011026 	.word	0x08011026
 800d5a0:	080113d0 	.word	0x080113d0
 800d5a4:	08011138 	.word	0x08011138
 800d5a8:	08011110 	.word	0x08011110
 800d5ac:	7ff00000 	.word	0x7ff00000
 800d5b0:	7ca00000 	.word	0x7ca00000
 800d5b4:	7fefffff 	.word	0x7fefffff
 800d5b8:	f015 0310 	ands.w	r3, r5, #16
 800d5bc:	bf18      	it	ne
 800d5be:	236a      	movne	r3, #106	; 0x6a
 800d5c0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800d964 <_strtod_l+0x94c>
 800d5c4:	9304      	str	r3, [sp, #16]
 800d5c6:	4640      	mov	r0, r8
 800d5c8:	4649      	mov	r1, r9
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	07ea      	lsls	r2, r5, #31
 800d5ce:	d504      	bpl.n	800d5da <_strtod_l+0x5c2>
 800d5d0:	e9da 2300 	ldrd	r2, r3, [sl]
 800d5d4:	f7f3 f810 	bl	80005f8 <__aeabi_dmul>
 800d5d8:	2301      	movs	r3, #1
 800d5da:	106d      	asrs	r5, r5, #1
 800d5dc:	f10a 0a08 	add.w	sl, sl, #8
 800d5e0:	d1f4      	bne.n	800d5cc <_strtod_l+0x5b4>
 800d5e2:	b10b      	cbz	r3, 800d5e8 <_strtod_l+0x5d0>
 800d5e4:	4680      	mov	r8, r0
 800d5e6:	4689      	mov	r9, r1
 800d5e8:	9b04      	ldr	r3, [sp, #16]
 800d5ea:	b1bb      	cbz	r3, 800d61c <_strtod_l+0x604>
 800d5ec:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800d5f0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	4649      	mov	r1, r9
 800d5f8:	dd10      	ble.n	800d61c <_strtod_l+0x604>
 800d5fa:	2b1f      	cmp	r3, #31
 800d5fc:	f340 811e 	ble.w	800d83c <_strtod_l+0x824>
 800d600:	2b34      	cmp	r3, #52	; 0x34
 800d602:	bfde      	ittt	le
 800d604:	f04f 33ff 	movle.w	r3, #4294967295
 800d608:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d60c:	4093      	lslle	r3, r2
 800d60e:	f04f 0800 	mov.w	r8, #0
 800d612:	bfcc      	ite	gt
 800d614:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800d618:	ea03 0901 	andle.w	r9, r3, r1
 800d61c:	2200      	movs	r2, #0
 800d61e:	2300      	movs	r3, #0
 800d620:	4640      	mov	r0, r8
 800d622:	4649      	mov	r1, r9
 800d624:	f7f3 fa50 	bl	8000ac8 <__aeabi_dcmpeq>
 800d628:	2800      	cmp	r0, #0
 800d62a:	d1a6      	bne.n	800d57a <_strtod_l+0x562>
 800d62c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d62e:	9300      	str	r3, [sp, #0]
 800d630:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d632:	4633      	mov	r3, r6
 800d634:	465a      	mov	r2, fp
 800d636:	4620      	mov	r0, r4
 800d638:	f7ff f8cc 	bl	800c7d4 <__s2b>
 800d63c:	9009      	str	r0, [sp, #36]	; 0x24
 800d63e:	2800      	cmp	r0, #0
 800d640:	f43f af2a 	beq.w	800d498 <_strtod_l+0x480>
 800d644:	9a08      	ldr	r2, [sp, #32]
 800d646:	9b05      	ldr	r3, [sp, #20]
 800d648:	2a00      	cmp	r2, #0
 800d64a:	eba3 0307 	sub.w	r3, r3, r7
 800d64e:	bfa8      	it	ge
 800d650:	2300      	movge	r3, #0
 800d652:	930c      	str	r3, [sp, #48]	; 0x30
 800d654:	2500      	movs	r5, #0
 800d656:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d65a:	9312      	str	r3, [sp, #72]	; 0x48
 800d65c:	46ab      	mov	fp, r5
 800d65e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d660:	4620      	mov	r0, r4
 800d662:	6859      	ldr	r1, [r3, #4]
 800d664:	f7ff f80e 	bl	800c684 <_Balloc>
 800d668:	9005      	str	r0, [sp, #20]
 800d66a:	2800      	cmp	r0, #0
 800d66c:	f43f af18 	beq.w	800d4a0 <_strtod_l+0x488>
 800d670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d672:	691a      	ldr	r2, [r3, #16]
 800d674:	3202      	adds	r2, #2
 800d676:	f103 010c 	add.w	r1, r3, #12
 800d67a:	0092      	lsls	r2, r2, #2
 800d67c:	300c      	adds	r0, #12
 800d67e:	f001 f91b 	bl	800e8b8 <memcpy>
 800d682:	ec49 8b10 	vmov	d0, r8, r9
 800d686:	aa18      	add	r2, sp, #96	; 0x60
 800d688:	a917      	add	r1, sp, #92	; 0x5c
 800d68a:	4620      	mov	r0, r4
 800d68c:	f7ff fbd6 	bl	800ce3c <__d2b>
 800d690:	ec49 8b18 	vmov	d8, r8, r9
 800d694:	9016      	str	r0, [sp, #88]	; 0x58
 800d696:	2800      	cmp	r0, #0
 800d698:	f43f af02 	beq.w	800d4a0 <_strtod_l+0x488>
 800d69c:	2101      	movs	r1, #1
 800d69e:	4620      	mov	r0, r4
 800d6a0:	f7ff f930 	bl	800c904 <__i2b>
 800d6a4:	4683      	mov	fp, r0
 800d6a6:	2800      	cmp	r0, #0
 800d6a8:	f43f aefa 	beq.w	800d4a0 <_strtod_l+0x488>
 800d6ac:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d6ae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d6b0:	2e00      	cmp	r6, #0
 800d6b2:	bfab      	itete	ge
 800d6b4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800d6b6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800d6b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d6ba:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800d6be:	bfac      	ite	ge
 800d6c0:	eb06 0a03 	addge.w	sl, r6, r3
 800d6c4:	1b9f      	sublt	r7, r3, r6
 800d6c6:	9b04      	ldr	r3, [sp, #16]
 800d6c8:	1af6      	subs	r6, r6, r3
 800d6ca:	4416      	add	r6, r2
 800d6cc:	4ba0      	ldr	r3, [pc, #640]	; (800d950 <_strtod_l+0x938>)
 800d6ce:	3e01      	subs	r6, #1
 800d6d0:	429e      	cmp	r6, r3
 800d6d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d6d6:	f280 80c4 	bge.w	800d862 <_strtod_l+0x84a>
 800d6da:	1b9b      	subs	r3, r3, r6
 800d6dc:	2b1f      	cmp	r3, #31
 800d6de:	eba2 0203 	sub.w	r2, r2, r3
 800d6e2:	f04f 0101 	mov.w	r1, #1
 800d6e6:	f300 80b0 	bgt.w	800d84a <_strtod_l+0x832>
 800d6ea:	fa01 f303 	lsl.w	r3, r1, r3
 800d6ee:	930e      	str	r3, [sp, #56]	; 0x38
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	930d      	str	r3, [sp, #52]	; 0x34
 800d6f4:	eb0a 0602 	add.w	r6, sl, r2
 800d6f8:	9b04      	ldr	r3, [sp, #16]
 800d6fa:	45b2      	cmp	sl, r6
 800d6fc:	4417      	add	r7, r2
 800d6fe:	441f      	add	r7, r3
 800d700:	4653      	mov	r3, sl
 800d702:	bfa8      	it	ge
 800d704:	4633      	movge	r3, r6
 800d706:	42bb      	cmp	r3, r7
 800d708:	bfa8      	it	ge
 800d70a:	463b      	movge	r3, r7
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	bfc2      	ittt	gt
 800d710:	1af6      	subgt	r6, r6, r3
 800d712:	1aff      	subgt	r7, r7, r3
 800d714:	ebaa 0a03 	subgt.w	sl, sl, r3
 800d718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	dd17      	ble.n	800d74e <_strtod_l+0x736>
 800d71e:	4659      	mov	r1, fp
 800d720:	461a      	mov	r2, r3
 800d722:	4620      	mov	r0, r4
 800d724:	f7ff f9ae 	bl	800ca84 <__pow5mult>
 800d728:	4683      	mov	fp, r0
 800d72a:	2800      	cmp	r0, #0
 800d72c:	f43f aeb8 	beq.w	800d4a0 <_strtod_l+0x488>
 800d730:	4601      	mov	r1, r0
 800d732:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d734:	4620      	mov	r0, r4
 800d736:	f7ff f8fb 	bl	800c930 <__multiply>
 800d73a:	900b      	str	r0, [sp, #44]	; 0x2c
 800d73c:	2800      	cmp	r0, #0
 800d73e:	f43f aeaf 	beq.w	800d4a0 <_strtod_l+0x488>
 800d742:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d744:	4620      	mov	r0, r4
 800d746:	f7fe ffdd 	bl	800c704 <_Bfree>
 800d74a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d74c:	9316      	str	r3, [sp, #88]	; 0x58
 800d74e:	2e00      	cmp	r6, #0
 800d750:	f300 808c 	bgt.w	800d86c <_strtod_l+0x854>
 800d754:	9b08      	ldr	r3, [sp, #32]
 800d756:	2b00      	cmp	r3, #0
 800d758:	dd08      	ble.n	800d76c <_strtod_l+0x754>
 800d75a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d75c:	9905      	ldr	r1, [sp, #20]
 800d75e:	4620      	mov	r0, r4
 800d760:	f7ff f990 	bl	800ca84 <__pow5mult>
 800d764:	9005      	str	r0, [sp, #20]
 800d766:	2800      	cmp	r0, #0
 800d768:	f43f ae9a 	beq.w	800d4a0 <_strtod_l+0x488>
 800d76c:	2f00      	cmp	r7, #0
 800d76e:	dd08      	ble.n	800d782 <_strtod_l+0x76a>
 800d770:	9905      	ldr	r1, [sp, #20]
 800d772:	463a      	mov	r2, r7
 800d774:	4620      	mov	r0, r4
 800d776:	f7ff f9df 	bl	800cb38 <__lshift>
 800d77a:	9005      	str	r0, [sp, #20]
 800d77c:	2800      	cmp	r0, #0
 800d77e:	f43f ae8f 	beq.w	800d4a0 <_strtod_l+0x488>
 800d782:	f1ba 0f00 	cmp.w	sl, #0
 800d786:	dd08      	ble.n	800d79a <_strtod_l+0x782>
 800d788:	4659      	mov	r1, fp
 800d78a:	4652      	mov	r2, sl
 800d78c:	4620      	mov	r0, r4
 800d78e:	f7ff f9d3 	bl	800cb38 <__lshift>
 800d792:	4683      	mov	fp, r0
 800d794:	2800      	cmp	r0, #0
 800d796:	f43f ae83 	beq.w	800d4a0 <_strtod_l+0x488>
 800d79a:	9a05      	ldr	r2, [sp, #20]
 800d79c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d79e:	4620      	mov	r0, r4
 800d7a0:	f7ff fa52 	bl	800cc48 <__mdiff>
 800d7a4:	4605      	mov	r5, r0
 800d7a6:	2800      	cmp	r0, #0
 800d7a8:	f43f ae7a 	beq.w	800d4a0 <_strtod_l+0x488>
 800d7ac:	68c3      	ldr	r3, [r0, #12]
 800d7ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	60c3      	str	r3, [r0, #12]
 800d7b4:	4659      	mov	r1, fp
 800d7b6:	f7ff fa2b 	bl	800cc10 <__mcmp>
 800d7ba:	2800      	cmp	r0, #0
 800d7bc:	da60      	bge.n	800d880 <_strtod_l+0x868>
 800d7be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7c0:	ea53 0308 	orrs.w	r3, r3, r8
 800d7c4:	f040 8084 	bne.w	800d8d0 <_strtod_l+0x8b8>
 800d7c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d17f      	bne.n	800d8d0 <_strtod_l+0x8b8>
 800d7d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d7d4:	0d1b      	lsrs	r3, r3, #20
 800d7d6:	051b      	lsls	r3, r3, #20
 800d7d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d7dc:	d978      	bls.n	800d8d0 <_strtod_l+0x8b8>
 800d7de:	696b      	ldr	r3, [r5, #20]
 800d7e0:	b913      	cbnz	r3, 800d7e8 <_strtod_l+0x7d0>
 800d7e2:	692b      	ldr	r3, [r5, #16]
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	dd73      	ble.n	800d8d0 <_strtod_l+0x8b8>
 800d7e8:	4629      	mov	r1, r5
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	4620      	mov	r0, r4
 800d7ee:	f7ff f9a3 	bl	800cb38 <__lshift>
 800d7f2:	4659      	mov	r1, fp
 800d7f4:	4605      	mov	r5, r0
 800d7f6:	f7ff fa0b 	bl	800cc10 <__mcmp>
 800d7fa:	2800      	cmp	r0, #0
 800d7fc:	dd68      	ble.n	800d8d0 <_strtod_l+0x8b8>
 800d7fe:	9904      	ldr	r1, [sp, #16]
 800d800:	4a54      	ldr	r2, [pc, #336]	; (800d954 <_strtod_l+0x93c>)
 800d802:	464b      	mov	r3, r9
 800d804:	2900      	cmp	r1, #0
 800d806:	f000 8084 	beq.w	800d912 <_strtod_l+0x8fa>
 800d80a:	ea02 0109 	and.w	r1, r2, r9
 800d80e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d812:	dc7e      	bgt.n	800d912 <_strtod_l+0x8fa>
 800d814:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d818:	f77f aeb3 	ble.w	800d582 <_strtod_l+0x56a>
 800d81c:	4b4e      	ldr	r3, [pc, #312]	; (800d958 <_strtod_l+0x940>)
 800d81e:	4640      	mov	r0, r8
 800d820:	4649      	mov	r1, r9
 800d822:	2200      	movs	r2, #0
 800d824:	f7f2 fee8 	bl	80005f8 <__aeabi_dmul>
 800d828:	4b4a      	ldr	r3, [pc, #296]	; (800d954 <_strtod_l+0x93c>)
 800d82a:	400b      	ands	r3, r1
 800d82c:	4680      	mov	r8, r0
 800d82e:	4689      	mov	r9, r1
 800d830:	2b00      	cmp	r3, #0
 800d832:	f47f ae3f 	bne.w	800d4b4 <_strtod_l+0x49c>
 800d836:	2322      	movs	r3, #34	; 0x22
 800d838:	6023      	str	r3, [r4, #0]
 800d83a:	e63b      	b.n	800d4b4 <_strtod_l+0x49c>
 800d83c:	f04f 32ff 	mov.w	r2, #4294967295
 800d840:	fa02 f303 	lsl.w	r3, r2, r3
 800d844:	ea03 0808 	and.w	r8, r3, r8
 800d848:	e6e8      	b.n	800d61c <_strtod_l+0x604>
 800d84a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d84e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d852:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d856:	36e2      	adds	r6, #226	; 0xe2
 800d858:	fa01 f306 	lsl.w	r3, r1, r6
 800d85c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800d860:	e748      	b.n	800d6f4 <_strtod_l+0x6dc>
 800d862:	2100      	movs	r1, #0
 800d864:	2301      	movs	r3, #1
 800d866:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800d86a:	e743      	b.n	800d6f4 <_strtod_l+0x6dc>
 800d86c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d86e:	4632      	mov	r2, r6
 800d870:	4620      	mov	r0, r4
 800d872:	f7ff f961 	bl	800cb38 <__lshift>
 800d876:	9016      	str	r0, [sp, #88]	; 0x58
 800d878:	2800      	cmp	r0, #0
 800d87a:	f47f af6b 	bne.w	800d754 <_strtod_l+0x73c>
 800d87e:	e60f      	b.n	800d4a0 <_strtod_l+0x488>
 800d880:	46ca      	mov	sl, r9
 800d882:	d171      	bne.n	800d968 <_strtod_l+0x950>
 800d884:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d886:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d88a:	b352      	cbz	r2, 800d8e2 <_strtod_l+0x8ca>
 800d88c:	4a33      	ldr	r2, [pc, #204]	; (800d95c <_strtod_l+0x944>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d12a      	bne.n	800d8e8 <_strtod_l+0x8d0>
 800d892:	9b04      	ldr	r3, [sp, #16]
 800d894:	4641      	mov	r1, r8
 800d896:	b1fb      	cbz	r3, 800d8d8 <_strtod_l+0x8c0>
 800d898:	4b2e      	ldr	r3, [pc, #184]	; (800d954 <_strtod_l+0x93c>)
 800d89a:	ea09 0303 	and.w	r3, r9, r3
 800d89e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d8a2:	f04f 32ff 	mov.w	r2, #4294967295
 800d8a6:	d81a      	bhi.n	800d8de <_strtod_l+0x8c6>
 800d8a8:	0d1b      	lsrs	r3, r3, #20
 800d8aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d8ae:	fa02 f303 	lsl.w	r3, r2, r3
 800d8b2:	4299      	cmp	r1, r3
 800d8b4:	d118      	bne.n	800d8e8 <_strtod_l+0x8d0>
 800d8b6:	4b2a      	ldr	r3, [pc, #168]	; (800d960 <_strtod_l+0x948>)
 800d8b8:	459a      	cmp	sl, r3
 800d8ba:	d102      	bne.n	800d8c2 <_strtod_l+0x8aa>
 800d8bc:	3101      	adds	r1, #1
 800d8be:	f43f adef 	beq.w	800d4a0 <_strtod_l+0x488>
 800d8c2:	4b24      	ldr	r3, [pc, #144]	; (800d954 <_strtod_l+0x93c>)
 800d8c4:	ea0a 0303 	and.w	r3, sl, r3
 800d8c8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800d8cc:	f04f 0800 	mov.w	r8, #0
 800d8d0:	9b04      	ldr	r3, [sp, #16]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d1a2      	bne.n	800d81c <_strtod_l+0x804>
 800d8d6:	e5ed      	b.n	800d4b4 <_strtod_l+0x49c>
 800d8d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d8dc:	e7e9      	b.n	800d8b2 <_strtod_l+0x89a>
 800d8de:	4613      	mov	r3, r2
 800d8e0:	e7e7      	b.n	800d8b2 <_strtod_l+0x89a>
 800d8e2:	ea53 0308 	orrs.w	r3, r3, r8
 800d8e6:	d08a      	beq.n	800d7fe <_strtod_l+0x7e6>
 800d8e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d8ea:	b1e3      	cbz	r3, 800d926 <_strtod_l+0x90e>
 800d8ec:	ea13 0f0a 	tst.w	r3, sl
 800d8f0:	d0ee      	beq.n	800d8d0 <_strtod_l+0x8b8>
 800d8f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8f4:	9a04      	ldr	r2, [sp, #16]
 800d8f6:	4640      	mov	r0, r8
 800d8f8:	4649      	mov	r1, r9
 800d8fa:	b1c3      	cbz	r3, 800d92e <_strtod_l+0x916>
 800d8fc:	f7ff fb6f 	bl	800cfde <sulp>
 800d900:	4602      	mov	r2, r0
 800d902:	460b      	mov	r3, r1
 800d904:	ec51 0b18 	vmov	r0, r1, d8
 800d908:	f7f2 fcc0 	bl	800028c <__adddf3>
 800d90c:	4680      	mov	r8, r0
 800d90e:	4689      	mov	r9, r1
 800d910:	e7de      	b.n	800d8d0 <_strtod_l+0x8b8>
 800d912:	4013      	ands	r3, r2
 800d914:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d918:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800d91c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d920:	f04f 38ff 	mov.w	r8, #4294967295
 800d924:	e7d4      	b.n	800d8d0 <_strtod_l+0x8b8>
 800d926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d928:	ea13 0f08 	tst.w	r3, r8
 800d92c:	e7e0      	b.n	800d8f0 <_strtod_l+0x8d8>
 800d92e:	f7ff fb56 	bl	800cfde <sulp>
 800d932:	4602      	mov	r2, r0
 800d934:	460b      	mov	r3, r1
 800d936:	ec51 0b18 	vmov	r0, r1, d8
 800d93a:	f7f2 fca5 	bl	8000288 <__aeabi_dsub>
 800d93e:	2200      	movs	r2, #0
 800d940:	2300      	movs	r3, #0
 800d942:	4680      	mov	r8, r0
 800d944:	4689      	mov	r9, r1
 800d946:	f7f3 f8bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800d94a:	2800      	cmp	r0, #0
 800d94c:	d0c0      	beq.n	800d8d0 <_strtod_l+0x8b8>
 800d94e:	e618      	b.n	800d582 <_strtod_l+0x56a>
 800d950:	fffffc02 	.word	0xfffffc02
 800d954:	7ff00000 	.word	0x7ff00000
 800d958:	39500000 	.word	0x39500000
 800d95c:	000fffff 	.word	0x000fffff
 800d960:	7fefffff 	.word	0x7fefffff
 800d964:	08011238 	.word	0x08011238
 800d968:	4659      	mov	r1, fp
 800d96a:	4628      	mov	r0, r5
 800d96c:	f7ff fac0 	bl	800cef0 <__ratio>
 800d970:	ec57 6b10 	vmov	r6, r7, d0
 800d974:	ee10 0a10 	vmov	r0, s0
 800d978:	2200      	movs	r2, #0
 800d97a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d97e:	4639      	mov	r1, r7
 800d980:	f7f3 f8b6 	bl	8000af0 <__aeabi_dcmple>
 800d984:	2800      	cmp	r0, #0
 800d986:	d071      	beq.n	800da6c <_strtod_l+0xa54>
 800d988:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d17c      	bne.n	800da88 <_strtod_l+0xa70>
 800d98e:	f1b8 0f00 	cmp.w	r8, #0
 800d992:	d15a      	bne.n	800da4a <_strtod_l+0xa32>
 800d994:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d15d      	bne.n	800da58 <_strtod_l+0xa40>
 800d99c:	4b90      	ldr	r3, [pc, #576]	; (800dbe0 <_strtod_l+0xbc8>)
 800d99e:	2200      	movs	r2, #0
 800d9a0:	4630      	mov	r0, r6
 800d9a2:	4639      	mov	r1, r7
 800d9a4:	f7f3 f89a 	bl	8000adc <__aeabi_dcmplt>
 800d9a8:	2800      	cmp	r0, #0
 800d9aa:	d15c      	bne.n	800da66 <_strtod_l+0xa4e>
 800d9ac:	4630      	mov	r0, r6
 800d9ae:	4639      	mov	r1, r7
 800d9b0:	4b8c      	ldr	r3, [pc, #560]	; (800dbe4 <_strtod_l+0xbcc>)
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	f7f2 fe20 	bl	80005f8 <__aeabi_dmul>
 800d9b8:	4606      	mov	r6, r0
 800d9ba:	460f      	mov	r7, r1
 800d9bc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d9c0:	9606      	str	r6, [sp, #24]
 800d9c2:	9307      	str	r3, [sp, #28]
 800d9c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d9c8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d9cc:	4b86      	ldr	r3, [pc, #536]	; (800dbe8 <_strtod_l+0xbd0>)
 800d9ce:	ea0a 0303 	and.w	r3, sl, r3
 800d9d2:	930d      	str	r3, [sp, #52]	; 0x34
 800d9d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d9d6:	4b85      	ldr	r3, [pc, #532]	; (800dbec <_strtod_l+0xbd4>)
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	f040 8090 	bne.w	800dafe <_strtod_l+0xae6>
 800d9de:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800d9e2:	ec49 8b10 	vmov	d0, r8, r9
 800d9e6:	f7ff f9b9 	bl	800cd5c <__ulp>
 800d9ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d9ee:	ec51 0b10 	vmov	r0, r1, d0
 800d9f2:	f7f2 fe01 	bl	80005f8 <__aeabi_dmul>
 800d9f6:	4642      	mov	r2, r8
 800d9f8:	464b      	mov	r3, r9
 800d9fa:	f7f2 fc47 	bl	800028c <__adddf3>
 800d9fe:	460b      	mov	r3, r1
 800da00:	4979      	ldr	r1, [pc, #484]	; (800dbe8 <_strtod_l+0xbd0>)
 800da02:	4a7b      	ldr	r2, [pc, #492]	; (800dbf0 <_strtod_l+0xbd8>)
 800da04:	4019      	ands	r1, r3
 800da06:	4291      	cmp	r1, r2
 800da08:	4680      	mov	r8, r0
 800da0a:	d944      	bls.n	800da96 <_strtod_l+0xa7e>
 800da0c:	ee18 2a90 	vmov	r2, s17
 800da10:	4b78      	ldr	r3, [pc, #480]	; (800dbf4 <_strtod_l+0xbdc>)
 800da12:	429a      	cmp	r2, r3
 800da14:	d104      	bne.n	800da20 <_strtod_l+0xa08>
 800da16:	ee18 3a10 	vmov	r3, s16
 800da1a:	3301      	adds	r3, #1
 800da1c:	f43f ad40 	beq.w	800d4a0 <_strtod_l+0x488>
 800da20:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800dbf4 <_strtod_l+0xbdc>
 800da24:	f04f 38ff 	mov.w	r8, #4294967295
 800da28:	9916      	ldr	r1, [sp, #88]	; 0x58
 800da2a:	4620      	mov	r0, r4
 800da2c:	f7fe fe6a 	bl	800c704 <_Bfree>
 800da30:	9905      	ldr	r1, [sp, #20]
 800da32:	4620      	mov	r0, r4
 800da34:	f7fe fe66 	bl	800c704 <_Bfree>
 800da38:	4659      	mov	r1, fp
 800da3a:	4620      	mov	r0, r4
 800da3c:	f7fe fe62 	bl	800c704 <_Bfree>
 800da40:	4629      	mov	r1, r5
 800da42:	4620      	mov	r0, r4
 800da44:	f7fe fe5e 	bl	800c704 <_Bfree>
 800da48:	e609      	b.n	800d65e <_strtod_l+0x646>
 800da4a:	f1b8 0f01 	cmp.w	r8, #1
 800da4e:	d103      	bne.n	800da58 <_strtod_l+0xa40>
 800da50:	f1b9 0f00 	cmp.w	r9, #0
 800da54:	f43f ad95 	beq.w	800d582 <_strtod_l+0x56a>
 800da58:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800dbb0 <_strtod_l+0xb98>
 800da5c:	4f60      	ldr	r7, [pc, #384]	; (800dbe0 <_strtod_l+0xbc8>)
 800da5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800da62:	2600      	movs	r6, #0
 800da64:	e7ae      	b.n	800d9c4 <_strtod_l+0x9ac>
 800da66:	4f5f      	ldr	r7, [pc, #380]	; (800dbe4 <_strtod_l+0xbcc>)
 800da68:	2600      	movs	r6, #0
 800da6a:	e7a7      	b.n	800d9bc <_strtod_l+0x9a4>
 800da6c:	4b5d      	ldr	r3, [pc, #372]	; (800dbe4 <_strtod_l+0xbcc>)
 800da6e:	4630      	mov	r0, r6
 800da70:	4639      	mov	r1, r7
 800da72:	2200      	movs	r2, #0
 800da74:	f7f2 fdc0 	bl	80005f8 <__aeabi_dmul>
 800da78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da7a:	4606      	mov	r6, r0
 800da7c:	460f      	mov	r7, r1
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d09c      	beq.n	800d9bc <_strtod_l+0x9a4>
 800da82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800da86:	e79d      	b.n	800d9c4 <_strtod_l+0x9ac>
 800da88:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800dbb8 <_strtod_l+0xba0>
 800da8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800da90:	ec57 6b17 	vmov	r6, r7, d7
 800da94:	e796      	b.n	800d9c4 <_strtod_l+0x9ac>
 800da96:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800da9a:	9b04      	ldr	r3, [sp, #16]
 800da9c:	46ca      	mov	sl, r9
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d1c2      	bne.n	800da28 <_strtod_l+0xa10>
 800daa2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800daa6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800daa8:	0d1b      	lsrs	r3, r3, #20
 800daaa:	051b      	lsls	r3, r3, #20
 800daac:	429a      	cmp	r2, r3
 800daae:	d1bb      	bne.n	800da28 <_strtod_l+0xa10>
 800dab0:	4630      	mov	r0, r6
 800dab2:	4639      	mov	r1, r7
 800dab4:	f7f3 f900 	bl	8000cb8 <__aeabi_d2lz>
 800dab8:	f7f2 fd70 	bl	800059c <__aeabi_l2d>
 800dabc:	4602      	mov	r2, r0
 800dabe:	460b      	mov	r3, r1
 800dac0:	4630      	mov	r0, r6
 800dac2:	4639      	mov	r1, r7
 800dac4:	f7f2 fbe0 	bl	8000288 <__aeabi_dsub>
 800dac8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800daca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dace:	ea43 0308 	orr.w	r3, r3, r8
 800dad2:	4313      	orrs	r3, r2
 800dad4:	4606      	mov	r6, r0
 800dad6:	460f      	mov	r7, r1
 800dad8:	d054      	beq.n	800db84 <_strtod_l+0xb6c>
 800dada:	a339      	add	r3, pc, #228	; (adr r3, 800dbc0 <_strtod_l+0xba8>)
 800dadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae0:	f7f2 fffc 	bl	8000adc <__aeabi_dcmplt>
 800dae4:	2800      	cmp	r0, #0
 800dae6:	f47f ace5 	bne.w	800d4b4 <_strtod_l+0x49c>
 800daea:	a337      	add	r3, pc, #220	; (adr r3, 800dbc8 <_strtod_l+0xbb0>)
 800daec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf0:	4630      	mov	r0, r6
 800daf2:	4639      	mov	r1, r7
 800daf4:	f7f3 f810 	bl	8000b18 <__aeabi_dcmpgt>
 800daf8:	2800      	cmp	r0, #0
 800dafa:	d095      	beq.n	800da28 <_strtod_l+0xa10>
 800dafc:	e4da      	b.n	800d4b4 <_strtod_l+0x49c>
 800dafe:	9b04      	ldr	r3, [sp, #16]
 800db00:	b333      	cbz	r3, 800db50 <_strtod_l+0xb38>
 800db02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db04:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800db08:	d822      	bhi.n	800db50 <_strtod_l+0xb38>
 800db0a:	a331      	add	r3, pc, #196	; (adr r3, 800dbd0 <_strtod_l+0xbb8>)
 800db0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db10:	4630      	mov	r0, r6
 800db12:	4639      	mov	r1, r7
 800db14:	f7f2 ffec 	bl	8000af0 <__aeabi_dcmple>
 800db18:	b1a0      	cbz	r0, 800db44 <_strtod_l+0xb2c>
 800db1a:	4639      	mov	r1, r7
 800db1c:	4630      	mov	r0, r6
 800db1e:	f7f3 f843 	bl	8000ba8 <__aeabi_d2uiz>
 800db22:	2801      	cmp	r0, #1
 800db24:	bf38      	it	cc
 800db26:	2001      	movcc	r0, #1
 800db28:	f7f2 fcec 	bl	8000504 <__aeabi_ui2d>
 800db2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db2e:	4606      	mov	r6, r0
 800db30:	460f      	mov	r7, r1
 800db32:	bb23      	cbnz	r3, 800db7e <_strtod_l+0xb66>
 800db34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db38:	9010      	str	r0, [sp, #64]	; 0x40
 800db3a:	9311      	str	r3, [sp, #68]	; 0x44
 800db3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800db40:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800db44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800db48:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800db4c:	1a9b      	subs	r3, r3, r2
 800db4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800db50:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800db54:	eeb0 0a48 	vmov.f32	s0, s16
 800db58:	eef0 0a68 	vmov.f32	s1, s17
 800db5c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800db60:	f7ff f8fc 	bl	800cd5c <__ulp>
 800db64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800db68:	ec53 2b10 	vmov	r2, r3, d0
 800db6c:	f7f2 fd44 	bl	80005f8 <__aeabi_dmul>
 800db70:	ec53 2b18 	vmov	r2, r3, d8
 800db74:	f7f2 fb8a 	bl	800028c <__adddf3>
 800db78:	4680      	mov	r8, r0
 800db7a:	4689      	mov	r9, r1
 800db7c:	e78d      	b.n	800da9a <_strtod_l+0xa82>
 800db7e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800db82:	e7db      	b.n	800db3c <_strtod_l+0xb24>
 800db84:	a314      	add	r3, pc, #80	; (adr r3, 800dbd8 <_strtod_l+0xbc0>)
 800db86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db8a:	f7f2 ffa7 	bl	8000adc <__aeabi_dcmplt>
 800db8e:	e7b3      	b.n	800daf8 <_strtod_l+0xae0>
 800db90:	2300      	movs	r3, #0
 800db92:	930a      	str	r3, [sp, #40]	; 0x28
 800db94:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800db96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db98:	6013      	str	r3, [r2, #0]
 800db9a:	f7ff ba7c 	b.w	800d096 <_strtod_l+0x7e>
 800db9e:	2a65      	cmp	r2, #101	; 0x65
 800dba0:	f43f ab75 	beq.w	800d28e <_strtod_l+0x276>
 800dba4:	2a45      	cmp	r2, #69	; 0x45
 800dba6:	f43f ab72 	beq.w	800d28e <_strtod_l+0x276>
 800dbaa:	2301      	movs	r3, #1
 800dbac:	f7ff bbaa 	b.w	800d304 <_strtod_l+0x2ec>
 800dbb0:	00000000 	.word	0x00000000
 800dbb4:	bff00000 	.word	0xbff00000
 800dbb8:	00000000 	.word	0x00000000
 800dbbc:	3ff00000 	.word	0x3ff00000
 800dbc0:	94a03595 	.word	0x94a03595
 800dbc4:	3fdfffff 	.word	0x3fdfffff
 800dbc8:	35afe535 	.word	0x35afe535
 800dbcc:	3fe00000 	.word	0x3fe00000
 800dbd0:	ffc00000 	.word	0xffc00000
 800dbd4:	41dfffff 	.word	0x41dfffff
 800dbd8:	94a03595 	.word	0x94a03595
 800dbdc:	3fcfffff 	.word	0x3fcfffff
 800dbe0:	3ff00000 	.word	0x3ff00000
 800dbe4:	3fe00000 	.word	0x3fe00000
 800dbe8:	7ff00000 	.word	0x7ff00000
 800dbec:	7fe00000 	.word	0x7fe00000
 800dbf0:	7c9fffff 	.word	0x7c9fffff
 800dbf4:	7fefffff 	.word	0x7fefffff

0800dbf8 <_strtod_r>:
 800dbf8:	4b01      	ldr	r3, [pc, #4]	; (800dc00 <_strtod_r+0x8>)
 800dbfa:	f7ff ba0d 	b.w	800d018 <_strtod_l>
 800dbfe:	bf00      	nop
 800dc00:	20000158 	.word	0x20000158

0800dc04 <_strtol_l.constprop.0>:
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc0a:	d001      	beq.n	800dc10 <_strtol_l.constprop.0+0xc>
 800dc0c:	2b24      	cmp	r3, #36	; 0x24
 800dc0e:	d906      	bls.n	800dc1e <_strtol_l.constprop.0+0x1a>
 800dc10:	f7fd fd8c 	bl	800b72c <__errno>
 800dc14:	2316      	movs	r3, #22
 800dc16:	6003      	str	r3, [r0, #0]
 800dc18:	2000      	movs	r0, #0
 800dc1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc1e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800dd04 <_strtol_l.constprop.0+0x100>
 800dc22:	460d      	mov	r5, r1
 800dc24:	462e      	mov	r6, r5
 800dc26:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc2a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800dc2e:	f017 0708 	ands.w	r7, r7, #8
 800dc32:	d1f7      	bne.n	800dc24 <_strtol_l.constprop.0+0x20>
 800dc34:	2c2d      	cmp	r4, #45	; 0x2d
 800dc36:	d132      	bne.n	800dc9e <_strtol_l.constprop.0+0x9a>
 800dc38:	782c      	ldrb	r4, [r5, #0]
 800dc3a:	2701      	movs	r7, #1
 800dc3c:	1cb5      	adds	r5, r6, #2
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d05b      	beq.n	800dcfa <_strtol_l.constprop.0+0xf6>
 800dc42:	2b10      	cmp	r3, #16
 800dc44:	d109      	bne.n	800dc5a <_strtol_l.constprop.0+0x56>
 800dc46:	2c30      	cmp	r4, #48	; 0x30
 800dc48:	d107      	bne.n	800dc5a <_strtol_l.constprop.0+0x56>
 800dc4a:	782c      	ldrb	r4, [r5, #0]
 800dc4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dc50:	2c58      	cmp	r4, #88	; 0x58
 800dc52:	d14d      	bne.n	800dcf0 <_strtol_l.constprop.0+0xec>
 800dc54:	786c      	ldrb	r4, [r5, #1]
 800dc56:	2310      	movs	r3, #16
 800dc58:	3502      	adds	r5, #2
 800dc5a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800dc5e:	f108 38ff 	add.w	r8, r8, #4294967295
 800dc62:	f04f 0e00 	mov.w	lr, #0
 800dc66:	fbb8 f9f3 	udiv	r9, r8, r3
 800dc6a:	4676      	mov	r6, lr
 800dc6c:	fb03 8a19 	mls	sl, r3, r9, r8
 800dc70:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800dc74:	f1bc 0f09 	cmp.w	ip, #9
 800dc78:	d816      	bhi.n	800dca8 <_strtol_l.constprop.0+0xa4>
 800dc7a:	4664      	mov	r4, ip
 800dc7c:	42a3      	cmp	r3, r4
 800dc7e:	dd24      	ble.n	800dcca <_strtol_l.constprop.0+0xc6>
 800dc80:	f1be 3fff 	cmp.w	lr, #4294967295
 800dc84:	d008      	beq.n	800dc98 <_strtol_l.constprop.0+0x94>
 800dc86:	45b1      	cmp	r9, r6
 800dc88:	d31c      	bcc.n	800dcc4 <_strtol_l.constprop.0+0xc0>
 800dc8a:	d101      	bne.n	800dc90 <_strtol_l.constprop.0+0x8c>
 800dc8c:	45a2      	cmp	sl, r4
 800dc8e:	db19      	blt.n	800dcc4 <_strtol_l.constprop.0+0xc0>
 800dc90:	fb06 4603 	mla	r6, r6, r3, r4
 800dc94:	f04f 0e01 	mov.w	lr, #1
 800dc98:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc9c:	e7e8      	b.n	800dc70 <_strtol_l.constprop.0+0x6c>
 800dc9e:	2c2b      	cmp	r4, #43	; 0x2b
 800dca0:	bf04      	itt	eq
 800dca2:	782c      	ldrbeq	r4, [r5, #0]
 800dca4:	1cb5      	addeq	r5, r6, #2
 800dca6:	e7ca      	b.n	800dc3e <_strtol_l.constprop.0+0x3a>
 800dca8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800dcac:	f1bc 0f19 	cmp.w	ip, #25
 800dcb0:	d801      	bhi.n	800dcb6 <_strtol_l.constprop.0+0xb2>
 800dcb2:	3c37      	subs	r4, #55	; 0x37
 800dcb4:	e7e2      	b.n	800dc7c <_strtol_l.constprop.0+0x78>
 800dcb6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800dcba:	f1bc 0f19 	cmp.w	ip, #25
 800dcbe:	d804      	bhi.n	800dcca <_strtol_l.constprop.0+0xc6>
 800dcc0:	3c57      	subs	r4, #87	; 0x57
 800dcc2:	e7db      	b.n	800dc7c <_strtol_l.constprop.0+0x78>
 800dcc4:	f04f 3eff 	mov.w	lr, #4294967295
 800dcc8:	e7e6      	b.n	800dc98 <_strtol_l.constprop.0+0x94>
 800dcca:	f1be 3fff 	cmp.w	lr, #4294967295
 800dcce:	d105      	bne.n	800dcdc <_strtol_l.constprop.0+0xd8>
 800dcd0:	2322      	movs	r3, #34	; 0x22
 800dcd2:	6003      	str	r3, [r0, #0]
 800dcd4:	4646      	mov	r6, r8
 800dcd6:	b942      	cbnz	r2, 800dcea <_strtol_l.constprop.0+0xe6>
 800dcd8:	4630      	mov	r0, r6
 800dcda:	e79e      	b.n	800dc1a <_strtol_l.constprop.0+0x16>
 800dcdc:	b107      	cbz	r7, 800dce0 <_strtol_l.constprop.0+0xdc>
 800dcde:	4276      	negs	r6, r6
 800dce0:	2a00      	cmp	r2, #0
 800dce2:	d0f9      	beq.n	800dcd8 <_strtol_l.constprop.0+0xd4>
 800dce4:	f1be 0f00 	cmp.w	lr, #0
 800dce8:	d000      	beq.n	800dcec <_strtol_l.constprop.0+0xe8>
 800dcea:	1e69      	subs	r1, r5, #1
 800dcec:	6011      	str	r1, [r2, #0]
 800dcee:	e7f3      	b.n	800dcd8 <_strtol_l.constprop.0+0xd4>
 800dcf0:	2430      	movs	r4, #48	; 0x30
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d1b1      	bne.n	800dc5a <_strtol_l.constprop.0+0x56>
 800dcf6:	2308      	movs	r3, #8
 800dcf8:	e7af      	b.n	800dc5a <_strtol_l.constprop.0+0x56>
 800dcfa:	2c30      	cmp	r4, #48	; 0x30
 800dcfc:	d0a5      	beq.n	800dc4a <_strtol_l.constprop.0+0x46>
 800dcfe:	230a      	movs	r3, #10
 800dd00:	e7ab      	b.n	800dc5a <_strtol_l.constprop.0+0x56>
 800dd02:	bf00      	nop
 800dd04:	08011261 	.word	0x08011261

0800dd08 <_strtol_r>:
 800dd08:	f7ff bf7c 	b.w	800dc04 <_strtol_l.constprop.0>

0800dd0c <__ssputs_r>:
 800dd0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd10:	688e      	ldr	r6, [r1, #8]
 800dd12:	461f      	mov	r7, r3
 800dd14:	42be      	cmp	r6, r7
 800dd16:	680b      	ldr	r3, [r1, #0]
 800dd18:	4682      	mov	sl, r0
 800dd1a:	460c      	mov	r4, r1
 800dd1c:	4690      	mov	r8, r2
 800dd1e:	d82c      	bhi.n	800dd7a <__ssputs_r+0x6e>
 800dd20:	898a      	ldrh	r2, [r1, #12]
 800dd22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dd26:	d026      	beq.n	800dd76 <__ssputs_r+0x6a>
 800dd28:	6965      	ldr	r5, [r4, #20]
 800dd2a:	6909      	ldr	r1, [r1, #16]
 800dd2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd30:	eba3 0901 	sub.w	r9, r3, r1
 800dd34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd38:	1c7b      	adds	r3, r7, #1
 800dd3a:	444b      	add	r3, r9
 800dd3c:	106d      	asrs	r5, r5, #1
 800dd3e:	429d      	cmp	r5, r3
 800dd40:	bf38      	it	cc
 800dd42:	461d      	movcc	r5, r3
 800dd44:	0553      	lsls	r3, r2, #21
 800dd46:	d527      	bpl.n	800dd98 <__ssputs_r+0x8c>
 800dd48:	4629      	mov	r1, r5
 800dd4a:	f7fe fc0f 	bl	800c56c <_malloc_r>
 800dd4e:	4606      	mov	r6, r0
 800dd50:	b360      	cbz	r0, 800ddac <__ssputs_r+0xa0>
 800dd52:	6921      	ldr	r1, [r4, #16]
 800dd54:	464a      	mov	r2, r9
 800dd56:	f000 fdaf 	bl	800e8b8 <memcpy>
 800dd5a:	89a3      	ldrh	r3, [r4, #12]
 800dd5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dd60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd64:	81a3      	strh	r3, [r4, #12]
 800dd66:	6126      	str	r6, [r4, #16]
 800dd68:	6165      	str	r5, [r4, #20]
 800dd6a:	444e      	add	r6, r9
 800dd6c:	eba5 0509 	sub.w	r5, r5, r9
 800dd70:	6026      	str	r6, [r4, #0]
 800dd72:	60a5      	str	r5, [r4, #8]
 800dd74:	463e      	mov	r6, r7
 800dd76:	42be      	cmp	r6, r7
 800dd78:	d900      	bls.n	800dd7c <__ssputs_r+0x70>
 800dd7a:	463e      	mov	r6, r7
 800dd7c:	6820      	ldr	r0, [r4, #0]
 800dd7e:	4632      	mov	r2, r6
 800dd80:	4641      	mov	r1, r8
 800dd82:	f000 fd5c 	bl	800e83e <memmove>
 800dd86:	68a3      	ldr	r3, [r4, #8]
 800dd88:	1b9b      	subs	r3, r3, r6
 800dd8a:	60a3      	str	r3, [r4, #8]
 800dd8c:	6823      	ldr	r3, [r4, #0]
 800dd8e:	4433      	add	r3, r6
 800dd90:	6023      	str	r3, [r4, #0]
 800dd92:	2000      	movs	r0, #0
 800dd94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd98:	462a      	mov	r2, r5
 800dd9a:	f001 f942 	bl	800f022 <_realloc_r>
 800dd9e:	4606      	mov	r6, r0
 800dda0:	2800      	cmp	r0, #0
 800dda2:	d1e0      	bne.n	800dd66 <__ssputs_r+0x5a>
 800dda4:	6921      	ldr	r1, [r4, #16]
 800dda6:	4650      	mov	r0, sl
 800dda8:	f7fe fb6c 	bl	800c484 <_free_r>
 800ddac:	230c      	movs	r3, #12
 800ddae:	f8ca 3000 	str.w	r3, [sl]
 800ddb2:	89a3      	ldrh	r3, [r4, #12]
 800ddb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddb8:	81a3      	strh	r3, [r4, #12]
 800ddba:	f04f 30ff 	mov.w	r0, #4294967295
 800ddbe:	e7e9      	b.n	800dd94 <__ssputs_r+0x88>

0800ddc0 <_svfiprintf_r>:
 800ddc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddc4:	4698      	mov	r8, r3
 800ddc6:	898b      	ldrh	r3, [r1, #12]
 800ddc8:	061b      	lsls	r3, r3, #24
 800ddca:	b09d      	sub	sp, #116	; 0x74
 800ddcc:	4607      	mov	r7, r0
 800ddce:	460d      	mov	r5, r1
 800ddd0:	4614      	mov	r4, r2
 800ddd2:	d50e      	bpl.n	800ddf2 <_svfiprintf_r+0x32>
 800ddd4:	690b      	ldr	r3, [r1, #16]
 800ddd6:	b963      	cbnz	r3, 800ddf2 <_svfiprintf_r+0x32>
 800ddd8:	2140      	movs	r1, #64	; 0x40
 800ddda:	f7fe fbc7 	bl	800c56c <_malloc_r>
 800ddde:	6028      	str	r0, [r5, #0]
 800dde0:	6128      	str	r0, [r5, #16]
 800dde2:	b920      	cbnz	r0, 800ddee <_svfiprintf_r+0x2e>
 800dde4:	230c      	movs	r3, #12
 800dde6:	603b      	str	r3, [r7, #0]
 800dde8:	f04f 30ff 	mov.w	r0, #4294967295
 800ddec:	e0d0      	b.n	800df90 <_svfiprintf_r+0x1d0>
 800ddee:	2340      	movs	r3, #64	; 0x40
 800ddf0:	616b      	str	r3, [r5, #20]
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	9309      	str	r3, [sp, #36]	; 0x24
 800ddf6:	2320      	movs	r3, #32
 800ddf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ddfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800de00:	2330      	movs	r3, #48	; 0x30
 800de02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dfa8 <_svfiprintf_r+0x1e8>
 800de06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de0a:	f04f 0901 	mov.w	r9, #1
 800de0e:	4623      	mov	r3, r4
 800de10:	469a      	mov	sl, r3
 800de12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de16:	b10a      	cbz	r2, 800de1c <_svfiprintf_r+0x5c>
 800de18:	2a25      	cmp	r2, #37	; 0x25
 800de1a:	d1f9      	bne.n	800de10 <_svfiprintf_r+0x50>
 800de1c:	ebba 0b04 	subs.w	fp, sl, r4
 800de20:	d00b      	beq.n	800de3a <_svfiprintf_r+0x7a>
 800de22:	465b      	mov	r3, fp
 800de24:	4622      	mov	r2, r4
 800de26:	4629      	mov	r1, r5
 800de28:	4638      	mov	r0, r7
 800de2a:	f7ff ff6f 	bl	800dd0c <__ssputs_r>
 800de2e:	3001      	adds	r0, #1
 800de30:	f000 80a9 	beq.w	800df86 <_svfiprintf_r+0x1c6>
 800de34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de36:	445a      	add	r2, fp
 800de38:	9209      	str	r2, [sp, #36]	; 0x24
 800de3a:	f89a 3000 	ldrb.w	r3, [sl]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	f000 80a1 	beq.w	800df86 <_svfiprintf_r+0x1c6>
 800de44:	2300      	movs	r3, #0
 800de46:	f04f 32ff 	mov.w	r2, #4294967295
 800de4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de4e:	f10a 0a01 	add.w	sl, sl, #1
 800de52:	9304      	str	r3, [sp, #16]
 800de54:	9307      	str	r3, [sp, #28]
 800de56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de5a:	931a      	str	r3, [sp, #104]	; 0x68
 800de5c:	4654      	mov	r4, sl
 800de5e:	2205      	movs	r2, #5
 800de60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de64:	4850      	ldr	r0, [pc, #320]	; (800dfa8 <_svfiprintf_r+0x1e8>)
 800de66:	f7f2 f9b3 	bl	80001d0 <memchr>
 800de6a:	9a04      	ldr	r2, [sp, #16]
 800de6c:	b9d8      	cbnz	r0, 800dea6 <_svfiprintf_r+0xe6>
 800de6e:	06d0      	lsls	r0, r2, #27
 800de70:	bf44      	itt	mi
 800de72:	2320      	movmi	r3, #32
 800de74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de78:	0711      	lsls	r1, r2, #28
 800de7a:	bf44      	itt	mi
 800de7c:	232b      	movmi	r3, #43	; 0x2b
 800de7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de82:	f89a 3000 	ldrb.w	r3, [sl]
 800de86:	2b2a      	cmp	r3, #42	; 0x2a
 800de88:	d015      	beq.n	800deb6 <_svfiprintf_r+0xf6>
 800de8a:	9a07      	ldr	r2, [sp, #28]
 800de8c:	4654      	mov	r4, sl
 800de8e:	2000      	movs	r0, #0
 800de90:	f04f 0c0a 	mov.w	ip, #10
 800de94:	4621      	mov	r1, r4
 800de96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de9a:	3b30      	subs	r3, #48	; 0x30
 800de9c:	2b09      	cmp	r3, #9
 800de9e:	d94d      	bls.n	800df3c <_svfiprintf_r+0x17c>
 800dea0:	b1b0      	cbz	r0, 800ded0 <_svfiprintf_r+0x110>
 800dea2:	9207      	str	r2, [sp, #28]
 800dea4:	e014      	b.n	800ded0 <_svfiprintf_r+0x110>
 800dea6:	eba0 0308 	sub.w	r3, r0, r8
 800deaa:	fa09 f303 	lsl.w	r3, r9, r3
 800deae:	4313      	orrs	r3, r2
 800deb0:	9304      	str	r3, [sp, #16]
 800deb2:	46a2      	mov	sl, r4
 800deb4:	e7d2      	b.n	800de5c <_svfiprintf_r+0x9c>
 800deb6:	9b03      	ldr	r3, [sp, #12]
 800deb8:	1d19      	adds	r1, r3, #4
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	9103      	str	r1, [sp, #12]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	bfbb      	ittet	lt
 800dec2:	425b      	neglt	r3, r3
 800dec4:	f042 0202 	orrlt.w	r2, r2, #2
 800dec8:	9307      	strge	r3, [sp, #28]
 800deca:	9307      	strlt	r3, [sp, #28]
 800decc:	bfb8      	it	lt
 800dece:	9204      	strlt	r2, [sp, #16]
 800ded0:	7823      	ldrb	r3, [r4, #0]
 800ded2:	2b2e      	cmp	r3, #46	; 0x2e
 800ded4:	d10c      	bne.n	800def0 <_svfiprintf_r+0x130>
 800ded6:	7863      	ldrb	r3, [r4, #1]
 800ded8:	2b2a      	cmp	r3, #42	; 0x2a
 800deda:	d134      	bne.n	800df46 <_svfiprintf_r+0x186>
 800dedc:	9b03      	ldr	r3, [sp, #12]
 800dede:	1d1a      	adds	r2, r3, #4
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	9203      	str	r2, [sp, #12]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	bfb8      	it	lt
 800dee8:	f04f 33ff 	movlt.w	r3, #4294967295
 800deec:	3402      	adds	r4, #2
 800deee:	9305      	str	r3, [sp, #20]
 800def0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800dfb8 <_svfiprintf_r+0x1f8>
 800def4:	7821      	ldrb	r1, [r4, #0]
 800def6:	2203      	movs	r2, #3
 800def8:	4650      	mov	r0, sl
 800defa:	f7f2 f969 	bl	80001d0 <memchr>
 800defe:	b138      	cbz	r0, 800df10 <_svfiprintf_r+0x150>
 800df00:	9b04      	ldr	r3, [sp, #16]
 800df02:	eba0 000a 	sub.w	r0, r0, sl
 800df06:	2240      	movs	r2, #64	; 0x40
 800df08:	4082      	lsls	r2, r0
 800df0a:	4313      	orrs	r3, r2
 800df0c:	3401      	adds	r4, #1
 800df0e:	9304      	str	r3, [sp, #16]
 800df10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df14:	4825      	ldr	r0, [pc, #148]	; (800dfac <_svfiprintf_r+0x1ec>)
 800df16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df1a:	2206      	movs	r2, #6
 800df1c:	f7f2 f958 	bl	80001d0 <memchr>
 800df20:	2800      	cmp	r0, #0
 800df22:	d038      	beq.n	800df96 <_svfiprintf_r+0x1d6>
 800df24:	4b22      	ldr	r3, [pc, #136]	; (800dfb0 <_svfiprintf_r+0x1f0>)
 800df26:	bb1b      	cbnz	r3, 800df70 <_svfiprintf_r+0x1b0>
 800df28:	9b03      	ldr	r3, [sp, #12]
 800df2a:	3307      	adds	r3, #7
 800df2c:	f023 0307 	bic.w	r3, r3, #7
 800df30:	3308      	adds	r3, #8
 800df32:	9303      	str	r3, [sp, #12]
 800df34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df36:	4433      	add	r3, r6
 800df38:	9309      	str	r3, [sp, #36]	; 0x24
 800df3a:	e768      	b.n	800de0e <_svfiprintf_r+0x4e>
 800df3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800df40:	460c      	mov	r4, r1
 800df42:	2001      	movs	r0, #1
 800df44:	e7a6      	b.n	800de94 <_svfiprintf_r+0xd4>
 800df46:	2300      	movs	r3, #0
 800df48:	3401      	adds	r4, #1
 800df4a:	9305      	str	r3, [sp, #20]
 800df4c:	4619      	mov	r1, r3
 800df4e:	f04f 0c0a 	mov.w	ip, #10
 800df52:	4620      	mov	r0, r4
 800df54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df58:	3a30      	subs	r2, #48	; 0x30
 800df5a:	2a09      	cmp	r2, #9
 800df5c:	d903      	bls.n	800df66 <_svfiprintf_r+0x1a6>
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d0c6      	beq.n	800def0 <_svfiprintf_r+0x130>
 800df62:	9105      	str	r1, [sp, #20]
 800df64:	e7c4      	b.n	800def0 <_svfiprintf_r+0x130>
 800df66:	fb0c 2101 	mla	r1, ip, r1, r2
 800df6a:	4604      	mov	r4, r0
 800df6c:	2301      	movs	r3, #1
 800df6e:	e7f0      	b.n	800df52 <_svfiprintf_r+0x192>
 800df70:	ab03      	add	r3, sp, #12
 800df72:	9300      	str	r3, [sp, #0]
 800df74:	462a      	mov	r2, r5
 800df76:	4b0f      	ldr	r3, [pc, #60]	; (800dfb4 <_svfiprintf_r+0x1f4>)
 800df78:	a904      	add	r1, sp, #16
 800df7a:	4638      	mov	r0, r7
 800df7c:	f7fc fc02 	bl	800a784 <_printf_float>
 800df80:	1c42      	adds	r2, r0, #1
 800df82:	4606      	mov	r6, r0
 800df84:	d1d6      	bne.n	800df34 <_svfiprintf_r+0x174>
 800df86:	89ab      	ldrh	r3, [r5, #12]
 800df88:	065b      	lsls	r3, r3, #25
 800df8a:	f53f af2d 	bmi.w	800dde8 <_svfiprintf_r+0x28>
 800df8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df90:	b01d      	add	sp, #116	; 0x74
 800df92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df96:	ab03      	add	r3, sp, #12
 800df98:	9300      	str	r3, [sp, #0]
 800df9a:	462a      	mov	r2, r5
 800df9c:	4b05      	ldr	r3, [pc, #20]	; (800dfb4 <_svfiprintf_r+0x1f4>)
 800df9e:	a904      	add	r1, sp, #16
 800dfa0:	4638      	mov	r0, r7
 800dfa2:	f7fc fe93 	bl	800accc <_printf_i>
 800dfa6:	e7eb      	b.n	800df80 <_svfiprintf_r+0x1c0>
 800dfa8:	08011361 	.word	0x08011361
 800dfac:	0801136b 	.word	0x0801136b
 800dfb0:	0800a785 	.word	0x0800a785
 800dfb4:	0800dd0d 	.word	0x0800dd0d
 800dfb8:	08011367 	.word	0x08011367

0800dfbc <_sungetc_r>:
 800dfbc:	b538      	push	{r3, r4, r5, lr}
 800dfbe:	1c4b      	adds	r3, r1, #1
 800dfc0:	4614      	mov	r4, r2
 800dfc2:	d103      	bne.n	800dfcc <_sungetc_r+0x10>
 800dfc4:	f04f 35ff 	mov.w	r5, #4294967295
 800dfc8:	4628      	mov	r0, r5
 800dfca:	bd38      	pop	{r3, r4, r5, pc}
 800dfcc:	8993      	ldrh	r3, [r2, #12]
 800dfce:	f023 0320 	bic.w	r3, r3, #32
 800dfd2:	8193      	strh	r3, [r2, #12]
 800dfd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dfd6:	6852      	ldr	r2, [r2, #4]
 800dfd8:	b2cd      	uxtb	r5, r1
 800dfda:	b18b      	cbz	r3, 800e000 <_sungetc_r+0x44>
 800dfdc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dfde:	4293      	cmp	r3, r2
 800dfe0:	dd08      	ble.n	800dff4 <_sungetc_r+0x38>
 800dfe2:	6823      	ldr	r3, [r4, #0]
 800dfe4:	1e5a      	subs	r2, r3, #1
 800dfe6:	6022      	str	r2, [r4, #0]
 800dfe8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800dfec:	6863      	ldr	r3, [r4, #4]
 800dfee:	3301      	adds	r3, #1
 800dff0:	6063      	str	r3, [r4, #4]
 800dff2:	e7e9      	b.n	800dfc8 <_sungetc_r+0xc>
 800dff4:	4621      	mov	r1, r4
 800dff6:	f000 fbe8 	bl	800e7ca <__submore>
 800dffa:	2800      	cmp	r0, #0
 800dffc:	d0f1      	beq.n	800dfe2 <_sungetc_r+0x26>
 800dffe:	e7e1      	b.n	800dfc4 <_sungetc_r+0x8>
 800e000:	6921      	ldr	r1, [r4, #16]
 800e002:	6823      	ldr	r3, [r4, #0]
 800e004:	b151      	cbz	r1, 800e01c <_sungetc_r+0x60>
 800e006:	4299      	cmp	r1, r3
 800e008:	d208      	bcs.n	800e01c <_sungetc_r+0x60>
 800e00a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e00e:	42a9      	cmp	r1, r5
 800e010:	d104      	bne.n	800e01c <_sungetc_r+0x60>
 800e012:	3b01      	subs	r3, #1
 800e014:	3201      	adds	r2, #1
 800e016:	6023      	str	r3, [r4, #0]
 800e018:	6062      	str	r2, [r4, #4]
 800e01a:	e7d5      	b.n	800dfc8 <_sungetc_r+0xc>
 800e01c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e020:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e024:	6363      	str	r3, [r4, #52]	; 0x34
 800e026:	2303      	movs	r3, #3
 800e028:	63a3      	str	r3, [r4, #56]	; 0x38
 800e02a:	4623      	mov	r3, r4
 800e02c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e030:	6023      	str	r3, [r4, #0]
 800e032:	2301      	movs	r3, #1
 800e034:	e7dc      	b.n	800dff0 <_sungetc_r+0x34>

0800e036 <__ssrefill_r>:
 800e036:	b510      	push	{r4, lr}
 800e038:	460c      	mov	r4, r1
 800e03a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e03c:	b169      	cbz	r1, 800e05a <__ssrefill_r+0x24>
 800e03e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e042:	4299      	cmp	r1, r3
 800e044:	d001      	beq.n	800e04a <__ssrefill_r+0x14>
 800e046:	f7fe fa1d 	bl	800c484 <_free_r>
 800e04a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e04c:	6063      	str	r3, [r4, #4]
 800e04e:	2000      	movs	r0, #0
 800e050:	6360      	str	r0, [r4, #52]	; 0x34
 800e052:	b113      	cbz	r3, 800e05a <__ssrefill_r+0x24>
 800e054:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e056:	6023      	str	r3, [r4, #0]
 800e058:	bd10      	pop	{r4, pc}
 800e05a:	6923      	ldr	r3, [r4, #16]
 800e05c:	6023      	str	r3, [r4, #0]
 800e05e:	2300      	movs	r3, #0
 800e060:	6063      	str	r3, [r4, #4]
 800e062:	89a3      	ldrh	r3, [r4, #12]
 800e064:	f043 0320 	orr.w	r3, r3, #32
 800e068:	81a3      	strh	r3, [r4, #12]
 800e06a:	f04f 30ff 	mov.w	r0, #4294967295
 800e06e:	e7f3      	b.n	800e058 <__ssrefill_r+0x22>

0800e070 <__ssvfiscanf_r>:
 800e070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e074:	460c      	mov	r4, r1
 800e076:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e07a:	2100      	movs	r1, #0
 800e07c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e080:	49a6      	ldr	r1, [pc, #664]	; (800e31c <__ssvfiscanf_r+0x2ac>)
 800e082:	91a0      	str	r1, [sp, #640]	; 0x280
 800e084:	f10d 0804 	add.w	r8, sp, #4
 800e088:	49a5      	ldr	r1, [pc, #660]	; (800e320 <__ssvfiscanf_r+0x2b0>)
 800e08a:	4fa6      	ldr	r7, [pc, #664]	; (800e324 <__ssvfiscanf_r+0x2b4>)
 800e08c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800e328 <__ssvfiscanf_r+0x2b8>
 800e090:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e094:	4606      	mov	r6, r0
 800e096:	91a1      	str	r1, [sp, #644]	; 0x284
 800e098:	9300      	str	r3, [sp, #0]
 800e09a:	7813      	ldrb	r3, [r2, #0]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	f000 815a 	beq.w	800e356 <__ssvfiscanf_r+0x2e6>
 800e0a2:	5cf9      	ldrb	r1, [r7, r3]
 800e0a4:	f011 0108 	ands.w	r1, r1, #8
 800e0a8:	f102 0501 	add.w	r5, r2, #1
 800e0ac:	d019      	beq.n	800e0e2 <__ssvfiscanf_r+0x72>
 800e0ae:	6863      	ldr	r3, [r4, #4]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	dd0f      	ble.n	800e0d4 <__ssvfiscanf_r+0x64>
 800e0b4:	6823      	ldr	r3, [r4, #0]
 800e0b6:	781a      	ldrb	r2, [r3, #0]
 800e0b8:	5cba      	ldrb	r2, [r7, r2]
 800e0ba:	0712      	lsls	r2, r2, #28
 800e0bc:	d401      	bmi.n	800e0c2 <__ssvfiscanf_r+0x52>
 800e0be:	462a      	mov	r2, r5
 800e0c0:	e7eb      	b.n	800e09a <__ssvfiscanf_r+0x2a>
 800e0c2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e0c4:	3201      	adds	r2, #1
 800e0c6:	9245      	str	r2, [sp, #276]	; 0x114
 800e0c8:	6862      	ldr	r2, [r4, #4]
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	3a01      	subs	r2, #1
 800e0ce:	6062      	str	r2, [r4, #4]
 800e0d0:	6023      	str	r3, [r4, #0]
 800e0d2:	e7ec      	b.n	800e0ae <__ssvfiscanf_r+0x3e>
 800e0d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e0d6:	4621      	mov	r1, r4
 800e0d8:	4630      	mov	r0, r6
 800e0da:	4798      	blx	r3
 800e0dc:	2800      	cmp	r0, #0
 800e0de:	d0e9      	beq.n	800e0b4 <__ssvfiscanf_r+0x44>
 800e0e0:	e7ed      	b.n	800e0be <__ssvfiscanf_r+0x4e>
 800e0e2:	2b25      	cmp	r3, #37	; 0x25
 800e0e4:	d012      	beq.n	800e10c <__ssvfiscanf_r+0x9c>
 800e0e6:	469a      	mov	sl, r3
 800e0e8:	6863      	ldr	r3, [r4, #4]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	f340 8091 	ble.w	800e212 <__ssvfiscanf_r+0x1a2>
 800e0f0:	6822      	ldr	r2, [r4, #0]
 800e0f2:	7813      	ldrb	r3, [r2, #0]
 800e0f4:	4553      	cmp	r3, sl
 800e0f6:	f040 812e 	bne.w	800e356 <__ssvfiscanf_r+0x2e6>
 800e0fa:	6863      	ldr	r3, [r4, #4]
 800e0fc:	3b01      	subs	r3, #1
 800e0fe:	6063      	str	r3, [r4, #4]
 800e100:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e102:	3201      	adds	r2, #1
 800e104:	3301      	adds	r3, #1
 800e106:	6022      	str	r2, [r4, #0]
 800e108:	9345      	str	r3, [sp, #276]	; 0x114
 800e10a:	e7d8      	b.n	800e0be <__ssvfiscanf_r+0x4e>
 800e10c:	9141      	str	r1, [sp, #260]	; 0x104
 800e10e:	9143      	str	r1, [sp, #268]	; 0x10c
 800e110:	7853      	ldrb	r3, [r2, #1]
 800e112:	2b2a      	cmp	r3, #42	; 0x2a
 800e114:	bf02      	ittt	eq
 800e116:	2310      	moveq	r3, #16
 800e118:	1c95      	addeq	r5, r2, #2
 800e11a:	9341      	streq	r3, [sp, #260]	; 0x104
 800e11c:	220a      	movs	r2, #10
 800e11e:	46aa      	mov	sl, r5
 800e120:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e124:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e128:	2b09      	cmp	r3, #9
 800e12a:	d91c      	bls.n	800e166 <__ssvfiscanf_r+0xf6>
 800e12c:	487e      	ldr	r0, [pc, #504]	; (800e328 <__ssvfiscanf_r+0x2b8>)
 800e12e:	2203      	movs	r2, #3
 800e130:	f7f2 f84e 	bl	80001d0 <memchr>
 800e134:	b138      	cbz	r0, 800e146 <__ssvfiscanf_r+0xd6>
 800e136:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e138:	eba0 0009 	sub.w	r0, r0, r9
 800e13c:	2301      	movs	r3, #1
 800e13e:	4083      	lsls	r3, r0
 800e140:	4313      	orrs	r3, r2
 800e142:	9341      	str	r3, [sp, #260]	; 0x104
 800e144:	4655      	mov	r5, sl
 800e146:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e14a:	2b78      	cmp	r3, #120	; 0x78
 800e14c:	d806      	bhi.n	800e15c <__ssvfiscanf_r+0xec>
 800e14e:	2b57      	cmp	r3, #87	; 0x57
 800e150:	d810      	bhi.n	800e174 <__ssvfiscanf_r+0x104>
 800e152:	2b25      	cmp	r3, #37	; 0x25
 800e154:	d0c7      	beq.n	800e0e6 <__ssvfiscanf_r+0x76>
 800e156:	d857      	bhi.n	800e208 <__ssvfiscanf_r+0x198>
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d065      	beq.n	800e228 <__ssvfiscanf_r+0x1b8>
 800e15c:	2303      	movs	r3, #3
 800e15e:	9347      	str	r3, [sp, #284]	; 0x11c
 800e160:	230a      	movs	r3, #10
 800e162:	9342      	str	r3, [sp, #264]	; 0x108
 800e164:	e076      	b.n	800e254 <__ssvfiscanf_r+0x1e4>
 800e166:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e168:	fb02 1103 	mla	r1, r2, r3, r1
 800e16c:	3930      	subs	r1, #48	; 0x30
 800e16e:	9143      	str	r1, [sp, #268]	; 0x10c
 800e170:	4655      	mov	r5, sl
 800e172:	e7d4      	b.n	800e11e <__ssvfiscanf_r+0xae>
 800e174:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e178:	2a20      	cmp	r2, #32
 800e17a:	d8ef      	bhi.n	800e15c <__ssvfiscanf_r+0xec>
 800e17c:	a101      	add	r1, pc, #4	; (adr r1, 800e184 <__ssvfiscanf_r+0x114>)
 800e17e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e182:	bf00      	nop
 800e184:	0800e237 	.word	0x0800e237
 800e188:	0800e15d 	.word	0x0800e15d
 800e18c:	0800e15d 	.word	0x0800e15d
 800e190:	0800e295 	.word	0x0800e295
 800e194:	0800e15d 	.word	0x0800e15d
 800e198:	0800e15d 	.word	0x0800e15d
 800e19c:	0800e15d 	.word	0x0800e15d
 800e1a0:	0800e15d 	.word	0x0800e15d
 800e1a4:	0800e15d 	.word	0x0800e15d
 800e1a8:	0800e15d 	.word	0x0800e15d
 800e1ac:	0800e15d 	.word	0x0800e15d
 800e1b0:	0800e2ab 	.word	0x0800e2ab
 800e1b4:	0800e291 	.word	0x0800e291
 800e1b8:	0800e20f 	.word	0x0800e20f
 800e1bc:	0800e20f 	.word	0x0800e20f
 800e1c0:	0800e20f 	.word	0x0800e20f
 800e1c4:	0800e15d 	.word	0x0800e15d
 800e1c8:	0800e24d 	.word	0x0800e24d
 800e1cc:	0800e15d 	.word	0x0800e15d
 800e1d0:	0800e15d 	.word	0x0800e15d
 800e1d4:	0800e15d 	.word	0x0800e15d
 800e1d8:	0800e15d 	.word	0x0800e15d
 800e1dc:	0800e2bb 	.word	0x0800e2bb
 800e1e0:	0800e289 	.word	0x0800e289
 800e1e4:	0800e22f 	.word	0x0800e22f
 800e1e8:	0800e15d 	.word	0x0800e15d
 800e1ec:	0800e15d 	.word	0x0800e15d
 800e1f0:	0800e2b7 	.word	0x0800e2b7
 800e1f4:	0800e15d 	.word	0x0800e15d
 800e1f8:	0800e291 	.word	0x0800e291
 800e1fc:	0800e15d 	.word	0x0800e15d
 800e200:	0800e15d 	.word	0x0800e15d
 800e204:	0800e237 	.word	0x0800e237
 800e208:	3b45      	subs	r3, #69	; 0x45
 800e20a:	2b02      	cmp	r3, #2
 800e20c:	d8a6      	bhi.n	800e15c <__ssvfiscanf_r+0xec>
 800e20e:	2305      	movs	r3, #5
 800e210:	e01f      	b.n	800e252 <__ssvfiscanf_r+0x1e2>
 800e212:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e214:	4621      	mov	r1, r4
 800e216:	4630      	mov	r0, r6
 800e218:	4798      	blx	r3
 800e21a:	2800      	cmp	r0, #0
 800e21c:	f43f af68 	beq.w	800e0f0 <__ssvfiscanf_r+0x80>
 800e220:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e222:	2800      	cmp	r0, #0
 800e224:	f040 808d 	bne.w	800e342 <__ssvfiscanf_r+0x2d2>
 800e228:	f04f 30ff 	mov.w	r0, #4294967295
 800e22c:	e08f      	b.n	800e34e <__ssvfiscanf_r+0x2de>
 800e22e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e230:	f042 0220 	orr.w	r2, r2, #32
 800e234:	9241      	str	r2, [sp, #260]	; 0x104
 800e236:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e23c:	9241      	str	r2, [sp, #260]	; 0x104
 800e23e:	2210      	movs	r2, #16
 800e240:	2b6f      	cmp	r3, #111	; 0x6f
 800e242:	9242      	str	r2, [sp, #264]	; 0x108
 800e244:	bf34      	ite	cc
 800e246:	2303      	movcc	r3, #3
 800e248:	2304      	movcs	r3, #4
 800e24a:	e002      	b.n	800e252 <__ssvfiscanf_r+0x1e2>
 800e24c:	2300      	movs	r3, #0
 800e24e:	9342      	str	r3, [sp, #264]	; 0x108
 800e250:	2303      	movs	r3, #3
 800e252:	9347      	str	r3, [sp, #284]	; 0x11c
 800e254:	6863      	ldr	r3, [r4, #4]
 800e256:	2b00      	cmp	r3, #0
 800e258:	dd3d      	ble.n	800e2d6 <__ssvfiscanf_r+0x266>
 800e25a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e25c:	0659      	lsls	r1, r3, #25
 800e25e:	d404      	bmi.n	800e26a <__ssvfiscanf_r+0x1fa>
 800e260:	6823      	ldr	r3, [r4, #0]
 800e262:	781a      	ldrb	r2, [r3, #0]
 800e264:	5cba      	ldrb	r2, [r7, r2]
 800e266:	0712      	lsls	r2, r2, #28
 800e268:	d43c      	bmi.n	800e2e4 <__ssvfiscanf_r+0x274>
 800e26a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e26c:	2b02      	cmp	r3, #2
 800e26e:	dc4b      	bgt.n	800e308 <__ssvfiscanf_r+0x298>
 800e270:	466b      	mov	r3, sp
 800e272:	4622      	mov	r2, r4
 800e274:	a941      	add	r1, sp, #260	; 0x104
 800e276:	4630      	mov	r0, r6
 800e278:	f000 f872 	bl	800e360 <_scanf_chars>
 800e27c:	2801      	cmp	r0, #1
 800e27e:	d06a      	beq.n	800e356 <__ssvfiscanf_r+0x2e6>
 800e280:	2802      	cmp	r0, #2
 800e282:	f47f af1c 	bne.w	800e0be <__ssvfiscanf_r+0x4e>
 800e286:	e7cb      	b.n	800e220 <__ssvfiscanf_r+0x1b0>
 800e288:	2308      	movs	r3, #8
 800e28a:	9342      	str	r3, [sp, #264]	; 0x108
 800e28c:	2304      	movs	r3, #4
 800e28e:	e7e0      	b.n	800e252 <__ssvfiscanf_r+0x1e2>
 800e290:	220a      	movs	r2, #10
 800e292:	e7d5      	b.n	800e240 <__ssvfiscanf_r+0x1d0>
 800e294:	4629      	mov	r1, r5
 800e296:	4640      	mov	r0, r8
 800e298:	f000 fa5e 	bl	800e758 <__sccl>
 800e29c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e29e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2a2:	9341      	str	r3, [sp, #260]	; 0x104
 800e2a4:	4605      	mov	r5, r0
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	e7d3      	b.n	800e252 <__ssvfiscanf_r+0x1e2>
 800e2aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e2ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2b0:	9341      	str	r3, [sp, #260]	; 0x104
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	e7cd      	b.n	800e252 <__ssvfiscanf_r+0x1e2>
 800e2b6:	2302      	movs	r3, #2
 800e2b8:	e7cb      	b.n	800e252 <__ssvfiscanf_r+0x1e2>
 800e2ba:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e2bc:	06c3      	lsls	r3, r0, #27
 800e2be:	f53f aefe 	bmi.w	800e0be <__ssvfiscanf_r+0x4e>
 800e2c2:	9b00      	ldr	r3, [sp, #0]
 800e2c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e2c6:	1d19      	adds	r1, r3, #4
 800e2c8:	9100      	str	r1, [sp, #0]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	07c0      	lsls	r0, r0, #31
 800e2ce:	bf4c      	ite	mi
 800e2d0:	801a      	strhmi	r2, [r3, #0]
 800e2d2:	601a      	strpl	r2, [r3, #0]
 800e2d4:	e6f3      	b.n	800e0be <__ssvfiscanf_r+0x4e>
 800e2d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e2d8:	4621      	mov	r1, r4
 800e2da:	4630      	mov	r0, r6
 800e2dc:	4798      	blx	r3
 800e2de:	2800      	cmp	r0, #0
 800e2e0:	d0bb      	beq.n	800e25a <__ssvfiscanf_r+0x1ea>
 800e2e2:	e79d      	b.n	800e220 <__ssvfiscanf_r+0x1b0>
 800e2e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e2e6:	3201      	adds	r2, #1
 800e2e8:	9245      	str	r2, [sp, #276]	; 0x114
 800e2ea:	6862      	ldr	r2, [r4, #4]
 800e2ec:	3a01      	subs	r2, #1
 800e2ee:	2a00      	cmp	r2, #0
 800e2f0:	6062      	str	r2, [r4, #4]
 800e2f2:	dd02      	ble.n	800e2fa <__ssvfiscanf_r+0x28a>
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	6023      	str	r3, [r4, #0]
 800e2f8:	e7b2      	b.n	800e260 <__ssvfiscanf_r+0x1f0>
 800e2fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e2fc:	4621      	mov	r1, r4
 800e2fe:	4630      	mov	r0, r6
 800e300:	4798      	blx	r3
 800e302:	2800      	cmp	r0, #0
 800e304:	d0ac      	beq.n	800e260 <__ssvfiscanf_r+0x1f0>
 800e306:	e78b      	b.n	800e220 <__ssvfiscanf_r+0x1b0>
 800e308:	2b04      	cmp	r3, #4
 800e30a:	dc0f      	bgt.n	800e32c <__ssvfiscanf_r+0x2bc>
 800e30c:	466b      	mov	r3, sp
 800e30e:	4622      	mov	r2, r4
 800e310:	a941      	add	r1, sp, #260	; 0x104
 800e312:	4630      	mov	r0, r6
 800e314:	f000 f87e 	bl	800e414 <_scanf_i>
 800e318:	e7b0      	b.n	800e27c <__ssvfiscanf_r+0x20c>
 800e31a:	bf00      	nop
 800e31c:	0800dfbd 	.word	0x0800dfbd
 800e320:	0800e037 	.word	0x0800e037
 800e324:	08011261 	.word	0x08011261
 800e328:	08011367 	.word	0x08011367
 800e32c:	4b0b      	ldr	r3, [pc, #44]	; (800e35c <__ssvfiscanf_r+0x2ec>)
 800e32e:	2b00      	cmp	r3, #0
 800e330:	f43f aec5 	beq.w	800e0be <__ssvfiscanf_r+0x4e>
 800e334:	466b      	mov	r3, sp
 800e336:	4622      	mov	r2, r4
 800e338:	a941      	add	r1, sp, #260	; 0x104
 800e33a:	4630      	mov	r0, r6
 800e33c:	f7fc fde8 	bl	800af10 <_scanf_float>
 800e340:	e79c      	b.n	800e27c <__ssvfiscanf_r+0x20c>
 800e342:	89a3      	ldrh	r3, [r4, #12]
 800e344:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e348:	bf18      	it	ne
 800e34a:	f04f 30ff 	movne.w	r0, #4294967295
 800e34e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e356:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e358:	e7f9      	b.n	800e34e <__ssvfiscanf_r+0x2de>
 800e35a:	bf00      	nop
 800e35c:	0800af11 	.word	0x0800af11

0800e360 <_scanf_chars>:
 800e360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e364:	4615      	mov	r5, r2
 800e366:	688a      	ldr	r2, [r1, #8]
 800e368:	4680      	mov	r8, r0
 800e36a:	460c      	mov	r4, r1
 800e36c:	b932      	cbnz	r2, 800e37c <_scanf_chars+0x1c>
 800e36e:	698a      	ldr	r2, [r1, #24]
 800e370:	2a00      	cmp	r2, #0
 800e372:	bf0c      	ite	eq
 800e374:	2201      	moveq	r2, #1
 800e376:	f04f 32ff 	movne.w	r2, #4294967295
 800e37a:	608a      	str	r2, [r1, #8]
 800e37c:	6822      	ldr	r2, [r4, #0]
 800e37e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800e410 <_scanf_chars+0xb0>
 800e382:	06d1      	lsls	r1, r2, #27
 800e384:	bf5f      	itttt	pl
 800e386:	681a      	ldrpl	r2, [r3, #0]
 800e388:	1d11      	addpl	r1, r2, #4
 800e38a:	6019      	strpl	r1, [r3, #0]
 800e38c:	6816      	ldrpl	r6, [r2, #0]
 800e38e:	2700      	movs	r7, #0
 800e390:	69a0      	ldr	r0, [r4, #24]
 800e392:	b188      	cbz	r0, 800e3b8 <_scanf_chars+0x58>
 800e394:	2801      	cmp	r0, #1
 800e396:	d107      	bne.n	800e3a8 <_scanf_chars+0x48>
 800e398:	682a      	ldr	r2, [r5, #0]
 800e39a:	7811      	ldrb	r1, [r2, #0]
 800e39c:	6962      	ldr	r2, [r4, #20]
 800e39e:	5c52      	ldrb	r2, [r2, r1]
 800e3a0:	b952      	cbnz	r2, 800e3b8 <_scanf_chars+0x58>
 800e3a2:	2f00      	cmp	r7, #0
 800e3a4:	d031      	beq.n	800e40a <_scanf_chars+0xaa>
 800e3a6:	e022      	b.n	800e3ee <_scanf_chars+0x8e>
 800e3a8:	2802      	cmp	r0, #2
 800e3aa:	d120      	bne.n	800e3ee <_scanf_chars+0x8e>
 800e3ac:	682b      	ldr	r3, [r5, #0]
 800e3ae:	781b      	ldrb	r3, [r3, #0]
 800e3b0:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e3b4:	071b      	lsls	r3, r3, #28
 800e3b6:	d41a      	bmi.n	800e3ee <_scanf_chars+0x8e>
 800e3b8:	6823      	ldr	r3, [r4, #0]
 800e3ba:	06da      	lsls	r2, r3, #27
 800e3bc:	bf5e      	ittt	pl
 800e3be:	682b      	ldrpl	r3, [r5, #0]
 800e3c0:	781b      	ldrbpl	r3, [r3, #0]
 800e3c2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e3c6:	682a      	ldr	r2, [r5, #0]
 800e3c8:	686b      	ldr	r3, [r5, #4]
 800e3ca:	3201      	adds	r2, #1
 800e3cc:	602a      	str	r2, [r5, #0]
 800e3ce:	68a2      	ldr	r2, [r4, #8]
 800e3d0:	3b01      	subs	r3, #1
 800e3d2:	3a01      	subs	r2, #1
 800e3d4:	606b      	str	r3, [r5, #4]
 800e3d6:	3701      	adds	r7, #1
 800e3d8:	60a2      	str	r2, [r4, #8]
 800e3da:	b142      	cbz	r2, 800e3ee <_scanf_chars+0x8e>
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	dcd7      	bgt.n	800e390 <_scanf_chars+0x30>
 800e3e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e3e4:	4629      	mov	r1, r5
 800e3e6:	4640      	mov	r0, r8
 800e3e8:	4798      	blx	r3
 800e3ea:	2800      	cmp	r0, #0
 800e3ec:	d0d0      	beq.n	800e390 <_scanf_chars+0x30>
 800e3ee:	6823      	ldr	r3, [r4, #0]
 800e3f0:	f013 0310 	ands.w	r3, r3, #16
 800e3f4:	d105      	bne.n	800e402 <_scanf_chars+0xa2>
 800e3f6:	68e2      	ldr	r2, [r4, #12]
 800e3f8:	3201      	adds	r2, #1
 800e3fa:	60e2      	str	r2, [r4, #12]
 800e3fc:	69a2      	ldr	r2, [r4, #24]
 800e3fe:	b102      	cbz	r2, 800e402 <_scanf_chars+0xa2>
 800e400:	7033      	strb	r3, [r6, #0]
 800e402:	6923      	ldr	r3, [r4, #16]
 800e404:	443b      	add	r3, r7
 800e406:	6123      	str	r3, [r4, #16]
 800e408:	2000      	movs	r0, #0
 800e40a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e40e:	bf00      	nop
 800e410:	08011261 	.word	0x08011261

0800e414 <_scanf_i>:
 800e414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e418:	4698      	mov	r8, r3
 800e41a:	4b74      	ldr	r3, [pc, #464]	; (800e5ec <_scanf_i+0x1d8>)
 800e41c:	460c      	mov	r4, r1
 800e41e:	4682      	mov	sl, r0
 800e420:	4616      	mov	r6, r2
 800e422:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e426:	b087      	sub	sp, #28
 800e428:	ab03      	add	r3, sp, #12
 800e42a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e42e:	4b70      	ldr	r3, [pc, #448]	; (800e5f0 <_scanf_i+0x1dc>)
 800e430:	69a1      	ldr	r1, [r4, #24]
 800e432:	4a70      	ldr	r2, [pc, #448]	; (800e5f4 <_scanf_i+0x1e0>)
 800e434:	2903      	cmp	r1, #3
 800e436:	bf18      	it	ne
 800e438:	461a      	movne	r2, r3
 800e43a:	68a3      	ldr	r3, [r4, #8]
 800e43c:	9201      	str	r2, [sp, #4]
 800e43e:	1e5a      	subs	r2, r3, #1
 800e440:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e444:	bf88      	it	hi
 800e446:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e44a:	4627      	mov	r7, r4
 800e44c:	bf82      	ittt	hi
 800e44e:	eb03 0905 	addhi.w	r9, r3, r5
 800e452:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e456:	60a3      	strhi	r3, [r4, #8]
 800e458:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e45c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e460:	bf98      	it	ls
 800e462:	f04f 0900 	movls.w	r9, #0
 800e466:	6023      	str	r3, [r4, #0]
 800e468:	463d      	mov	r5, r7
 800e46a:	f04f 0b00 	mov.w	fp, #0
 800e46e:	6831      	ldr	r1, [r6, #0]
 800e470:	ab03      	add	r3, sp, #12
 800e472:	7809      	ldrb	r1, [r1, #0]
 800e474:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e478:	2202      	movs	r2, #2
 800e47a:	f7f1 fea9 	bl	80001d0 <memchr>
 800e47e:	b328      	cbz	r0, 800e4cc <_scanf_i+0xb8>
 800e480:	f1bb 0f01 	cmp.w	fp, #1
 800e484:	d159      	bne.n	800e53a <_scanf_i+0x126>
 800e486:	6862      	ldr	r2, [r4, #4]
 800e488:	b92a      	cbnz	r2, 800e496 <_scanf_i+0x82>
 800e48a:	6822      	ldr	r2, [r4, #0]
 800e48c:	2308      	movs	r3, #8
 800e48e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e492:	6063      	str	r3, [r4, #4]
 800e494:	6022      	str	r2, [r4, #0]
 800e496:	6822      	ldr	r2, [r4, #0]
 800e498:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e49c:	6022      	str	r2, [r4, #0]
 800e49e:	68a2      	ldr	r2, [r4, #8]
 800e4a0:	1e51      	subs	r1, r2, #1
 800e4a2:	60a1      	str	r1, [r4, #8]
 800e4a4:	b192      	cbz	r2, 800e4cc <_scanf_i+0xb8>
 800e4a6:	6832      	ldr	r2, [r6, #0]
 800e4a8:	1c51      	adds	r1, r2, #1
 800e4aa:	6031      	str	r1, [r6, #0]
 800e4ac:	7812      	ldrb	r2, [r2, #0]
 800e4ae:	f805 2b01 	strb.w	r2, [r5], #1
 800e4b2:	6872      	ldr	r2, [r6, #4]
 800e4b4:	3a01      	subs	r2, #1
 800e4b6:	2a00      	cmp	r2, #0
 800e4b8:	6072      	str	r2, [r6, #4]
 800e4ba:	dc07      	bgt.n	800e4cc <_scanf_i+0xb8>
 800e4bc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e4c0:	4631      	mov	r1, r6
 800e4c2:	4650      	mov	r0, sl
 800e4c4:	4790      	blx	r2
 800e4c6:	2800      	cmp	r0, #0
 800e4c8:	f040 8085 	bne.w	800e5d6 <_scanf_i+0x1c2>
 800e4cc:	f10b 0b01 	add.w	fp, fp, #1
 800e4d0:	f1bb 0f03 	cmp.w	fp, #3
 800e4d4:	d1cb      	bne.n	800e46e <_scanf_i+0x5a>
 800e4d6:	6863      	ldr	r3, [r4, #4]
 800e4d8:	b90b      	cbnz	r3, 800e4de <_scanf_i+0xca>
 800e4da:	230a      	movs	r3, #10
 800e4dc:	6063      	str	r3, [r4, #4]
 800e4de:	6863      	ldr	r3, [r4, #4]
 800e4e0:	4945      	ldr	r1, [pc, #276]	; (800e5f8 <_scanf_i+0x1e4>)
 800e4e2:	6960      	ldr	r0, [r4, #20]
 800e4e4:	1ac9      	subs	r1, r1, r3
 800e4e6:	f000 f937 	bl	800e758 <__sccl>
 800e4ea:	f04f 0b00 	mov.w	fp, #0
 800e4ee:	68a3      	ldr	r3, [r4, #8]
 800e4f0:	6822      	ldr	r2, [r4, #0]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d03d      	beq.n	800e572 <_scanf_i+0x15e>
 800e4f6:	6831      	ldr	r1, [r6, #0]
 800e4f8:	6960      	ldr	r0, [r4, #20]
 800e4fa:	f891 c000 	ldrb.w	ip, [r1]
 800e4fe:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e502:	2800      	cmp	r0, #0
 800e504:	d035      	beq.n	800e572 <_scanf_i+0x15e>
 800e506:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e50a:	d124      	bne.n	800e556 <_scanf_i+0x142>
 800e50c:	0510      	lsls	r0, r2, #20
 800e50e:	d522      	bpl.n	800e556 <_scanf_i+0x142>
 800e510:	f10b 0b01 	add.w	fp, fp, #1
 800e514:	f1b9 0f00 	cmp.w	r9, #0
 800e518:	d003      	beq.n	800e522 <_scanf_i+0x10e>
 800e51a:	3301      	adds	r3, #1
 800e51c:	f109 39ff 	add.w	r9, r9, #4294967295
 800e520:	60a3      	str	r3, [r4, #8]
 800e522:	6873      	ldr	r3, [r6, #4]
 800e524:	3b01      	subs	r3, #1
 800e526:	2b00      	cmp	r3, #0
 800e528:	6073      	str	r3, [r6, #4]
 800e52a:	dd1b      	ble.n	800e564 <_scanf_i+0x150>
 800e52c:	6833      	ldr	r3, [r6, #0]
 800e52e:	3301      	adds	r3, #1
 800e530:	6033      	str	r3, [r6, #0]
 800e532:	68a3      	ldr	r3, [r4, #8]
 800e534:	3b01      	subs	r3, #1
 800e536:	60a3      	str	r3, [r4, #8]
 800e538:	e7d9      	b.n	800e4ee <_scanf_i+0xda>
 800e53a:	f1bb 0f02 	cmp.w	fp, #2
 800e53e:	d1ae      	bne.n	800e49e <_scanf_i+0x8a>
 800e540:	6822      	ldr	r2, [r4, #0]
 800e542:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e546:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e54a:	d1bf      	bne.n	800e4cc <_scanf_i+0xb8>
 800e54c:	2310      	movs	r3, #16
 800e54e:	6063      	str	r3, [r4, #4]
 800e550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e554:	e7a2      	b.n	800e49c <_scanf_i+0x88>
 800e556:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800e55a:	6022      	str	r2, [r4, #0]
 800e55c:	780b      	ldrb	r3, [r1, #0]
 800e55e:	f805 3b01 	strb.w	r3, [r5], #1
 800e562:	e7de      	b.n	800e522 <_scanf_i+0x10e>
 800e564:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e568:	4631      	mov	r1, r6
 800e56a:	4650      	mov	r0, sl
 800e56c:	4798      	blx	r3
 800e56e:	2800      	cmp	r0, #0
 800e570:	d0df      	beq.n	800e532 <_scanf_i+0x11e>
 800e572:	6823      	ldr	r3, [r4, #0]
 800e574:	05d9      	lsls	r1, r3, #23
 800e576:	d50d      	bpl.n	800e594 <_scanf_i+0x180>
 800e578:	42bd      	cmp	r5, r7
 800e57a:	d909      	bls.n	800e590 <_scanf_i+0x17c>
 800e57c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e580:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e584:	4632      	mov	r2, r6
 800e586:	4650      	mov	r0, sl
 800e588:	4798      	blx	r3
 800e58a:	f105 39ff 	add.w	r9, r5, #4294967295
 800e58e:	464d      	mov	r5, r9
 800e590:	42bd      	cmp	r5, r7
 800e592:	d028      	beq.n	800e5e6 <_scanf_i+0x1d2>
 800e594:	6822      	ldr	r2, [r4, #0]
 800e596:	f012 0210 	ands.w	r2, r2, #16
 800e59a:	d113      	bne.n	800e5c4 <_scanf_i+0x1b0>
 800e59c:	702a      	strb	r2, [r5, #0]
 800e59e:	6863      	ldr	r3, [r4, #4]
 800e5a0:	9e01      	ldr	r6, [sp, #4]
 800e5a2:	4639      	mov	r1, r7
 800e5a4:	4650      	mov	r0, sl
 800e5a6:	47b0      	blx	r6
 800e5a8:	f8d8 3000 	ldr.w	r3, [r8]
 800e5ac:	6821      	ldr	r1, [r4, #0]
 800e5ae:	1d1a      	adds	r2, r3, #4
 800e5b0:	f8c8 2000 	str.w	r2, [r8]
 800e5b4:	f011 0f20 	tst.w	r1, #32
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	d00f      	beq.n	800e5dc <_scanf_i+0x1c8>
 800e5bc:	6018      	str	r0, [r3, #0]
 800e5be:	68e3      	ldr	r3, [r4, #12]
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	60e3      	str	r3, [r4, #12]
 800e5c4:	6923      	ldr	r3, [r4, #16]
 800e5c6:	1bed      	subs	r5, r5, r7
 800e5c8:	445d      	add	r5, fp
 800e5ca:	442b      	add	r3, r5
 800e5cc:	6123      	str	r3, [r4, #16]
 800e5ce:	2000      	movs	r0, #0
 800e5d0:	b007      	add	sp, #28
 800e5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5d6:	f04f 0b00 	mov.w	fp, #0
 800e5da:	e7ca      	b.n	800e572 <_scanf_i+0x15e>
 800e5dc:	07ca      	lsls	r2, r1, #31
 800e5de:	bf4c      	ite	mi
 800e5e0:	8018      	strhmi	r0, [r3, #0]
 800e5e2:	6018      	strpl	r0, [r3, #0]
 800e5e4:	e7eb      	b.n	800e5be <_scanf_i+0x1aa>
 800e5e6:	2001      	movs	r0, #1
 800e5e8:	e7f2      	b.n	800e5d0 <_scanf_i+0x1bc>
 800e5ea:	bf00      	nop
 800e5ec:	08010fc8 	.word	0x08010fc8
 800e5f0:	0800f165 	.word	0x0800f165
 800e5f4:	0800dd09 	.word	0x0800dd09
 800e5f8:	08011382 	.word	0x08011382

0800e5fc <__sflush_r>:
 800e5fc:	898a      	ldrh	r2, [r1, #12]
 800e5fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e602:	4605      	mov	r5, r0
 800e604:	0710      	lsls	r0, r2, #28
 800e606:	460c      	mov	r4, r1
 800e608:	d458      	bmi.n	800e6bc <__sflush_r+0xc0>
 800e60a:	684b      	ldr	r3, [r1, #4]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	dc05      	bgt.n	800e61c <__sflush_r+0x20>
 800e610:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e612:	2b00      	cmp	r3, #0
 800e614:	dc02      	bgt.n	800e61c <__sflush_r+0x20>
 800e616:	2000      	movs	r0, #0
 800e618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e61c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e61e:	2e00      	cmp	r6, #0
 800e620:	d0f9      	beq.n	800e616 <__sflush_r+0x1a>
 800e622:	2300      	movs	r3, #0
 800e624:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e628:	682f      	ldr	r7, [r5, #0]
 800e62a:	6a21      	ldr	r1, [r4, #32]
 800e62c:	602b      	str	r3, [r5, #0]
 800e62e:	d032      	beq.n	800e696 <__sflush_r+0x9a>
 800e630:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e632:	89a3      	ldrh	r3, [r4, #12]
 800e634:	075a      	lsls	r2, r3, #29
 800e636:	d505      	bpl.n	800e644 <__sflush_r+0x48>
 800e638:	6863      	ldr	r3, [r4, #4]
 800e63a:	1ac0      	subs	r0, r0, r3
 800e63c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e63e:	b10b      	cbz	r3, 800e644 <__sflush_r+0x48>
 800e640:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e642:	1ac0      	subs	r0, r0, r3
 800e644:	2300      	movs	r3, #0
 800e646:	4602      	mov	r2, r0
 800e648:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e64a:	6a21      	ldr	r1, [r4, #32]
 800e64c:	4628      	mov	r0, r5
 800e64e:	47b0      	blx	r6
 800e650:	1c43      	adds	r3, r0, #1
 800e652:	89a3      	ldrh	r3, [r4, #12]
 800e654:	d106      	bne.n	800e664 <__sflush_r+0x68>
 800e656:	6829      	ldr	r1, [r5, #0]
 800e658:	291d      	cmp	r1, #29
 800e65a:	d82b      	bhi.n	800e6b4 <__sflush_r+0xb8>
 800e65c:	4a29      	ldr	r2, [pc, #164]	; (800e704 <__sflush_r+0x108>)
 800e65e:	410a      	asrs	r2, r1
 800e660:	07d6      	lsls	r6, r2, #31
 800e662:	d427      	bmi.n	800e6b4 <__sflush_r+0xb8>
 800e664:	2200      	movs	r2, #0
 800e666:	6062      	str	r2, [r4, #4]
 800e668:	04d9      	lsls	r1, r3, #19
 800e66a:	6922      	ldr	r2, [r4, #16]
 800e66c:	6022      	str	r2, [r4, #0]
 800e66e:	d504      	bpl.n	800e67a <__sflush_r+0x7e>
 800e670:	1c42      	adds	r2, r0, #1
 800e672:	d101      	bne.n	800e678 <__sflush_r+0x7c>
 800e674:	682b      	ldr	r3, [r5, #0]
 800e676:	b903      	cbnz	r3, 800e67a <__sflush_r+0x7e>
 800e678:	6560      	str	r0, [r4, #84]	; 0x54
 800e67a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e67c:	602f      	str	r7, [r5, #0]
 800e67e:	2900      	cmp	r1, #0
 800e680:	d0c9      	beq.n	800e616 <__sflush_r+0x1a>
 800e682:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e686:	4299      	cmp	r1, r3
 800e688:	d002      	beq.n	800e690 <__sflush_r+0x94>
 800e68a:	4628      	mov	r0, r5
 800e68c:	f7fd fefa 	bl	800c484 <_free_r>
 800e690:	2000      	movs	r0, #0
 800e692:	6360      	str	r0, [r4, #52]	; 0x34
 800e694:	e7c0      	b.n	800e618 <__sflush_r+0x1c>
 800e696:	2301      	movs	r3, #1
 800e698:	4628      	mov	r0, r5
 800e69a:	47b0      	blx	r6
 800e69c:	1c41      	adds	r1, r0, #1
 800e69e:	d1c8      	bne.n	800e632 <__sflush_r+0x36>
 800e6a0:	682b      	ldr	r3, [r5, #0]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d0c5      	beq.n	800e632 <__sflush_r+0x36>
 800e6a6:	2b1d      	cmp	r3, #29
 800e6a8:	d001      	beq.n	800e6ae <__sflush_r+0xb2>
 800e6aa:	2b16      	cmp	r3, #22
 800e6ac:	d101      	bne.n	800e6b2 <__sflush_r+0xb6>
 800e6ae:	602f      	str	r7, [r5, #0]
 800e6b0:	e7b1      	b.n	800e616 <__sflush_r+0x1a>
 800e6b2:	89a3      	ldrh	r3, [r4, #12]
 800e6b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6b8:	81a3      	strh	r3, [r4, #12]
 800e6ba:	e7ad      	b.n	800e618 <__sflush_r+0x1c>
 800e6bc:	690f      	ldr	r7, [r1, #16]
 800e6be:	2f00      	cmp	r7, #0
 800e6c0:	d0a9      	beq.n	800e616 <__sflush_r+0x1a>
 800e6c2:	0793      	lsls	r3, r2, #30
 800e6c4:	680e      	ldr	r6, [r1, #0]
 800e6c6:	bf08      	it	eq
 800e6c8:	694b      	ldreq	r3, [r1, #20]
 800e6ca:	600f      	str	r7, [r1, #0]
 800e6cc:	bf18      	it	ne
 800e6ce:	2300      	movne	r3, #0
 800e6d0:	eba6 0807 	sub.w	r8, r6, r7
 800e6d4:	608b      	str	r3, [r1, #8]
 800e6d6:	f1b8 0f00 	cmp.w	r8, #0
 800e6da:	dd9c      	ble.n	800e616 <__sflush_r+0x1a>
 800e6dc:	6a21      	ldr	r1, [r4, #32]
 800e6de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e6e0:	4643      	mov	r3, r8
 800e6e2:	463a      	mov	r2, r7
 800e6e4:	4628      	mov	r0, r5
 800e6e6:	47b0      	blx	r6
 800e6e8:	2800      	cmp	r0, #0
 800e6ea:	dc06      	bgt.n	800e6fa <__sflush_r+0xfe>
 800e6ec:	89a3      	ldrh	r3, [r4, #12]
 800e6ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6f2:	81a3      	strh	r3, [r4, #12]
 800e6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6f8:	e78e      	b.n	800e618 <__sflush_r+0x1c>
 800e6fa:	4407      	add	r7, r0
 800e6fc:	eba8 0800 	sub.w	r8, r8, r0
 800e700:	e7e9      	b.n	800e6d6 <__sflush_r+0xda>
 800e702:	bf00      	nop
 800e704:	dfbffffe 	.word	0xdfbffffe

0800e708 <_fflush_r>:
 800e708:	b538      	push	{r3, r4, r5, lr}
 800e70a:	690b      	ldr	r3, [r1, #16]
 800e70c:	4605      	mov	r5, r0
 800e70e:	460c      	mov	r4, r1
 800e710:	b913      	cbnz	r3, 800e718 <_fflush_r+0x10>
 800e712:	2500      	movs	r5, #0
 800e714:	4628      	mov	r0, r5
 800e716:	bd38      	pop	{r3, r4, r5, pc}
 800e718:	b118      	cbz	r0, 800e722 <_fflush_r+0x1a>
 800e71a:	6a03      	ldr	r3, [r0, #32]
 800e71c:	b90b      	cbnz	r3, 800e722 <_fflush_r+0x1a>
 800e71e:	f7fc fe81 	bl	800b424 <__sinit>
 800e722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d0f3      	beq.n	800e712 <_fflush_r+0xa>
 800e72a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e72c:	07d0      	lsls	r0, r2, #31
 800e72e:	d404      	bmi.n	800e73a <_fflush_r+0x32>
 800e730:	0599      	lsls	r1, r3, #22
 800e732:	d402      	bmi.n	800e73a <_fflush_r+0x32>
 800e734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e736:	f7fd f823 	bl	800b780 <__retarget_lock_acquire_recursive>
 800e73a:	4628      	mov	r0, r5
 800e73c:	4621      	mov	r1, r4
 800e73e:	f7ff ff5d 	bl	800e5fc <__sflush_r>
 800e742:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e744:	07da      	lsls	r2, r3, #31
 800e746:	4605      	mov	r5, r0
 800e748:	d4e4      	bmi.n	800e714 <_fflush_r+0xc>
 800e74a:	89a3      	ldrh	r3, [r4, #12]
 800e74c:	059b      	lsls	r3, r3, #22
 800e74e:	d4e1      	bmi.n	800e714 <_fflush_r+0xc>
 800e750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e752:	f7fd f816 	bl	800b782 <__retarget_lock_release_recursive>
 800e756:	e7dd      	b.n	800e714 <_fflush_r+0xc>

0800e758 <__sccl>:
 800e758:	b570      	push	{r4, r5, r6, lr}
 800e75a:	780b      	ldrb	r3, [r1, #0]
 800e75c:	4604      	mov	r4, r0
 800e75e:	2b5e      	cmp	r3, #94	; 0x5e
 800e760:	bf0b      	itete	eq
 800e762:	784b      	ldrbeq	r3, [r1, #1]
 800e764:	1c4a      	addne	r2, r1, #1
 800e766:	1c8a      	addeq	r2, r1, #2
 800e768:	2100      	movne	r1, #0
 800e76a:	bf08      	it	eq
 800e76c:	2101      	moveq	r1, #1
 800e76e:	3801      	subs	r0, #1
 800e770:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800e774:	f800 1f01 	strb.w	r1, [r0, #1]!
 800e778:	42a8      	cmp	r0, r5
 800e77a:	d1fb      	bne.n	800e774 <__sccl+0x1c>
 800e77c:	b90b      	cbnz	r3, 800e782 <__sccl+0x2a>
 800e77e:	1e50      	subs	r0, r2, #1
 800e780:	bd70      	pop	{r4, r5, r6, pc}
 800e782:	f081 0101 	eor.w	r1, r1, #1
 800e786:	54e1      	strb	r1, [r4, r3]
 800e788:	4610      	mov	r0, r2
 800e78a:	4602      	mov	r2, r0
 800e78c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e790:	2d2d      	cmp	r5, #45	; 0x2d
 800e792:	d005      	beq.n	800e7a0 <__sccl+0x48>
 800e794:	2d5d      	cmp	r5, #93	; 0x5d
 800e796:	d016      	beq.n	800e7c6 <__sccl+0x6e>
 800e798:	2d00      	cmp	r5, #0
 800e79a:	d0f1      	beq.n	800e780 <__sccl+0x28>
 800e79c:	462b      	mov	r3, r5
 800e79e:	e7f2      	b.n	800e786 <__sccl+0x2e>
 800e7a0:	7846      	ldrb	r6, [r0, #1]
 800e7a2:	2e5d      	cmp	r6, #93	; 0x5d
 800e7a4:	d0fa      	beq.n	800e79c <__sccl+0x44>
 800e7a6:	42b3      	cmp	r3, r6
 800e7a8:	dcf8      	bgt.n	800e79c <__sccl+0x44>
 800e7aa:	3002      	adds	r0, #2
 800e7ac:	461a      	mov	r2, r3
 800e7ae:	3201      	adds	r2, #1
 800e7b0:	4296      	cmp	r6, r2
 800e7b2:	54a1      	strb	r1, [r4, r2]
 800e7b4:	dcfb      	bgt.n	800e7ae <__sccl+0x56>
 800e7b6:	1af2      	subs	r2, r6, r3
 800e7b8:	3a01      	subs	r2, #1
 800e7ba:	1c5d      	adds	r5, r3, #1
 800e7bc:	42b3      	cmp	r3, r6
 800e7be:	bfa8      	it	ge
 800e7c0:	2200      	movge	r2, #0
 800e7c2:	18ab      	adds	r3, r5, r2
 800e7c4:	e7e1      	b.n	800e78a <__sccl+0x32>
 800e7c6:	4610      	mov	r0, r2
 800e7c8:	e7da      	b.n	800e780 <__sccl+0x28>

0800e7ca <__submore>:
 800e7ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7ce:	460c      	mov	r4, r1
 800e7d0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e7d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7d6:	4299      	cmp	r1, r3
 800e7d8:	d11d      	bne.n	800e816 <__submore+0x4c>
 800e7da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e7de:	f7fd fec5 	bl	800c56c <_malloc_r>
 800e7e2:	b918      	cbnz	r0, 800e7ec <__submore+0x22>
 800e7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7f0:	63a3      	str	r3, [r4, #56]	; 0x38
 800e7f2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e7f6:	6360      	str	r0, [r4, #52]	; 0x34
 800e7f8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800e7fc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e800:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800e804:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e808:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800e80c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e810:	6020      	str	r0, [r4, #0]
 800e812:	2000      	movs	r0, #0
 800e814:	e7e8      	b.n	800e7e8 <__submore+0x1e>
 800e816:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e818:	0077      	lsls	r7, r6, #1
 800e81a:	463a      	mov	r2, r7
 800e81c:	f000 fc01 	bl	800f022 <_realloc_r>
 800e820:	4605      	mov	r5, r0
 800e822:	2800      	cmp	r0, #0
 800e824:	d0de      	beq.n	800e7e4 <__submore+0x1a>
 800e826:	eb00 0806 	add.w	r8, r0, r6
 800e82a:	4601      	mov	r1, r0
 800e82c:	4632      	mov	r2, r6
 800e82e:	4640      	mov	r0, r8
 800e830:	f000 f842 	bl	800e8b8 <memcpy>
 800e834:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e838:	f8c4 8000 	str.w	r8, [r4]
 800e83c:	e7e9      	b.n	800e812 <__submore+0x48>

0800e83e <memmove>:
 800e83e:	4288      	cmp	r0, r1
 800e840:	b510      	push	{r4, lr}
 800e842:	eb01 0402 	add.w	r4, r1, r2
 800e846:	d902      	bls.n	800e84e <memmove+0x10>
 800e848:	4284      	cmp	r4, r0
 800e84a:	4623      	mov	r3, r4
 800e84c:	d807      	bhi.n	800e85e <memmove+0x20>
 800e84e:	1e43      	subs	r3, r0, #1
 800e850:	42a1      	cmp	r1, r4
 800e852:	d008      	beq.n	800e866 <memmove+0x28>
 800e854:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e858:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e85c:	e7f8      	b.n	800e850 <memmove+0x12>
 800e85e:	4402      	add	r2, r0
 800e860:	4601      	mov	r1, r0
 800e862:	428a      	cmp	r2, r1
 800e864:	d100      	bne.n	800e868 <memmove+0x2a>
 800e866:	bd10      	pop	{r4, pc}
 800e868:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e86c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e870:	e7f7      	b.n	800e862 <memmove+0x24>

0800e872 <strncmp>:
 800e872:	b510      	push	{r4, lr}
 800e874:	b16a      	cbz	r2, 800e892 <strncmp+0x20>
 800e876:	3901      	subs	r1, #1
 800e878:	1884      	adds	r4, r0, r2
 800e87a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e87e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e882:	429a      	cmp	r2, r3
 800e884:	d103      	bne.n	800e88e <strncmp+0x1c>
 800e886:	42a0      	cmp	r0, r4
 800e888:	d001      	beq.n	800e88e <strncmp+0x1c>
 800e88a:	2a00      	cmp	r2, #0
 800e88c:	d1f5      	bne.n	800e87a <strncmp+0x8>
 800e88e:	1ad0      	subs	r0, r2, r3
 800e890:	bd10      	pop	{r4, pc}
 800e892:	4610      	mov	r0, r2
 800e894:	e7fc      	b.n	800e890 <strncmp+0x1e>
	...

0800e898 <_sbrk_r>:
 800e898:	b538      	push	{r3, r4, r5, lr}
 800e89a:	4d06      	ldr	r5, [pc, #24]	; (800e8b4 <_sbrk_r+0x1c>)
 800e89c:	2300      	movs	r3, #0
 800e89e:	4604      	mov	r4, r0
 800e8a0:	4608      	mov	r0, r1
 800e8a2:	602b      	str	r3, [r5, #0]
 800e8a4:	f7f3 ff10 	bl	80026c8 <_sbrk>
 800e8a8:	1c43      	adds	r3, r0, #1
 800e8aa:	d102      	bne.n	800e8b2 <_sbrk_r+0x1a>
 800e8ac:	682b      	ldr	r3, [r5, #0]
 800e8ae:	b103      	cbz	r3, 800e8b2 <_sbrk_r+0x1a>
 800e8b0:	6023      	str	r3, [r4, #0]
 800e8b2:	bd38      	pop	{r3, r4, r5, pc}
 800e8b4:	20002120 	.word	0x20002120

0800e8b8 <memcpy>:
 800e8b8:	440a      	add	r2, r1
 800e8ba:	4291      	cmp	r1, r2
 800e8bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800e8c0:	d100      	bne.n	800e8c4 <memcpy+0xc>
 800e8c2:	4770      	bx	lr
 800e8c4:	b510      	push	{r4, lr}
 800e8c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8ce:	4291      	cmp	r1, r2
 800e8d0:	d1f9      	bne.n	800e8c6 <memcpy+0xe>
 800e8d2:	bd10      	pop	{r4, pc}
 800e8d4:	0000      	movs	r0, r0
	...

0800e8d8 <nan>:
 800e8d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e8e0 <nan+0x8>
 800e8dc:	4770      	bx	lr
 800e8de:	bf00      	nop
 800e8e0:	00000000 	.word	0x00000000
 800e8e4:	7ff80000 	.word	0x7ff80000

0800e8e8 <__assert_func>:
 800e8e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8ea:	4614      	mov	r4, r2
 800e8ec:	461a      	mov	r2, r3
 800e8ee:	4b09      	ldr	r3, [pc, #36]	; (800e914 <__assert_func+0x2c>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	4605      	mov	r5, r0
 800e8f4:	68d8      	ldr	r0, [r3, #12]
 800e8f6:	b14c      	cbz	r4, 800e90c <__assert_func+0x24>
 800e8f8:	4b07      	ldr	r3, [pc, #28]	; (800e918 <__assert_func+0x30>)
 800e8fa:	9100      	str	r1, [sp, #0]
 800e8fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e900:	4906      	ldr	r1, [pc, #24]	; (800e91c <__assert_func+0x34>)
 800e902:	462b      	mov	r3, r5
 800e904:	f000 fc3e 	bl	800f184 <fiprintf>
 800e908:	f000 fc4e 	bl	800f1a8 <abort>
 800e90c:	4b04      	ldr	r3, [pc, #16]	; (800e920 <__assert_func+0x38>)
 800e90e:	461c      	mov	r4, r3
 800e910:	e7f3      	b.n	800e8fa <__assert_func+0x12>
 800e912:	bf00      	nop
 800e914:	20000154 	.word	0x20000154
 800e918:	08011395 	.word	0x08011395
 800e91c:	080113a2 	.word	0x080113a2
 800e920:	080113d0 	.word	0x080113d0

0800e924 <_calloc_r>:
 800e924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e926:	fba1 2402 	umull	r2, r4, r1, r2
 800e92a:	b94c      	cbnz	r4, 800e940 <_calloc_r+0x1c>
 800e92c:	4611      	mov	r1, r2
 800e92e:	9201      	str	r2, [sp, #4]
 800e930:	f7fd fe1c 	bl	800c56c <_malloc_r>
 800e934:	9a01      	ldr	r2, [sp, #4]
 800e936:	4605      	mov	r5, r0
 800e938:	b930      	cbnz	r0, 800e948 <_calloc_r+0x24>
 800e93a:	4628      	mov	r0, r5
 800e93c:	b003      	add	sp, #12
 800e93e:	bd30      	pop	{r4, r5, pc}
 800e940:	220c      	movs	r2, #12
 800e942:	6002      	str	r2, [r0, #0]
 800e944:	2500      	movs	r5, #0
 800e946:	e7f8      	b.n	800e93a <_calloc_r+0x16>
 800e948:	4621      	mov	r1, r4
 800e94a:	f7fc fe66 	bl	800b61a <memset>
 800e94e:	e7f4      	b.n	800e93a <_calloc_r+0x16>

0800e950 <rshift>:
 800e950:	6903      	ldr	r3, [r0, #16]
 800e952:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e956:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e95a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e95e:	f100 0414 	add.w	r4, r0, #20
 800e962:	dd45      	ble.n	800e9f0 <rshift+0xa0>
 800e964:	f011 011f 	ands.w	r1, r1, #31
 800e968:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e96c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e970:	d10c      	bne.n	800e98c <rshift+0x3c>
 800e972:	f100 0710 	add.w	r7, r0, #16
 800e976:	4629      	mov	r1, r5
 800e978:	42b1      	cmp	r1, r6
 800e97a:	d334      	bcc.n	800e9e6 <rshift+0x96>
 800e97c:	1a9b      	subs	r3, r3, r2
 800e97e:	009b      	lsls	r3, r3, #2
 800e980:	1eea      	subs	r2, r5, #3
 800e982:	4296      	cmp	r6, r2
 800e984:	bf38      	it	cc
 800e986:	2300      	movcc	r3, #0
 800e988:	4423      	add	r3, r4
 800e98a:	e015      	b.n	800e9b8 <rshift+0x68>
 800e98c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e990:	f1c1 0820 	rsb	r8, r1, #32
 800e994:	40cf      	lsrs	r7, r1
 800e996:	f105 0e04 	add.w	lr, r5, #4
 800e99a:	46a1      	mov	r9, r4
 800e99c:	4576      	cmp	r6, lr
 800e99e:	46f4      	mov	ip, lr
 800e9a0:	d815      	bhi.n	800e9ce <rshift+0x7e>
 800e9a2:	1a9a      	subs	r2, r3, r2
 800e9a4:	0092      	lsls	r2, r2, #2
 800e9a6:	3a04      	subs	r2, #4
 800e9a8:	3501      	adds	r5, #1
 800e9aa:	42ae      	cmp	r6, r5
 800e9ac:	bf38      	it	cc
 800e9ae:	2200      	movcc	r2, #0
 800e9b0:	18a3      	adds	r3, r4, r2
 800e9b2:	50a7      	str	r7, [r4, r2]
 800e9b4:	b107      	cbz	r7, 800e9b8 <rshift+0x68>
 800e9b6:	3304      	adds	r3, #4
 800e9b8:	1b1a      	subs	r2, r3, r4
 800e9ba:	42a3      	cmp	r3, r4
 800e9bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e9c0:	bf08      	it	eq
 800e9c2:	2300      	moveq	r3, #0
 800e9c4:	6102      	str	r2, [r0, #16]
 800e9c6:	bf08      	it	eq
 800e9c8:	6143      	streq	r3, [r0, #20]
 800e9ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9ce:	f8dc c000 	ldr.w	ip, [ip]
 800e9d2:	fa0c fc08 	lsl.w	ip, ip, r8
 800e9d6:	ea4c 0707 	orr.w	r7, ip, r7
 800e9da:	f849 7b04 	str.w	r7, [r9], #4
 800e9de:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e9e2:	40cf      	lsrs	r7, r1
 800e9e4:	e7da      	b.n	800e99c <rshift+0x4c>
 800e9e6:	f851 cb04 	ldr.w	ip, [r1], #4
 800e9ea:	f847 cf04 	str.w	ip, [r7, #4]!
 800e9ee:	e7c3      	b.n	800e978 <rshift+0x28>
 800e9f0:	4623      	mov	r3, r4
 800e9f2:	e7e1      	b.n	800e9b8 <rshift+0x68>

0800e9f4 <__hexdig_fun>:
 800e9f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e9f8:	2b09      	cmp	r3, #9
 800e9fa:	d802      	bhi.n	800ea02 <__hexdig_fun+0xe>
 800e9fc:	3820      	subs	r0, #32
 800e9fe:	b2c0      	uxtb	r0, r0
 800ea00:	4770      	bx	lr
 800ea02:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ea06:	2b05      	cmp	r3, #5
 800ea08:	d801      	bhi.n	800ea0e <__hexdig_fun+0x1a>
 800ea0a:	3847      	subs	r0, #71	; 0x47
 800ea0c:	e7f7      	b.n	800e9fe <__hexdig_fun+0xa>
 800ea0e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ea12:	2b05      	cmp	r3, #5
 800ea14:	d801      	bhi.n	800ea1a <__hexdig_fun+0x26>
 800ea16:	3827      	subs	r0, #39	; 0x27
 800ea18:	e7f1      	b.n	800e9fe <__hexdig_fun+0xa>
 800ea1a:	2000      	movs	r0, #0
 800ea1c:	4770      	bx	lr
	...

0800ea20 <__gethex>:
 800ea20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea24:	4617      	mov	r7, r2
 800ea26:	680a      	ldr	r2, [r1, #0]
 800ea28:	b085      	sub	sp, #20
 800ea2a:	f102 0b02 	add.w	fp, r2, #2
 800ea2e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ea32:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ea36:	4681      	mov	r9, r0
 800ea38:	468a      	mov	sl, r1
 800ea3a:	9302      	str	r3, [sp, #8]
 800ea3c:	32fe      	adds	r2, #254	; 0xfe
 800ea3e:	eb02 030b 	add.w	r3, r2, fp
 800ea42:	46d8      	mov	r8, fp
 800ea44:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ea48:	9301      	str	r3, [sp, #4]
 800ea4a:	2830      	cmp	r0, #48	; 0x30
 800ea4c:	d0f7      	beq.n	800ea3e <__gethex+0x1e>
 800ea4e:	f7ff ffd1 	bl	800e9f4 <__hexdig_fun>
 800ea52:	4604      	mov	r4, r0
 800ea54:	2800      	cmp	r0, #0
 800ea56:	d138      	bne.n	800eaca <__gethex+0xaa>
 800ea58:	49a7      	ldr	r1, [pc, #668]	; (800ecf8 <__gethex+0x2d8>)
 800ea5a:	2201      	movs	r2, #1
 800ea5c:	4640      	mov	r0, r8
 800ea5e:	f7ff ff08 	bl	800e872 <strncmp>
 800ea62:	4606      	mov	r6, r0
 800ea64:	2800      	cmp	r0, #0
 800ea66:	d169      	bne.n	800eb3c <__gethex+0x11c>
 800ea68:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ea6c:	465d      	mov	r5, fp
 800ea6e:	f7ff ffc1 	bl	800e9f4 <__hexdig_fun>
 800ea72:	2800      	cmp	r0, #0
 800ea74:	d064      	beq.n	800eb40 <__gethex+0x120>
 800ea76:	465a      	mov	r2, fp
 800ea78:	7810      	ldrb	r0, [r2, #0]
 800ea7a:	2830      	cmp	r0, #48	; 0x30
 800ea7c:	4690      	mov	r8, r2
 800ea7e:	f102 0201 	add.w	r2, r2, #1
 800ea82:	d0f9      	beq.n	800ea78 <__gethex+0x58>
 800ea84:	f7ff ffb6 	bl	800e9f4 <__hexdig_fun>
 800ea88:	2301      	movs	r3, #1
 800ea8a:	fab0 f480 	clz	r4, r0
 800ea8e:	0964      	lsrs	r4, r4, #5
 800ea90:	465e      	mov	r6, fp
 800ea92:	9301      	str	r3, [sp, #4]
 800ea94:	4642      	mov	r2, r8
 800ea96:	4615      	mov	r5, r2
 800ea98:	3201      	adds	r2, #1
 800ea9a:	7828      	ldrb	r0, [r5, #0]
 800ea9c:	f7ff ffaa 	bl	800e9f4 <__hexdig_fun>
 800eaa0:	2800      	cmp	r0, #0
 800eaa2:	d1f8      	bne.n	800ea96 <__gethex+0x76>
 800eaa4:	4994      	ldr	r1, [pc, #592]	; (800ecf8 <__gethex+0x2d8>)
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	4628      	mov	r0, r5
 800eaaa:	f7ff fee2 	bl	800e872 <strncmp>
 800eaae:	b978      	cbnz	r0, 800ead0 <__gethex+0xb0>
 800eab0:	b946      	cbnz	r6, 800eac4 <__gethex+0xa4>
 800eab2:	1c6e      	adds	r6, r5, #1
 800eab4:	4632      	mov	r2, r6
 800eab6:	4615      	mov	r5, r2
 800eab8:	3201      	adds	r2, #1
 800eaba:	7828      	ldrb	r0, [r5, #0]
 800eabc:	f7ff ff9a 	bl	800e9f4 <__hexdig_fun>
 800eac0:	2800      	cmp	r0, #0
 800eac2:	d1f8      	bne.n	800eab6 <__gethex+0x96>
 800eac4:	1b73      	subs	r3, r6, r5
 800eac6:	009e      	lsls	r6, r3, #2
 800eac8:	e004      	b.n	800ead4 <__gethex+0xb4>
 800eaca:	2400      	movs	r4, #0
 800eacc:	4626      	mov	r6, r4
 800eace:	e7e1      	b.n	800ea94 <__gethex+0x74>
 800ead0:	2e00      	cmp	r6, #0
 800ead2:	d1f7      	bne.n	800eac4 <__gethex+0xa4>
 800ead4:	782b      	ldrb	r3, [r5, #0]
 800ead6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800eada:	2b50      	cmp	r3, #80	; 0x50
 800eadc:	d13d      	bne.n	800eb5a <__gethex+0x13a>
 800eade:	786b      	ldrb	r3, [r5, #1]
 800eae0:	2b2b      	cmp	r3, #43	; 0x2b
 800eae2:	d02f      	beq.n	800eb44 <__gethex+0x124>
 800eae4:	2b2d      	cmp	r3, #45	; 0x2d
 800eae6:	d031      	beq.n	800eb4c <__gethex+0x12c>
 800eae8:	1c69      	adds	r1, r5, #1
 800eaea:	f04f 0b00 	mov.w	fp, #0
 800eaee:	7808      	ldrb	r0, [r1, #0]
 800eaf0:	f7ff ff80 	bl	800e9f4 <__hexdig_fun>
 800eaf4:	1e42      	subs	r2, r0, #1
 800eaf6:	b2d2      	uxtb	r2, r2
 800eaf8:	2a18      	cmp	r2, #24
 800eafa:	d82e      	bhi.n	800eb5a <__gethex+0x13a>
 800eafc:	f1a0 0210 	sub.w	r2, r0, #16
 800eb00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eb04:	f7ff ff76 	bl	800e9f4 <__hexdig_fun>
 800eb08:	f100 3cff 	add.w	ip, r0, #4294967295
 800eb0c:	fa5f fc8c 	uxtb.w	ip, ip
 800eb10:	f1bc 0f18 	cmp.w	ip, #24
 800eb14:	d91d      	bls.n	800eb52 <__gethex+0x132>
 800eb16:	f1bb 0f00 	cmp.w	fp, #0
 800eb1a:	d000      	beq.n	800eb1e <__gethex+0xfe>
 800eb1c:	4252      	negs	r2, r2
 800eb1e:	4416      	add	r6, r2
 800eb20:	f8ca 1000 	str.w	r1, [sl]
 800eb24:	b1dc      	cbz	r4, 800eb5e <__gethex+0x13e>
 800eb26:	9b01      	ldr	r3, [sp, #4]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	bf14      	ite	ne
 800eb2c:	f04f 0800 	movne.w	r8, #0
 800eb30:	f04f 0806 	moveq.w	r8, #6
 800eb34:	4640      	mov	r0, r8
 800eb36:	b005      	add	sp, #20
 800eb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb3c:	4645      	mov	r5, r8
 800eb3e:	4626      	mov	r6, r4
 800eb40:	2401      	movs	r4, #1
 800eb42:	e7c7      	b.n	800ead4 <__gethex+0xb4>
 800eb44:	f04f 0b00 	mov.w	fp, #0
 800eb48:	1ca9      	adds	r1, r5, #2
 800eb4a:	e7d0      	b.n	800eaee <__gethex+0xce>
 800eb4c:	f04f 0b01 	mov.w	fp, #1
 800eb50:	e7fa      	b.n	800eb48 <__gethex+0x128>
 800eb52:	230a      	movs	r3, #10
 800eb54:	fb03 0002 	mla	r0, r3, r2, r0
 800eb58:	e7d0      	b.n	800eafc <__gethex+0xdc>
 800eb5a:	4629      	mov	r1, r5
 800eb5c:	e7e0      	b.n	800eb20 <__gethex+0x100>
 800eb5e:	eba5 0308 	sub.w	r3, r5, r8
 800eb62:	3b01      	subs	r3, #1
 800eb64:	4621      	mov	r1, r4
 800eb66:	2b07      	cmp	r3, #7
 800eb68:	dc0a      	bgt.n	800eb80 <__gethex+0x160>
 800eb6a:	4648      	mov	r0, r9
 800eb6c:	f7fd fd8a 	bl	800c684 <_Balloc>
 800eb70:	4604      	mov	r4, r0
 800eb72:	b940      	cbnz	r0, 800eb86 <__gethex+0x166>
 800eb74:	4b61      	ldr	r3, [pc, #388]	; (800ecfc <__gethex+0x2dc>)
 800eb76:	4602      	mov	r2, r0
 800eb78:	21e4      	movs	r1, #228	; 0xe4
 800eb7a:	4861      	ldr	r0, [pc, #388]	; (800ed00 <__gethex+0x2e0>)
 800eb7c:	f7ff feb4 	bl	800e8e8 <__assert_func>
 800eb80:	3101      	adds	r1, #1
 800eb82:	105b      	asrs	r3, r3, #1
 800eb84:	e7ef      	b.n	800eb66 <__gethex+0x146>
 800eb86:	f100 0a14 	add.w	sl, r0, #20
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	495a      	ldr	r1, [pc, #360]	; (800ecf8 <__gethex+0x2d8>)
 800eb8e:	f8cd a004 	str.w	sl, [sp, #4]
 800eb92:	469b      	mov	fp, r3
 800eb94:	45a8      	cmp	r8, r5
 800eb96:	d342      	bcc.n	800ec1e <__gethex+0x1fe>
 800eb98:	9801      	ldr	r0, [sp, #4]
 800eb9a:	f840 bb04 	str.w	fp, [r0], #4
 800eb9e:	eba0 000a 	sub.w	r0, r0, sl
 800eba2:	1080      	asrs	r0, r0, #2
 800eba4:	6120      	str	r0, [r4, #16]
 800eba6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ebaa:	4658      	mov	r0, fp
 800ebac:	f7fd fe5c 	bl	800c868 <__hi0bits>
 800ebb0:	683d      	ldr	r5, [r7, #0]
 800ebb2:	eba8 0000 	sub.w	r0, r8, r0
 800ebb6:	42a8      	cmp	r0, r5
 800ebb8:	dd59      	ble.n	800ec6e <__gethex+0x24e>
 800ebba:	eba0 0805 	sub.w	r8, r0, r5
 800ebbe:	4641      	mov	r1, r8
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	f7fe f9eb 	bl	800cf9c <__any_on>
 800ebc6:	4683      	mov	fp, r0
 800ebc8:	b1b8      	cbz	r0, 800ebfa <__gethex+0x1da>
 800ebca:	f108 33ff 	add.w	r3, r8, #4294967295
 800ebce:	1159      	asrs	r1, r3, #5
 800ebd0:	f003 021f 	and.w	r2, r3, #31
 800ebd4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ebd8:	f04f 0b01 	mov.w	fp, #1
 800ebdc:	fa0b f202 	lsl.w	r2, fp, r2
 800ebe0:	420a      	tst	r2, r1
 800ebe2:	d00a      	beq.n	800ebfa <__gethex+0x1da>
 800ebe4:	455b      	cmp	r3, fp
 800ebe6:	dd06      	ble.n	800ebf6 <__gethex+0x1d6>
 800ebe8:	f1a8 0102 	sub.w	r1, r8, #2
 800ebec:	4620      	mov	r0, r4
 800ebee:	f7fe f9d5 	bl	800cf9c <__any_on>
 800ebf2:	2800      	cmp	r0, #0
 800ebf4:	d138      	bne.n	800ec68 <__gethex+0x248>
 800ebf6:	f04f 0b02 	mov.w	fp, #2
 800ebfa:	4641      	mov	r1, r8
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	f7ff fea7 	bl	800e950 <rshift>
 800ec02:	4446      	add	r6, r8
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	42b3      	cmp	r3, r6
 800ec08:	da41      	bge.n	800ec8e <__gethex+0x26e>
 800ec0a:	4621      	mov	r1, r4
 800ec0c:	4648      	mov	r0, r9
 800ec0e:	f7fd fd79 	bl	800c704 <_Bfree>
 800ec12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ec14:	2300      	movs	r3, #0
 800ec16:	6013      	str	r3, [r2, #0]
 800ec18:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ec1c:	e78a      	b.n	800eb34 <__gethex+0x114>
 800ec1e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ec22:	2a2e      	cmp	r2, #46	; 0x2e
 800ec24:	d014      	beq.n	800ec50 <__gethex+0x230>
 800ec26:	2b20      	cmp	r3, #32
 800ec28:	d106      	bne.n	800ec38 <__gethex+0x218>
 800ec2a:	9b01      	ldr	r3, [sp, #4]
 800ec2c:	f843 bb04 	str.w	fp, [r3], #4
 800ec30:	f04f 0b00 	mov.w	fp, #0
 800ec34:	9301      	str	r3, [sp, #4]
 800ec36:	465b      	mov	r3, fp
 800ec38:	7828      	ldrb	r0, [r5, #0]
 800ec3a:	9303      	str	r3, [sp, #12]
 800ec3c:	f7ff feda 	bl	800e9f4 <__hexdig_fun>
 800ec40:	9b03      	ldr	r3, [sp, #12]
 800ec42:	f000 000f 	and.w	r0, r0, #15
 800ec46:	4098      	lsls	r0, r3
 800ec48:	ea4b 0b00 	orr.w	fp, fp, r0
 800ec4c:	3304      	adds	r3, #4
 800ec4e:	e7a1      	b.n	800eb94 <__gethex+0x174>
 800ec50:	45a8      	cmp	r8, r5
 800ec52:	d8e8      	bhi.n	800ec26 <__gethex+0x206>
 800ec54:	2201      	movs	r2, #1
 800ec56:	4628      	mov	r0, r5
 800ec58:	9303      	str	r3, [sp, #12]
 800ec5a:	f7ff fe0a 	bl	800e872 <strncmp>
 800ec5e:	4926      	ldr	r1, [pc, #152]	; (800ecf8 <__gethex+0x2d8>)
 800ec60:	9b03      	ldr	r3, [sp, #12]
 800ec62:	2800      	cmp	r0, #0
 800ec64:	d1df      	bne.n	800ec26 <__gethex+0x206>
 800ec66:	e795      	b.n	800eb94 <__gethex+0x174>
 800ec68:	f04f 0b03 	mov.w	fp, #3
 800ec6c:	e7c5      	b.n	800ebfa <__gethex+0x1da>
 800ec6e:	da0b      	bge.n	800ec88 <__gethex+0x268>
 800ec70:	eba5 0800 	sub.w	r8, r5, r0
 800ec74:	4621      	mov	r1, r4
 800ec76:	4642      	mov	r2, r8
 800ec78:	4648      	mov	r0, r9
 800ec7a:	f7fd ff5d 	bl	800cb38 <__lshift>
 800ec7e:	eba6 0608 	sub.w	r6, r6, r8
 800ec82:	4604      	mov	r4, r0
 800ec84:	f100 0a14 	add.w	sl, r0, #20
 800ec88:	f04f 0b00 	mov.w	fp, #0
 800ec8c:	e7ba      	b.n	800ec04 <__gethex+0x1e4>
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	42b3      	cmp	r3, r6
 800ec92:	dd73      	ble.n	800ed7c <__gethex+0x35c>
 800ec94:	1b9e      	subs	r6, r3, r6
 800ec96:	42b5      	cmp	r5, r6
 800ec98:	dc34      	bgt.n	800ed04 <__gethex+0x2e4>
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	2b02      	cmp	r3, #2
 800ec9e:	d023      	beq.n	800ece8 <__gethex+0x2c8>
 800eca0:	2b03      	cmp	r3, #3
 800eca2:	d025      	beq.n	800ecf0 <__gethex+0x2d0>
 800eca4:	2b01      	cmp	r3, #1
 800eca6:	d115      	bne.n	800ecd4 <__gethex+0x2b4>
 800eca8:	42b5      	cmp	r5, r6
 800ecaa:	d113      	bne.n	800ecd4 <__gethex+0x2b4>
 800ecac:	2d01      	cmp	r5, #1
 800ecae:	d10b      	bne.n	800ecc8 <__gethex+0x2a8>
 800ecb0:	9a02      	ldr	r2, [sp, #8]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6013      	str	r3, [r2, #0]
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	6123      	str	r3, [r4, #16]
 800ecba:	f8ca 3000 	str.w	r3, [sl]
 800ecbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ecc0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ecc4:	601c      	str	r4, [r3, #0]
 800ecc6:	e735      	b.n	800eb34 <__gethex+0x114>
 800ecc8:	1e69      	subs	r1, r5, #1
 800ecca:	4620      	mov	r0, r4
 800eccc:	f7fe f966 	bl	800cf9c <__any_on>
 800ecd0:	2800      	cmp	r0, #0
 800ecd2:	d1ed      	bne.n	800ecb0 <__gethex+0x290>
 800ecd4:	4621      	mov	r1, r4
 800ecd6:	4648      	mov	r0, r9
 800ecd8:	f7fd fd14 	bl	800c704 <_Bfree>
 800ecdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ecde:	2300      	movs	r3, #0
 800ece0:	6013      	str	r3, [r2, #0]
 800ece2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ece6:	e725      	b.n	800eb34 <__gethex+0x114>
 800ece8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d1f2      	bne.n	800ecd4 <__gethex+0x2b4>
 800ecee:	e7df      	b.n	800ecb0 <__gethex+0x290>
 800ecf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d1dc      	bne.n	800ecb0 <__gethex+0x290>
 800ecf6:	e7ed      	b.n	800ecd4 <__gethex+0x2b4>
 800ecf8:	0801120c 	.word	0x0801120c
 800ecfc:	0801109f 	.word	0x0801109f
 800ed00:	080113d1 	.word	0x080113d1
 800ed04:	f106 38ff 	add.w	r8, r6, #4294967295
 800ed08:	f1bb 0f00 	cmp.w	fp, #0
 800ed0c:	d133      	bne.n	800ed76 <__gethex+0x356>
 800ed0e:	f1b8 0f00 	cmp.w	r8, #0
 800ed12:	d004      	beq.n	800ed1e <__gethex+0x2fe>
 800ed14:	4641      	mov	r1, r8
 800ed16:	4620      	mov	r0, r4
 800ed18:	f7fe f940 	bl	800cf9c <__any_on>
 800ed1c:	4683      	mov	fp, r0
 800ed1e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ed22:	2301      	movs	r3, #1
 800ed24:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ed28:	f008 081f 	and.w	r8, r8, #31
 800ed2c:	fa03 f308 	lsl.w	r3, r3, r8
 800ed30:	4213      	tst	r3, r2
 800ed32:	4631      	mov	r1, r6
 800ed34:	4620      	mov	r0, r4
 800ed36:	bf18      	it	ne
 800ed38:	f04b 0b02 	orrne.w	fp, fp, #2
 800ed3c:	1bad      	subs	r5, r5, r6
 800ed3e:	f7ff fe07 	bl	800e950 <rshift>
 800ed42:	687e      	ldr	r6, [r7, #4]
 800ed44:	f04f 0802 	mov.w	r8, #2
 800ed48:	f1bb 0f00 	cmp.w	fp, #0
 800ed4c:	d04a      	beq.n	800ede4 <__gethex+0x3c4>
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	2b02      	cmp	r3, #2
 800ed52:	d016      	beq.n	800ed82 <__gethex+0x362>
 800ed54:	2b03      	cmp	r3, #3
 800ed56:	d018      	beq.n	800ed8a <__gethex+0x36a>
 800ed58:	2b01      	cmp	r3, #1
 800ed5a:	d109      	bne.n	800ed70 <__gethex+0x350>
 800ed5c:	f01b 0f02 	tst.w	fp, #2
 800ed60:	d006      	beq.n	800ed70 <__gethex+0x350>
 800ed62:	f8da 3000 	ldr.w	r3, [sl]
 800ed66:	ea4b 0b03 	orr.w	fp, fp, r3
 800ed6a:	f01b 0f01 	tst.w	fp, #1
 800ed6e:	d10f      	bne.n	800ed90 <__gethex+0x370>
 800ed70:	f048 0810 	orr.w	r8, r8, #16
 800ed74:	e036      	b.n	800ede4 <__gethex+0x3c4>
 800ed76:	f04f 0b01 	mov.w	fp, #1
 800ed7a:	e7d0      	b.n	800ed1e <__gethex+0x2fe>
 800ed7c:	f04f 0801 	mov.w	r8, #1
 800ed80:	e7e2      	b.n	800ed48 <__gethex+0x328>
 800ed82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed84:	f1c3 0301 	rsb	r3, r3, #1
 800ed88:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d0ef      	beq.n	800ed70 <__gethex+0x350>
 800ed90:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ed94:	f104 0214 	add.w	r2, r4, #20
 800ed98:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ed9c:	9301      	str	r3, [sp, #4]
 800ed9e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800eda2:	2300      	movs	r3, #0
 800eda4:	4694      	mov	ip, r2
 800eda6:	f852 1b04 	ldr.w	r1, [r2], #4
 800edaa:	f1b1 3fff 	cmp.w	r1, #4294967295
 800edae:	d01e      	beq.n	800edee <__gethex+0x3ce>
 800edb0:	3101      	adds	r1, #1
 800edb2:	f8cc 1000 	str.w	r1, [ip]
 800edb6:	f1b8 0f02 	cmp.w	r8, #2
 800edba:	f104 0214 	add.w	r2, r4, #20
 800edbe:	d13d      	bne.n	800ee3c <__gethex+0x41c>
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	3b01      	subs	r3, #1
 800edc4:	42ab      	cmp	r3, r5
 800edc6:	d10b      	bne.n	800ede0 <__gethex+0x3c0>
 800edc8:	1169      	asrs	r1, r5, #5
 800edca:	2301      	movs	r3, #1
 800edcc:	f005 051f 	and.w	r5, r5, #31
 800edd0:	fa03 f505 	lsl.w	r5, r3, r5
 800edd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800edd8:	421d      	tst	r5, r3
 800edda:	bf18      	it	ne
 800eddc:	f04f 0801 	movne.w	r8, #1
 800ede0:	f048 0820 	orr.w	r8, r8, #32
 800ede4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ede6:	601c      	str	r4, [r3, #0]
 800ede8:	9b02      	ldr	r3, [sp, #8]
 800edea:	601e      	str	r6, [r3, #0]
 800edec:	e6a2      	b.n	800eb34 <__gethex+0x114>
 800edee:	4290      	cmp	r0, r2
 800edf0:	f842 3c04 	str.w	r3, [r2, #-4]
 800edf4:	d8d6      	bhi.n	800eda4 <__gethex+0x384>
 800edf6:	68a2      	ldr	r2, [r4, #8]
 800edf8:	4593      	cmp	fp, r2
 800edfa:	db17      	blt.n	800ee2c <__gethex+0x40c>
 800edfc:	6861      	ldr	r1, [r4, #4]
 800edfe:	4648      	mov	r0, r9
 800ee00:	3101      	adds	r1, #1
 800ee02:	f7fd fc3f 	bl	800c684 <_Balloc>
 800ee06:	4682      	mov	sl, r0
 800ee08:	b918      	cbnz	r0, 800ee12 <__gethex+0x3f2>
 800ee0a:	4b1b      	ldr	r3, [pc, #108]	; (800ee78 <__gethex+0x458>)
 800ee0c:	4602      	mov	r2, r0
 800ee0e:	2184      	movs	r1, #132	; 0x84
 800ee10:	e6b3      	b.n	800eb7a <__gethex+0x15a>
 800ee12:	6922      	ldr	r2, [r4, #16]
 800ee14:	3202      	adds	r2, #2
 800ee16:	f104 010c 	add.w	r1, r4, #12
 800ee1a:	0092      	lsls	r2, r2, #2
 800ee1c:	300c      	adds	r0, #12
 800ee1e:	f7ff fd4b 	bl	800e8b8 <memcpy>
 800ee22:	4621      	mov	r1, r4
 800ee24:	4648      	mov	r0, r9
 800ee26:	f7fd fc6d 	bl	800c704 <_Bfree>
 800ee2a:	4654      	mov	r4, sl
 800ee2c:	6922      	ldr	r2, [r4, #16]
 800ee2e:	1c51      	adds	r1, r2, #1
 800ee30:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ee34:	6121      	str	r1, [r4, #16]
 800ee36:	2101      	movs	r1, #1
 800ee38:	6151      	str	r1, [r2, #20]
 800ee3a:	e7bc      	b.n	800edb6 <__gethex+0x396>
 800ee3c:	6921      	ldr	r1, [r4, #16]
 800ee3e:	4559      	cmp	r1, fp
 800ee40:	dd0b      	ble.n	800ee5a <__gethex+0x43a>
 800ee42:	2101      	movs	r1, #1
 800ee44:	4620      	mov	r0, r4
 800ee46:	f7ff fd83 	bl	800e950 <rshift>
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	3601      	adds	r6, #1
 800ee4e:	42b3      	cmp	r3, r6
 800ee50:	f6ff aedb 	blt.w	800ec0a <__gethex+0x1ea>
 800ee54:	f04f 0801 	mov.w	r8, #1
 800ee58:	e7c2      	b.n	800ede0 <__gethex+0x3c0>
 800ee5a:	f015 051f 	ands.w	r5, r5, #31
 800ee5e:	d0f9      	beq.n	800ee54 <__gethex+0x434>
 800ee60:	9b01      	ldr	r3, [sp, #4]
 800ee62:	441a      	add	r2, r3
 800ee64:	f1c5 0520 	rsb	r5, r5, #32
 800ee68:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ee6c:	f7fd fcfc 	bl	800c868 <__hi0bits>
 800ee70:	42a8      	cmp	r0, r5
 800ee72:	dbe6      	blt.n	800ee42 <__gethex+0x422>
 800ee74:	e7ee      	b.n	800ee54 <__gethex+0x434>
 800ee76:	bf00      	nop
 800ee78:	0801109f 	.word	0x0801109f

0800ee7c <L_shift>:
 800ee7c:	f1c2 0208 	rsb	r2, r2, #8
 800ee80:	0092      	lsls	r2, r2, #2
 800ee82:	b570      	push	{r4, r5, r6, lr}
 800ee84:	f1c2 0620 	rsb	r6, r2, #32
 800ee88:	6843      	ldr	r3, [r0, #4]
 800ee8a:	6804      	ldr	r4, [r0, #0]
 800ee8c:	fa03 f506 	lsl.w	r5, r3, r6
 800ee90:	432c      	orrs	r4, r5
 800ee92:	40d3      	lsrs	r3, r2
 800ee94:	6004      	str	r4, [r0, #0]
 800ee96:	f840 3f04 	str.w	r3, [r0, #4]!
 800ee9a:	4288      	cmp	r0, r1
 800ee9c:	d3f4      	bcc.n	800ee88 <L_shift+0xc>
 800ee9e:	bd70      	pop	{r4, r5, r6, pc}

0800eea0 <__match>:
 800eea0:	b530      	push	{r4, r5, lr}
 800eea2:	6803      	ldr	r3, [r0, #0]
 800eea4:	3301      	adds	r3, #1
 800eea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eeaa:	b914      	cbnz	r4, 800eeb2 <__match+0x12>
 800eeac:	6003      	str	r3, [r0, #0]
 800eeae:	2001      	movs	r0, #1
 800eeb0:	bd30      	pop	{r4, r5, pc}
 800eeb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eeb6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800eeba:	2d19      	cmp	r5, #25
 800eebc:	bf98      	it	ls
 800eebe:	3220      	addls	r2, #32
 800eec0:	42a2      	cmp	r2, r4
 800eec2:	d0f0      	beq.n	800eea6 <__match+0x6>
 800eec4:	2000      	movs	r0, #0
 800eec6:	e7f3      	b.n	800eeb0 <__match+0x10>

0800eec8 <__hexnan>:
 800eec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eecc:	680b      	ldr	r3, [r1, #0]
 800eece:	6801      	ldr	r1, [r0, #0]
 800eed0:	115e      	asrs	r6, r3, #5
 800eed2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800eed6:	f013 031f 	ands.w	r3, r3, #31
 800eeda:	b087      	sub	sp, #28
 800eedc:	bf18      	it	ne
 800eede:	3604      	addne	r6, #4
 800eee0:	2500      	movs	r5, #0
 800eee2:	1f37      	subs	r7, r6, #4
 800eee4:	4682      	mov	sl, r0
 800eee6:	4690      	mov	r8, r2
 800eee8:	9301      	str	r3, [sp, #4]
 800eeea:	f846 5c04 	str.w	r5, [r6, #-4]
 800eeee:	46b9      	mov	r9, r7
 800eef0:	463c      	mov	r4, r7
 800eef2:	9502      	str	r5, [sp, #8]
 800eef4:	46ab      	mov	fp, r5
 800eef6:	784a      	ldrb	r2, [r1, #1]
 800eef8:	1c4b      	adds	r3, r1, #1
 800eefa:	9303      	str	r3, [sp, #12]
 800eefc:	b342      	cbz	r2, 800ef50 <__hexnan+0x88>
 800eefe:	4610      	mov	r0, r2
 800ef00:	9105      	str	r1, [sp, #20]
 800ef02:	9204      	str	r2, [sp, #16]
 800ef04:	f7ff fd76 	bl	800e9f4 <__hexdig_fun>
 800ef08:	2800      	cmp	r0, #0
 800ef0a:	d14f      	bne.n	800efac <__hexnan+0xe4>
 800ef0c:	9a04      	ldr	r2, [sp, #16]
 800ef0e:	9905      	ldr	r1, [sp, #20]
 800ef10:	2a20      	cmp	r2, #32
 800ef12:	d818      	bhi.n	800ef46 <__hexnan+0x7e>
 800ef14:	9b02      	ldr	r3, [sp, #8]
 800ef16:	459b      	cmp	fp, r3
 800ef18:	dd13      	ble.n	800ef42 <__hexnan+0x7a>
 800ef1a:	454c      	cmp	r4, r9
 800ef1c:	d206      	bcs.n	800ef2c <__hexnan+0x64>
 800ef1e:	2d07      	cmp	r5, #7
 800ef20:	dc04      	bgt.n	800ef2c <__hexnan+0x64>
 800ef22:	462a      	mov	r2, r5
 800ef24:	4649      	mov	r1, r9
 800ef26:	4620      	mov	r0, r4
 800ef28:	f7ff ffa8 	bl	800ee7c <L_shift>
 800ef2c:	4544      	cmp	r4, r8
 800ef2e:	d950      	bls.n	800efd2 <__hexnan+0x10a>
 800ef30:	2300      	movs	r3, #0
 800ef32:	f1a4 0904 	sub.w	r9, r4, #4
 800ef36:	f844 3c04 	str.w	r3, [r4, #-4]
 800ef3a:	f8cd b008 	str.w	fp, [sp, #8]
 800ef3e:	464c      	mov	r4, r9
 800ef40:	461d      	mov	r5, r3
 800ef42:	9903      	ldr	r1, [sp, #12]
 800ef44:	e7d7      	b.n	800eef6 <__hexnan+0x2e>
 800ef46:	2a29      	cmp	r2, #41	; 0x29
 800ef48:	d155      	bne.n	800eff6 <__hexnan+0x12e>
 800ef4a:	3102      	adds	r1, #2
 800ef4c:	f8ca 1000 	str.w	r1, [sl]
 800ef50:	f1bb 0f00 	cmp.w	fp, #0
 800ef54:	d04f      	beq.n	800eff6 <__hexnan+0x12e>
 800ef56:	454c      	cmp	r4, r9
 800ef58:	d206      	bcs.n	800ef68 <__hexnan+0xa0>
 800ef5a:	2d07      	cmp	r5, #7
 800ef5c:	dc04      	bgt.n	800ef68 <__hexnan+0xa0>
 800ef5e:	462a      	mov	r2, r5
 800ef60:	4649      	mov	r1, r9
 800ef62:	4620      	mov	r0, r4
 800ef64:	f7ff ff8a 	bl	800ee7c <L_shift>
 800ef68:	4544      	cmp	r4, r8
 800ef6a:	d934      	bls.n	800efd6 <__hexnan+0x10e>
 800ef6c:	f1a8 0204 	sub.w	r2, r8, #4
 800ef70:	4623      	mov	r3, r4
 800ef72:	f853 1b04 	ldr.w	r1, [r3], #4
 800ef76:	f842 1f04 	str.w	r1, [r2, #4]!
 800ef7a:	429f      	cmp	r7, r3
 800ef7c:	d2f9      	bcs.n	800ef72 <__hexnan+0xaa>
 800ef7e:	1b3b      	subs	r3, r7, r4
 800ef80:	f023 0303 	bic.w	r3, r3, #3
 800ef84:	3304      	adds	r3, #4
 800ef86:	3e03      	subs	r6, #3
 800ef88:	3401      	adds	r4, #1
 800ef8a:	42a6      	cmp	r6, r4
 800ef8c:	bf38      	it	cc
 800ef8e:	2304      	movcc	r3, #4
 800ef90:	4443      	add	r3, r8
 800ef92:	2200      	movs	r2, #0
 800ef94:	f843 2b04 	str.w	r2, [r3], #4
 800ef98:	429f      	cmp	r7, r3
 800ef9a:	d2fb      	bcs.n	800ef94 <__hexnan+0xcc>
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	b91b      	cbnz	r3, 800efa8 <__hexnan+0xe0>
 800efa0:	4547      	cmp	r7, r8
 800efa2:	d126      	bne.n	800eff2 <__hexnan+0x12a>
 800efa4:	2301      	movs	r3, #1
 800efa6:	603b      	str	r3, [r7, #0]
 800efa8:	2005      	movs	r0, #5
 800efaa:	e025      	b.n	800eff8 <__hexnan+0x130>
 800efac:	3501      	adds	r5, #1
 800efae:	2d08      	cmp	r5, #8
 800efb0:	f10b 0b01 	add.w	fp, fp, #1
 800efb4:	dd06      	ble.n	800efc4 <__hexnan+0xfc>
 800efb6:	4544      	cmp	r4, r8
 800efb8:	d9c3      	bls.n	800ef42 <__hexnan+0x7a>
 800efba:	2300      	movs	r3, #0
 800efbc:	f844 3c04 	str.w	r3, [r4, #-4]
 800efc0:	2501      	movs	r5, #1
 800efc2:	3c04      	subs	r4, #4
 800efc4:	6822      	ldr	r2, [r4, #0]
 800efc6:	f000 000f 	and.w	r0, r0, #15
 800efca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800efce:	6020      	str	r0, [r4, #0]
 800efd0:	e7b7      	b.n	800ef42 <__hexnan+0x7a>
 800efd2:	2508      	movs	r5, #8
 800efd4:	e7b5      	b.n	800ef42 <__hexnan+0x7a>
 800efd6:	9b01      	ldr	r3, [sp, #4]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d0df      	beq.n	800ef9c <__hexnan+0xd4>
 800efdc:	f1c3 0320 	rsb	r3, r3, #32
 800efe0:	f04f 32ff 	mov.w	r2, #4294967295
 800efe4:	40da      	lsrs	r2, r3
 800efe6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800efea:	4013      	ands	r3, r2
 800efec:	f846 3c04 	str.w	r3, [r6, #-4]
 800eff0:	e7d4      	b.n	800ef9c <__hexnan+0xd4>
 800eff2:	3f04      	subs	r7, #4
 800eff4:	e7d2      	b.n	800ef9c <__hexnan+0xd4>
 800eff6:	2004      	movs	r0, #4
 800eff8:	b007      	add	sp, #28
 800effa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800effe <__ascii_mbtowc>:
 800effe:	b082      	sub	sp, #8
 800f000:	b901      	cbnz	r1, 800f004 <__ascii_mbtowc+0x6>
 800f002:	a901      	add	r1, sp, #4
 800f004:	b142      	cbz	r2, 800f018 <__ascii_mbtowc+0x1a>
 800f006:	b14b      	cbz	r3, 800f01c <__ascii_mbtowc+0x1e>
 800f008:	7813      	ldrb	r3, [r2, #0]
 800f00a:	600b      	str	r3, [r1, #0]
 800f00c:	7812      	ldrb	r2, [r2, #0]
 800f00e:	1e10      	subs	r0, r2, #0
 800f010:	bf18      	it	ne
 800f012:	2001      	movne	r0, #1
 800f014:	b002      	add	sp, #8
 800f016:	4770      	bx	lr
 800f018:	4610      	mov	r0, r2
 800f01a:	e7fb      	b.n	800f014 <__ascii_mbtowc+0x16>
 800f01c:	f06f 0001 	mvn.w	r0, #1
 800f020:	e7f8      	b.n	800f014 <__ascii_mbtowc+0x16>

0800f022 <_realloc_r>:
 800f022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f026:	4680      	mov	r8, r0
 800f028:	4614      	mov	r4, r2
 800f02a:	460e      	mov	r6, r1
 800f02c:	b921      	cbnz	r1, 800f038 <_realloc_r+0x16>
 800f02e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f032:	4611      	mov	r1, r2
 800f034:	f7fd ba9a 	b.w	800c56c <_malloc_r>
 800f038:	b92a      	cbnz	r2, 800f046 <_realloc_r+0x24>
 800f03a:	f7fd fa23 	bl	800c484 <_free_r>
 800f03e:	4625      	mov	r5, r4
 800f040:	4628      	mov	r0, r5
 800f042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f046:	f000 f8b6 	bl	800f1b6 <_malloc_usable_size_r>
 800f04a:	4284      	cmp	r4, r0
 800f04c:	4607      	mov	r7, r0
 800f04e:	d802      	bhi.n	800f056 <_realloc_r+0x34>
 800f050:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f054:	d812      	bhi.n	800f07c <_realloc_r+0x5a>
 800f056:	4621      	mov	r1, r4
 800f058:	4640      	mov	r0, r8
 800f05a:	f7fd fa87 	bl	800c56c <_malloc_r>
 800f05e:	4605      	mov	r5, r0
 800f060:	2800      	cmp	r0, #0
 800f062:	d0ed      	beq.n	800f040 <_realloc_r+0x1e>
 800f064:	42bc      	cmp	r4, r7
 800f066:	4622      	mov	r2, r4
 800f068:	4631      	mov	r1, r6
 800f06a:	bf28      	it	cs
 800f06c:	463a      	movcs	r2, r7
 800f06e:	f7ff fc23 	bl	800e8b8 <memcpy>
 800f072:	4631      	mov	r1, r6
 800f074:	4640      	mov	r0, r8
 800f076:	f7fd fa05 	bl	800c484 <_free_r>
 800f07a:	e7e1      	b.n	800f040 <_realloc_r+0x1e>
 800f07c:	4635      	mov	r5, r6
 800f07e:	e7df      	b.n	800f040 <_realloc_r+0x1e>

0800f080 <_strtoul_l.constprop.0>:
 800f080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f084:	4f36      	ldr	r7, [pc, #216]	; (800f160 <_strtoul_l.constprop.0+0xe0>)
 800f086:	4686      	mov	lr, r0
 800f088:	460d      	mov	r5, r1
 800f08a:	4628      	mov	r0, r5
 800f08c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f090:	5d3e      	ldrb	r6, [r7, r4]
 800f092:	f016 0608 	ands.w	r6, r6, #8
 800f096:	d1f8      	bne.n	800f08a <_strtoul_l.constprop.0+0xa>
 800f098:	2c2d      	cmp	r4, #45	; 0x2d
 800f09a:	d130      	bne.n	800f0fe <_strtoul_l.constprop.0+0x7e>
 800f09c:	782c      	ldrb	r4, [r5, #0]
 800f09e:	2601      	movs	r6, #1
 800f0a0:	1c85      	adds	r5, r0, #2
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d057      	beq.n	800f156 <_strtoul_l.constprop.0+0xd6>
 800f0a6:	2b10      	cmp	r3, #16
 800f0a8:	d109      	bne.n	800f0be <_strtoul_l.constprop.0+0x3e>
 800f0aa:	2c30      	cmp	r4, #48	; 0x30
 800f0ac:	d107      	bne.n	800f0be <_strtoul_l.constprop.0+0x3e>
 800f0ae:	7828      	ldrb	r0, [r5, #0]
 800f0b0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800f0b4:	2858      	cmp	r0, #88	; 0x58
 800f0b6:	d149      	bne.n	800f14c <_strtoul_l.constprop.0+0xcc>
 800f0b8:	786c      	ldrb	r4, [r5, #1]
 800f0ba:	2310      	movs	r3, #16
 800f0bc:	3502      	adds	r5, #2
 800f0be:	f04f 38ff 	mov.w	r8, #4294967295
 800f0c2:	2700      	movs	r7, #0
 800f0c4:	fbb8 f8f3 	udiv	r8, r8, r3
 800f0c8:	fb03 f908 	mul.w	r9, r3, r8
 800f0cc:	ea6f 0909 	mvn.w	r9, r9
 800f0d0:	4638      	mov	r0, r7
 800f0d2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f0d6:	f1bc 0f09 	cmp.w	ip, #9
 800f0da:	d815      	bhi.n	800f108 <_strtoul_l.constprop.0+0x88>
 800f0dc:	4664      	mov	r4, ip
 800f0de:	42a3      	cmp	r3, r4
 800f0e0:	dd23      	ble.n	800f12a <_strtoul_l.constprop.0+0xaa>
 800f0e2:	f1b7 3fff 	cmp.w	r7, #4294967295
 800f0e6:	d007      	beq.n	800f0f8 <_strtoul_l.constprop.0+0x78>
 800f0e8:	4580      	cmp	r8, r0
 800f0ea:	d31b      	bcc.n	800f124 <_strtoul_l.constprop.0+0xa4>
 800f0ec:	d101      	bne.n	800f0f2 <_strtoul_l.constprop.0+0x72>
 800f0ee:	45a1      	cmp	r9, r4
 800f0f0:	db18      	blt.n	800f124 <_strtoul_l.constprop.0+0xa4>
 800f0f2:	fb00 4003 	mla	r0, r0, r3, r4
 800f0f6:	2701      	movs	r7, #1
 800f0f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f0fc:	e7e9      	b.n	800f0d2 <_strtoul_l.constprop.0+0x52>
 800f0fe:	2c2b      	cmp	r4, #43	; 0x2b
 800f100:	bf04      	itt	eq
 800f102:	782c      	ldrbeq	r4, [r5, #0]
 800f104:	1c85      	addeq	r5, r0, #2
 800f106:	e7cc      	b.n	800f0a2 <_strtoul_l.constprop.0+0x22>
 800f108:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f10c:	f1bc 0f19 	cmp.w	ip, #25
 800f110:	d801      	bhi.n	800f116 <_strtoul_l.constprop.0+0x96>
 800f112:	3c37      	subs	r4, #55	; 0x37
 800f114:	e7e3      	b.n	800f0de <_strtoul_l.constprop.0+0x5e>
 800f116:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f11a:	f1bc 0f19 	cmp.w	ip, #25
 800f11e:	d804      	bhi.n	800f12a <_strtoul_l.constprop.0+0xaa>
 800f120:	3c57      	subs	r4, #87	; 0x57
 800f122:	e7dc      	b.n	800f0de <_strtoul_l.constprop.0+0x5e>
 800f124:	f04f 37ff 	mov.w	r7, #4294967295
 800f128:	e7e6      	b.n	800f0f8 <_strtoul_l.constprop.0+0x78>
 800f12a:	1c7b      	adds	r3, r7, #1
 800f12c:	d106      	bne.n	800f13c <_strtoul_l.constprop.0+0xbc>
 800f12e:	2322      	movs	r3, #34	; 0x22
 800f130:	f8ce 3000 	str.w	r3, [lr]
 800f134:	4638      	mov	r0, r7
 800f136:	b932      	cbnz	r2, 800f146 <_strtoul_l.constprop.0+0xc6>
 800f138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f13c:	b106      	cbz	r6, 800f140 <_strtoul_l.constprop.0+0xc0>
 800f13e:	4240      	negs	r0, r0
 800f140:	2a00      	cmp	r2, #0
 800f142:	d0f9      	beq.n	800f138 <_strtoul_l.constprop.0+0xb8>
 800f144:	b107      	cbz	r7, 800f148 <_strtoul_l.constprop.0+0xc8>
 800f146:	1e69      	subs	r1, r5, #1
 800f148:	6011      	str	r1, [r2, #0]
 800f14a:	e7f5      	b.n	800f138 <_strtoul_l.constprop.0+0xb8>
 800f14c:	2430      	movs	r4, #48	; 0x30
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d1b5      	bne.n	800f0be <_strtoul_l.constprop.0+0x3e>
 800f152:	2308      	movs	r3, #8
 800f154:	e7b3      	b.n	800f0be <_strtoul_l.constprop.0+0x3e>
 800f156:	2c30      	cmp	r4, #48	; 0x30
 800f158:	d0a9      	beq.n	800f0ae <_strtoul_l.constprop.0+0x2e>
 800f15a:	230a      	movs	r3, #10
 800f15c:	e7af      	b.n	800f0be <_strtoul_l.constprop.0+0x3e>
 800f15e:	bf00      	nop
 800f160:	08011261 	.word	0x08011261

0800f164 <_strtoul_r>:
 800f164:	f7ff bf8c 	b.w	800f080 <_strtoul_l.constprop.0>

0800f168 <__ascii_wctomb>:
 800f168:	b149      	cbz	r1, 800f17e <__ascii_wctomb+0x16>
 800f16a:	2aff      	cmp	r2, #255	; 0xff
 800f16c:	bf85      	ittet	hi
 800f16e:	238a      	movhi	r3, #138	; 0x8a
 800f170:	6003      	strhi	r3, [r0, #0]
 800f172:	700a      	strbls	r2, [r1, #0]
 800f174:	f04f 30ff 	movhi.w	r0, #4294967295
 800f178:	bf98      	it	ls
 800f17a:	2001      	movls	r0, #1
 800f17c:	4770      	bx	lr
 800f17e:	4608      	mov	r0, r1
 800f180:	4770      	bx	lr
	...

0800f184 <fiprintf>:
 800f184:	b40e      	push	{r1, r2, r3}
 800f186:	b503      	push	{r0, r1, lr}
 800f188:	4601      	mov	r1, r0
 800f18a:	ab03      	add	r3, sp, #12
 800f18c:	4805      	ldr	r0, [pc, #20]	; (800f1a4 <fiprintf+0x20>)
 800f18e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f192:	6800      	ldr	r0, [r0, #0]
 800f194:	9301      	str	r3, [sp, #4]
 800f196:	f000 f83f 	bl	800f218 <_vfiprintf_r>
 800f19a:	b002      	add	sp, #8
 800f19c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1a0:	b003      	add	sp, #12
 800f1a2:	4770      	bx	lr
 800f1a4:	20000154 	.word	0x20000154

0800f1a8 <abort>:
 800f1a8:	b508      	push	{r3, lr}
 800f1aa:	2006      	movs	r0, #6
 800f1ac:	f000 fa0c 	bl	800f5c8 <raise>
 800f1b0:	2001      	movs	r0, #1
 800f1b2:	f7f3 fa11 	bl	80025d8 <_exit>

0800f1b6 <_malloc_usable_size_r>:
 800f1b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1ba:	1f18      	subs	r0, r3, #4
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	bfbc      	itt	lt
 800f1c0:	580b      	ldrlt	r3, [r1, r0]
 800f1c2:	18c0      	addlt	r0, r0, r3
 800f1c4:	4770      	bx	lr

0800f1c6 <__sfputc_r>:
 800f1c6:	6893      	ldr	r3, [r2, #8]
 800f1c8:	3b01      	subs	r3, #1
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	b410      	push	{r4}
 800f1ce:	6093      	str	r3, [r2, #8]
 800f1d0:	da08      	bge.n	800f1e4 <__sfputc_r+0x1e>
 800f1d2:	6994      	ldr	r4, [r2, #24]
 800f1d4:	42a3      	cmp	r3, r4
 800f1d6:	db01      	blt.n	800f1dc <__sfputc_r+0x16>
 800f1d8:	290a      	cmp	r1, #10
 800f1da:	d103      	bne.n	800f1e4 <__sfputc_r+0x1e>
 800f1dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1e0:	f000 b934 	b.w	800f44c <__swbuf_r>
 800f1e4:	6813      	ldr	r3, [r2, #0]
 800f1e6:	1c58      	adds	r0, r3, #1
 800f1e8:	6010      	str	r0, [r2, #0]
 800f1ea:	7019      	strb	r1, [r3, #0]
 800f1ec:	4608      	mov	r0, r1
 800f1ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1f2:	4770      	bx	lr

0800f1f4 <__sfputs_r>:
 800f1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1f6:	4606      	mov	r6, r0
 800f1f8:	460f      	mov	r7, r1
 800f1fa:	4614      	mov	r4, r2
 800f1fc:	18d5      	adds	r5, r2, r3
 800f1fe:	42ac      	cmp	r4, r5
 800f200:	d101      	bne.n	800f206 <__sfputs_r+0x12>
 800f202:	2000      	movs	r0, #0
 800f204:	e007      	b.n	800f216 <__sfputs_r+0x22>
 800f206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f20a:	463a      	mov	r2, r7
 800f20c:	4630      	mov	r0, r6
 800f20e:	f7ff ffda 	bl	800f1c6 <__sfputc_r>
 800f212:	1c43      	adds	r3, r0, #1
 800f214:	d1f3      	bne.n	800f1fe <__sfputs_r+0xa>
 800f216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f218 <_vfiprintf_r>:
 800f218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f21c:	460d      	mov	r5, r1
 800f21e:	b09d      	sub	sp, #116	; 0x74
 800f220:	4614      	mov	r4, r2
 800f222:	4698      	mov	r8, r3
 800f224:	4606      	mov	r6, r0
 800f226:	b118      	cbz	r0, 800f230 <_vfiprintf_r+0x18>
 800f228:	6a03      	ldr	r3, [r0, #32]
 800f22a:	b90b      	cbnz	r3, 800f230 <_vfiprintf_r+0x18>
 800f22c:	f7fc f8fa 	bl	800b424 <__sinit>
 800f230:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f232:	07d9      	lsls	r1, r3, #31
 800f234:	d405      	bmi.n	800f242 <_vfiprintf_r+0x2a>
 800f236:	89ab      	ldrh	r3, [r5, #12]
 800f238:	059a      	lsls	r2, r3, #22
 800f23a:	d402      	bmi.n	800f242 <_vfiprintf_r+0x2a>
 800f23c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f23e:	f7fc fa9f 	bl	800b780 <__retarget_lock_acquire_recursive>
 800f242:	89ab      	ldrh	r3, [r5, #12]
 800f244:	071b      	lsls	r3, r3, #28
 800f246:	d501      	bpl.n	800f24c <_vfiprintf_r+0x34>
 800f248:	692b      	ldr	r3, [r5, #16]
 800f24a:	b99b      	cbnz	r3, 800f274 <_vfiprintf_r+0x5c>
 800f24c:	4629      	mov	r1, r5
 800f24e:	4630      	mov	r0, r6
 800f250:	f000 f93a 	bl	800f4c8 <__swsetup_r>
 800f254:	b170      	cbz	r0, 800f274 <_vfiprintf_r+0x5c>
 800f256:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f258:	07dc      	lsls	r4, r3, #31
 800f25a:	d504      	bpl.n	800f266 <_vfiprintf_r+0x4e>
 800f25c:	f04f 30ff 	mov.w	r0, #4294967295
 800f260:	b01d      	add	sp, #116	; 0x74
 800f262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f266:	89ab      	ldrh	r3, [r5, #12]
 800f268:	0598      	lsls	r0, r3, #22
 800f26a:	d4f7      	bmi.n	800f25c <_vfiprintf_r+0x44>
 800f26c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f26e:	f7fc fa88 	bl	800b782 <__retarget_lock_release_recursive>
 800f272:	e7f3      	b.n	800f25c <_vfiprintf_r+0x44>
 800f274:	2300      	movs	r3, #0
 800f276:	9309      	str	r3, [sp, #36]	; 0x24
 800f278:	2320      	movs	r3, #32
 800f27a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f27e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f282:	2330      	movs	r3, #48	; 0x30
 800f284:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f438 <_vfiprintf_r+0x220>
 800f288:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f28c:	f04f 0901 	mov.w	r9, #1
 800f290:	4623      	mov	r3, r4
 800f292:	469a      	mov	sl, r3
 800f294:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f298:	b10a      	cbz	r2, 800f29e <_vfiprintf_r+0x86>
 800f29a:	2a25      	cmp	r2, #37	; 0x25
 800f29c:	d1f9      	bne.n	800f292 <_vfiprintf_r+0x7a>
 800f29e:	ebba 0b04 	subs.w	fp, sl, r4
 800f2a2:	d00b      	beq.n	800f2bc <_vfiprintf_r+0xa4>
 800f2a4:	465b      	mov	r3, fp
 800f2a6:	4622      	mov	r2, r4
 800f2a8:	4629      	mov	r1, r5
 800f2aa:	4630      	mov	r0, r6
 800f2ac:	f7ff ffa2 	bl	800f1f4 <__sfputs_r>
 800f2b0:	3001      	adds	r0, #1
 800f2b2:	f000 80a9 	beq.w	800f408 <_vfiprintf_r+0x1f0>
 800f2b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2b8:	445a      	add	r2, fp
 800f2ba:	9209      	str	r2, [sp, #36]	; 0x24
 800f2bc:	f89a 3000 	ldrb.w	r3, [sl]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	f000 80a1 	beq.w	800f408 <_vfiprintf_r+0x1f0>
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	f04f 32ff 	mov.w	r2, #4294967295
 800f2cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2d0:	f10a 0a01 	add.w	sl, sl, #1
 800f2d4:	9304      	str	r3, [sp, #16]
 800f2d6:	9307      	str	r3, [sp, #28]
 800f2d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f2dc:	931a      	str	r3, [sp, #104]	; 0x68
 800f2de:	4654      	mov	r4, sl
 800f2e0:	2205      	movs	r2, #5
 800f2e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2e6:	4854      	ldr	r0, [pc, #336]	; (800f438 <_vfiprintf_r+0x220>)
 800f2e8:	f7f0 ff72 	bl	80001d0 <memchr>
 800f2ec:	9a04      	ldr	r2, [sp, #16]
 800f2ee:	b9d8      	cbnz	r0, 800f328 <_vfiprintf_r+0x110>
 800f2f0:	06d1      	lsls	r1, r2, #27
 800f2f2:	bf44      	itt	mi
 800f2f4:	2320      	movmi	r3, #32
 800f2f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2fa:	0713      	lsls	r3, r2, #28
 800f2fc:	bf44      	itt	mi
 800f2fe:	232b      	movmi	r3, #43	; 0x2b
 800f300:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f304:	f89a 3000 	ldrb.w	r3, [sl]
 800f308:	2b2a      	cmp	r3, #42	; 0x2a
 800f30a:	d015      	beq.n	800f338 <_vfiprintf_r+0x120>
 800f30c:	9a07      	ldr	r2, [sp, #28]
 800f30e:	4654      	mov	r4, sl
 800f310:	2000      	movs	r0, #0
 800f312:	f04f 0c0a 	mov.w	ip, #10
 800f316:	4621      	mov	r1, r4
 800f318:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f31c:	3b30      	subs	r3, #48	; 0x30
 800f31e:	2b09      	cmp	r3, #9
 800f320:	d94d      	bls.n	800f3be <_vfiprintf_r+0x1a6>
 800f322:	b1b0      	cbz	r0, 800f352 <_vfiprintf_r+0x13a>
 800f324:	9207      	str	r2, [sp, #28]
 800f326:	e014      	b.n	800f352 <_vfiprintf_r+0x13a>
 800f328:	eba0 0308 	sub.w	r3, r0, r8
 800f32c:	fa09 f303 	lsl.w	r3, r9, r3
 800f330:	4313      	orrs	r3, r2
 800f332:	9304      	str	r3, [sp, #16]
 800f334:	46a2      	mov	sl, r4
 800f336:	e7d2      	b.n	800f2de <_vfiprintf_r+0xc6>
 800f338:	9b03      	ldr	r3, [sp, #12]
 800f33a:	1d19      	adds	r1, r3, #4
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	9103      	str	r1, [sp, #12]
 800f340:	2b00      	cmp	r3, #0
 800f342:	bfbb      	ittet	lt
 800f344:	425b      	neglt	r3, r3
 800f346:	f042 0202 	orrlt.w	r2, r2, #2
 800f34a:	9307      	strge	r3, [sp, #28]
 800f34c:	9307      	strlt	r3, [sp, #28]
 800f34e:	bfb8      	it	lt
 800f350:	9204      	strlt	r2, [sp, #16]
 800f352:	7823      	ldrb	r3, [r4, #0]
 800f354:	2b2e      	cmp	r3, #46	; 0x2e
 800f356:	d10c      	bne.n	800f372 <_vfiprintf_r+0x15a>
 800f358:	7863      	ldrb	r3, [r4, #1]
 800f35a:	2b2a      	cmp	r3, #42	; 0x2a
 800f35c:	d134      	bne.n	800f3c8 <_vfiprintf_r+0x1b0>
 800f35e:	9b03      	ldr	r3, [sp, #12]
 800f360:	1d1a      	adds	r2, r3, #4
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	9203      	str	r2, [sp, #12]
 800f366:	2b00      	cmp	r3, #0
 800f368:	bfb8      	it	lt
 800f36a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f36e:	3402      	adds	r4, #2
 800f370:	9305      	str	r3, [sp, #20]
 800f372:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f448 <_vfiprintf_r+0x230>
 800f376:	7821      	ldrb	r1, [r4, #0]
 800f378:	2203      	movs	r2, #3
 800f37a:	4650      	mov	r0, sl
 800f37c:	f7f0 ff28 	bl	80001d0 <memchr>
 800f380:	b138      	cbz	r0, 800f392 <_vfiprintf_r+0x17a>
 800f382:	9b04      	ldr	r3, [sp, #16]
 800f384:	eba0 000a 	sub.w	r0, r0, sl
 800f388:	2240      	movs	r2, #64	; 0x40
 800f38a:	4082      	lsls	r2, r0
 800f38c:	4313      	orrs	r3, r2
 800f38e:	3401      	adds	r4, #1
 800f390:	9304      	str	r3, [sp, #16]
 800f392:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f396:	4829      	ldr	r0, [pc, #164]	; (800f43c <_vfiprintf_r+0x224>)
 800f398:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f39c:	2206      	movs	r2, #6
 800f39e:	f7f0 ff17 	bl	80001d0 <memchr>
 800f3a2:	2800      	cmp	r0, #0
 800f3a4:	d03f      	beq.n	800f426 <_vfiprintf_r+0x20e>
 800f3a6:	4b26      	ldr	r3, [pc, #152]	; (800f440 <_vfiprintf_r+0x228>)
 800f3a8:	bb1b      	cbnz	r3, 800f3f2 <_vfiprintf_r+0x1da>
 800f3aa:	9b03      	ldr	r3, [sp, #12]
 800f3ac:	3307      	adds	r3, #7
 800f3ae:	f023 0307 	bic.w	r3, r3, #7
 800f3b2:	3308      	adds	r3, #8
 800f3b4:	9303      	str	r3, [sp, #12]
 800f3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3b8:	443b      	add	r3, r7
 800f3ba:	9309      	str	r3, [sp, #36]	; 0x24
 800f3bc:	e768      	b.n	800f290 <_vfiprintf_r+0x78>
 800f3be:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3c2:	460c      	mov	r4, r1
 800f3c4:	2001      	movs	r0, #1
 800f3c6:	e7a6      	b.n	800f316 <_vfiprintf_r+0xfe>
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	3401      	adds	r4, #1
 800f3cc:	9305      	str	r3, [sp, #20]
 800f3ce:	4619      	mov	r1, r3
 800f3d0:	f04f 0c0a 	mov.w	ip, #10
 800f3d4:	4620      	mov	r0, r4
 800f3d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3da:	3a30      	subs	r2, #48	; 0x30
 800f3dc:	2a09      	cmp	r2, #9
 800f3de:	d903      	bls.n	800f3e8 <_vfiprintf_r+0x1d0>
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d0c6      	beq.n	800f372 <_vfiprintf_r+0x15a>
 800f3e4:	9105      	str	r1, [sp, #20]
 800f3e6:	e7c4      	b.n	800f372 <_vfiprintf_r+0x15a>
 800f3e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3ec:	4604      	mov	r4, r0
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	e7f0      	b.n	800f3d4 <_vfiprintf_r+0x1bc>
 800f3f2:	ab03      	add	r3, sp, #12
 800f3f4:	9300      	str	r3, [sp, #0]
 800f3f6:	462a      	mov	r2, r5
 800f3f8:	4b12      	ldr	r3, [pc, #72]	; (800f444 <_vfiprintf_r+0x22c>)
 800f3fa:	a904      	add	r1, sp, #16
 800f3fc:	4630      	mov	r0, r6
 800f3fe:	f7fb f9c1 	bl	800a784 <_printf_float>
 800f402:	4607      	mov	r7, r0
 800f404:	1c78      	adds	r0, r7, #1
 800f406:	d1d6      	bne.n	800f3b6 <_vfiprintf_r+0x19e>
 800f408:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f40a:	07d9      	lsls	r1, r3, #31
 800f40c:	d405      	bmi.n	800f41a <_vfiprintf_r+0x202>
 800f40e:	89ab      	ldrh	r3, [r5, #12]
 800f410:	059a      	lsls	r2, r3, #22
 800f412:	d402      	bmi.n	800f41a <_vfiprintf_r+0x202>
 800f414:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f416:	f7fc f9b4 	bl	800b782 <__retarget_lock_release_recursive>
 800f41a:	89ab      	ldrh	r3, [r5, #12]
 800f41c:	065b      	lsls	r3, r3, #25
 800f41e:	f53f af1d 	bmi.w	800f25c <_vfiprintf_r+0x44>
 800f422:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f424:	e71c      	b.n	800f260 <_vfiprintf_r+0x48>
 800f426:	ab03      	add	r3, sp, #12
 800f428:	9300      	str	r3, [sp, #0]
 800f42a:	462a      	mov	r2, r5
 800f42c:	4b05      	ldr	r3, [pc, #20]	; (800f444 <_vfiprintf_r+0x22c>)
 800f42e:	a904      	add	r1, sp, #16
 800f430:	4630      	mov	r0, r6
 800f432:	f7fb fc4b 	bl	800accc <_printf_i>
 800f436:	e7e4      	b.n	800f402 <_vfiprintf_r+0x1ea>
 800f438:	08011361 	.word	0x08011361
 800f43c:	0801136b 	.word	0x0801136b
 800f440:	0800a785 	.word	0x0800a785
 800f444:	0800f1f5 	.word	0x0800f1f5
 800f448:	08011367 	.word	0x08011367

0800f44c <__swbuf_r>:
 800f44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f44e:	460e      	mov	r6, r1
 800f450:	4614      	mov	r4, r2
 800f452:	4605      	mov	r5, r0
 800f454:	b118      	cbz	r0, 800f45e <__swbuf_r+0x12>
 800f456:	6a03      	ldr	r3, [r0, #32]
 800f458:	b90b      	cbnz	r3, 800f45e <__swbuf_r+0x12>
 800f45a:	f7fb ffe3 	bl	800b424 <__sinit>
 800f45e:	69a3      	ldr	r3, [r4, #24]
 800f460:	60a3      	str	r3, [r4, #8]
 800f462:	89a3      	ldrh	r3, [r4, #12]
 800f464:	071a      	lsls	r2, r3, #28
 800f466:	d525      	bpl.n	800f4b4 <__swbuf_r+0x68>
 800f468:	6923      	ldr	r3, [r4, #16]
 800f46a:	b31b      	cbz	r3, 800f4b4 <__swbuf_r+0x68>
 800f46c:	6823      	ldr	r3, [r4, #0]
 800f46e:	6922      	ldr	r2, [r4, #16]
 800f470:	1a98      	subs	r0, r3, r2
 800f472:	6963      	ldr	r3, [r4, #20]
 800f474:	b2f6      	uxtb	r6, r6
 800f476:	4283      	cmp	r3, r0
 800f478:	4637      	mov	r7, r6
 800f47a:	dc04      	bgt.n	800f486 <__swbuf_r+0x3a>
 800f47c:	4621      	mov	r1, r4
 800f47e:	4628      	mov	r0, r5
 800f480:	f7ff f942 	bl	800e708 <_fflush_r>
 800f484:	b9e0      	cbnz	r0, 800f4c0 <__swbuf_r+0x74>
 800f486:	68a3      	ldr	r3, [r4, #8]
 800f488:	3b01      	subs	r3, #1
 800f48a:	60a3      	str	r3, [r4, #8]
 800f48c:	6823      	ldr	r3, [r4, #0]
 800f48e:	1c5a      	adds	r2, r3, #1
 800f490:	6022      	str	r2, [r4, #0]
 800f492:	701e      	strb	r6, [r3, #0]
 800f494:	6962      	ldr	r2, [r4, #20]
 800f496:	1c43      	adds	r3, r0, #1
 800f498:	429a      	cmp	r2, r3
 800f49a:	d004      	beq.n	800f4a6 <__swbuf_r+0x5a>
 800f49c:	89a3      	ldrh	r3, [r4, #12]
 800f49e:	07db      	lsls	r3, r3, #31
 800f4a0:	d506      	bpl.n	800f4b0 <__swbuf_r+0x64>
 800f4a2:	2e0a      	cmp	r6, #10
 800f4a4:	d104      	bne.n	800f4b0 <__swbuf_r+0x64>
 800f4a6:	4621      	mov	r1, r4
 800f4a8:	4628      	mov	r0, r5
 800f4aa:	f7ff f92d 	bl	800e708 <_fflush_r>
 800f4ae:	b938      	cbnz	r0, 800f4c0 <__swbuf_r+0x74>
 800f4b0:	4638      	mov	r0, r7
 800f4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4b4:	4621      	mov	r1, r4
 800f4b6:	4628      	mov	r0, r5
 800f4b8:	f000 f806 	bl	800f4c8 <__swsetup_r>
 800f4bc:	2800      	cmp	r0, #0
 800f4be:	d0d5      	beq.n	800f46c <__swbuf_r+0x20>
 800f4c0:	f04f 37ff 	mov.w	r7, #4294967295
 800f4c4:	e7f4      	b.n	800f4b0 <__swbuf_r+0x64>
	...

0800f4c8 <__swsetup_r>:
 800f4c8:	b538      	push	{r3, r4, r5, lr}
 800f4ca:	4b2a      	ldr	r3, [pc, #168]	; (800f574 <__swsetup_r+0xac>)
 800f4cc:	4605      	mov	r5, r0
 800f4ce:	6818      	ldr	r0, [r3, #0]
 800f4d0:	460c      	mov	r4, r1
 800f4d2:	b118      	cbz	r0, 800f4dc <__swsetup_r+0x14>
 800f4d4:	6a03      	ldr	r3, [r0, #32]
 800f4d6:	b90b      	cbnz	r3, 800f4dc <__swsetup_r+0x14>
 800f4d8:	f7fb ffa4 	bl	800b424 <__sinit>
 800f4dc:	89a3      	ldrh	r3, [r4, #12]
 800f4de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f4e2:	0718      	lsls	r0, r3, #28
 800f4e4:	d422      	bmi.n	800f52c <__swsetup_r+0x64>
 800f4e6:	06d9      	lsls	r1, r3, #27
 800f4e8:	d407      	bmi.n	800f4fa <__swsetup_r+0x32>
 800f4ea:	2309      	movs	r3, #9
 800f4ec:	602b      	str	r3, [r5, #0]
 800f4ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f4f2:	81a3      	strh	r3, [r4, #12]
 800f4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4f8:	e034      	b.n	800f564 <__swsetup_r+0x9c>
 800f4fa:	0758      	lsls	r0, r3, #29
 800f4fc:	d512      	bpl.n	800f524 <__swsetup_r+0x5c>
 800f4fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f500:	b141      	cbz	r1, 800f514 <__swsetup_r+0x4c>
 800f502:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f506:	4299      	cmp	r1, r3
 800f508:	d002      	beq.n	800f510 <__swsetup_r+0x48>
 800f50a:	4628      	mov	r0, r5
 800f50c:	f7fc ffba 	bl	800c484 <_free_r>
 800f510:	2300      	movs	r3, #0
 800f512:	6363      	str	r3, [r4, #52]	; 0x34
 800f514:	89a3      	ldrh	r3, [r4, #12]
 800f516:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f51a:	81a3      	strh	r3, [r4, #12]
 800f51c:	2300      	movs	r3, #0
 800f51e:	6063      	str	r3, [r4, #4]
 800f520:	6923      	ldr	r3, [r4, #16]
 800f522:	6023      	str	r3, [r4, #0]
 800f524:	89a3      	ldrh	r3, [r4, #12]
 800f526:	f043 0308 	orr.w	r3, r3, #8
 800f52a:	81a3      	strh	r3, [r4, #12]
 800f52c:	6923      	ldr	r3, [r4, #16]
 800f52e:	b94b      	cbnz	r3, 800f544 <__swsetup_r+0x7c>
 800f530:	89a3      	ldrh	r3, [r4, #12]
 800f532:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f53a:	d003      	beq.n	800f544 <__swsetup_r+0x7c>
 800f53c:	4621      	mov	r1, r4
 800f53e:	4628      	mov	r0, r5
 800f540:	f000 f884 	bl	800f64c <__smakebuf_r>
 800f544:	89a0      	ldrh	r0, [r4, #12]
 800f546:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f54a:	f010 0301 	ands.w	r3, r0, #1
 800f54e:	d00a      	beq.n	800f566 <__swsetup_r+0x9e>
 800f550:	2300      	movs	r3, #0
 800f552:	60a3      	str	r3, [r4, #8]
 800f554:	6963      	ldr	r3, [r4, #20]
 800f556:	425b      	negs	r3, r3
 800f558:	61a3      	str	r3, [r4, #24]
 800f55a:	6923      	ldr	r3, [r4, #16]
 800f55c:	b943      	cbnz	r3, 800f570 <__swsetup_r+0xa8>
 800f55e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f562:	d1c4      	bne.n	800f4ee <__swsetup_r+0x26>
 800f564:	bd38      	pop	{r3, r4, r5, pc}
 800f566:	0781      	lsls	r1, r0, #30
 800f568:	bf58      	it	pl
 800f56a:	6963      	ldrpl	r3, [r4, #20]
 800f56c:	60a3      	str	r3, [r4, #8]
 800f56e:	e7f4      	b.n	800f55a <__swsetup_r+0x92>
 800f570:	2000      	movs	r0, #0
 800f572:	e7f7      	b.n	800f564 <__swsetup_r+0x9c>
 800f574:	20000154 	.word	0x20000154

0800f578 <_raise_r>:
 800f578:	291f      	cmp	r1, #31
 800f57a:	b538      	push	{r3, r4, r5, lr}
 800f57c:	4604      	mov	r4, r0
 800f57e:	460d      	mov	r5, r1
 800f580:	d904      	bls.n	800f58c <_raise_r+0x14>
 800f582:	2316      	movs	r3, #22
 800f584:	6003      	str	r3, [r0, #0]
 800f586:	f04f 30ff 	mov.w	r0, #4294967295
 800f58a:	bd38      	pop	{r3, r4, r5, pc}
 800f58c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f58e:	b112      	cbz	r2, 800f596 <_raise_r+0x1e>
 800f590:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f594:	b94b      	cbnz	r3, 800f5aa <_raise_r+0x32>
 800f596:	4620      	mov	r0, r4
 800f598:	f000 f830 	bl	800f5fc <_getpid_r>
 800f59c:	462a      	mov	r2, r5
 800f59e:	4601      	mov	r1, r0
 800f5a0:	4620      	mov	r0, r4
 800f5a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f5a6:	f000 b817 	b.w	800f5d8 <_kill_r>
 800f5aa:	2b01      	cmp	r3, #1
 800f5ac:	d00a      	beq.n	800f5c4 <_raise_r+0x4c>
 800f5ae:	1c59      	adds	r1, r3, #1
 800f5b0:	d103      	bne.n	800f5ba <_raise_r+0x42>
 800f5b2:	2316      	movs	r3, #22
 800f5b4:	6003      	str	r3, [r0, #0]
 800f5b6:	2001      	movs	r0, #1
 800f5b8:	e7e7      	b.n	800f58a <_raise_r+0x12>
 800f5ba:	2400      	movs	r4, #0
 800f5bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f5c0:	4628      	mov	r0, r5
 800f5c2:	4798      	blx	r3
 800f5c4:	2000      	movs	r0, #0
 800f5c6:	e7e0      	b.n	800f58a <_raise_r+0x12>

0800f5c8 <raise>:
 800f5c8:	4b02      	ldr	r3, [pc, #8]	; (800f5d4 <raise+0xc>)
 800f5ca:	4601      	mov	r1, r0
 800f5cc:	6818      	ldr	r0, [r3, #0]
 800f5ce:	f7ff bfd3 	b.w	800f578 <_raise_r>
 800f5d2:	bf00      	nop
 800f5d4:	20000154 	.word	0x20000154

0800f5d8 <_kill_r>:
 800f5d8:	b538      	push	{r3, r4, r5, lr}
 800f5da:	4d07      	ldr	r5, [pc, #28]	; (800f5f8 <_kill_r+0x20>)
 800f5dc:	2300      	movs	r3, #0
 800f5de:	4604      	mov	r4, r0
 800f5e0:	4608      	mov	r0, r1
 800f5e2:	4611      	mov	r1, r2
 800f5e4:	602b      	str	r3, [r5, #0]
 800f5e6:	f7f2 ffe7 	bl	80025b8 <_kill>
 800f5ea:	1c43      	adds	r3, r0, #1
 800f5ec:	d102      	bne.n	800f5f4 <_kill_r+0x1c>
 800f5ee:	682b      	ldr	r3, [r5, #0]
 800f5f0:	b103      	cbz	r3, 800f5f4 <_kill_r+0x1c>
 800f5f2:	6023      	str	r3, [r4, #0]
 800f5f4:	bd38      	pop	{r3, r4, r5, pc}
 800f5f6:	bf00      	nop
 800f5f8:	20002120 	.word	0x20002120

0800f5fc <_getpid_r>:
 800f5fc:	f7f2 bfd4 	b.w	80025a8 <_getpid>

0800f600 <__swhatbuf_r>:
 800f600:	b570      	push	{r4, r5, r6, lr}
 800f602:	460c      	mov	r4, r1
 800f604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f608:	2900      	cmp	r1, #0
 800f60a:	b096      	sub	sp, #88	; 0x58
 800f60c:	4615      	mov	r5, r2
 800f60e:	461e      	mov	r6, r3
 800f610:	da0d      	bge.n	800f62e <__swhatbuf_r+0x2e>
 800f612:	89a3      	ldrh	r3, [r4, #12]
 800f614:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f618:	f04f 0100 	mov.w	r1, #0
 800f61c:	bf0c      	ite	eq
 800f61e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f622:	2340      	movne	r3, #64	; 0x40
 800f624:	2000      	movs	r0, #0
 800f626:	6031      	str	r1, [r6, #0]
 800f628:	602b      	str	r3, [r5, #0]
 800f62a:	b016      	add	sp, #88	; 0x58
 800f62c:	bd70      	pop	{r4, r5, r6, pc}
 800f62e:	466a      	mov	r2, sp
 800f630:	f000 f848 	bl	800f6c4 <_fstat_r>
 800f634:	2800      	cmp	r0, #0
 800f636:	dbec      	blt.n	800f612 <__swhatbuf_r+0x12>
 800f638:	9901      	ldr	r1, [sp, #4]
 800f63a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f63e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f642:	4259      	negs	r1, r3
 800f644:	4159      	adcs	r1, r3
 800f646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f64a:	e7eb      	b.n	800f624 <__swhatbuf_r+0x24>

0800f64c <__smakebuf_r>:
 800f64c:	898b      	ldrh	r3, [r1, #12]
 800f64e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f650:	079d      	lsls	r5, r3, #30
 800f652:	4606      	mov	r6, r0
 800f654:	460c      	mov	r4, r1
 800f656:	d507      	bpl.n	800f668 <__smakebuf_r+0x1c>
 800f658:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f65c:	6023      	str	r3, [r4, #0]
 800f65e:	6123      	str	r3, [r4, #16]
 800f660:	2301      	movs	r3, #1
 800f662:	6163      	str	r3, [r4, #20]
 800f664:	b002      	add	sp, #8
 800f666:	bd70      	pop	{r4, r5, r6, pc}
 800f668:	ab01      	add	r3, sp, #4
 800f66a:	466a      	mov	r2, sp
 800f66c:	f7ff ffc8 	bl	800f600 <__swhatbuf_r>
 800f670:	9900      	ldr	r1, [sp, #0]
 800f672:	4605      	mov	r5, r0
 800f674:	4630      	mov	r0, r6
 800f676:	f7fc ff79 	bl	800c56c <_malloc_r>
 800f67a:	b948      	cbnz	r0, 800f690 <__smakebuf_r+0x44>
 800f67c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f680:	059a      	lsls	r2, r3, #22
 800f682:	d4ef      	bmi.n	800f664 <__smakebuf_r+0x18>
 800f684:	f023 0303 	bic.w	r3, r3, #3
 800f688:	f043 0302 	orr.w	r3, r3, #2
 800f68c:	81a3      	strh	r3, [r4, #12]
 800f68e:	e7e3      	b.n	800f658 <__smakebuf_r+0xc>
 800f690:	89a3      	ldrh	r3, [r4, #12]
 800f692:	6020      	str	r0, [r4, #0]
 800f694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f698:	81a3      	strh	r3, [r4, #12]
 800f69a:	9b00      	ldr	r3, [sp, #0]
 800f69c:	6163      	str	r3, [r4, #20]
 800f69e:	9b01      	ldr	r3, [sp, #4]
 800f6a0:	6120      	str	r0, [r4, #16]
 800f6a2:	b15b      	cbz	r3, 800f6bc <__smakebuf_r+0x70>
 800f6a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6a8:	4630      	mov	r0, r6
 800f6aa:	f000 f81d 	bl	800f6e8 <_isatty_r>
 800f6ae:	b128      	cbz	r0, 800f6bc <__smakebuf_r+0x70>
 800f6b0:	89a3      	ldrh	r3, [r4, #12]
 800f6b2:	f023 0303 	bic.w	r3, r3, #3
 800f6b6:	f043 0301 	orr.w	r3, r3, #1
 800f6ba:	81a3      	strh	r3, [r4, #12]
 800f6bc:	89a3      	ldrh	r3, [r4, #12]
 800f6be:	431d      	orrs	r5, r3
 800f6c0:	81a5      	strh	r5, [r4, #12]
 800f6c2:	e7cf      	b.n	800f664 <__smakebuf_r+0x18>

0800f6c4 <_fstat_r>:
 800f6c4:	b538      	push	{r3, r4, r5, lr}
 800f6c6:	4d07      	ldr	r5, [pc, #28]	; (800f6e4 <_fstat_r+0x20>)
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	4604      	mov	r4, r0
 800f6cc:	4608      	mov	r0, r1
 800f6ce:	4611      	mov	r1, r2
 800f6d0:	602b      	str	r3, [r5, #0]
 800f6d2:	f7f2 ffd0 	bl	8002676 <_fstat>
 800f6d6:	1c43      	adds	r3, r0, #1
 800f6d8:	d102      	bne.n	800f6e0 <_fstat_r+0x1c>
 800f6da:	682b      	ldr	r3, [r5, #0]
 800f6dc:	b103      	cbz	r3, 800f6e0 <_fstat_r+0x1c>
 800f6de:	6023      	str	r3, [r4, #0]
 800f6e0:	bd38      	pop	{r3, r4, r5, pc}
 800f6e2:	bf00      	nop
 800f6e4:	20002120 	.word	0x20002120

0800f6e8 <_isatty_r>:
 800f6e8:	b538      	push	{r3, r4, r5, lr}
 800f6ea:	4d06      	ldr	r5, [pc, #24]	; (800f704 <_isatty_r+0x1c>)
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	4604      	mov	r4, r0
 800f6f0:	4608      	mov	r0, r1
 800f6f2:	602b      	str	r3, [r5, #0]
 800f6f4:	f7f2 ffcf 	bl	8002696 <_isatty>
 800f6f8:	1c43      	adds	r3, r0, #1
 800f6fa:	d102      	bne.n	800f702 <_isatty_r+0x1a>
 800f6fc:	682b      	ldr	r3, [r5, #0]
 800f6fe:	b103      	cbz	r3, 800f702 <_isatty_r+0x1a>
 800f700:	6023      	str	r3, [r4, #0]
 800f702:	bd38      	pop	{r3, r4, r5, pc}
 800f704:	20002120 	.word	0x20002120

0800f708 <atan2>:
 800f708:	f000 baea 	b.w	800fce0 <__ieee754_atan2>

0800f70c <sqrt>:
 800f70c:	b538      	push	{r3, r4, r5, lr}
 800f70e:	ed2d 8b02 	vpush	{d8}
 800f712:	ec55 4b10 	vmov	r4, r5, d0
 800f716:	f000 f87f 	bl	800f818 <__ieee754_sqrt>
 800f71a:	4622      	mov	r2, r4
 800f71c:	462b      	mov	r3, r5
 800f71e:	4620      	mov	r0, r4
 800f720:	4629      	mov	r1, r5
 800f722:	eeb0 8a40 	vmov.f32	s16, s0
 800f726:	eef0 8a60 	vmov.f32	s17, s1
 800f72a:	f7f1 f9ff 	bl	8000b2c <__aeabi_dcmpun>
 800f72e:	b990      	cbnz	r0, 800f756 <sqrt+0x4a>
 800f730:	2200      	movs	r2, #0
 800f732:	2300      	movs	r3, #0
 800f734:	4620      	mov	r0, r4
 800f736:	4629      	mov	r1, r5
 800f738:	f7f1 f9d0 	bl	8000adc <__aeabi_dcmplt>
 800f73c:	b158      	cbz	r0, 800f756 <sqrt+0x4a>
 800f73e:	f7fb fff5 	bl	800b72c <__errno>
 800f742:	2321      	movs	r3, #33	; 0x21
 800f744:	6003      	str	r3, [r0, #0]
 800f746:	2200      	movs	r2, #0
 800f748:	2300      	movs	r3, #0
 800f74a:	4610      	mov	r0, r2
 800f74c:	4619      	mov	r1, r3
 800f74e:	f7f1 f87d 	bl	800084c <__aeabi_ddiv>
 800f752:	ec41 0b18 	vmov	d8, r0, r1
 800f756:	eeb0 0a48 	vmov.f32	s0, s16
 800f75a:	eef0 0a68 	vmov.f32	s1, s17
 800f75e:	ecbd 8b02 	vpop	{d8}
 800f762:	bd38      	pop	{r3, r4, r5, pc}
 800f764:	0000      	movs	r0, r0
	...

0800f768 <sin>:
 800f768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f76a:	ec53 2b10 	vmov	r2, r3, d0
 800f76e:	4828      	ldr	r0, [pc, #160]	; (800f810 <sin+0xa8>)
 800f770:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f774:	4281      	cmp	r1, r0
 800f776:	dc07      	bgt.n	800f788 <sin+0x20>
 800f778:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800f808 <sin+0xa0>
 800f77c:	2000      	movs	r0, #0
 800f77e:	b005      	add	sp, #20
 800f780:	f85d eb04 	ldr.w	lr, [sp], #4
 800f784:	f000 b9ec 	b.w	800fb60 <__kernel_sin>
 800f788:	4822      	ldr	r0, [pc, #136]	; (800f814 <sin+0xac>)
 800f78a:	4281      	cmp	r1, r0
 800f78c:	dd09      	ble.n	800f7a2 <sin+0x3a>
 800f78e:	ee10 0a10 	vmov	r0, s0
 800f792:	4619      	mov	r1, r3
 800f794:	f7f0 fd78 	bl	8000288 <__aeabi_dsub>
 800f798:	ec41 0b10 	vmov	d0, r0, r1
 800f79c:	b005      	add	sp, #20
 800f79e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f7a2:	4668      	mov	r0, sp
 800f7a4:	f000 fb64 	bl	800fe70 <__ieee754_rem_pio2>
 800f7a8:	f000 0003 	and.w	r0, r0, #3
 800f7ac:	2801      	cmp	r0, #1
 800f7ae:	d00c      	beq.n	800f7ca <sin+0x62>
 800f7b0:	2802      	cmp	r0, #2
 800f7b2:	d011      	beq.n	800f7d8 <sin+0x70>
 800f7b4:	b9f0      	cbnz	r0, 800f7f4 <sin+0x8c>
 800f7b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f7ba:	ed9d 0b00 	vldr	d0, [sp]
 800f7be:	2001      	movs	r0, #1
 800f7c0:	f000 f9ce 	bl	800fb60 <__kernel_sin>
 800f7c4:	ec51 0b10 	vmov	r0, r1, d0
 800f7c8:	e7e6      	b.n	800f798 <sin+0x30>
 800f7ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f7ce:	ed9d 0b00 	vldr	d0, [sp]
 800f7d2:	f000 f8fd 	bl	800f9d0 <__kernel_cos>
 800f7d6:	e7f5      	b.n	800f7c4 <sin+0x5c>
 800f7d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f7dc:	ed9d 0b00 	vldr	d0, [sp]
 800f7e0:	2001      	movs	r0, #1
 800f7e2:	f000 f9bd 	bl	800fb60 <__kernel_sin>
 800f7e6:	ec53 2b10 	vmov	r2, r3, d0
 800f7ea:	ee10 0a10 	vmov	r0, s0
 800f7ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f7f2:	e7d1      	b.n	800f798 <sin+0x30>
 800f7f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f7f8:	ed9d 0b00 	vldr	d0, [sp]
 800f7fc:	f000 f8e8 	bl	800f9d0 <__kernel_cos>
 800f800:	e7f1      	b.n	800f7e6 <sin+0x7e>
 800f802:	bf00      	nop
 800f804:	f3af 8000 	nop.w
	...
 800f810:	3fe921fb 	.word	0x3fe921fb
 800f814:	7fefffff 	.word	0x7fefffff

0800f818 <__ieee754_sqrt>:
 800f818:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f81c:	ec55 4b10 	vmov	r4, r5, d0
 800f820:	4e67      	ldr	r6, [pc, #412]	; (800f9c0 <__ieee754_sqrt+0x1a8>)
 800f822:	43ae      	bics	r6, r5
 800f824:	ee10 0a10 	vmov	r0, s0
 800f828:	ee10 2a10 	vmov	r2, s0
 800f82c:	4629      	mov	r1, r5
 800f82e:	462b      	mov	r3, r5
 800f830:	d10d      	bne.n	800f84e <__ieee754_sqrt+0x36>
 800f832:	f7f0 fee1 	bl	80005f8 <__aeabi_dmul>
 800f836:	4602      	mov	r2, r0
 800f838:	460b      	mov	r3, r1
 800f83a:	4620      	mov	r0, r4
 800f83c:	4629      	mov	r1, r5
 800f83e:	f7f0 fd25 	bl	800028c <__adddf3>
 800f842:	4604      	mov	r4, r0
 800f844:	460d      	mov	r5, r1
 800f846:	ec45 4b10 	vmov	d0, r4, r5
 800f84a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f84e:	2d00      	cmp	r5, #0
 800f850:	dc0b      	bgt.n	800f86a <__ieee754_sqrt+0x52>
 800f852:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f856:	4326      	orrs	r6, r4
 800f858:	d0f5      	beq.n	800f846 <__ieee754_sqrt+0x2e>
 800f85a:	b135      	cbz	r5, 800f86a <__ieee754_sqrt+0x52>
 800f85c:	f7f0 fd14 	bl	8000288 <__aeabi_dsub>
 800f860:	4602      	mov	r2, r0
 800f862:	460b      	mov	r3, r1
 800f864:	f7f0 fff2 	bl	800084c <__aeabi_ddiv>
 800f868:	e7eb      	b.n	800f842 <__ieee754_sqrt+0x2a>
 800f86a:	1509      	asrs	r1, r1, #20
 800f86c:	f000 808d 	beq.w	800f98a <__ieee754_sqrt+0x172>
 800f870:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f874:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800f878:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f87c:	07c9      	lsls	r1, r1, #31
 800f87e:	bf5c      	itt	pl
 800f880:	005b      	lslpl	r3, r3, #1
 800f882:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800f886:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f88a:	bf58      	it	pl
 800f88c:	0052      	lslpl	r2, r2, #1
 800f88e:	2500      	movs	r5, #0
 800f890:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f894:	1076      	asrs	r6, r6, #1
 800f896:	0052      	lsls	r2, r2, #1
 800f898:	f04f 0e16 	mov.w	lr, #22
 800f89c:	46ac      	mov	ip, r5
 800f89e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f8a2:	eb0c 0001 	add.w	r0, ip, r1
 800f8a6:	4298      	cmp	r0, r3
 800f8a8:	bfde      	ittt	le
 800f8aa:	1a1b      	suble	r3, r3, r0
 800f8ac:	eb00 0c01 	addle.w	ip, r0, r1
 800f8b0:	186d      	addle	r5, r5, r1
 800f8b2:	005b      	lsls	r3, r3, #1
 800f8b4:	f1be 0e01 	subs.w	lr, lr, #1
 800f8b8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f8bc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f8c0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f8c4:	d1ed      	bne.n	800f8a2 <__ieee754_sqrt+0x8a>
 800f8c6:	4674      	mov	r4, lr
 800f8c8:	2720      	movs	r7, #32
 800f8ca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800f8ce:	4563      	cmp	r3, ip
 800f8d0:	eb01 000e 	add.w	r0, r1, lr
 800f8d4:	dc02      	bgt.n	800f8dc <__ieee754_sqrt+0xc4>
 800f8d6:	d113      	bne.n	800f900 <__ieee754_sqrt+0xe8>
 800f8d8:	4290      	cmp	r0, r2
 800f8da:	d811      	bhi.n	800f900 <__ieee754_sqrt+0xe8>
 800f8dc:	2800      	cmp	r0, #0
 800f8de:	eb00 0e01 	add.w	lr, r0, r1
 800f8e2:	da57      	bge.n	800f994 <__ieee754_sqrt+0x17c>
 800f8e4:	f1be 0f00 	cmp.w	lr, #0
 800f8e8:	db54      	blt.n	800f994 <__ieee754_sqrt+0x17c>
 800f8ea:	f10c 0801 	add.w	r8, ip, #1
 800f8ee:	eba3 030c 	sub.w	r3, r3, ip
 800f8f2:	4290      	cmp	r0, r2
 800f8f4:	bf88      	it	hi
 800f8f6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f8fa:	1a12      	subs	r2, r2, r0
 800f8fc:	440c      	add	r4, r1
 800f8fe:	46c4      	mov	ip, r8
 800f900:	005b      	lsls	r3, r3, #1
 800f902:	3f01      	subs	r7, #1
 800f904:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f908:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f90c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f910:	d1dd      	bne.n	800f8ce <__ieee754_sqrt+0xb6>
 800f912:	4313      	orrs	r3, r2
 800f914:	d01b      	beq.n	800f94e <__ieee754_sqrt+0x136>
 800f916:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800f9c4 <__ieee754_sqrt+0x1ac>
 800f91a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800f9c8 <__ieee754_sqrt+0x1b0>
 800f91e:	e9da 0100 	ldrd	r0, r1, [sl]
 800f922:	e9db 2300 	ldrd	r2, r3, [fp]
 800f926:	f7f0 fcaf 	bl	8000288 <__aeabi_dsub>
 800f92a:	e9da 8900 	ldrd	r8, r9, [sl]
 800f92e:	4602      	mov	r2, r0
 800f930:	460b      	mov	r3, r1
 800f932:	4640      	mov	r0, r8
 800f934:	4649      	mov	r1, r9
 800f936:	f7f1 f8db 	bl	8000af0 <__aeabi_dcmple>
 800f93a:	b140      	cbz	r0, 800f94e <__ieee754_sqrt+0x136>
 800f93c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f940:	e9da 0100 	ldrd	r0, r1, [sl]
 800f944:	e9db 2300 	ldrd	r2, r3, [fp]
 800f948:	d126      	bne.n	800f998 <__ieee754_sqrt+0x180>
 800f94a:	3501      	adds	r5, #1
 800f94c:	463c      	mov	r4, r7
 800f94e:	106a      	asrs	r2, r5, #1
 800f950:	0863      	lsrs	r3, r4, #1
 800f952:	07e9      	lsls	r1, r5, #31
 800f954:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f958:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f95c:	bf48      	it	mi
 800f95e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f962:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800f966:	461c      	mov	r4, r3
 800f968:	e76d      	b.n	800f846 <__ieee754_sqrt+0x2e>
 800f96a:	0ad3      	lsrs	r3, r2, #11
 800f96c:	3815      	subs	r0, #21
 800f96e:	0552      	lsls	r2, r2, #21
 800f970:	2b00      	cmp	r3, #0
 800f972:	d0fa      	beq.n	800f96a <__ieee754_sqrt+0x152>
 800f974:	02dc      	lsls	r4, r3, #11
 800f976:	d50a      	bpl.n	800f98e <__ieee754_sqrt+0x176>
 800f978:	f1c1 0420 	rsb	r4, r1, #32
 800f97c:	fa22 f404 	lsr.w	r4, r2, r4
 800f980:	1e4d      	subs	r5, r1, #1
 800f982:	408a      	lsls	r2, r1
 800f984:	4323      	orrs	r3, r4
 800f986:	1b41      	subs	r1, r0, r5
 800f988:	e772      	b.n	800f870 <__ieee754_sqrt+0x58>
 800f98a:	4608      	mov	r0, r1
 800f98c:	e7f0      	b.n	800f970 <__ieee754_sqrt+0x158>
 800f98e:	005b      	lsls	r3, r3, #1
 800f990:	3101      	adds	r1, #1
 800f992:	e7ef      	b.n	800f974 <__ieee754_sqrt+0x15c>
 800f994:	46e0      	mov	r8, ip
 800f996:	e7aa      	b.n	800f8ee <__ieee754_sqrt+0xd6>
 800f998:	f7f0 fc78 	bl	800028c <__adddf3>
 800f99c:	e9da 8900 	ldrd	r8, r9, [sl]
 800f9a0:	4602      	mov	r2, r0
 800f9a2:	460b      	mov	r3, r1
 800f9a4:	4640      	mov	r0, r8
 800f9a6:	4649      	mov	r1, r9
 800f9a8:	f7f1 f898 	bl	8000adc <__aeabi_dcmplt>
 800f9ac:	b120      	cbz	r0, 800f9b8 <__ieee754_sqrt+0x1a0>
 800f9ae:	1ca0      	adds	r0, r4, #2
 800f9b0:	bf08      	it	eq
 800f9b2:	3501      	addeq	r5, #1
 800f9b4:	3402      	adds	r4, #2
 800f9b6:	e7ca      	b.n	800f94e <__ieee754_sqrt+0x136>
 800f9b8:	3401      	adds	r4, #1
 800f9ba:	f024 0401 	bic.w	r4, r4, #1
 800f9be:	e7c6      	b.n	800f94e <__ieee754_sqrt+0x136>
 800f9c0:	7ff00000 	.word	0x7ff00000
 800f9c4:	200002c8 	.word	0x200002c8
 800f9c8:	200002d0 	.word	0x200002d0
 800f9cc:	00000000 	.word	0x00000000

0800f9d0 <__kernel_cos>:
 800f9d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9d4:	ec57 6b10 	vmov	r6, r7, d0
 800f9d8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f9dc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f9e0:	ed8d 1b00 	vstr	d1, [sp]
 800f9e4:	da07      	bge.n	800f9f6 <__kernel_cos+0x26>
 800f9e6:	ee10 0a10 	vmov	r0, s0
 800f9ea:	4639      	mov	r1, r7
 800f9ec:	f7f1 f8b4 	bl	8000b58 <__aeabi_d2iz>
 800f9f0:	2800      	cmp	r0, #0
 800f9f2:	f000 8088 	beq.w	800fb06 <__kernel_cos+0x136>
 800f9f6:	4632      	mov	r2, r6
 800f9f8:	463b      	mov	r3, r7
 800f9fa:	4630      	mov	r0, r6
 800f9fc:	4639      	mov	r1, r7
 800f9fe:	f7f0 fdfb 	bl	80005f8 <__aeabi_dmul>
 800fa02:	4b51      	ldr	r3, [pc, #324]	; (800fb48 <__kernel_cos+0x178>)
 800fa04:	2200      	movs	r2, #0
 800fa06:	4604      	mov	r4, r0
 800fa08:	460d      	mov	r5, r1
 800fa0a:	f7f0 fdf5 	bl	80005f8 <__aeabi_dmul>
 800fa0e:	a340      	add	r3, pc, #256	; (adr r3, 800fb10 <__kernel_cos+0x140>)
 800fa10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa14:	4682      	mov	sl, r0
 800fa16:	468b      	mov	fp, r1
 800fa18:	4620      	mov	r0, r4
 800fa1a:	4629      	mov	r1, r5
 800fa1c:	f7f0 fdec 	bl	80005f8 <__aeabi_dmul>
 800fa20:	a33d      	add	r3, pc, #244	; (adr r3, 800fb18 <__kernel_cos+0x148>)
 800fa22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa26:	f7f0 fc31 	bl	800028c <__adddf3>
 800fa2a:	4622      	mov	r2, r4
 800fa2c:	462b      	mov	r3, r5
 800fa2e:	f7f0 fde3 	bl	80005f8 <__aeabi_dmul>
 800fa32:	a33b      	add	r3, pc, #236	; (adr r3, 800fb20 <__kernel_cos+0x150>)
 800fa34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa38:	f7f0 fc26 	bl	8000288 <__aeabi_dsub>
 800fa3c:	4622      	mov	r2, r4
 800fa3e:	462b      	mov	r3, r5
 800fa40:	f7f0 fdda 	bl	80005f8 <__aeabi_dmul>
 800fa44:	a338      	add	r3, pc, #224	; (adr r3, 800fb28 <__kernel_cos+0x158>)
 800fa46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa4a:	f7f0 fc1f 	bl	800028c <__adddf3>
 800fa4e:	4622      	mov	r2, r4
 800fa50:	462b      	mov	r3, r5
 800fa52:	f7f0 fdd1 	bl	80005f8 <__aeabi_dmul>
 800fa56:	a336      	add	r3, pc, #216	; (adr r3, 800fb30 <__kernel_cos+0x160>)
 800fa58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa5c:	f7f0 fc14 	bl	8000288 <__aeabi_dsub>
 800fa60:	4622      	mov	r2, r4
 800fa62:	462b      	mov	r3, r5
 800fa64:	f7f0 fdc8 	bl	80005f8 <__aeabi_dmul>
 800fa68:	a333      	add	r3, pc, #204	; (adr r3, 800fb38 <__kernel_cos+0x168>)
 800fa6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa6e:	f7f0 fc0d 	bl	800028c <__adddf3>
 800fa72:	4622      	mov	r2, r4
 800fa74:	462b      	mov	r3, r5
 800fa76:	f7f0 fdbf 	bl	80005f8 <__aeabi_dmul>
 800fa7a:	4622      	mov	r2, r4
 800fa7c:	462b      	mov	r3, r5
 800fa7e:	f7f0 fdbb 	bl	80005f8 <__aeabi_dmul>
 800fa82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa86:	4604      	mov	r4, r0
 800fa88:	460d      	mov	r5, r1
 800fa8a:	4630      	mov	r0, r6
 800fa8c:	4639      	mov	r1, r7
 800fa8e:	f7f0 fdb3 	bl	80005f8 <__aeabi_dmul>
 800fa92:	460b      	mov	r3, r1
 800fa94:	4602      	mov	r2, r0
 800fa96:	4629      	mov	r1, r5
 800fa98:	4620      	mov	r0, r4
 800fa9a:	f7f0 fbf5 	bl	8000288 <__aeabi_dsub>
 800fa9e:	4b2b      	ldr	r3, [pc, #172]	; (800fb4c <__kernel_cos+0x17c>)
 800faa0:	4598      	cmp	r8, r3
 800faa2:	4606      	mov	r6, r0
 800faa4:	460f      	mov	r7, r1
 800faa6:	dc10      	bgt.n	800faca <__kernel_cos+0xfa>
 800faa8:	4602      	mov	r2, r0
 800faaa:	460b      	mov	r3, r1
 800faac:	4650      	mov	r0, sl
 800faae:	4659      	mov	r1, fp
 800fab0:	f7f0 fbea 	bl	8000288 <__aeabi_dsub>
 800fab4:	460b      	mov	r3, r1
 800fab6:	4926      	ldr	r1, [pc, #152]	; (800fb50 <__kernel_cos+0x180>)
 800fab8:	4602      	mov	r2, r0
 800faba:	2000      	movs	r0, #0
 800fabc:	f7f0 fbe4 	bl	8000288 <__aeabi_dsub>
 800fac0:	ec41 0b10 	vmov	d0, r0, r1
 800fac4:	b003      	add	sp, #12
 800fac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faca:	4b22      	ldr	r3, [pc, #136]	; (800fb54 <__kernel_cos+0x184>)
 800facc:	4920      	ldr	r1, [pc, #128]	; (800fb50 <__kernel_cos+0x180>)
 800face:	4598      	cmp	r8, r3
 800fad0:	bfcc      	ite	gt
 800fad2:	4d21      	ldrgt	r5, [pc, #132]	; (800fb58 <__kernel_cos+0x188>)
 800fad4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800fad8:	2400      	movs	r4, #0
 800fada:	4622      	mov	r2, r4
 800fadc:	462b      	mov	r3, r5
 800fade:	2000      	movs	r0, #0
 800fae0:	f7f0 fbd2 	bl	8000288 <__aeabi_dsub>
 800fae4:	4622      	mov	r2, r4
 800fae6:	4680      	mov	r8, r0
 800fae8:	4689      	mov	r9, r1
 800faea:	462b      	mov	r3, r5
 800faec:	4650      	mov	r0, sl
 800faee:	4659      	mov	r1, fp
 800faf0:	f7f0 fbca 	bl	8000288 <__aeabi_dsub>
 800faf4:	4632      	mov	r2, r6
 800faf6:	463b      	mov	r3, r7
 800faf8:	f7f0 fbc6 	bl	8000288 <__aeabi_dsub>
 800fafc:	4602      	mov	r2, r0
 800fafe:	460b      	mov	r3, r1
 800fb00:	4640      	mov	r0, r8
 800fb02:	4649      	mov	r1, r9
 800fb04:	e7da      	b.n	800fabc <__kernel_cos+0xec>
 800fb06:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800fb40 <__kernel_cos+0x170>
 800fb0a:	e7db      	b.n	800fac4 <__kernel_cos+0xf4>
 800fb0c:	f3af 8000 	nop.w
 800fb10:	be8838d4 	.word	0xbe8838d4
 800fb14:	bda8fae9 	.word	0xbda8fae9
 800fb18:	bdb4b1c4 	.word	0xbdb4b1c4
 800fb1c:	3e21ee9e 	.word	0x3e21ee9e
 800fb20:	809c52ad 	.word	0x809c52ad
 800fb24:	3e927e4f 	.word	0x3e927e4f
 800fb28:	19cb1590 	.word	0x19cb1590
 800fb2c:	3efa01a0 	.word	0x3efa01a0
 800fb30:	16c15177 	.word	0x16c15177
 800fb34:	3f56c16c 	.word	0x3f56c16c
 800fb38:	5555554c 	.word	0x5555554c
 800fb3c:	3fa55555 	.word	0x3fa55555
 800fb40:	00000000 	.word	0x00000000
 800fb44:	3ff00000 	.word	0x3ff00000
 800fb48:	3fe00000 	.word	0x3fe00000
 800fb4c:	3fd33332 	.word	0x3fd33332
 800fb50:	3ff00000 	.word	0x3ff00000
 800fb54:	3fe90000 	.word	0x3fe90000
 800fb58:	3fd20000 	.word	0x3fd20000
 800fb5c:	00000000 	.word	0x00000000

0800fb60 <__kernel_sin>:
 800fb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb64:	ed2d 8b04 	vpush	{d8-d9}
 800fb68:	eeb0 8a41 	vmov.f32	s16, s2
 800fb6c:	eef0 8a61 	vmov.f32	s17, s3
 800fb70:	ec55 4b10 	vmov	r4, r5, d0
 800fb74:	b083      	sub	sp, #12
 800fb76:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fb7a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800fb7e:	9001      	str	r0, [sp, #4]
 800fb80:	da06      	bge.n	800fb90 <__kernel_sin+0x30>
 800fb82:	ee10 0a10 	vmov	r0, s0
 800fb86:	4629      	mov	r1, r5
 800fb88:	f7f0 ffe6 	bl	8000b58 <__aeabi_d2iz>
 800fb8c:	2800      	cmp	r0, #0
 800fb8e:	d051      	beq.n	800fc34 <__kernel_sin+0xd4>
 800fb90:	4622      	mov	r2, r4
 800fb92:	462b      	mov	r3, r5
 800fb94:	4620      	mov	r0, r4
 800fb96:	4629      	mov	r1, r5
 800fb98:	f7f0 fd2e 	bl	80005f8 <__aeabi_dmul>
 800fb9c:	4682      	mov	sl, r0
 800fb9e:	468b      	mov	fp, r1
 800fba0:	4602      	mov	r2, r0
 800fba2:	460b      	mov	r3, r1
 800fba4:	4620      	mov	r0, r4
 800fba6:	4629      	mov	r1, r5
 800fba8:	f7f0 fd26 	bl	80005f8 <__aeabi_dmul>
 800fbac:	a341      	add	r3, pc, #260	; (adr r3, 800fcb4 <__kernel_sin+0x154>)
 800fbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb2:	4680      	mov	r8, r0
 800fbb4:	4689      	mov	r9, r1
 800fbb6:	4650      	mov	r0, sl
 800fbb8:	4659      	mov	r1, fp
 800fbba:	f7f0 fd1d 	bl	80005f8 <__aeabi_dmul>
 800fbbe:	a33f      	add	r3, pc, #252	; (adr r3, 800fcbc <__kernel_sin+0x15c>)
 800fbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbc4:	f7f0 fb60 	bl	8000288 <__aeabi_dsub>
 800fbc8:	4652      	mov	r2, sl
 800fbca:	465b      	mov	r3, fp
 800fbcc:	f7f0 fd14 	bl	80005f8 <__aeabi_dmul>
 800fbd0:	a33c      	add	r3, pc, #240	; (adr r3, 800fcc4 <__kernel_sin+0x164>)
 800fbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd6:	f7f0 fb59 	bl	800028c <__adddf3>
 800fbda:	4652      	mov	r2, sl
 800fbdc:	465b      	mov	r3, fp
 800fbde:	f7f0 fd0b 	bl	80005f8 <__aeabi_dmul>
 800fbe2:	a33a      	add	r3, pc, #232	; (adr r3, 800fccc <__kernel_sin+0x16c>)
 800fbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe8:	f7f0 fb4e 	bl	8000288 <__aeabi_dsub>
 800fbec:	4652      	mov	r2, sl
 800fbee:	465b      	mov	r3, fp
 800fbf0:	f7f0 fd02 	bl	80005f8 <__aeabi_dmul>
 800fbf4:	a337      	add	r3, pc, #220	; (adr r3, 800fcd4 <__kernel_sin+0x174>)
 800fbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbfa:	f7f0 fb47 	bl	800028c <__adddf3>
 800fbfe:	9b01      	ldr	r3, [sp, #4]
 800fc00:	4606      	mov	r6, r0
 800fc02:	460f      	mov	r7, r1
 800fc04:	b9eb      	cbnz	r3, 800fc42 <__kernel_sin+0xe2>
 800fc06:	4602      	mov	r2, r0
 800fc08:	460b      	mov	r3, r1
 800fc0a:	4650      	mov	r0, sl
 800fc0c:	4659      	mov	r1, fp
 800fc0e:	f7f0 fcf3 	bl	80005f8 <__aeabi_dmul>
 800fc12:	a325      	add	r3, pc, #148	; (adr r3, 800fca8 <__kernel_sin+0x148>)
 800fc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc18:	f7f0 fb36 	bl	8000288 <__aeabi_dsub>
 800fc1c:	4642      	mov	r2, r8
 800fc1e:	464b      	mov	r3, r9
 800fc20:	f7f0 fcea 	bl	80005f8 <__aeabi_dmul>
 800fc24:	4602      	mov	r2, r0
 800fc26:	460b      	mov	r3, r1
 800fc28:	4620      	mov	r0, r4
 800fc2a:	4629      	mov	r1, r5
 800fc2c:	f7f0 fb2e 	bl	800028c <__adddf3>
 800fc30:	4604      	mov	r4, r0
 800fc32:	460d      	mov	r5, r1
 800fc34:	ec45 4b10 	vmov	d0, r4, r5
 800fc38:	b003      	add	sp, #12
 800fc3a:	ecbd 8b04 	vpop	{d8-d9}
 800fc3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc42:	4b1b      	ldr	r3, [pc, #108]	; (800fcb0 <__kernel_sin+0x150>)
 800fc44:	ec51 0b18 	vmov	r0, r1, d8
 800fc48:	2200      	movs	r2, #0
 800fc4a:	f7f0 fcd5 	bl	80005f8 <__aeabi_dmul>
 800fc4e:	4632      	mov	r2, r6
 800fc50:	ec41 0b19 	vmov	d9, r0, r1
 800fc54:	463b      	mov	r3, r7
 800fc56:	4640      	mov	r0, r8
 800fc58:	4649      	mov	r1, r9
 800fc5a:	f7f0 fccd 	bl	80005f8 <__aeabi_dmul>
 800fc5e:	4602      	mov	r2, r0
 800fc60:	460b      	mov	r3, r1
 800fc62:	ec51 0b19 	vmov	r0, r1, d9
 800fc66:	f7f0 fb0f 	bl	8000288 <__aeabi_dsub>
 800fc6a:	4652      	mov	r2, sl
 800fc6c:	465b      	mov	r3, fp
 800fc6e:	f7f0 fcc3 	bl	80005f8 <__aeabi_dmul>
 800fc72:	ec53 2b18 	vmov	r2, r3, d8
 800fc76:	f7f0 fb07 	bl	8000288 <__aeabi_dsub>
 800fc7a:	a30b      	add	r3, pc, #44	; (adr r3, 800fca8 <__kernel_sin+0x148>)
 800fc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc80:	4606      	mov	r6, r0
 800fc82:	460f      	mov	r7, r1
 800fc84:	4640      	mov	r0, r8
 800fc86:	4649      	mov	r1, r9
 800fc88:	f7f0 fcb6 	bl	80005f8 <__aeabi_dmul>
 800fc8c:	4602      	mov	r2, r0
 800fc8e:	460b      	mov	r3, r1
 800fc90:	4630      	mov	r0, r6
 800fc92:	4639      	mov	r1, r7
 800fc94:	f7f0 fafa 	bl	800028c <__adddf3>
 800fc98:	4602      	mov	r2, r0
 800fc9a:	460b      	mov	r3, r1
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	4629      	mov	r1, r5
 800fca0:	f7f0 faf2 	bl	8000288 <__aeabi_dsub>
 800fca4:	e7c4      	b.n	800fc30 <__kernel_sin+0xd0>
 800fca6:	bf00      	nop
 800fca8:	55555549 	.word	0x55555549
 800fcac:	3fc55555 	.word	0x3fc55555
 800fcb0:	3fe00000 	.word	0x3fe00000
 800fcb4:	5acfd57c 	.word	0x5acfd57c
 800fcb8:	3de5d93a 	.word	0x3de5d93a
 800fcbc:	8a2b9ceb 	.word	0x8a2b9ceb
 800fcc0:	3e5ae5e6 	.word	0x3e5ae5e6
 800fcc4:	57b1fe7d 	.word	0x57b1fe7d
 800fcc8:	3ec71de3 	.word	0x3ec71de3
 800fccc:	19c161d5 	.word	0x19c161d5
 800fcd0:	3f2a01a0 	.word	0x3f2a01a0
 800fcd4:	1110f8a6 	.word	0x1110f8a6
 800fcd8:	3f811111 	.word	0x3f811111
 800fcdc:	00000000 	.word	0x00000000

0800fce0 <__ieee754_atan2>:
 800fce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fce4:	ec57 6b11 	vmov	r6, r7, d1
 800fce8:	4273      	negs	r3, r6
 800fcea:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800fe68 <__ieee754_atan2+0x188>
 800fcee:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800fcf2:	4333      	orrs	r3, r6
 800fcf4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800fcf8:	4543      	cmp	r3, r8
 800fcfa:	ec51 0b10 	vmov	r0, r1, d0
 800fcfe:	ee11 5a10 	vmov	r5, s2
 800fd02:	d80a      	bhi.n	800fd1a <__ieee754_atan2+0x3a>
 800fd04:	4244      	negs	r4, r0
 800fd06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fd0a:	4304      	orrs	r4, r0
 800fd0c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800fd10:	4544      	cmp	r4, r8
 800fd12:	ee10 9a10 	vmov	r9, s0
 800fd16:	468e      	mov	lr, r1
 800fd18:	d907      	bls.n	800fd2a <__ieee754_atan2+0x4a>
 800fd1a:	4632      	mov	r2, r6
 800fd1c:	463b      	mov	r3, r7
 800fd1e:	f7f0 fab5 	bl	800028c <__adddf3>
 800fd22:	ec41 0b10 	vmov	d0, r0, r1
 800fd26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd2a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800fd2e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fd32:	4334      	orrs	r4, r6
 800fd34:	d103      	bne.n	800fd3e <__ieee754_atan2+0x5e>
 800fd36:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd3a:	f000 baa1 	b.w	8010280 <atan>
 800fd3e:	17bc      	asrs	r4, r7, #30
 800fd40:	f004 0402 	and.w	r4, r4, #2
 800fd44:	ea53 0909 	orrs.w	r9, r3, r9
 800fd48:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800fd4c:	d107      	bne.n	800fd5e <__ieee754_atan2+0x7e>
 800fd4e:	2c02      	cmp	r4, #2
 800fd50:	d05f      	beq.n	800fe12 <__ieee754_atan2+0x132>
 800fd52:	2c03      	cmp	r4, #3
 800fd54:	d1e5      	bne.n	800fd22 <__ieee754_atan2+0x42>
 800fd56:	a140      	add	r1, pc, #256	; (adr r1, 800fe58 <__ieee754_atan2+0x178>)
 800fd58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd5c:	e7e1      	b.n	800fd22 <__ieee754_atan2+0x42>
 800fd5e:	4315      	orrs	r5, r2
 800fd60:	d106      	bne.n	800fd70 <__ieee754_atan2+0x90>
 800fd62:	f1be 0f00 	cmp.w	lr, #0
 800fd66:	da5f      	bge.n	800fe28 <__ieee754_atan2+0x148>
 800fd68:	a13d      	add	r1, pc, #244	; (adr r1, 800fe60 <__ieee754_atan2+0x180>)
 800fd6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd6e:	e7d8      	b.n	800fd22 <__ieee754_atan2+0x42>
 800fd70:	4542      	cmp	r2, r8
 800fd72:	d10f      	bne.n	800fd94 <__ieee754_atan2+0xb4>
 800fd74:	4293      	cmp	r3, r2
 800fd76:	f104 34ff 	add.w	r4, r4, #4294967295
 800fd7a:	d107      	bne.n	800fd8c <__ieee754_atan2+0xac>
 800fd7c:	2c02      	cmp	r4, #2
 800fd7e:	d84c      	bhi.n	800fe1a <__ieee754_atan2+0x13a>
 800fd80:	4b33      	ldr	r3, [pc, #204]	; (800fe50 <__ieee754_atan2+0x170>)
 800fd82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fd86:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fd8a:	e7ca      	b.n	800fd22 <__ieee754_atan2+0x42>
 800fd8c:	2c02      	cmp	r4, #2
 800fd8e:	d848      	bhi.n	800fe22 <__ieee754_atan2+0x142>
 800fd90:	4b30      	ldr	r3, [pc, #192]	; (800fe54 <__ieee754_atan2+0x174>)
 800fd92:	e7f6      	b.n	800fd82 <__ieee754_atan2+0xa2>
 800fd94:	4543      	cmp	r3, r8
 800fd96:	d0e4      	beq.n	800fd62 <__ieee754_atan2+0x82>
 800fd98:	1a9b      	subs	r3, r3, r2
 800fd9a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800fd9e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fda2:	da1e      	bge.n	800fde2 <__ieee754_atan2+0x102>
 800fda4:	2f00      	cmp	r7, #0
 800fda6:	da01      	bge.n	800fdac <__ieee754_atan2+0xcc>
 800fda8:	323c      	adds	r2, #60	; 0x3c
 800fdaa:	db1e      	blt.n	800fdea <__ieee754_atan2+0x10a>
 800fdac:	4632      	mov	r2, r6
 800fdae:	463b      	mov	r3, r7
 800fdb0:	f7f0 fd4c 	bl	800084c <__aeabi_ddiv>
 800fdb4:	ec41 0b10 	vmov	d0, r0, r1
 800fdb8:	f000 fc02 	bl	80105c0 <fabs>
 800fdbc:	f000 fa60 	bl	8010280 <atan>
 800fdc0:	ec51 0b10 	vmov	r0, r1, d0
 800fdc4:	2c01      	cmp	r4, #1
 800fdc6:	d013      	beq.n	800fdf0 <__ieee754_atan2+0x110>
 800fdc8:	2c02      	cmp	r4, #2
 800fdca:	d015      	beq.n	800fdf8 <__ieee754_atan2+0x118>
 800fdcc:	2c00      	cmp	r4, #0
 800fdce:	d0a8      	beq.n	800fd22 <__ieee754_atan2+0x42>
 800fdd0:	a317      	add	r3, pc, #92	; (adr r3, 800fe30 <__ieee754_atan2+0x150>)
 800fdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdd6:	f7f0 fa57 	bl	8000288 <__aeabi_dsub>
 800fdda:	a317      	add	r3, pc, #92	; (adr r3, 800fe38 <__ieee754_atan2+0x158>)
 800fddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fde0:	e014      	b.n	800fe0c <__ieee754_atan2+0x12c>
 800fde2:	a117      	add	r1, pc, #92	; (adr r1, 800fe40 <__ieee754_atan2+0x160>)
 800fde4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fde8:	e7ec      	b.n	800fdc4 <__ieee754_atan2+0xe4>
 800fdea:	2000      	movs	r0, #0
 800fdec:	2100      	movs	r1, #0
 800fdee:	e7e9      	b.n	800fdc4 <__ieee754_atan2+0xe4>
 800fdf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fdf4:	4619      	mov	r1, r3
 800fdf6:	e794      	b.n	800fd22 <__ieee754_atan2+0x42>
 800fdf8:	a30d      	add	r3, pc, #52	; (adr r3, 800fe30 <__ieee754_atan2+0x150>)
 800fdfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdfe:	f7f0 fa43 	bl	8000288 <__aeabi_dsub>
 800fe02:	4602      	mov	r2, r0
 800fe04:	460b      	mov	r3, r1
 800fe06:	a10c      	add	r1, pc, #48	; (adr r1, 800fe38 <__ieee754_atan2+0x158>)
 800fe08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe0c:	f7f0 fa3c 	bl	8000288 <__aeabi_dsub>
 800fe10:	e787      	b.n	800fd22 <__ieee754_atan2+0x42>
 800fe12:	a109      	add	r1, pc, #36	; (adr r1, 800fe38 <__ieee754_atan2+0x158>)
 800fe14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe18:	e783      	b.n	800fd22 <__ieee754_atan2+0x42>
 800fe1a:	a10b      	add	r1, pc, #44	; (adr r1, 800fe48 <__ieee754_atan2+0x168>)
 800fe1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe20:	e77f      	b.n	800fd22 <__ieee754_atan2+0x42>
 800fe22:	2000      	movs	r0, #0
 800fe24:	2100      	movs	r1, #0
 800fe26:	e77c      	b.n	800fd22 <__ieee754_atan2+0x42>
 800fe28:	a105      	add	r1, pc, #20	; (adr r1, 800fe40 <__ieee754_atan2+0x160>)
 800fe2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe2e:	e778      	b.n	800fd22 <__ieee754_atan2+0x42>
 800fe30:	33145c07 	.word	0x33145c07
 800fe34:	3ca1a626 	.word	0x3ca1a626
 800fe38:	54442d18 	.word	0x54442d18
 800fe3c:	400921fb 	.word	0x400921fb
 800fe40:	54442d18 	.word	0x54442d18
 800fe44:	3ff921fb 	.word	0x3ff921fb
 800fe48:	54442d18 	.word	0x54442d18
 800fe4c:	3fe921fb 	.word	0x3fe921fb
 800fe50:	08011438 	.word	0x08011438
 800fe54:	08011450 	.word	0x08011450
 800fe58:	54442d18 	.word	0x54442d18
 800fe5c:	c00921fb 	.word	0xc00921fb
 800fe60:	54442d18 	.word	0x54442d18
 800fe64:	bff921fb 	.word	0xbff921fb
 800fe68:	7ff00000 	.word	0x7ff00000
 800fe6c:	00000000 	.word	0x00000000

0800fe70 <__ieee754_rem_pio2>:
 800fe70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe74:	ed2d 8b02 	vpush	{d8}
 800fe78:	ec55 4b10 	vmov	r4, r5, d0
 800fe7c:	4bca      	ldr	r3, [pc, #808]	; (80101a8 <__ieee754_rem_pio2+0x338>)
 800fe7e:	b08b      	sub	sp, #44	; 0x2c
 800fe80:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800fe84:	4598      	cmp	r8, r3
 800fe86:	4682      	mov	sl, r0
 800fe88:	9502      	str	r5, [sp, #8]
 800fe8a:	dc08      	bgt.n	800fe9e <__ieee754_rem_pio2+0x2e>
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	2300      	movs	r3, #0
 800fe90:	ed80 0b00 	vstr	d0, [r0]
 800fe94:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800fe98:	f04f 0b00 	mov.w	fp, #0
 800fe9c:	e028      	b.n	800fef0 <__ieee754_rem_pio2+0x80>
 800fe9e:	4bc3      	ldr	r3, [pc, #780]	; (80101ac <__ieee754_rem_pio2+0x33c>)
 800fea0:	4598      	cmp	r8, r3
 800fea2:	dc78      	bgt.n	800ff96 <__ieee754_rem_pio2+0x126>
 800fea4:	9b02      	ldr	r3, [sp, #8]
 800fea6:	4ec2      	ldr	r6, [pc, #776]	; (80101b0 <__ieee754_rem_pio2+0x340>)
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	ee10 0a10 	vmov	r0, s0
 800feae:	a3b0      	add	r3, pc, #704	; (adr r3, 8010170 <__ieee754_rem_pio2+0x300>)
 800feb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb4:	4629      	mov	r1, r5
 800feb6:	dd39      	ble.n	800ff2c <__ieee754_rem_pio2+0xbc>
 800feb8:	f7f0 f9e6 	bl	8000288 <__aeabi_dsub>
 800febc:	45b0      	cmp	r8, r6
 800febe:	4604      	mov	r4, r0
 800fec0:	460d      	mov	r5, r1
 800fec2:	d01b      	beq.n	800fefc <__ieee754_rem_pio2+0x8c>
 800fec4:	a3ac      	add	r3, pc, #688	; (adr r3, 8010178 <__ieee754_rem_pio2+0x308>)
 800fec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feca:	f7f0 f9dd 	bl	8000288 <__aeabi_dsub>
 800fece:	4602      	mov	r2, r0
 800fed0:	460b      	mov	r3, r1
 800fed2:	e9ca 2300 	strd	r2, r3, [sl]
 800fed6:	4620      	mov	r0, r4
 800fed8:	4629      	mov	r1, r5
 800feda:	f7f0 f9d5 	bl	8000288 <__aeabi_dsub>
 800fede:	a3a6      	add	r3, pc, #664	; (adr r3, 8010178 <__ieee754_rem_pio2+0x308>)
 800fee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee4:	f7f0 f9d0 	bl	8000288 <__aeabi_dsub>
 800fee8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800feec:	f04f 0b01 	mov.w	fp, #1
 800fef0:	4658      	mov	r0, fp
 800fef2:	b00b      	add	sp, #44	; 0x2c
 800fef4:	ecbd 8b02 	vpop	{d8}
 800fef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fefc:	a3a0      	add	r3, pc, #640	; (adr r3, 8010180 <__ieee754_rem_pio2+0x310>)
 800fefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff02:	f7f0 f9c1 	bl	8000288 <__aeabi_dsub>
 800ff06:	a3a0      	add	r3, pc, #640	; (adr r3, 8010188 <__ieee754_rem_pio2+0x318>)
 800ff08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff0c:	4604      	mov	r4, r0
 800ff0e:	460d      	mov	r5, r1
 800ff10:	f7f0 f9ba 	bl	8000288 <__aeabi_dsub>
 800ff14:	4602      	mov	r2, r0
 800ff16:	460b      	mov	r3, r1
 800ff18:	e9ca 2300 	strd	r2, r3, [sl]
 800ff1c:	4620      	mov	r0, r4
 800ff1e:	4629      	mov	r1, r5
 800ff20:	f7f0 f9b2 	bl	8000288 <__aeabi_dsub>
 800ff24:	a398      	add	r3, pc, #608	; (adr r3, 8010188 <__ieee754_rem_pio2+0x318>)
 800ff26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff2a:	e7db      	b.n	800fee4 <__ieee754_rem_pio2+0x74>
 800ff2c:	f7f0 f9ae 	bl	800028c <__adddf3>
 800ff30:	45b0      	cmp	r8, r6
 800ff32:	4604      	mov	r4, r0
 800ff34:	460d      	mov	r5, r1
 800ff36:	d016      	beq.n	800ff66 <__ieee754_rem_pio2+0xf6>
 800ff38:	a38f      	add	r3, pc, #572	; (adr r3, 8010178 <__ieee754_rem_pio2+0x308>)
 800ff3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff3e:	f7f0 f9a5 	bl	800028c <__adddf3>
 800ff42:	4602      	mov	r2, r0
 800ff44:	460b      	mov	r3, r1
 800ff46:	e9ca 2300 	strd	r2, r3, [sl]
 800ff4a:	4620      	mov	r0, r4
 800ff4c:	4629      	mov	r1, r5
 800ff4e:	f7f0 f99b 	bl	8000288 <__aeabi_dsub>
 800ff52:	a389      	add	r3, pc, #548	; (adr r3, 8010178 <__ieee754_rem_pio2+0x308>)
 800ff54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff58:	f7f0 f998 	bl	800028c <__adddf3>
 800ff5c:	f04f 3bff 	mov.w	fp, #4294967295
 800ff60:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ff64:	e7c4      	b.n	800fef0 <__ieee754_rem_pio2+0x80>
 800ff66:	a386      	add	r3, pc, #536	; (adr r3, 8010180 <__ieee754_rem_pio2+0x310>)
 800ff68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff6c:	f7f0 f98e 	bl	800028c <__adddf3>
 800ff70:	a385      	add	r3, pc, #532	; (adr r3, 8010188 <__ieee754_rem_pio2+0x318>)
 800ff72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff76:	4604      	mov	r4, r0
 800ff78:	460d      	mov	r5, r1
 800ff7a:	f7f0 f987 	bl	800028c <__adddf3>
 800ff7e:	4602      	mov	r2, r0
 800ff80:	460b      	mov	r3, r1
 800ff82:	e9ca 2300 	strd	r2, r3, [sl]
 800ff86:	4620      	mov	r0, r4
 800ff88:	4629      	mov	r1, r5
 800ff8a:	f7f0 f97d 	bl	8000288 <__aeabi_dsub>
 800ff8e:	a37e      	add	r3, pc, #504	; (adr r3, 8010188 <__ieee754_rem_pio2+0x318>)
 800ff90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff94:	e7e0      	b.n	800ff58 <__ieee754_rem_pio2+0xe8>
 800ff96:	4b87      	ldr	r3, [pc, #540]	; (80101b4 <__ieee754_rem_pio2+0x344>)
 800ff98:	4598      	cmp	r8, r3
 800ff9a:	f300 80d8 	bgt.w	801014e <__ieee754_rem_pio2+0x2de>
 800ff9e:	f000 fb0f 	bl	80105c0 <fabs>
 800ffa2:	ec55 4b10 	vmov	r4, r5, d0
 800ffa6:	ee10 0a10 	vmov	r0, s0
 800ffaa:	a379      	add	r3, pc, #484	; (adr r3, 8010190 <__ieee754_rem_pio2+0x320>)
 800ffac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb0:	4629      	mov	r1, r5
 800ffb2:	f7f0 fb21 	bl	80005f8 <__aeabi_dmul>
 800ffb6:	4b80      	ldr	r3, [pc, #512]	; (80101b8 <__ieee754_rem_pio2+0x348>)
 800ffb8:	2200      	movs	r2, #0
 800ffba:	f7f0 f967 	bl	800028c <__adddf3>
 800ffbe:	f7f0 fdcb 	bl	8000b58 <__aeabi_d2iz>
 800ffc2:	4683      	mov	fp, r0
 800ffc4:	f7f0 faae 	bl	8000524 <__aeabi_i2d>
 800ffc8:	4602      	mov	r2, r0
 800ffca:	460b      	mov	r3, r1
 800ffcc:	ec43 2b18 	vmov	d8, r2, r3
 800ffd0:	a367      	add	r3, pc, #412	; (adr r3, 8010170 <__ieee754_rem_pio2+0x300>)
 800ffd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd6:	f7f0 fb0f 	bl	80005f8 <__aeabi_dmul>
 800ffda:	4602      	mov	r2, r0
 800ffdc:	460b      	mov	r3, r1
 800ffde:	4620      	mov	r0, r4
 800ffe0:	4629      	mov	r1, r5
 800ffe2:	f7f0 f951 	bl	8000288 <__aeabi_dsub>
 800ffe6:	a364      	add	r3, pc, #400	; (adr r3, 8010178 <__ieee754_rem_pio2+0x308>)
 800ffe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffec:	4606      	mov	r6, r0
 800ffee:	460f      	mov	r7, r1
 800fff0:	ec51 0b18 	vmov	r0, r1, d8
 800fff4:	f7f0 fb00 	bl	80005f8 <__aeabi_dmul>
 800fff8:	f1bb 0f1f 	cmp.w	fp, #31
 800fffc:	4604      	mov	r4, r0
 800fffe:	460d      	mov	r5, r1
 8010000:	dc0d      	bgt.n	801001e <__ieee754_rem_pio2+0x1ae>
 8010002:	4b6e      	ldr	r3, [pc, #440]	; (80101bc <__ieee754_rem_pio2+0x34c>)
 8010004:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801000c:	4543      	cmp	r3, r8
 801000e:	d006      	beq.n	801001e <__ieee754_rem_pio2+0x1ae>
 8010010:	4622      	mov	r2, r4
 8010012:	462b      	mov	r3, r5
 8010014:	4630      	mov	r0, r6
 8010016:	4639      	mov	r1, r7
 8010018:	f7f0 f936 	bl	8000288 <__aeabi_dsub>
 801001c:	e00e      	b.n	801003c <__ieee754_rem_pio2+0x1cc>
 801001e:	462b      	mov	r3, r5
 8010020:	4622      	mov	r2, r4
 8010022:	4630      	mov	r0, r6
 8010024:	4639      	mov	r1, r7
 8010026:	f7f0 f92f 	bl	8000288 <__aeabi_dsub>
 801002a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801002e:	9303      	str	r3, [sp, #12]
 8010030:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010034:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8010038:	2b10      	cmp	r3, #16
 801003a:	dc02      	bgt.n	8010042 <__ieee754_rem_pio2+0x1d2>
 801003c:	e9ca 0100 	strd	r0, r1, [sl]
 8010040:	e039      	b.n	80100b6 <__ieee754_rem_pio2+0x246>
 8010042:	a34f      	add	r3, pc, #316	; (adr r3, 8010180 <__ieee754_rem_pio2+0x310>)
 8010044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010048:	ec51 0b18 	vmov	r0, r1, d8
 801004c:	f7f0 fad4 	bl	80005f8 <__aeabi_dmul>
 8010050:	4604      	mov	r4, r0
 8010052:	460d      	mov	r5, r1
 8010054:	4602      	mov	r2, r0
 8010056:	460b      	mov	r3, r1
 8010058:	4630      	mov	r0, r6
 801005a:	4639      	mov	r1, r7
 801005c:	f7f0 f914 	bl	8000288 <__aeabi_dsub>
 8010060:	4602      	mov	r2, r0
 8010062:	460b      	mov	r3, r1
 8010064:	4680      	mov	r8, r0
 8010066:	4689      	mov	r9, r1
 8010068:	4630      	mov	r0, r6
 801006a:	4639      	mov	r1, r7
 801006c:	f7f0 f90c 	bl	8000288 <__aeabi_dsub>
 8010070:	4622      	mov	r2, r4
 8010072:	462b      	mov	r3, r5
 8010074:	f7f0 f908 	bl	8000288 <__aeabi_dsub>
 8010078:	a343      	add	r3, pc, #268	; (adr r3, 8010188 <__ieee754_rem_pio2+0x318>)
 801007a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801007e:	4604      	mov	r4, r0
 8010080:	460d      	mov	r5, r1
 8010082:	ec51 0b18 	vmov	r0, r1, d8
 8010086:	f7f0 fab7 	bl	80005f8 <__aeabi_dmul>
 801008a:	4622      	mov	r2, r4
 801008c:	462b      	mov	r3, r5
 801008e:	f7f0 f8fb 	bl	8000288 <__aeabi_dsub>
 8010092:	4602      	mov	r2, r0
 8010094:	460b      	mov	r3, r1
 8010096:	4604      	mov	r4, r0
 8010098:	460d      	mov	r5, r1
 801009a:	4640      	mov	r0, r8
 801009c:	4649      	mov	r1, r9
 801009e:	f7f0 f8f3 	bl	8000288 <__aeabi_dsub>
 80100a2:	9a03      	ldr	r2, [sp, #12]
 80100a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80100a8:	1ad3      	subs	r3, r2, r3
 80100aa:	2b31      	cmp	r3, #49	; 0x31
 80100ac:	dc24      	bgt.n	80100f8 <__ieee754_rem_pio2+0x288>
 80100ae:	e9ca 0100 	strd	r0, r1, [sl]
 80100b2:	4646      	mov	r6, r8
 80100b4:	464f      	mov	r7, r9
 80100b6:	e9da 8900 	ldrd	r8, r9, [sl]
 80100ba:	4630      	mov	r0, r6
 80100bc:	4642      	mov	r2, r8
 80100be:	464b      	mov	r3, r9
 80100c0:	4639      	mov	r1, r7
 80100c2:	f7f0 f8e1 	bl	8000288 <__aeabi_dsub>
 80100c6:	462b      	mov	r3, r5
 80100c8:	4622      	mov	r2, r4
 80100ca:	f7f0 f8dd 	bl	8000288 <__aeabi_dsub>
 80100ce:	9b02      	ldr	r3, [sp, #8]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80100d6:	f6bf af0b 	bge.w	800fef0 <__ieee754_rem_pio2+0x80>
 80100da:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80100de:	f8ca 3004 	str.w	r3, [sl, #4]
 80100e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80100e6:	f8ca 8000 	str.w	r8, [sl]
 80100ea:	f8ca 0008 	str.w	r0, [sl, #8]
 80100ee:	f8ca 300c 	str.w	r3, [sl, #12]
 80100f2:	f1cb 0b00 	rsb	fp, fp, #0
 80100f6:	e6fb      	b.n	800fef0 <__ieee754_rem_pio2+0x80>
 80100f8:	a327      	add	r3, pc, #156	; (adr r3, 8010198 <__ieee754_rem_pio2+0x328>)
 80100fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100fe:	ec51 0b18 	vmov	r0, r1, d8
 8010102:	f7f0 fa79 	bl	80005f8 <__aeabi_dmul>
 8010106:	4604      	mov	r4, r0
 8010108:	460d      	mov	r5, r1
 801010a:	4602      	mov	r2, r0
 801010c:	460b      	mov	r3, r1
 801010e:	4640      	mov	r0, r8
 8010110:	4649      	mov	r1, r9
 8010112:	f7f0 f8b9 	bl	8000288 <__aeabi_dsub>
 8010116:	4602      	mov	r2, r0
 8010118:	460b      	mov	r3, r1
 801011a:	4606      	mov	r6, r0
 801011c:	460f      	mov	r7, r1
 801011e:	4640      	mov	r0, r8
 8010120:	4649      	mov	r1, r9
 8010122:	f7f0 f8b1 	bl	8000288 <__aeabi_dsub>
 8010126:	4622      	mov	r2, r4
 8010128:	462b      	mov	r3, r5
 801012a:	f7f0 f8ad 	bl	8000288 <__aeabi_dsub>
 801012e:	a31c      	add	r3, pc, #112	; (adr r3, 80101a0 <__ieee754_rem_pio2+0x330>)
 8010130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010134:	4604      	mov	r4, r0
 8010136:	460d      	mov	r5, r1
 8010138:	ec51 0b18 	vmov	r0, r1, d8
 801013c:	f7f0 fa5c 	bl	80005f8 <__aeabi_dmul>
 8010140:	4622      	mov	r2, r4
 8010142:	462b      	mov	r3, r5
 8010144:	f7f0 f8a0 	bl	8000288 <__aeabi_dsub>
 8010148:	4604      	mov	r4, r0
 801014a:	460d      	mov	r5, r1
 801014c:	e760      	b.n	8010010 <__ieee754_rem_pio2+0x1a0>
 801014e:	4b1c      	ldr	r3, [pc, #112]	; (80101c0 <__ieee754_rem_pio2+0x350>)
 8010150:	4598      	cmp	r8, r3
 8010152:	dd37      	ble.n	80101c4 <__ieee754_rem_pio2+0x354>
 8010154:	ee10 2a10 	vmov	r2, s0
 8010158:	462b      	mov	r3, r5
 801015a:	4620      	mov	r0, r4
 801015c:	4629      	mov	r1, r5
 801015e:	f7f0 f893 	bl	8000288 <__aeabi_dsub>
 8010162:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010166:	e9ca 0100 	strd	r0, r1, [sl]
 801016a:	e695      	b.n	800fe98 <__ieee754_rem_pio2+0x28>
 801016c:	f3af 8000 	nop.w
 8010170:	54400000 	.word	0x54400000
 8010174:	3ff921fb 	.word	0x3ff921fb
 8010178:	1a626331 	.word	0x1a626331
 801017c:	3dd0b461 	.word	0x3dd0b461
 8010180:	1a600000 	.word	0x1a600000
 8010184:	3dd0b461 	.word	0x3dd0b461
 8010188:	2e037073 	.word	0x2e037073
 801018c:	3ba3198a 	.word	0x3ba3198a
 8010190:	6dc9c883 	.word	0x6dc9c883
 8010194:	3fe45f30 	.word	0x3fe45f30
 8010198:	2e000000 	.word	0x2e000000
 801019c:	3ba3198a 	.word	0x3ba3198a
 80101a0:	252049c1 	.word	0x252049c1
 80101a4:	397b839a 	.word	0x397b839a
 80101a8:	3fe921fb 	.word	0x3fe921fb
 80101ac:	4002d97b 	.word	0x4002d97b
 80101b0:	3ff921fb 	.word	0x3ff921fb
 80101b4:	413921fb 	.word	0x413921fb
 80101b8:	3fe00000 	.word	0x3fe00000
 80101bc:	08011468 	.word	0x08011468
 80101c0:	7fefffff 	.word	0x7fefffff
 80101c4:	ea4f 5628 	mov.w	r6, r8, asr #20
 80101c8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80101cc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80101d0:	4620      	mov	r0, r4
 80101d2:	460d      	mov	r5, r1
 80101d4:	f7f0 fcc0 	bl	8000b58 <__aeabi_d2iz>
 80101d8:	f7f0 f9a4 	bl	8000524 <__aeabi_i2d>
 80101dc:	4602      	mov	r2, r0
 80101de:	460b      	mov	r3, r1
 80101e0:	4620      	mov	r0, r4
 80101e2:	4629      	mov	r1, r5
 80101e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80101e8:	f7f0 f84e 	bl	8000288 <__aeabi_dsub>
 80101ec:	4b21      	ldr	r3, [pc, #132]	; (8010274 <__ieee754_rem_pio2+0x404>)
 80101ee:	2200      	movs	r2, #0
 80101f0:	f7f0 fa02 	bl	80005f8 <__aeabi_dmul>
 80101f4:	460d      	mov	r5, r1
 80101f6:	4604      	mov	r4, r0
 80101f8:	f7f0 fcae 	bl	8000b58 <__aeabi_d2iz>
 80101fc:	f7f0 f992 	bl	8000524 <__aeabi_i2d>
 8010200:	4602      	mov	r2, r0
 8010202:	460b      	mov	r3, r1
 8010204:	4620      	mov	r0, r4
 8010206:	4629      	mov	r1, r5
 8010208:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801020c:	f7f0 f83c 	bl	8000288 <__aeabi_dsub>
 8010210:	4b18      	ldr	r3, [pc, #96]	; (8010274 <__ieee754_rem_pio2+0x404>)
 8010212:	2200      	movs	r2, #0
 8010214:	f7f0 f9f0 	bl	80005f8 <__aeabi_dmul>
 8010218:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801021c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8010220:	2703      	movs	r7, #3
 8010222:	2400      	movs	r4, #0
 8010224:	2500      	movs	r5, #0
 8010226:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 801022a:	4622      	mov	r2, r4
 801022c:	462b      	mov	r3, r5
 801022e:	46b9      	mov	r9, r7
 8010230:	3f01      	subs	r7, #1
 8010232:	f7f0 fc49 	bl	8000ac8 <__aeabi_dcmpeq>
 8010236:	2800      	cmp	r0, #0
 8010238:	d1f5      	bne.n	8010226 <__ieee754_rem_pio2+0x3b6>
 801023a:	4b0f      	ldr	r3, [pc, #60]	; (8010278 <__ieee754_rem_pio2+0x408>)
 801023c:	9301      	str	r3, [sp, #4]
 801023e:	2302      	movs	r3, #2
 8010240:	9300      	str	r3, [sp, #0]
 8010242:	4632      	mov	r2, r6
 8010244:	464b      	mov	r3, r9
 8010246:	4651      	mov	r1, sl
 8010248:	a804      	add	r0, sp, #16
 801024a:	f000 f9c5 	bl	80105d8 <__kernel_rem_pio2>
 801024e:	9b02      	ldr	r3, [sp, #8]
 8010250:	2b00      	cmp	r3, #0
 8010252:	4683      	mov	fp, r0
 8010254:	f6bf ae4c 	bge.w	800fef0 <__ieee754_rem_pio2+0x80>
 8010258:	e9da 2100 	ldrd	r2, r1, [sl]
 801025c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010260:	e9ca 2300 	strd	r2, r3, [sl]
 8010264:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8010268:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801026c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8010270:	e73f      	b.n	80100f2 <__ieee754_rem_pio2+0x282>
 8010272:	bf00      	nop
 8010274:	41700000 	.word	0x41700000
 8010278:	080114e8 	.word	0x080114e8
 801027c:	00000000 	.word	0x00000000

08010280 <atan>:
 8010280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010284:	ec55 4b10 	vmov	r4, r5, d0
 8010288:	4bc3      	ldr	r3, [pc, #780]	; (8010598 <atan+0x318>)
 801028a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801028e:	429e      	cmp	r6, r3
 8010290:	46ab      	mov	fp, r5
 8010292:	dd18      	ble.n	80102c6 <atan+0x46>
 8010294:	4bc1      	ldr	r3, [pc, #772]	; (801059c <atan+0x31c>)
 8010296:	429e      	cmp	r6, r3
 8010298:	dc01      	bgt.n	801029e <atan+0x1e>
 801029a:	d109      	bne.n	80102b0 <atan+0x30>
 801029c:	b144      	cbz	r4, 80102b0 <atan+0x30>
 801029e:	4622      	mov	r2, r4
 80102a0:	462b      	mov	r3, r5
 80102a2:	4620      	mov	r0, r4
 80102a4:	4629      	mov	r1, r5
 80102a6:	f7ef fff1 	bl	800028c <__adddf3>
 80102aa:	4604      	mov	r4, r0
 80102ac:	460d      	mov	r5, r1
 80102ae:	e006      	b.n	80102be <atan+0x3e>
 80102b0:	f1bb 0f00 	cmp.w	fp, #0
 80102b4:	f300 8131 	bgt.w	801051a <atan+0x29a>
 80102b8:	a59b      	add	r5, pc, #620	; (adr r5, 8010528 <atan+0x2a8>)
 80102ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 80102be:	ec45 4b10 	vmov	d0, r4, r5
 80102c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102c6:	4bb6      	ldr	r3, [pc, #728]	; (80105a0 <atan+0x320>)
 80102c8:	429e      	cmp	r6, r3
 80102ca:	dc14      	bgt.n	80102f6 <atan+0x76>
 80102cc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80102d0:	429e      	cmp	r6, r3
 80102d2:	dc0d      	bgt.n	80102f0 <atan+0x70>
 80102d4:	a396      	add	r3, pc, #600	; (adr r3, 8010530 <atan+0x2b0>)
 80102d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102da:	ee10 0a10 	vmov	r0, s0
 80102de:	4629      	mov	r1, r5
 80102e0:	f7ef ffd4 	bl	800028c <__adddf3>
 80102e4:	4baf      	ldr	r3, [pc, #700]	; (80105a4 <atan+0x324>)
 80102e6:	2200      	movs	r2, #0
 80102e8:	f7f0 fc16 	bl	8000b18 <__aeabi_dcmpgt>
 80102ec:	2800      	cmp	r0, #0
 80102ee:	d1e6      	bne.n	80102be <atan+0x3e>
 80102f0:	f04f 3aff 	mov.w	sl, #4294967295
 80102f4:	e02b      	b.n	801034e <atan+0xce>
 80102f6:	f000 f963 	bl	80105c0 <fabs>
 80102fa:	4bab      	ldr	r3, [pc, #684]	; (80105a8 <atan+0x328>)
 80102fc:	429e      	cmp	r6, r3
 80102fe:	ec55 4b10 	vmov	r4, r5, d0
 8010302:	f300 80bf 	bgt.w	8010484 <atan+0x204>
 8010306:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801030a:	429e      	cmp	r6, r3
 801030c:	f300 80a0 	bgt.w	8010450 <atan+0x1d0>
 8010310:	ee10 2a10 	vmov	r2, s0
 8010314:	ee10 0a10 	vmov	r0, s0
 8010318:	462b      	mov	r3, r5
 801031a:	4629      	mov	r1, r5
 801031c:	f7ef ffb6 	bl	800028c <__adddf3>
 8010320:	4ba0      	ldr	r3, [pc, #640]	; (80105a4 <atan+0x324>)
 8010322:	2200      	movs	r2, #0
 8010324:	f7ef ffb0 	bl	8000288 <__aeabi_dsub>
 8010328:	2200      	movs	r2, #0
 801032a:	4606      	mov	r6, r0
 801032c:	460f      	mov	r7, r1
 801032e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010332:	4620      	mov	r0, r4
 8010334:	4629      	mov	r1, r5
 8010336:	f7ef ffa9 	bl	800028c <__adddf3>
 801033a:	4602      	mov	r2, r0
 801033c:	460b      	mov	r3, r1
 801033e:	4630      	mov	r0, r6
 8010340:	4639      	mov	r1, r7
 8010342:	f7f0 fa83 	bl	800084c <__aeabi_ddiv>
 8010346:	f04f 0a00 	mov.w	sl, #0
 801034a:	4604      	mov	r4, r0
 801034c:	460d      	mov	r5, r1
 801034e:	4622      	mov	r2, r4
 8010350:	462b      	mov	r3, r5
 8010352:	4620      	mov	r0, r4
 8010354:	4629      	mov	r1, r5
 8010356:	f7f0 f94f 	bl	80005f8 <__aeabi_dmul>
 801035a:	4602      	mov	r2, r0
 801035c:	460b      	mov	r3, r1
 801035e:	4680      	mov	r8, r0
 8010360:	4689      	mov	r9, r1
 8010362:	f7f0 f949 	bl	80005f8 <__aeabi_dmul>
 8010366:	a374      	add	r3, pc, #464	; (adr r3, 8010538 <atan+0x2b8>)
 8010368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801036c:	4606      	mov	r6, r0
 801036e:	460f      	mov	r7, r1
 8010370:	f7f0 f942 	bl	80005f8 <__aeabi_dmul>
 8010374:	a372      	add	r3, pc, #456	; (adr r3, 8010540 <atan+0x2c0>)
 8010376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801037a:	f7ef ff87 	bl	800028c <__adddf3>
 801037e:	4632      	mov	r2, r6
 8010380:	463b      	mov	r3, r7
 8010382:	f7f0 f939 	bl	80005f8 <__aeabi_dmul>
 8010386:	a370      	add	r3, pc, #448	; (adr r3, 8010548 <atan+0x2c8>)
 8010388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801038c:	f7ef ff7e 	bl	800028c <__adddf3>
 8010390:	4632      	mov	r2, r6
 8010392:	463b      	mov	r3, r7
 8010394:	f7f0 f930 	bl	80005f8 <__aeabi_dmul>
 8010398:	a36d      	add	r3, pc, #436	; (adr r3, 8010550 <atan+0x2d0>)
 801039a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801039e:	f7ef ff75 	bl	800028c <__adddf3>
 80103a2:	4632      	mov	r2, r6
 80103a4:	463b      	mov	r3, r7
 80103a6:	f7f0 f927 	bl	80005f8 <__aeabi_dmul>
 80103aa:	a36b      	add	r3, pc, #428	; (adr r3, 8010558 <atan+0x2d8>)
 80103ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b0:	f7ef ff6c 	bl	800028c <__adddf3>
 80103b4:	4632      	mov	r2, r6
 80103b6:	463b      	mov	r3, r7
 80103b8:	f7f0 f91e 	bl	80005f8 <__aeabi_dmul>
 80103bc:	a368      	add	r3, pc, #416	; (adr r3, 8010560 <atan+0x2e0>)
 80103be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103c2:	f7ef ff63 	bl	800028c <__adddf3>
 80103c6:	4642      	mov	r2, r8
 80103c8:	464b      	mov	r3, r9
 80103ca:	f7f0 f915 	bl	80005f8 <__aeabi_dmul>
 80103ce:	a366      	add	r3, pc, #408	; (adr r3, 8010568 <atan+0x2e8>)
 80103d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d4:	4680      	mov	r8, r0
 80103d6:	4689      	mov	r9, r1
 80103d8:	4630      	mov	r0, r6
 80103da:	4639      	mov	r1, r7
 80103dc:	f7f0 f90c 	bl	80005f8 <__aeabi_dmul>
 80103e0:	a363      	add	r3, pc, #396	; (adr r3, 8010570 <atan+0x2f0>)
 80103e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e6:	f7ef ff4f 	bl	8000288 <__aeabi_dsub>
 80103ea:	4632      	mov	r2, r6
 80103ec:	463b      	mov	r3, r7
 80103ee:	f7f0 f903 	bl	80005f8 <__aeabi_dmul>
 80103f2:	a361      	add	r3, pc, #388	; (adr r3, 8010578 <atan+0x2f8>)
 80103f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f8:	f7ef ff46 	bl	8000288 <__aeabi_dsub>
 80103fc:	4632      	mov	r2, r6
 80103fe:	463b      	mov	r3, r7
 8010400:	f7f0 f8fa 	bl	80005f8 <__aeabi_dmul>
 8010404:	a35e      	add	r3, pc, #376	; (adr r3, 8010580 <atan+0x300>)
 8010406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801040a:	f7ef ff3d 	bl	8000288 <__aeabi_dsub>
 801040e:	4632      	mov	r2, r6
 8010410:	463b      	mov	r3, r7
 8010412:	f7f0 f8f1 	bl	80005f8 <__aeabi_dmul>
 8010416:	a35c      	add	r3, pc, #368	; (adr r3, 8010588 <atan+0x308>)
 8010418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801041c:	f7ef ff34 	bl	8000288 <__aeabi_dsub>
 8010420:	4632      	mov	r2, r6
 8010422:	463b      	mov	r3, r7
 8010424:	f7f0 f8e8 	bl	80005f8 <__aeabi_dmul>
 8010428:	4602      	mov	r2, r0
 801042a:	460b      	mov	r3, r1
 801042c:	4640      	mov	r0, r8
 801042e:	4649      	mov	r1, r9
 8010430:	f7ef ff2c 	bl	800028c <__adddf3>
 8010434:	4622      	mov	r2, r4
 8010436:	462b      	mov	r3, r5
 8010438:	f7f0 f8de 	bl	80005f8 <__aeabi_dmul>
 801043c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010440:	4602      	mov	r2, r0
 8010442:	460b      	mov	r3, r1
 8010444:	d14b      	bne.n	80104de <atan+0x25e>
 8010446:	4620      	mov	r0, r4
 8010448:	4629      	mov	r1, r5
 801044a:	f7ef ff1d 	bl	8000288 <__aeabi_dsub>
 801044e:	e72c      	b.n	80102aa <atan+0x2a>
 8010450:	ee10 0a10 	vmov	r0, s0
 8010454:	4b53      	ldr	r3, [pc, #332]	; (80105a4 <atan+0x324>)
 8010456:	2200      	movs	r2, #0
 8010458:	4629      	mov	r1, r5
 801045a:	f7ef ff15 	bl	8000288 <__aeabi_dsub>
 801045e:	4b51      	ldr	r3, [pc, #324]	; (80105a4 <atan+0x324>)
 8010460:	4606      	mov	r6, r0
 8010462:	460f      	mov	r7, r1
 8010464:	2200      	movs	r2, #0
 8010466:	4620      	mov	r0, r4
 8010468:	4629      	mov	r1, r5
 801046a:	f7ef ff0f 	bl	800028c <__adddf3>
 801046e:	4602      	mov	r2, r0
 8010470:	460b      	mov	r3, r1
 8010472:	4630      	mov	r0, r6
 8010474:	4639      	mov	r1, r7
 8010476:	f7f0 f9e9 	bl	800084c <__aeabi_ddiv>
 801047a:	f04f 0a01 	mov.w	sl, #1
 801047e:	4604      	mov	r4, r0
 8010480:	460d      	mov	r5, r1
 8010482:	e764      	b.n	801034e <atan+0xce>
 8010484:	4b49      	ldr	r3, [pc, #292]	; (80105ac <atan+0x32c>)
 8010486:	429e      	cmp	r6, r3
 8010488:	da1d      	bge.n	80104c6 <atan+0x246>
 801048a:	ee10 0a10 	vmov	r0, s0
 801048e:	4b48      	ldr	r3, [pc, #288]	; (80105b0 <atan+0x330>)
 8010490:	2200      	movs	r2, #0
 8010492:	4629      	mov	r1, r5
 8010494:	f7ef fef8 	bl	8000288 <__aeabi_dsub>
 8010498:	4b45      	ldr	r3, [pc, #276]	; (80105b0 <atan+0x330>)
 801049a:	4606      	mov	r6, r0
 801049c:	460f      	mov	r7, r1
 801049e:	2200      	movs	r2, #0
 80104a0:	4620      	mov	r0, r4
 80104a2:	4629      	mov	r1, r5
 80104a4:	f7f0 f8a8 	bl	80005f8 <__aeabi_dmul>
 80104a8:	4b3e      	ldr	r3, [pc, #248]	; (80105a4 <atan+0x324>)
 80104aa:	2200      	movs	r2, #0
 80104ac:	f7ef feee 	bl	800028c <__adddf3>
 80104b0:	4602      	mov	r2, r0
 80104b2:	460b      	mov	r3, r1
 80104b4:	4630      	mov	r0, r6
 80104b6:	4639      	mov	r1, r7
 80104b8:	f7f0 f9c8 	bl	800084c <__aeabi_ddiv>
 80104bc:	f04f 0a02 	mov.w	sl, #2
 80104c0:	4604      	mov	r4, r0
 80104c2:	460d      	mov	r5, r1
 80104c4:	e743      	b.n	801034e <atan+0xce>
 80104c6:	462b      	mov	r3, r5
 80104c8:	ee10 2a10 	vmov	r2, s0
 80104cc:	4939      	ldr	r1, [pc, #228]	; (80105b4 <atan+0x334>)
 80104ce:	2000      	movs	r0, #0
 80104d0:	f7f0 f9bc 	bl	800084c <__aeabi_ddiv>
 80104d4:	f04f 0a03 	mov.w	sl, #3
 80104d8:	4604      	mov	r4, r0
 80104da:	460d      	mov	r5, r1
 80104dc:	e737      	b.n	801034e <atan+0xce>
 80104de:	4b36      	ldr	r3, [pc, #216]	; (80105b8 <atan+0x338>)
 80104e0:	4e36      	ldr	r6, [pc, #216]	; (80105bc <atan+0x33c>)
 80104e2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80104e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ea:	f7ef fecd 	bl	8000288 <__aeabi_dsub>
 80104ee:	4622      	mov	r2, r4
 80104f0:	462b      	mov	r3, r5
 80104f2:	f7ef fec9 	bl	8000288 <__aeabi_dsub>
 80104f6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80104fa:	4602      	mov	r2, r0
 80104fc:	460b      	mov	r3, r1
 80104fe:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010502:	f7ef fec1 	bl	8000288 <__aeabi_dsub>
 8010506:	f1bb 0f00 	cmp.w	fp, #0
 801050a:	4604      	mov	r4, r0
 801050c:	460d      	mov	r5, r1
 801050e:	f6bf aed6 	bge.w	80102be <atan+0x3e>
 8010512:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010516:	461d      	mov	r5, r3
 8010518:	e6d1      	b.n	80102be <atan+0x3e>
 801051a:	a51d      	add	r5, pc, #116	; (adr r5, 8010590 <atan+0x310>)
 801051c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010520:	e6cd      	b.n	80102be <atan+0x3e>
 8010522:	bf00      	nop
 8010524:	f3af 8000 	nop.w
 8010528:	54442d18 	.word	0x54442d18
 801052c:	bff921fb 	.word	0xbff921fb
 8010530:	8800759c 	.word	0x8800759c
 8010534:	7e37e43c 	.word	0x7e37e43c
 8010538:	e322da11 	.word	0xe322da11
 801053c:	3f90ad3a 	.word	0x3f90ad3a
 8010540:	24760deb 	.word	0x24760deb
 8010544:	3fa97b4b 	.word	0x3fa97b4b
 8010548:	a0d03d51 	.word	0xa0d03d51
 801054c:	3fb10d66 	.word	0x3fb10d66
 8010550:	c54c206e 	.word	0xc54c206e
 8010554:	3fb745cd 	.word	0x3fb745cd
 8010558:	920083ff 	.word	0x920083ff
 801055c:	3fc24924 	.word	0x3fc24924
 8010560:	5555550d 	.word	0x5555550d
 8010564:	3fd55555 	.word	0x3fd55555
 8010568:	2c6a6c2f 	.word	0x2c6a6c2f
 801056c:	bfa2b444 	.word	0xbfa2b444
 8010570:	52defd9a 	.word	0x52defd9a
 8010574:	3fadde2d 	.word	0x3fadde2d
 8010578:	af749a6d 	.word	0xaf749a6d
 801057c:	3fb3b0f2 	.word	0x3fb3b0f2
 8010580:	fe231671 	.word	0xfe231671
 8010584:	3fbc71c6 	.word	0x3fbc71c6
 8010588:	9998ebc4 	.word	0x9998ebc4
 801058c:	3fc99999 	.word	0x3fc99999
 8010590:	54442d18 	.word	0x54442d18
 8010594:	3ff921fb 	.word	0x3ff921fb
 8010598:	440fffff 	.word	0x440fffff
 801059c:	7ff00000 	.word	0x7ff00000
 80105a0:	3fdbffff 	.word	0x3fdbffff
 80105a4:	3ff00000 	.word	0x3ff00000
 80105a8:	3ff2ffff 	.word	0x3ff2ffff
 80105ac:	40038000 	.word	0x40038000
 80105b0:	3ff80000 	.word	0x3ff80000
 80105b4:	bff00000 	.word	0xbff00000
 80105b8:	08011610 	.word	0x08011610
 80105bc:	080115f0 	.word	0x080115f0

080105c0 <fabs>:
 80105c0:	ec51 0b10 	vmov	r0, r1, d0
 80105c4:	ee10 2a10 	vmov	r2, s0
 80105c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80105cc:	ec43 2b10 	vmov	d0, r2, r3
 80105d0:	4770      	bx	lr
 80105d2:	0000      	movs	r0, r0
 80105d4:	0000      	movs	r0, r0
	...

080105d8 <__kernel_rem_pio2>:
 80105d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105dc:	ed2d 8b02 	vpush	{d8}
 80105e0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80105e4:	f112 0f14 	cmn.w	r2, #20
 80105e8:	9306      	str	r3, [sp, #24]
 80105ea:	9104      	str	r1, [sp, #16]
 80105ec:	4bc2      	ldr	r3, [pc, #776]	; (80108f8 <__kernel_rem_pio2+0x320>)
 80105ee:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80105f0:	9009      	str	r0, [sp, #36]	; 0x24
 80105f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80105f6:	9300      	str	r3, [sp, #0]
 80105f8:	9b06      	ldr	r3, [sp, #24]
 80105fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80105fe:	bfa8      	it	ge
 8010600:	1ed4      	subge	r4, r2, #3
 8010602:	9305      	str	r3, [sp, #20]
 8010604:	bfb2      	itee	lt
 8010606:	2400      	movlt	r4, #0
 8010608:	2318      	movge	r3, #24
 801060a:	fb94 f4f3 	sdivge	r4, r4, r3
 801060e:	f06f 0317 	mvn.w	r3, #23
 8010612:	fb04 3303 	mla	r3, r4, r3, r3
 8010616:	eb03 0a02 	add.w	sl, r3, r2
 801061a:	9b00      	ldr	r3, [sp, #0]
 801061c:	9a05      	ldr	r2, [sp, #20]
 801061e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80108e8 <__kernel_rem_pio2+0x310>
 8010622:	eb03 0802 	add.w	r8, r3, r2
 8010626:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010628:	1aa7      	subs	r7, r4, r2
 801062a:	ae20      	add	r6, sp, #128	; 0x80
 801062c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010630:	2500      	movs	r5, #0
 8010632:	4545      	cmp	r5, r8
 8010634:	dd13      	ble.n	801065e <__kernel_rem_pio2+0x86>
 8010636:	9b06      	ldr	r3, [sp, #24]
 8010638:	aa20      	add	r2, sp, #128	; 0x80
 801063a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801063e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8010642:	f04f 0800 	mov.w	r8, #0
 8010646:	9b00      	ldr	r3, [sp, #0]
 8010648:	4598      	cmp	r8, r3
 801064a:	dc31      	bgt.n	80106b0 <__kernel_rem_pio2+0xd8>
 801064c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80108e8 <__kernel_rem_pio2+0x310>
 8010650:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010654:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010658:	462f      	mov	r7, r5
 801065a:	2600      	movs	r6, #0
 801065c:	e01b      	b.n	8010696 <__kernel_rem_pio2+0xbe>
 801065e:	42ef      	cmn	r7, r5
 8010660:	d407      	bmi.n	8010672 <__kernel_rem_pio2+0x9a>
 8010662:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010666:	f7ef ff5d 	bl	8000524 <__aeabi_i2d>
 801066a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801066e:	3501      	adds	r5, #1
 8010670:	e7df      	b.n	8010632 <__kernel_rem_pio2+0x5a>
 8010672:	ec51 0b18 	vmov	r0, r1, d8
 8010676:	e7f8      	b.n	801066a <__kernel_rem_pio2+0x92>
 8010678:	e9d7 2300 	ldrd	r2, r3, [r7]
 801067c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010680:	f7ef ffba 	bl	80005f8 <__aeabi_dmul>
 8010684:	4602      	mov	r2, r0
 8010686:	460b      	mov	r3, r1
 8010688:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801068c:	f7ef fdfe 	bl	800028c <__adddf3>
 8010690:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010694:	3601      	adds	r6, #1
 8010696:	9b05      	ldr	r3, [sp, #20]
 8010698:	429e      	cmp	r6, r3
 801069a:	f1a7 0708 	sub.w	r7, r7, #8
 801069e:	ddeb      	ble.n	8010678 <__kernel_rem_pio2+0xa0>
 80106a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80106a4:	f108 0801 	add.w	r8, r8, #1
 80106a8:	ecab 7b02 	vstmia	fp!, {d7}
 80106ac:	3508      	adds	r5, #8
 80106ae:	e7ca      	b.n	8010646 <__kernel_rem_pio2+0x6e>
 80106b0:	9b00      	ldr	r3, [sp, #0]
 80106b2:	aa0c      	add	r2, sp, #48	; 0x30
 80106b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80106b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80106ba:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80106bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80106c0:	9c00      	ldr	r4, [sp, #0]
 80106c2:	930a      	str	r3, [sp, #40]	; 0x28
 80106c4:	00e3      	lsls	r3, r4, #3
 80106c6:	9308      	str	r3, [sp, #32]
 80106c8:	ab98      	add	r3, sp, #608	; 0x260
 80106ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80106ce:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80106d2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80106d6:	ab70      	add	r3, sp, #448	; 0x1c0
 80106d8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80106dc:	46c3      	mov	fp, r8
 80106de:	46a1      	mov	r9, r4
 80106e0:	f1b9 0f00 	cmp.w	r9, #0
 80106e4:	f1a5 0508 	sub.w	r5, r5, #8
 80106e8:	dc77      	bgt.n	80107da <__kernel_rem_pio2+0x202>
 80106ea:	ec47 6b10 	vmov	d0, r6, r7
 80106ee:	4650      	mov	r0, sl
 80106f0:	f000 fac2 	bl	8010c78 <scalbn>
 80106f4:	ec57 6b10 	vmov	r6, r7, d0
 80106f8:	2200      	movs	r2, #0
 80106fa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80106fe:	ee10 0a10 	vmov	r0, s0
 8010702:	4639      	mov	r1, r7
 8010704:	f7ef ff78 	bl	80005f8 <__aeabi_dmul>
 8010708:	ec41 0b10 	vmov	d0, r0, r1
 801070c:	f000 fb34 	bl	8010d78 <floor>
 8010710:	4b7a      	ldr	r3, [pc, #488]	; (80108fc <__kernel_rem_pio2+0x324>)
 8010712:	ec51 0b10 	vmov	r0, r1, d0
 8010716:	2200      	movs	r2, #0
 8010718:	f7ef ff6e 	bl	80005f8 <__aeabi_dmul>
 801071c:	4602      	mov	r2, r0
 801071e:	460b      	mov	r3, r1
 8010720:	4630      	mov	r0, r6
 8010722:	4639      	mov	r1, r7
 8010724:	f7ef fdb0 	bl	8000288 <__aeabi_dsub>
 8010728:	460f      	mov	r7, r1
 801072a:	4606      	mov	r6, r0
 801072c:	f7f0 fa14 	bl	8000b58 <__aeabi_d2iz>
 8010730:	9002      	str	r0, [sp, #8]
 8010732:	f7ef fef7 	bl	8000524 <__aeabi_i2d>
 8010736:	4602      	mov	r2, r0
 8010738:	460b      	mov	r3, r1
 801073a:	4630      	mov	r0, r6
 801073c:	4639      	mov	r1, r7
 801073e:	f7ef fda3 	bl	8000288 <__aeabi_dsub>
 8010742:	f1ba 0f00 	cmp.w	sl, #0
 8010746:	4606      	mov	r6, r0
 8010748:	460f      	mov	r7, r1
 801074a:	dd6d      	ble.n	8010828 <__kernel_rem_pio2+0x250>
 801074c:	1e61      	subs	r1, r4, #1
 801074e:	ab0c      	add	r3, sp, #48	; 0x30
 8010750:	9d02      	ldr	r5, [sp, #8]
 8010752:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010756:	f1ca 0018 	rsb	r0, sl, #24
 801075a:	fa43 f200 	asr.w	r2, r3, r0
 801075e:	4415      	add	r5, r2
 8010760:	4082      	lsls	r2, r0
 8010762:	1a9b      	subs	r3, r3, r2
 8010764:	aa0c      	add	r2, sp, #48	; 0x30
 8010766:	9502      	str	r5, [sp, #8]
 8010768:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801076c:	f1ca 0217 	rsb	r2, sl, #23
 8010770:	fa43 fb02 	asr.w	fp, r3, r2
 8010774:	f1bb 0f00 	cmp.w	fp, #0
 8010778:	dd65      	ble.n	8010846 <__kernel_rem_pio2+0x26e>
 801077a:	9b02      	ldr	r3, [sp, #8]
 801077c:	2200      	movs	r2, #0
 801077e:	3301      	adds	r3, #1
 8010780:	9302      	str	r3, [sp, #8]
 8010782:	4615      	mov	r5, r2
 8010784:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010788:	4294      	cmp	r4, r2
 801078a:	f300 809f 	bgt.w	80108cc <__kernel_rem_pio2+0x2f4>
 801078e:	f1ba 0f00 	cmp.w	sl, #0
 8010792:	dd07      	ble.n	80107a4 <__kernel_rem_pio2+0x1cc>
 8010794:	f1ba 0f01 	cmp.w	sl, #1
 8010798:	f000 80c1 	beq.w	801091e <__kernel_rem_pio2+0x346>
 801079c:	f1ba 0f02 	cmp.w	sl, #2
 80107a0:	f000 80c7 	beq.w	8010932 <__kernel_rem_pio2+0x35a>
 80107a4:	f1bb 0f02 	cmp.w	fp, #2
 80107a8:	d14d      	bne.n	8010846 <__kernel_rem_pio2+0x26e>
 80107aa:	4632      	mov	r2, r6
 80107ac:	463b      	mov	r3, r7
 80107ae:	4954      	ldr	r1, [pc, #336]	; (8010900 <__kernel_rem_pio2+0x328>)
 80107b0:	2000      	movs	r0, #0
 80107b2:	f7ef fd69 	bl	8000288 <__aeabi_dsub>
 80107b6:	4606      	mov	r6, r0
 80107b8:	460f      	mov	r7, r1
 80107ba:	2d00      	cmp	r5, #0
 80107bc:	d043      	beq.n	8010846 <__kernel_rem_pio2+0x26e>
 80107be:	4650      	mov	r0, sl
 80107c0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80108f0 <__kernel_rem_pio2+0x318>
 80107c4:	f000 fa58 	bl	8010c78 <scalbn>
 80107c8:	4630      	mov	r0, r6
 80107ca:	4639      	mov	r1, r7
 80107cc:	ec53 2b10 	vmov	r2, r3, d0
 80107d0:	f7ef fd5a 	bl	8000288 <__aeabi_dsub>
 80107d4:	4606      	mov	r6, r0
 80107d6:	460f      	mov	r7, r1
 80107d8:	e035      	b.n	8010846 <__kernel_rem_pio2+0x26e>
 80107da:	4b4a      	ldr	r3, [pc, #296]	; (8010904 <__kernel_rem_pio2+0x32c>)
 80107dc:	2200      	movs	r2, #0
 80107de:	4630      	mov	r0, r6
 80107e0:	4639      	mov	r1, r7
 80107e2:	f7ef ff09 	bl	80005f8 <__aeabi_dmul>
 80107e6:	f7f0 f9b7 	bl	8000b58 <__aeabi_d2iz>
 80107ea:	f7ef fe9b 	bl	8000524 <__aeabi_i2d>
 80107ee:	4602      	mov	r2, r0
 80107f0:	460b      	mov	r3, r1
 80107f2:	ec43 2b18 	vmov	d8, r2, r3
 80107f6:	4b44      	ldr	r3, [pc, #272]	; (8010908 <__kernel_rem_pio2+0x330>)
 80107f8:	2200      	movs	r2, #0
 80107fa:	f7ef fefd 	bl	80005f8 <__aeabi_dmul>
 80107fe:	4602      	mov	r2, r0
 8010800:	460b      	mov	r3, r1
 8010802:	4630      	mov	r0, r6
 8010804:	4639      	mov	r1, r7
 8010806:	f7ef fd3f 	bl	8000288 <__aeabi_dsub>
 801080a:	f7f0 f9a5 	bl	8000b58 <__aeabi_d2iz>
 801080e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010812:	f84b 0b04 	str.w	r0, [fp], #4
 8010816:	ec51 0b18 	vmov	r0, r1, d8
 801081a:	f7ef fd37 	bl	800028c <__adddf3>
 801081e:	f109 39ff 	add.w	r9, r9, #4294967295
 8010822:	4606      	mov	r6, r0
 8010824:	460f      	mov	r7, r1
 8010826:	e75b      	b.n	80106e0 <__kernel_rem_pio2+0x108>
 8010828:	d106      	bne.n	8010838 <__kernel_rem_pio2+0x260>
 801082a:	1e63      	subs	r3, r4, #1
 801082c:	aa0c      	add	r2, sp, #48	; 0x30
 801082e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010832:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8010836:	e79d      	b.n	8010774 <__kernel_rem_pio2+0x19c>
 8010838:	4b34      	ldr	r3, [pc, #208]	; (801090c <__kernel_rem_pio2+0x334>)
 801083a:	2200      	movs	r2, #0
 801083c:	f7f0 f962 	bl	8000b04 <__aeabi_dcmpge>
 8010840:	2800      	cmp	r0, #0
 8010842:	d140      	bne.n	80108c6 <__kernel_rem_pio2+0x2ee>
 8010844:	4683      	mov	fp, r0
 8010846:	2200      	movs	r2, #0
 8010848:	2300      	movs	r3, #0
 801084a:	4630      	mov	r0, r6
 801084c:	4639      	mov	r1, r7
 801084e:	f7f0 f93b 	bl	8000ac8 <__aeabi_dcmpeq>
 8010852:	2800      	cmp	r0, #0
 8010854:	f000 80c1 	beq.w	80109da <__kernel_rem_pio2+0x402>
 8010858:	1e65      	subs	r5, r4, #1
 801085a:	462b      	mov	r3, r5
 801085c:	2200      	movs	r2, #0
 801085e:	9900      	ldr	r1, [sp, #0]
 8010860:	428b      	cmp	r3, r1
 8010862:	da6d      	bge.n	8010940 <__kernel_rem_pio2+0x368>
 8010864:	2a00      	cmp	r2, #0
 8010866:	f000 808a 	beq.w	801097e <__kernel_rem_pio2+0x3a6>
 801086a:	ab0c      	add	r3, sp, #48	; 0x30
 801086c:	f1aa 0a18 	sub.w	sl, sl, #24
 8010870:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8010874:	2b00      	cmp	r3, #0
 8010876:	f000 80ae 	beq.w	80109d6 <__kernel_rem_pio2+0x3fe>
 801087a:	4650      	mov	r0, sl
 801087c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80108f0 <__kernel_rem_pio2+0x318>
 8010880:	f000 f9fa 	bl	8010c78 <scalbn>
 8010884:	1c6b      	adds	r3, r5, #1
 8010886:	00da      	lsls	r2, r3, #3
 8010888:	9205      	str	r2, [sp, #20]
 801088a:	ec57 6b10 	vmov	r6, r7, d0
 801088e:	aa70      	add	r2, sp, #448	; 0x1c0
 8010890:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8010904 <__kernel_rem_pio2+0x32c>
 8010894:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8010898:	462c      	mov	r4, r5
 801089a:	f04f 0800 	mov.w	r8, #0
 801089e:	2c00      	cmp	r4, #0
 80108a0:	f280 80d4 	bge.w	8010a4c <__kernel_rem_pio2+0x474>
 80108a4:	462c      	mov	r4, r5
 80108a6:	2c00      	cmp	r4, #0
 80108a8:	f2c0 8102 	blt.w	8010ab0 <__kernel_rem_pio2+0x4d8>
 80108ac:	4b18      	ldr	r3, [pc, #96]	; (8010910 <__kernel_rem_pio2+0x338>)
 80108ae:	461e      	mov	r6, r3
 80108b0:	ab70      	add	r3, sp, #448	; 0x1c0
 80108b2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80108b6:	1b2b      	subs	r3, r5, r4
 80108b8:	f04f 0900 	mov.w	r9, #0
 80108bc:	f04f 0a00 	mov.w	sl, #0
 80108c0:	2700      	movs	r7, #0
 80108c2:	9306      	str	r3, [sp, #24]
 80108c4:	e0e6      	b.n	8010a94 <__kernel_rem_pio2+0x4bc>
 80108c6:	f04f 0b02 	mov.w	fp, #2
 80108ca:	e756      	b.n	801077a <__kernel_rem_pio2+0x1a2>
 80108cc:	f8d8 3000 	ldr.w	r3, [r8]
 80108d0:	bb05      	cbnz	r5, 8010914 <__kernel_rem_pio2+0x33c>
 80108d2:	b123      	cbz	r3, 80108de <__kernel_rem_pio2+0x306>
 80108d4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80108d8:	f8c8 3000 	str.w	r3, [r8]
 80108dc:	2301      	movs	r3, #1
 80108de:	3201      	adds	r2, #1
 80108e0:	f108 0804 	add.w	r8, r8, #4
 80108e4:	461d      	mov	r5, r3
 80108e6:	e74f      	b.n	8010788 <__kernel_rem_pio2+0x1b0>
	...
 80108f4:	3ff00000 	.word	0x3ff00000
 80108f8:	08011670 	.word	0x08011670
 80108fc:	40200000 	.word	0x40200000
 8010900:	3ff00000 	.word	0x3ff00000
 8010904:	3e700000 	.word	0x3e700000
 8010908:	41700000 	.word	0x41700000
 801090c:	3fe00000 	.word	0x3fe00000
 8010910:	08011630 	.word	0x08011630
 8010914:	1acb      	subs	r3, r1, r3
 8010916:	f8c8 3000 	str.w	r3, [r8]
 801091a:	462b      	mov	r3, r5
 801091c:	e7df      	b.n	80108de <__kernel_rem_pio2+0x306>
 801091e:	1e62      	subs	r2, r4, #1
 8010920:	ab0c      	add	r3, sp, #48	; 0x30
 8010922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010926:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801092a:	a90c      	add	r1, sp, #48	; 0x30
 801092c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010930:	e738      	b.n	80107a4 <__kernel_rem_pio2+0x1cc>
 8010932:	1e62      	subs	r2, r4, #1
 8010934:	ab0c      	add	r3, sp, #48	; 0x30
 8010936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801093a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801093e:	e7f4      	b.n	801092a <__kernel_rem_pio2+0x352>
 8010940:	a90c      	add	r1, sp, #48	; 0x30
 8010942:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010946:	3b01      	subs	r3, #1
 8010948:	430a      	orrs	r2, r1
 801094a:	e788      	b.n	801085e <__kernel_rem_pio2+0x286>
 801094c:	3301      	adds	r3, #1
 801094e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010952:	2900      	cmp	r1, #0
 8010954:	d0fa      	beq.n	801094c <__kernel_rem_pio2+0x374>
 8010956:	9a08      	ldr	r2, [sp, #32]
 8010958:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801095c:	446a      	add	r2, sp
 801095e:	3a98      	subs	r2, #152	; 0x98
 8010960:	9208      	str	r2, [sp, #32]
 8010962:	9a06      	ldr	r2, [sp, #24]
 8010964:	a920      	add	r1, sp, #128	; 0x80
 8010966:	18a2      	adds	r2, r4, r2
 8010968:	18e3      	adds	r3, r4, r3
 801096a:	f104 0801 	add.w	r8, r4, #1
 801096e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8010972:	9302      	str	r3, [sp, #8]
 8010974:	9b02      	ldr	r3, [sp, #8]
 8010976:	4543      	cmp	r3, r8
 8010978:	da04      	bge.n	8010984 <__kernel_rem_pio2+0x3ac>
 801097a:	461c      	mov	r4, r3
 801097c:	e6a2      	b.n	80106c4 <__kernel_rem_pio2+0xec>
 801097e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010980:	2301      	movs	r3, #1
 8010982:	e7e4      	b.n	801094e <__kernel_rem_pio2+0x376>
 8010984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010986:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801098a:	f7ef fdcb 	bl	8000524 <__aeabi_i2d>
 801098e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8010992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010994:	46ab      	mov	fp, r5
 8010996:	461c      	mov	r4, r3
 8010998:	f04f 0900 	mov.w	r9, #0
 801099c:	2600      	movs	r6, #0
 801099e:	2700      	movs	r7, #0
 80109a0:	9b05      	ldr	r3, [sp, #20]
 80109a2:	4599      	cmp	r9, r3
 80109a4:	dd06      	ble.n	80109b4 <__kernel_rem_pio2+0x3dc>
 80109a6:	9b08      	ldr	r3, [sp, #32]
 80109a8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80109ac:	f108 0801 	add.w	r8, r8, #1
 80109b0:	9308      	str	r3, [sp, #32]
 80109b2:	e7df      	b.n	8010974 <__kernel_rem_pio2+0x39c>
 80109b4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80109b8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80109bc:	f7ef fe1c 	bl	80005f8 <__aeabi_dmul>
 80109c0:	4602      	mov	r2, r0
 80109c2:	460b      	mov	r3, r1
 80109c4:	4630      	mov	r0, r6
 80109c6:	4639      	mov	r1, r7
 80109c8:	f7ef fc60 	bl	800028c <__adddf3>
 80109cc:	f109 0901 	add.w	r9, r9, #1
 80109d0:	4606      	mov	r6, r0
 80109d2:	460f      	mov	r7, r1
 80109d4:	e7e4      	b.n	80109a0 <__kernel_rem_pio2+0x3c8>
 80109d6:	3d01      	subs	r5, #1
 80109d8:	e747      	b.n	801086a <__kernel_rem_pio2+0x292>
 80109da:	ec47 6b10 	vmov	d0, r6, r7
 80109de:	f1ca 0000 	rsb	r0, sl, #0
 80109e2:	f000 f949 	bl	8010c78 <scalbn>
 80109e6:	ec57 6b10 	vmov	r6, r7, d0
 80109ea:	4ba0      	ldr	r3, [pc, #640]	; (8010c6c <__kernel_rem_pio2+0x694>)
 80109ec:	ee10 0a10 	vmov	r0, s0
 80109f0:	2200      	movs	r2, #0
 80109f2:	4639      	mov	r1, r7
 80109f4:	f7f0 f886 	bl	8000b04 <__aeabi_dcmpge>
 80109f8:	b1f8      	cbz	r0, 8010a3a <__kernel_rem_pio2+0x462>
 80109fa:	4b9d      	ldr	r3, [pc, #628]	; (8010c70 <__kernel_rem_pio2+0x698>)
 80109fc:	2200      	movs	r2, #0
 80109fe:	4630      	mov	r0, r6
 8010a00:	4639      	mov	r1, r7
 8010a02:	f7ef fdf9 	bl	80005f8 <__aeabi_dmul>
 8010a06:	f7f0 f8a7 	bl	8000b58 <__aeabi_d2iz>
 8010a0a:	4680      	mov	r8, r0
 8010a0c:	f7ef fd8a 	bl	8000524 <__aeabi_i2d>
 8010a10:	4b96      	ldr	r3, [pc, #600]	; (8010c6c <__kernel_rem_pio2+0x694>)
 8010a12:	2200      	movs	r2, #0
 8010a14:	f7ef fdf0 	bl	80005f8 <__aeabi_dmul>
 8010a18:	460b      	mov	r3, r1
 8010a1a:	4602      	mov	r2, r0
 8010a1c:	4639      	mov	r1, r7
 8010a1e:	4630      	mov	r0, r6
 8010a20:	f7ef fc32 	bl	8000288 <__aeabi_dsub>
 8010a24:	f7f0 f898 	bl	8000b58 <__aeabi_d2iz>
 8010a28:	1c65      	adds	r5, r4, #1
 8010a2a:	ab0c      	add	r3, sp, #48	; 0x30
 8010a2c:	f10a 0a18 	add.w	sl, sl, #24
 8010a30:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010a34:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8010a38:	e71f      	b.n	801087a <__kernel_rem_pio2+0x2a2>
 8010a3a:	4630      	mov	r0, r6
 8010a3c:	4639      	mov	r1, r7
 8010a3e:	f7f0 f88b 	bl	8000b58 <__aeabi_d2iz>
 8010a42:	ab0c      	add	r3, sp, #48	; 0x30
 8010a44:	4625      	mov	r5, r4
 8010a46:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010a4a:	e716      	b.n	801087a <__kernel_rem_pio2+0x2a2>
 8010a4c:	ab0c      	add	r3, sp, #48	; 0x30
 8010a4e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010a52:	f7ef fd67 	bl	8000524 <__aeabi_i2d>
 8010a56:	4632      	mov	r2, r6
 8010a58:	463b      	mov	r3, r7
 8010a5a:	f7ef fdcd 	bl	80005f8 <__aeabi_dmul>
 8010a5e:	4642      	mov	r2, r8
 8010a60:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8010a64:	464b      	mov	r3, r9
 8010a66:	4630      	mov	r0, r6
 8010a68:	4639      	mov	r1, r7
 8010a6a:	f7ef fdc5 	bl	80005f8 <__aeabi_dmul>
 8010a6e:	3c01      	subs	r4, #1
 8010a70:	4606      	mov	r6, r0
 8010a72:	460f      	mov	r7, r1
 8010a74:	e713      	b.n	801089e <__kernel_rem_pio2+0x2c6>
 8010a76:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8010a7a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8010a7e:	f7ef fdbb 	bl	80005f8 <__aeabi_dmul>
 8010a82:	4602      	mov	r2, r0
 8010a84:	460b      	mov	r3, r1
 8010a86:	4648      	mov	r0, r9
 8010a88:	4651      	mov	r1, sl
 8010a8a:	f7ef fbff 	bl	800028c <__adddf3>
 8010a8e:	3701      	adds	r7, #1
 8010a90:	4681      	mov	r9, r0
 8010a92:	468a      	mov	sl, r1
 8010a94:	9b00      	ldr	r3, [sp, #0]
 8010a96:	429f      	cmp	r7, r3
 8010a98:	dc02      	bgt.n	8010aa0 <__kernel_rem_pio2+0x4c8>
 8010a9a:	9b06      	ldr	r3, [sp, #24]
 8010a9c:	429f      	cmp	r7, r3
 8010a9e:	ddea      	ble.n	8010a76 <__kernel_rem_pio2+0x49e>
 8010aa0:	9a06      	ldr	r2, [sp, #24]
 8010aa2:	ab48      	add	r3, sp, #288	; 0x120
 8010aa4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8010aa8:	e9c6 9a00 	strd	r9, sl, [r6]
 8010aac:	3c01      	subs	r4, #1
 8010aae:	e6fa      	b.n	80108a6 <__kernel_rem_pio2+0x2ce>
 8010ab0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010ab2:	2b02      	cmp	r3, #2
 8010ab4:	dc0b      	bgt.n	8010ace <__kernel_rem_pio2+0x4f6>
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	dc39      	bgt.n	8010b2e <__kernel_rem_pio2+0x556>
 8010aba:	d05d      	beq.n	8010b78 <__kernel_rem_pio2+0x5a0>
 8010abc:	9b02      	ldr	r3, [sp, #8]
 8010abe:	f003 0007 	and.w	r0, r3, #7
 8010ac2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8010ac6:	ecbd 8b02 	vpop	{d8}
 8010aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ace:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010ad0:	2b03      	cmp	r3, #3
 8010ad2:	d1f3      	bne.n	8010abc <__kernel_rem_pio2+0x4e4>
 8010ad4:	9b05      	ldr	r3, [sp, #20]
 8010ad6:	9500      	str	r5, [sp, #0]
 8010ad8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010adc:	eb0d 0403 	add.w	r4, sp, r3
 8010ae0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8010ae4:	46a2      	mov	sl, r4
 8010ae6:	9b00      	ldr	r3, [sp, #0]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	f1aa 0a08 	sub.w	sl, sl, #8
 8010aee:	dc69      	bgt.n	8010bc4 <__kernel_rem_pio2+0x5ec>
 8010af0:	46aa      	mov	sl, r5
 8010af2:	f1ba 0f01 	cmp.w	sl, #1
 8010af6:	f1a4 0408 	sub.w	r4, r4, #8
 8010afa:	f300 8083 	bgt.w	8010c04 <__kernel_rem_pio2+0x62c>
 8010afe:	9c05      	ldr	r4, [sp, #20]
 8010b00:	ab48      	add	r3, sp, #288	; 0x120
 8010b02:	441c      	add	r4, r3
 8010b04:	2000      	movs	r0, #0
 8010b06:	2100      	movs	r1, #0
 8010b08:	2d01      	cmp	r5, #1
 8010b0a:	f300 809a 	bgt.w	8010c42 <__kernel_rem_pio2+0x66a>
 8010b0e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8010b12:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8010b16:	f1bb 0f00 	cmp.w	fp, #0
 8010b1a:	f040 8098 	bne.w	8010c4e <__kernel_rem_pio2+0x676>
 8010b1e:	9b04      	ldr	r3, [sp, #16]
 8010b20:	e9c3 7800 	strd	r7, r8, [r3]
 8010b24:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8010b28:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010b2c:	e7c6      	b.n	8010abc <__kernel_rem_pio2+0x4e4>
 8010b2e:	9e05      	ldr	r6, [sp, #20]
 8010b30:	ab48      	add	r3, sp, #288	; 0x120
 8010b32:	441e      	add	r6, r3
 8010b34:	462c      	mov	r4, r5
 8010b36:	2000      	movs	r0, #0
 8010b38:	2100      	movs	r1, #0
 8010b3a:	2c00      	cmp	r4, #0
 8010b3c:	da33      	bge.n	8010ba6 <__kernel_rem_pio2+0x5ce>
 8010b3e:	f1bb 0f00 	cmp.w	fp, #0
 8010b42:	d036      	beq.n	8010bb2 <__kernel_rem_pio2+0x5da>
 8010b44:	4602      	mov	r2, r0
 8010b46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b4a:	9c04      	ldr	r4, [sp, #16]
 8010b4c:	e9c4 2300 	strd	r2, r3, [r4]
 8010b50:	4602      	mov	r2, r0
 8010b52:	460b      	mov	r3, r1
 8010b54:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8010b58:	f7ef fb96 	bl	8000288 <__aeabi_dsub>
 8010b5c:	ae4a      	add	r6, sp, #296	; 0x128
 8010b5e:	2401      	movs	r4, #1
 8010b60:	42a5      	cmp	r5, r4
 8010b62:	da29      	bge.n	8010bb8 <__kernel_rem_pio2+0x5e0>
 8010b64:	f1bb 0f00 	cmp.w	fp, #0
 8010b68:	d002      	beq.n	8010b70 <__kernel_rem_pio2+0x598>
 8010b6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b6e:	4619      	mov	r1, r3
 8010b70:	9b04      	ldr	r3, [sp, #16]
 8010b72:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010b76:	e7a1      	b.n	8010abc <__kernel_rem_pio2+0x4e4>
 8010b78:	9c05      	ldr	r4, [sp, #20]
 8010b7a:	ab48      	add	r3, sp, #288	; 0x120
 8010b7c:	441c      	add	r4, r3
 8010b7e:	2000      	movs	r0, #0
 8010b80:	2100      	movs	r1, #0
 8010b82:	2d00      	cmp	r5, #0
 8010b84:	da09      	bge.n	8010b9a <__kernel_rem_pio2+0x5c2>
 8010b86:	f1bb 0f00 	cmp.w	fp, #0
 8010b8a:	d002      	beq.n	8010b92 <__kernel_rem_pio2+0x5ba>
 8010b8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b90:	4619      	mov	r1, r3
 8010b92:	9b04      	ldr	r3, [sp, #16]
 8010b94:	e9c3 0100 	strd	r0, r1, [r3]
 8010b98:	e790      	b.n	8010abc <__kernel_rem_pio2+0x4e4>
 8010b9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010b9e:	f7ef fb75 	bl	800028c <__adddf3>
 8010ba2:	3d01      	subs	r5, #1
 8010ba4:	e7ed      	b.n	8010b82 <__kernel_rem_pio2+0x5aa>
 8010ba6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8010baa:	f7ef fb6f 	bl	800028c <__adddf3>
 8010bae:	3c01      	subs	r4, #1
 8010bb0:	e7c3      	b.n	8010b3a <__kernel_rem_pio2+0x562>
 8010bb2:	4602      	mov	r2, r0
 8010bb4:	460b      	mov	r3, r1
 8010bb6:	e7c8      	b.n	8010b4a <__kernel_rem_pio2+0x572>
 8010bb8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8010bbc:	f7ef fb66 	bl	800028c <__adddf3>
 8010bc0:	3401      	adds	r4, #1
 8010bc2:	e7cd      	b.n	8010b60 <__kernel_rem_pio2+0x588>
 8010bc4:	e9da 8900 	ldrd	r8, r9, [sl]
 8010bc8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8010bcc:	9b00      	ldr	r3, [sp, #0]
 8010bce:	3b01      	subs	r3, #1
 8010bd0:	9300      	str	r3, [sp, #0]
 8010bd2:	4632      	mov	r2, r6
 8010bd4:	463b      	mov	r3, r7
 8010bd6:	4640      	mov	r0, r8
 8010bd8:	4649      	mov	r1, r9
 8010bda:	f7ef fb57 	bl	800028c <__adddf3>
 8010bde:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010be2:	4602      	mov	r2, r0
 8010be4:	460b      	mov	r3, r1
 8010be6:	4640      	mov	r0, r8
 8010be8:	4649      	mov	r1, r9
 8010bea:	f7ef fb4d 	bl	8000288 <__aeabi_dsub>
 8010bee:	4632      	mov	r2, r6
 8010bf0:	463b      	mov	r3, r7
 8010bf2:	f7ef fb4b 	bl	800028c <__adddf3>
 8010bf6:	ed9d 7b06 	vldr	d7, [sp, #24]
 8010bfa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010bfe:	ed8a 7b00 	vstr	d7, [sl]
 8010c02:	e770      	b.n	8010ae6 <__kernel_rem_pio2+0x50e>
 8010c04:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010c08:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8010c0c:	4640      	mov	r0, r8
 8010c0e:	4632      	mov	r2, r6
 8010c10:	463b      	mov	r3, r7
 8010c12:	4649      	mov	r1, r9
 8010c14:	f7ef fb3a 	bl	800028c <__adddf3>
 8010c18:	e9cd 0100 	strd	r0, r1, [sp]
 8010c1c:	4602      	mov	r2, r0
 8010c1e:	460b      	mov	r3, r1
 8010c20:	4640      	mov	r0, r8
 8010c22:	4649      	mov	r1, r9
 8010c24:	f7ef fb30 	bl	8000288 <__aeabi_dsub>
 8010c28:	4632      	mov	r2, r6
 8010c2a:	463b      	mov	r3, r7
 8010c2c:	f7ef fb2e 	bl	800028c <__adddf3>
 8010c30:	ed9d 7b00 	vldr	d7, [sp]
 8010c34:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010c38:	ed84 7b00 	vstr	d7, [r4]
 8010c3c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010c40:	e757      	b.n	8010af2 <__kernel_rem_pio2+0x51a>
 8010c42:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010c46:	f7ef fb21 	bl	800028c <__adddf3>
 8010c4a:	3d01      	subs	r5, #1
 8010c4c:	e75c      	b.n	8010b08 <__kernel_rem_pio2+0x530>
 8010c4e:	9b04      	ldr	r3, [sp, #16]
 8010c50:	9a04      	ldr	r2, [sp, #16]
 8010c52:	601f      	str	r7, [r3, #0]
 8010c54:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8010c58:	605c      	str	r4, [r3, #4]
 8010c5a:	609d      	str	r5, [r3, #8]
 8010c5c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010c60:	60d3      	str	r3, [r2, #12]
 8010c62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c66:	6110      	str	r0, [r2, #16]
 8010c68:	6153      	str	r3, [r2, #20]
 8010c6a:	e727      	b.n	8010abc <__kernel_rem_pio2+0x4e4>
 8010c6c:	41700000 	.word	0x41700000
 8010c70:	3e700000 	.word	0x3e700000
 8010c74:	00000000 	.word	0x00000000

08010c78 <scalbn>:
 8010c78:	b570      	push	{r4, r5, r6, lr}
 8010c7a:	ec55 4b10 	vmov	r4, r5, d0
 8010c7e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010c82:	4606      	mov	r6, r0
 8010c84:	462b      	mov	r3, r5
 8010c86:	b999      	cbnz	r1, 8010cb0 <scalbn+0x38>
 8010c88:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010c8c:	4323      	orrs	r3, r4
 8010c8e:	d03f      	beq.n	8010d10 <scalbn+0x98>
 8010c90:	4b35      	ldr	r3, [pc, #212]	; (8010d68 <scalbn+0xf0>)
 8010c92:	4629      	mov	r1, r5
 8010c94:	ee10 0a10 	vmov	r0, s0
 8010c98:	2200      	movs	r2, #0
 8010c9a:	f7ef fcad 	bl	80005f8 <__aeabi_dmul>
 8010c9e:	4b33      	ldr	r3, [pc, #204]	; (8010d6c <scalbn+0xf4>)
 8010ca0:	429e      	cmp	r6, r3
 8010ca2:	4604      	mov	r4, r0
 8010ca4:	460d      	mov	r5, r1
 8010ca6:	da10      	bge.n	8010cca <scalbn+0x52>
 8010ca8:	a327      	add	r3, pc, #156	; (adr r3, 8010d48 <scalbn+0xd0>)
 8010caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cae:	e01f      	b.n	8010cf0 <scalbn+0x78>
 8010cb0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010cb4:	4291      	cmp	r1, r2
 8010cb6:	d10c      	bne.n	8010cd2 <scalbn+0x5a>
 8010cb8:	ee10 2a10 	vmov	r2, s0
 8010cbc:	4620      	mov	r0, r4
 8010cbe:	4629      	mov	r1, r5
 8010cc0:	f7ef fae4 	bl	800028c <__adddf3>
 8010cc4:	4604      	mov	r4, r0
 8010cc6:	460d      	mov	r5, r1
 8010cc8:	e022      	b.n	8010d10 <scalbn+0x98>
 8010cca:	460b      	mov	r3, r1
 8010ccc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010cd0:	3936      	subs	r1, #54	; 0x36
 8010cd2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8010cd6:	4296      	cmp	r6, r2
 8010cd8:	dd0d      	ble.n	8010cf6 <scalbn+0x7e>
 8010cda:	2d00      	cmp	r5, #0
 8010cdc:	a11c      	add	r1, pc, #112	; (adr r1, 8010d50 <scalbn+0xd8>)
 8010cde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ce2:	da02      	bge.n	8010cea <scalbn+0x72>
 8010ce4:	a11c      	add	r1, pc, #112	; (adr r1, 8010d58 <scalbn+0xe0>)
 8010ce6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010cea:	a319      	add	r3, pc, #100	; (adr r3, 8010d50 <scalbn+0xd8>)
 8010cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf0:	f7ef fc82 	bl	80005f8 <__aeabi_dmul>
 8010cf4:	e7e6      	b.n	8010cc4 <scalbn+0x4c>
 8010cf6:	1872      	adds	r2, r6, r1
 8010cf8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010cfc:	428a      	cmp	r2, r1
 8010cfe:	dcec      	bgt.n	8010cda <scalbn+0x62>
 8010d00:	2a00      	cmp	r2, #0
 8010d02:	dd08      	ble.n	8010d16 <scalbn+0x9e>
 8010d04:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010d08:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010d0c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010d10:	ec45 4b10 	vmov	d0, r4, r5
 8010d14:	bd70      	pop	{r4, r5, r6, pc}
 8010d16:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010d1a:	da08      	bge.n	8010d2e <scalbn+0xb6>
 8010d1c:	2d00      	cmp	r5, #0
 8010d1e:	a10a      	add	r1, pc, #40	; (adr r1, 8010d48 <scalbn+0xd0>)
 8010d20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d24:	dac0      	bge.n	8010ca8 <scalbn+0x30>
 8010d26:	a10e      	add	r1, pc, #56	; (adr r1, 8010d60 <scalbn+0xe8>)
 8010d28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d2c:	e7bc      	b.n	8010ca8 <scalbn+0x30>
 8010d2e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010d32:	3236      	adds	r2, #54	; 0x36
 8010d34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010d38:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010d3c:	4620      	mov	r0, r4
 8010d3e:	4b0c      	ldr	r3, [pc, #48]	; (8010d70 <scalbn+0xf8>)
 8010d40:	2200      	movs	r2, #0
 8010d42:	e7d5      	b.n	8010cf0 <scalbn+0x78>
 8010d44:	f3af 8000 	nop.w
 8010d48:	c2f8f359 	.word	0xc2f8f359
 8010d4c:	01a56e1f 	.word	0x01a56e1f
 8010d50:	8800759c 	.word	0x8800759c
 8010d54:	7e37e43c 	.word	0x7e37e43c
 8010d58:	8800759c 	.word	0x8800759c
 8010d5c:	fe37e43c 	.word	0xfe37e43c
 8010d60:	c2f8f359 	.word	0xc2f8f359
 8010d64:	81a56e1f 	.word	0x81a56e1f
 8010d68:	43500000 	.word	0x43500000
 8010d6c:	ffff3cb0 	.word	0xffff3cb0
 8010d70:	3c900000 	.word	0x3c900000
 8010d74:	00000000 	.word	0x00000000

08010d78 <floor>:
 8010d78:	ec51 0b10 	vmov	r0, r1, d0
 8010d7c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d84:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8010d88:	2e13      	cmp	r6, #19
 8010d8a:	ee10 5a10 	vmov	r5, s0
 8010d8e:	ee10 8a10 	vmov	r8, s0
 8010d92:	460c      	mov	r4, r1
 8010d94:	dc31      	bgt.n	8010dfa <floor+0x82>
 8010d96:	2e00      	cmp	r6, #0
 8010d98:	da14      	bge.n	8010dc4 <floor+0x4c>
 8010d9a:	a333      	add	r3, pc, #204	; (adr r3, 8010e68 <floor+0xf0>)
 8010d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da0:	f7ef fa74 	bl	800028c <__adddf3>
 8010da4:	2200      	movs	r2, #0
 8010da6:	2300      	movs	r3, #0
 8010da8:	f7ef feb6 	bl	8000b18 <__aeabi_dcmpgt>
 8010dac:	b138      	cbz	r0, 8010dbe <floor+0x46>
 8010dae:	2c00      	cmp	r4, #0
 8010db0:	da53      	bge.n	8010e5a <floor+0xe2>
 8010db2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8010db6:	4325      	orrs	r5, r4
 8010db8:	d052      	beq.n	8010e60 <floor+0xe8>
 8010dba:	4c2d      	ldr	r4, [pc, #180]	; (8010e70 <floor+0xf8>)
 8010dbc:	2500      	movs	r5, #0
 8010dbe:	4621      	mov	r1, r4
 8010dc0:	4628      	mov	r0, r5
 8010dc2:	e024      	b.n	8010e0e <floor+0x96>
 8010dc4:	4f2b      	ldr	r7, [pc, #172]	; (8010e74 <floor+0xfc>)
 8010dc6:	4137      	asrs	r7, r6
 8010dc8:	ea01 0307 	and.w	r3, r1, r7
 8010dcc:	4303      	orrs	r3, r0
 8010dce:	d01e      	beq.n	8010e0e <floor+0x96>
 8010dd0:	a325      	add	r3, pc, #148	; (adr r3, 8010e68 <floor+0xf0>)
 8010dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd6:	f7ef fa59 	bl	800028c <__adddf3>
 8010dda:	2200      	movs	r2, #0
 8010ddc:	2300      	movs	r3, #0
 8010dde:	f7ef fe9b 	bl	8000b18 <__aeabi_dcmpgt>
 8010de2:	2800      	cmp	r0, #0
 8010de4:	d0eb      	beq.n	8010dbe <floor+0x46>
 8010de6:	2c00      	cmp	r4, #0
 8010de8:	bfbe      	ittt	lt
 8010dea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010dee:	4133      	asrlt	r3, r6
 8010df0:	18e4      	addlt	r4, r4, r3
 8010df2:	ea24 0407 	bic.w	r4, r4, r7
 8010df6:	2500      	movs	r5, #0
 8010df8:	e7e1      	b.n	8010dbe <floor+0x46>
 8010dfa:	2e33      	cmp	r6, #51	; 0x33
 8010dfc:	dd0b      	ble.n	8010e16 <floor+0x9e>
 8010dfe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010e02:	d104      	bne.n	8010e0e <floor+0x96>
 8010e04:	ee10 2a10 	vmov	r2, s0
 8010e08:	460b      	mov	r3, r1
 8010e0a:	f7ef fa3f 	bl	800028c <__adddf3>
 8010e0e:	ec41 0b10 	vmov	d0, r0, r1
 8010e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e16:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8010e1a:	f04f 37ff 	mov.w	r7, #4294967295
 8010e1e:	40df      	lsrs	r7, r3
 8010e20:	4238      	tst	r0, r7
 8010e22:	d0f4      	beq.n	8010e0e <floor+0x96>
 8010e24:	a310      	add	r3, pc, #64	; (adr r3, 8010e68 <floor+0xf0>)
 8010e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e2a:	f7ef fa2f 	bl	800028c <__adddf3>
 8010e2e:	2200      	movs	r2, #0
 8010e30:	2300      	movs	r3, #0
 8010e32:	f7ef fe71 	bl	8000b18 <__aeabi_dcmpgt>
 8010e36:	2800      	cmp	r0, #0
 8010e38:	d0c1      	beq.n	8010dbe <floor+0x46>
 8010e3a:	2c00      	cmp	r4, #0
 8010e3c:	da0a      	bge.n	8010e54 <floor+0xdc>
 8010e3e:	2e14      	cmp	r6, #20
 8010e40:	d101      	bne.n	8010e46 <floor+0xce>
 8010e42:	3401      	adds	r4, #1
 8010e44:	e006      	b.n	8010e54 <floor+0xdc>
 8010e46:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	40b3      	lsls	r3, r6
 8010e4e:	441d      	add	r5, r3
 8010e50:	45a8      	cmp	r8, r5
 8010e52:	d8f6      	bhi.n	8010e42 <floor+0xca>
 8010e54:	ea25 0507 	bic.w	r5, r5, r7
 8010e58:	e7b1      	b.n	8010dbe <floor+0x46>
 8010e5a:	2500      	movs	r5, #0
 8010e5c:	462c      	mov	r4, r5
 8010e5e:	e7ae      	b.n	8010dbe <floor+0x46>
 8010e60:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8010e64:	e7ab      	b.n	8010dbe <floor+0x46>
 8010e66:	bf00      	nop
 8010e68:	8800759c 	.word	0x8800759c
 8010e6c:	7e37e43c 	.word	0x7e37e43c
 8010e70:	bff00000 	.word	0xbff00000
 8010e74:	000fffff 	.word	0x000fffff

08010e78 <_init>:
 8010e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e7a:	bf00      	nop
 8010e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e7e:	bc08      	pop	{r3}
 8010e80:	469e      	mov	lr, r3
 8010e82:	4770      	bx	lr

08010e84 <_fini>:
 8010e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e86:	bf00      	nop
 8010e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e8a:	bc08      	pop	{r3}
 8010e8c:	469e      	mov	lr, r3
 8010e8e:	4770      	bx	lr
