
Pothole_Detector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  0800e020  0800e020  0001e020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6d0  0800e6d0  000202d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e6d0  0800e6d0  0001e6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6d8  0800e6d8  000202d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6d8  0800e6d8  0001e6d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6dc  0800e6dc  0001e6dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  0800e6e0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202d8  2**0
                  CONTENTS
 10 .bss          00001e14  200002d8  200002d8  000202d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200020ec  200020ec  000202d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020308  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001178c  00000000  00000000  0002034b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000033a2  00000000  00000000  00031ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f58  00000000  00000000  00034e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b91  00000000  00000000  00035dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024467  00000000  00000000  00036969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000152e0  00000000  00000000  0005add0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c9045  00000000  00000000  000700b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005348  00000000  00000000  001390f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008c  00000000  00000000  0013e440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e008 	.word	0x0800e008

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	0800e008 	.word	0x0800e008

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <DHT_getData>:

#define DHT_timeout 10000
#define readPin()		(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET)

DHT_data DHT_getData()
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b090      	sub	sp, #64	; 0x40
 8000f48:	af00      	add	r7, sp, #0
	uint16_t timeout = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	87fb      	strh	r3, [r7, #62]	; 0x3e
	DHT_data data =
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
	{ 0.0f, 0.0f };
	GPIO_InitTypeDef GPIO_InitStruct =
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]
	{ 0 };
	uint8_t rawData[5] =
 8000f6a:	4a7f      	ldr	r2, [pc, #508]	; (8001168 <DHT_getData+0x224>)
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f74:	6018      	str	r0, [r3, #0]
 8000f76:	3304      	adds	r3, #4
 8000f78:	7019      	strb	r1, [r3, #0]
	{ 0, 0, 0, 0, 0 };

	GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f7e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f80:	2311      	movs	r3, #17
 8000f82:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4878      	ldr	r0, [pc, #480]	; (800116c <DHT_getData+0x228>)
 8000f8c:	f001 fc20 	bl	80027d0 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f96:	4875      	ldr	r0, [pc, #468]	; (800116c <DHT_getData+0x228>)
 8000f98:	f001 fdce 	bl	8002b38 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000f9c:	2014      	movs	r0, #20
 8000f9e:	f001 fae1 	bl	8002564 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa8:	4870      	ldr	r0, [pc, #448]	; (800116c <DHT_getData+0x228>)
 8000faa:	f001 fdc5 	bl	8002b38 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fb2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	486b      	ldr	r0, [pc, #428]	; (800116c <DHT_getData+0x228>)
 8000fc0:	f001 fc06 	bl	80027d0 <HAL_GPIO_Init>

	while (readPin())
 8000fc4:	e010      	b.n	8000fe8 <DHT_getData+0xa4>
	{
		timeout++;
 8000fc6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000fc8:	3301      	adds	r3, #1
 8000fca:	87fb      	strh	r3, [r7, #62]	; 0x3e
		if (timeout > DHT_timeout)
 8000fcc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000fce:	f242 7210 	movw	r2, #10000	; 0x2710
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d908      	bls.n	8000fe8 <DHT_getData+0xa4>
		{
			return data;
 8000fd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000fde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fe2:	e883 0003 	stmia.w	r3, {r0, r1}
 8000fe6:	e0b2      	b.n	800114e <DHT_getData+0x20a>
	while (readPin())
 8000fe8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fec:	485f      	ldr	r0, [pc, #380]	; (800116c <DHT_getData+0x228>)
 8000fee:	f001 fd8b 	bl	8002b08 <HAL_GPIO_ReadPin>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d0e6      	beq.n	8000fc6 <DHT_getData+0x82>
		}
	}
	timeout = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	87fb      	strh	r3, [r7, #62]	; 0x3e

	while (!readPin())
 8000ffc:	e010      	b.n	8001020 <DHT_getData+0xdc>
	{
		timeout++;
 8000ffe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001000:	3301      	adds	r3, #1
 8001002:	87fb      	strh	r3, [r7, #62]	; 0x3e
		if (timeout > DHT_timeout)
 8001004:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001006:	f242 7210 	movw	r2, #10000	; 0x2710
 800100a:	4293      	cmp	r3, r2
 800100c:	d908      	bls.n	8001020 <DHT_getData+0xdc>
		{
			return data;
 800100e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001012:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001016:	e892 0003 	ldmia.w	r2, {r0, r1}
 800101a:	e883 0003 	stmia.w	r3, {r0, r1}
 800101e:	e096      	b.n	800114e <DHT_getData+0x20a>
	while (!readPin())
 8001020:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001024:	4851      	ldr	r0, [pc, #324]	; (800116c <DHT_getData+0x228>)
 8001026:	f001 fd6f 	bl	8002b08 <HAL_GPIO_ReadPin>
 800102a:	4603      	mov	r3, r0
 800102c:	2b01      	cmp	r3, #1
 800102e:	d1e6      	bne.n	8000ffe <DHT_getData+0xba>
		}
	}
	timeout = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	87fb      	strh	r3, [r7, #62]	; 0x3e

	while (readPin())
 8001034:	e010      	b.n	8001058 <DHT_getData+0x114>
	{
		timeout++;
 8001036:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001038:	3301      	adds	r3, #1
 800103a:	87fb      	strh	r3, [r7, #62]	; 0x3e
		if (timeout > DHT_timeout)
 800103c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800103e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001042:	4293      	cmp	r3, r2
 8001044:	d908      	bls.n	8001058 <DHT_getData+0x114>
		{
			return data;
 8001046:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800104a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800104e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001052:	e883 0003 	stmia.w	r3, {r0, r1}
 8001056:	e07a      	b.n	800114e <DHT_getData+0x20a>
	while (readPin())
 8001058:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800105c:	4843      	ldr	r0, [pc, #268]	; (800116c <DHT_getData+0x228>)
 800105e:	f001 fd53 	bl	8002b08 <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	2b01      	cmp	r3, #1
 8001066:	d0e6      	beq.n	8001036 <DHT_getData+0xf2>

		}
	}
	// Reading answer from DH11
	for (uint8_t i = 0; i < 5; i++)
 8001068:	2300      	movs	r3, #0
 800106a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800106e:	e047      	b.n	8001100 <DHT_getData+0x1bc>
	{
		for (uint8_t j = 7; j != 255; j--)
 8001070:	2307      	movs	r3, #7
 8001072:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001076:	e03a      	b.n	80010ee <DHT_getData+0x1aa>
		{
			uint16_t highLevel = 0, lowLevel = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800107c:	2300      	movs	r3, #0
 800107e:	873b      	strh	r3, [r7, #56]	; 0x38

			while (!readPin())
 8001080:	e002      	b.n	8001088 <DHT_getData+0x144>
			{
				lowLevel++;
 8001082:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001084:	3301      	adds	r3, #1
 8001086:	873b      	strh	r3, [r7, #56]	; 0x38
			while (!readPin())
 8001088:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800108c:	4837      	ldr	r0, [pc, #220]	; (800116c <DHT_getData+0x228>)
 800108e:	f001 fd3b 	bl	8002b08 <HAL_GPIO_ReadPin>
 8001092:	4603      	mov	r3, r0
 8001094:	2b01      	cmp	r3, #1
 8001096:	d1f4      	bne.n	8001082 <DHT_getData+0x13e>
			}

			while (readPin())
 8001098:	e002      	b.n	80010a0 <DHT_getData+0x15c>
			{
				highLevel++;
 800109a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800109c:	3301      	adds	r3, #1
 800109e:	877b      	strh	r3, [r7, #58]	; 0x3a
			while (readPin())
 80010a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010a4:	4831      	ldr	r0, [pc, #196]	; (800116c <DHT_getData+0x228>)
 80010a6:	f001 fd2f 	bl	8002b08 <HAL_GPIO_ReadPin>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d0f4      	beq.n	800109a <DHT_getData+0x156>
			}

			if (highLevel > lowLevel)
 80010b0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80010b2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d915      	bls.n	80010e4 <DHT_getData+0x1a0>
			{
				rawData[i] |= (1 << j);
 80010b8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80010bc:	3340      	adds	r3, #64	; 0x40
 80010be:	443b      	add	r3, r7
 80010c0:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80010c4:	b25a      	sxtb	r2, r3
 80010c6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80010ca:	2101      	movs	r1, #1
 80010cc:	fa01 f303 	lsl.w	r3, r1, r3
 80010d0:	b25b      	sxtb	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b25a      	sxtb	r2, r3
 80010d6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	3340      	adds	r3, #64	; 0x40
 80010de:	443b      	add	r3, r7
 80010e0:	f803 2c34 	strb.w	r2, [r3, #-52]
		for (uint8_t j = 7; j != 255; j--)
 80010e4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80010e8:	3b01      	subs	r3, #1
 80010ea:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80010ee:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80010f2:	2bff      	cmp	r3, #255	; 0xff
 80010f4:	d1c0      	bne.n	8001078 <DHT_getData+0x134>
	for (uint8_t i = 0; i < 5; i++)
 80010f6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80010fa:	3301      	adds	r3, #1
 80010fc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001100:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001104:	2b04      	cmp	r3, #4
 8001106:	d9b3      	bls.n	8001070 <DHT_getData+0x12c>
			}
		}
	}

	if ((uint8_t) (rawData[0] + rawData[1] + rawData[2] + rawData[3])
 8001108:	7b3a      	ldrb	r2, [r7, #12]
 800110a:	7b7b      	ldrb	r3, [r7, #13]
 800110c:	4413      	add	r3, r2
 800110e:	b2da      	uxtb	r2, r3
 8001110:	7bbb      	ldrb	r3, [r7, #14]
 8001112:	4413      	add	r3, r2
 8001114:	b2da      	uxtb	r2, r3
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	4413      	add	r3, r2
 800111a:	b2da      	uxtb	r2, r3
			== rawData[4])
 800111c:	7c3b      	ldrb	r3, [r7, #16]
	if ((uint8_t) (rawData[0] + rawData[1] + rawData[2] + rawData[3])
 800111e:	429a      	cmp	r2, r3
 8001120:	d10d      	bne.n	800113e <DHT_getData+0x1fa>
	{

		data.humidity = (float) rawData[0];
 8001122:	7b3b      	ldrb	r3, [r7, #12]
 8001124:	ee07 3a90 	vmov	s15, r3
 8001128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800112c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		data.temperature = (float) rawData[2];
 8001130:	7bbb      	ldrb	r3, [r7, #14]
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800113a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	}

	return data;
 800113e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001142:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001146:	e892 0003 	ldmia.w	r2, {r0, r1}
 800114a:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800114e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001152:	ee07 2a10 	vmov	s14, r2
 8001156:	ee07 3a90 	vmov	s15, r3
 800115a:	eeb0 0a47 	vmov.f32	s0, s14
 800115e:	eef0 0a67 	vmov.f32	s1, s15
 8001162:	3740      	adds	r7, #64	; 0x40
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	0800e020 	.word	0x0800e020
 800116c:	40020c00 	.word	0x40020c00

08001170 <Delay_us>:
#define ENTRY_LEFT           0x02
#define DISPLAY_ON           0x04
#define TWO_LINE               0x08

void Delay_us(uint16_t us)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	80fb      	strh	r3, [r7, #6]
	uint32_t division = (SysTick->LOAD + 1) / 1000;
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <Delay_us+0x70>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	3301      	adds	r3, #1
 8001180:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <Delay_us+0x74>)
 8001182:	fba2 2303 	umull	r2, r3, r2, r3
 8001186:	099b      	lsrs	r3, r3, #6
 8001188:	60fb      	str	r3, [r7, #12]
	uint32_t startUs = HAL_GetTick() * 1000 + (1000 - SysTick->VAL / division);
 800118a:	f001 f9df 	bl	800254c <HAL_GetTick>
 800118e:	4603      	mov	r3, r0
 8001190:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001194:	fb03 f202 	mul.w	r2, r3, r2
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <Delay_us+0x70>)
 800119a:	6899      	ldr	r1, [r3, #8]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	fbb1 f3f3 	udiv	r3, r1, r3
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80011a8:	60bb      	str	r3, [r7, #8]
	while ((HAL_GetTick() * 1000 + (1000 - SysTick->VAL / division) - startUs
 80011aa:	bf00      	nop
 80011ac:	f001 f9ce 	bl	800254c <HAL_GetTick>
 80011b0:	4603      	mov	r3, r0
 80011b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011b6:	fb03 f202 	mul.w	r2, r3, r2
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <Delay_us+0x70>)
 80011bc:	6899      	ldr	r1, [r3, #8]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80011c4:	1ad2      	subs	r2, r2, r3
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
			< us));
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d3eb      	bcc.n	80011ac <Delay_us+0x3c>
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	e000e010 	.word	0xe000e010
 80011e4:	10624dd3 	.word	0x10624dd3

080011e8 <sendCommand4bit>:

static void sendCommand4bit(uint8_t cmd)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, (GPIO_PinState) (cmd & 0x08));
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	f003 0308 	and.w	r3, r3, #8
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	461a      	mov	r2, r3
 80011fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001200:	481b      	ldr	r0, [pc, #108]	; (8001270 <sendCommand4bit+0x88>)
 8001202:	f001 fc99 	bl	8002b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, (GPIO_PinState) (cmd & 0x04));
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	b2db      	uxtb	r3, r3
 800120e:	461a      	mov	r2, r3
 8001210:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001214:	4816      	ldr	r0, [pc, #88]	; (8001270 <sendCommand4bit+0x88>)
 8001216:	f001 fc8f 	bl	8002b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, (GPIO_PinState) (cmd & 0x02));
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	b2db      	uxtb	r3, r3
 8001222:	461a      	mov	r2, r3
 8001224:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001228:	4811      	ldr	r0, [pc, #68]	; (8001270 <sendCommand4bit+0x88>)
 800122a:	f001 fc85 	bl	8002b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, (GPIO_PinState) (cmd & 0x01));
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	b2db      	uxtb	r3, r3
 8001236:	461a      	mov	r2, r3
 8001238:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800123c:	480c      	ldr	r0, [pc, #48]	; (8001270 <sendCommand4bit+0x88>)
 800123e:	f001 fc7b 	bl	8002b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001242:	2201      	movs	r2, #1
 8001244:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001248:	4809      	ldr	r0, [pc, #36]	; (8001270 <sendCommand4bit+0x88>)
 800124a:	f001 fc75 	bl	8002b38 <HAL_GPIO_WritePin>
	Delay_us(50);
 800124e:	2032      	movs	r0, #50	; 0x32
 8001250:	f7ff ff8e 	bl	8001170 <Delay_us>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <sendCommand4bit+0x88>)
 800125c:	f001 fc6c 	bl	8002b38 <HAL_GPIO_WritePin>
	Delay_us(50);
 8001260:	2032      	movs	r0, #50	; 0x32
 8001262:	f7ff ff85 	bl	8001170 <Delay_us>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000

08001274 <sendCommand>:

static void sendCommand(uint8_t cmd)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2180      	movs	r1, #128	; 0x80
 8001282:	480a      	ldr	r0, [pc, #40]	; (80012ac <sendCommand+0x38>)
 8001284:	f001 fc58 	bl	8002b38 <HAL_GPIO_WritePin>
	sendCommand4bit(cmd >> 4);
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	091b      	lsrs	r3, r3, #4
 800128c:	b2db      	uxtb	r3, r3
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ffaa 	bl	80011e8 <sendCommand4bit>
	sendCommand4bit(cmd & 0x0F);
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ffa3 	bl	80011e8 <sendCommand4bit>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000

080012b0 <setCursor>:

static void setCursor(uint8_t col, uint8_t row)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	460a      	mov	r2, r1
 80012ba:	71fb      	strb	r3, [r7, #7]
 80012bc:	4613      	mov	r3, r2
 80012be:	71bb      	strb	r3, [r7, #6]
	uint8_t row_offsets[] =
 80012c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012c4:	81bb      	strh	r3, [r7, #12]
	{ 0x00, 0x40 };
	if (row >= ROWS)
 80012c6:	79bb      	ldrb	r3, [r7, #6]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d901      	bls.n	80012d0 <setCursor+0x20>
	{
		row = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	71bb      	strb	r3, [r7, #6]
	}
	lcdOptions.X = col;
 80012d0:	4a0c      	ldr	r2, [pc, #48]	; (8001304 <setCursor+0x54>)
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	70d3      	strb	r3, [r2, #3]
	lcdOptions.Y = row;
 80012d6:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <setCursor+0x54>)
 80012d8:	79bb      	ldrb	r3, [r7, #6]
 80012da:	7113      	strb	r3, [r2, #4]
	sendCommand(SET_DDRAM_ADDR | (col + row_offsets[row]));
 80012dc:	79bb      	ldrb	r3, [r7, #6]
 80012de:	3310      	adds	r3, #16
 80012e0:	443b      	add	r3, r7
 80012e2:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	4413      	add	r3, r2
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ffbc 	bl	8001274 <sendCommand>
}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200002f4 	.word	0x200002f4

08001308 <displayOn>:

void displayOn(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	lcdOptions.displayControl |= DISPLAY_ON;
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <displayOn+0x28>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <displayOn+0x28>)
 8001318:	701a      	strb	r2, [r3, #0]
	sendCommand(DISPLAY_CONTROL | lcdOptions.displayControl);
 800131a:	4b05      	ldr	r3, [pc, #20]	; (8001330 <displayOn+0x28>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	f043 0308 	orr.w	r3, r3, #8
 8001322:	b2db      	uxtb	r3, r3
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ffa5 	bl	8001274 <sendCommand>
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200002f4 	.word	0x200002f4

08001334 <LCD_PutString>:

void LCD_PutString(uint8_t x, uint8_t y, char *str)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	603a      	str	r2, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	460b      	mov	r3, r1
 8001342:	71bb      	strb	r3, [r7, #6]
	setCursor(x, y);
 8001344:	79ba      	ldrb	r2, [r7, #6]
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	4611      	mov	r1, r2
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ffb0 	bl	80012b0 <setCursor>
	while (*str)
 8001350:	e04f      	b.n	80013f2 <LCD_PutString+0xbe>
	{
		if (lcdOptions.X >= COLUMNS)
 8001352:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <LCD_PutString+0xd0>)
 8001354:	78db      	ldrb	r3, [r3, #3]
 8001356:	2b0f      	cmp	r3, #15
 8001358:	d910      	bls.n	800137c <LCD_PutString+0x48>
		{
			lcdOptions.X = 0;
 800135a:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <LCD_PutString+0xd0>)
 800135c:	2200      	movs	r2, #0
 800135e:	70da      	strb	r2, [r3, #3]
			lcdOptions.Y++;
 8001360:	4b28      	ldr	r3, [pc, #160]	; (8001404 <LCD_PutString+0xd0>)
 8001362:	791b      	ldrb	r3, [r3, #4]
 8001364:	3301      	adds	r3, #1
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b26      	ldr	r3, [pc, #152]	; (8001404 <LCD_PutString+0xd0>)
 800136a:	711a      	strb	r2, [r3, #4]
			setCursor(lcdOptions.X, lcdOptions.Y);
 800136c:	4b25      	ldr	r3, [pc, #148]	; (8001404 <LCD_PutString+0xd0>)
 800136e:	78db      	ldrb	r3, [r3, #3]
 8001370:	4a24      	ldr	r2, [pc, #144]	; (8001404 <LCD_PutString+0xd0>)
 8001372:	7912      	ldrb	r2, [r2, #4]
 8001374:	4611      	mov	r1, r2
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff9a 	bl	80012b0 <setCursor>
		}
		if (*str == '\n')
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b0a      	cmp	r3, #10
 8001382:	d10e      	bne.n	80013a2 <LCD_PutString+0x6e>
		{
			lcdOptions.Y++;
 8001384:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <LCD_PutString+0xd0>)
 8001386:	791b      	ldrb	r3, [r3, #4]
 8001388:	3301      	adds	r3, #1
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <LCD_PutString+0xd0>)
 800138e:	711a      	strb	r2, [r3, #4]
			setCursor(lcdOptions.X, lcdOptions.Y);
 8001390:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <LCD_PutString+0xd0>)
 8001392:	78db      	ldrb	r3, [r3, #3]
 8001394:	4a1b      	ldr	r2, [pc, #108]	; (8001404 <LCD_PutString+0xd0>)
 8001396:	7912      	ldrb	r2, [r2, #4]
 8001398:	4611      	mov	r1, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ff88 	bl	80012b0 <setCursor>
 80013a0:	e024      	b.n	80013ec <LCD_PutString+0xb8>
		}
		else if (*str == '\r')
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b0d      	cmp	r3, #13
 80013a8:	d106      	bne.n	80013b8 <LCD_PutString+0x84>
		{
			setCursor(0, lcdOptions.Y);
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <LCD_PutString+0xd0>)
 80013ac:	791b      	ldrb	r3, [r3, #4]
 80013ae:	4619      	mov	r1, r3
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff ff7d 	bl	80012b0 <setCursor>
 80013b6:	e019      	b.n	80013ec <LCD_PutString+0xb8>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2180      	movs	r1, #128	; 0x80
 80013bc:	4812      	ldr	r0, [pc, #72]	; (8001408 <LCD_PutString+0xd4>)
 80013be:	f001 fbbb 	bl	8002b38 <HAL_GPIO_WritePin>
			sendCommand4bit(*str >> 4);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	091b      	lsrs	r3, r3, #4
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ff0c 	bl	80011e8 <sendCommand4bit>
			sendCommand4bit(*str & 0x0F);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	f003 030f 	and.w	r3, r3, #15
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff04 	bl	80011e8 <sendCommand4bit>
			lcdOptions.X++;
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <LCD_PutString+0xd0>)
 80013e2:	78db      	ldrb	r3, [r3, #3]
 80013e4:	3301      	adds	r3, #1
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <LCD_PutString+0xd0>)
 80013ea:	70da      	strb	r2, [r3, #3]
		}
		str++;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	3301      	adds	r3, #1
 80013f0:	603b      	str	r3, [r7, #0]
	while (*str)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1ab      	bne.n	8001352 <LCD_PutString+0x1e>
	}
}
 80013fa:	bf00      	nop
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	200002f4 	.word	0x200002f4
 8001408:	40021000 	.word	0x40021000

0800140c <LCD_Clear>:

void LCD_Clear(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	sendCommand(CLEAR_DISPLAY);
 8001410:	2001      	movs	r0, #1
 8001412:	f7ff ff2f 	bl	8001274 <sendCommand>
	HAL_Delay(2);
 8001416:	2002      	movs	r0, #2
 8001418:	f001 f8a4 	bl	8002564 <HAL_Delay>
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}

08001420 <LCD_Init>:

void LCD_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	while (HAL_GetTick() < 200)
 8001424:	e002      	b.n	800142c <LCD_Init+0xc>
	{
		HAL_Delay(1);
 8001426:	2001      	movs	r0, #1
 8001428:	f001 f89c 	bl	8002564 <HAL_Delay>
	while (HAL_GetTick() < 200)
 800142c:	f001 f88e 	bl	800254c <HAL_GetTick>
 8001430:	4603      	mov	r3, r0
 8001432:	2bc7      	cmp	r3, #199	; 0xc7
 8001434:	d9f7      	bls.n	8001426 <LCD_Init+0x6>
	}

	lcdOptions.X = 0;
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <LCD_Init+0x98>)
 8001438:	2200      	movs	r2, #0
 800143a:	70da      	strb	r2, [r3, #3]
	lcdOptions.Y = 0;
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <LCD_Init+0x98>)
 800143e:	2200      	movs	r2, #0
 8001440:	711a      	strb	r2, [r3, #4]
	lcdOptions.displayFunction = TWO_LINE;
 8001442:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <LCD_Init+0x98>)
 8001444:	2208      	movs	r2, #8
 8001446:	705a      	strb	r2, [r3, #1]
	// Attemps to set 4 bit mode
	sendCommand4bit(0x03);
 8001448:	2003      	movs	r0, #3
 800144a:	f7ff fecd 	bl	80011e8 <sendCommand4bit>
	HAL_Delay(20);
 800144e:	2014      	movs	r0, #20
 8001450:	f001 f888 	bl	8002564 <HAL_Delay>

	sendCommand4bit(0x03);
 8001454:	2003      	movs	r0, #3
 8001456:	f7ff fec7 	bl	80011e8 <sendCommand4bit>
	HAL_Delay(20);
 800145a:	2014      	movs	r0, #20
 800145c:	f001 f882 	bl	8002564 <HAL_Delay>

	sendCommand4bit(0x03);
 8001460:	2003      	movs	r0, #3
 8001462:	f7ff fec1 	bl	80011e8 <sendCommand4bit>
	HAL_Delay(20);
 8001466:	2014      	movs	r0, #20
 8001468:	f001 f87c 	bl	8002564 <HAL_Delay>

	sendCommand4bit(0x02);
 800146c:	2002      	movs	r0, #2
 800146e:	f7ff febb 	bl	80011e8 <sendCommand4bit>
	HAL_Delay(20);
 8001472:	2014      	movs	r0, #20
 8001474:	f001 f876 	bl	8002564 <HAL_Delay>

	sendCommand(FUNCTION_SET | lcdOptions.displayFunction);
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <LCD_Init+0x98>)
 800147a:	785b      	ldrb	r3, [r3, #1]
 800147c:	f043 0320 	orr.w	r3, r3, #32
 8001480:	b2db      	uxtb	r3, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fef6 	bl	8001274 <sendCommand>

	lcdOptions.displayControl = DISPLAY_ON;
 8001488:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <LCD_Init+0x98>)
 800148a:	2204      	movs	r2, #4
 800148c:	701a      	strb	r2, [r3, #0]
	displayOn();
 800148e:	f7ff ff3b 	bl	8001308 <displayOn>
	LCD_Clear();
 8001492:	f7ff ffbb 	bl	800140c <LCD_Clear>

	lcdOptions.displayMode = ENTRY_LEFT;
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <LCD_Init+0x98>)
 8001498:	2202      	movs	r2, #2
 800149a:	709a      	strb	r2, [r3, #2]
	sendCommand(ENTRY_SET | lcdOptions.displayMode);
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <LCD_Init+0x98>)
 800149e:	789b      	ldrb	r3, [r3, #2]
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fee4 	bl	8001274 <sendCommand>
	HAL_Delay(20);
 80014ac:	2014      	movs	r0, #20
 80014ae:	f001 f859 	bl	8002564 <HAL_Delay>
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200002f4 	.word	0x200002f4

080014bc <MPU6050_Init>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);

void MPU6050_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t data;

	// Check device ID
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 80014c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c6:	9302      	str	r3, [sp, #8]
 80014c8:	2301      	movs	r3, #1
 80014ca:	9301      	str	r3, [sp, #4]
 80014cc:	1dfb      	adds	r3, r7, #7
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2301      	movs	r3, #1
 80014d2:	2275      	movs	r2, #117	; 0x75
 80014d4:	21d0      	movs	r1, #208	; 0xd0
 80014d6:	4823      	ldr	r0, [pc, #140]	; (8001564 <MPU6050_Init+0xa8>)
 80014d8:	f001 fd86 	bl	8002fe8 <HAL_I2C_Mem_Read>

	if (check == 104) // 0x68 will be returned if everything is ok
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	2b68      	cmp	r3, #104	; 0x68
 80014e0:	d13b      	bne.n	800155a <MPU6050_Init+0x9e>
	{
		// Wake up sensor
		data = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1,
 80014e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ea:	9302      	str	r3, [sp, #8]
 80014ec:	2301      	movs	r3, #1
 80014ee:	9301      	str	r3, [sp, #4]
 80014f0:	1dbb      	adds	r3, r7, #6
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2301      	movs	r3, #1
 80014f6:	226b      	movs	r2, #107	; 0x6b
 80014f8:	21d0      	movs	r1, #208	; 0xd0
 80014fa:	481a      	ldr	r0, [pc, #104]	; (8001564 <MPU6050_Init+0xa8>)
 80014fc:	f001 fc7a 	bl	8002df4 <HAL_I2C_Mem_Write>
				1000);

		// Set DATA RATE of 1KHz
		data = 0x07;
 8001500:	2307      	movs	r3, #7
 8001502:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1,
 8001504:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001508:	9302      	str	r3, [sp, #8]
 800150a:	2301      	movs	r3, #1
 800150c:	9301      	str	r3, [sp, #4]
 800150e:	1dbb      	adds	r3, r7, #6
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	2301      	movs	r3, #1
 8001514:	2219      	movs	r2, #25
 8001516:	21d0      	movs	r1, #208	; 0xd0
 8001518:	4812      	ldr	r0, [pc, #72]	; (8001564 <MPU6050_Init+0xa8>)
 800151a:	f001 fc6b 	bl	8002df4 <HAL_I2C_Mem_Write>
				1000);

		// AFS_SEL = 0 => +-2g
		data = 0x00;
 800151e:	2300      	movs	r3, #0
 8001520:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1,
 8001522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001526:	9302      	str	r3, [sp, #8]
 8001528:	2301      	movs	r3, #1
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	1dbb      	adds	r3, r7, #6
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2301      	movs	r3, #1
 8001532:	221c      	movs	r2, #28
 8001534:	21d0      	movs	r1, #208	; 0xd0
 8001536:	480b      	ldr	r0, [pc, #44]	; (8001564 <MPU6050_Init+0xa8>)
 8001538:	f001 fc5c 	bl	8002df4 <HAL_I2C_Mem_Write>
				1000);

		// FS_SEL = 0 => +-250s
		data = 0x00;
 800153c:	2300      	movs	r3, #0
 800153e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1,
 8001540:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001544:	9302      	str	r3, [sp, #8]
 8001546:	2301      	movs	r3, #1
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	1dbb      	adds	r3, r7, #6
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2301      	movs	r3, #1
 8001550:	221b      	movs	r2, #27
 8001552:	21d0      	movs	r1, #208	; 0xd0
 8001554:	4803      	ldr	r0, [pc, #12]	; (8001564 <MPU6050_Init+0xa8>)
 8001556:	f001 fc4d 	bl	8002df4 <HAL_I2C_Mem_Write>
				1000);
	}
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000338 	.word	0x20000338

08001568 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(void)
{
 8001568:	b5b0      	push	{r4, r5, r7, lr}
 800156a:	b092      	sub	sp, #72	; 0x48
 800156c:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR,
 800156e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001572:	9302      	str	r3, [sp, #8]
 8001574:	2306      	movs	r3, #6
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	2301      	movs	r3, #1
 8001580:	223b      	movs	r2, #59	; 0x3b
 8001582:	21d0      	movs	r1, #208	; 0xd0
 8001584:	4840      	ldr	r0, [pc, #256]	; (8001688 <MPU6050_Read_Accel+0x120>)
 8001586:	f001 fd2f 	bl	8002fe8 <HAL_I2C_Mem_Read>
 800158a:	4603      	mov	r3, r0
 800158c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
	if (status != HAL_OK)
 8001590:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001594:	2b00      	cmp	r3, #0
 8001596:	d016      	beq.n	80015c6 <MPU6050_Read_Accel+0x5e>
	{
		char errorMessage[] = "Error reading accelerometer data with I2C\r\n";
 8001598:	4b3c      	ldr	r3, [pc, #240]	; (800168c <MPU6050_Read_Accel+0x124>)
 800159a:	1d3c      	adds	r4, r7, #4
 800159c:	461d      	mov	r5, r3
 800159e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		CDC_Transmit_FS((uint8_t*) errorMessage, strlen(errorMessage));
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe fe5d 	bl	8000270 <strlen>
 80015b6:	4603      	mov	r3, r0
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	4611      	mov	r1, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f007 fe68 	bl	8009294 <CDC_Transmit_FS>
 80015c4:	e05c      	b.n	8001680 <MPU6050_Read_Accel+0x118>
		return;
	}

	Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80015c6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <MPU6050_Read_Accel+0x128>)
 80015da:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80015dc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b21a      	sxth	r2, r3
 80015ee:	4b29      	ldr	r3, [pc, #164]	; (8001694 <MPU6050_Read_Accel+0x12c>)
 80015f0:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80015f2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	b21a      	sxth	r2, r3
 80015fa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80015fe:	b21b      	sxth	r3, r3
 8001600:	4313      	orrs	r3, r2
 8001602:	b21a      	sxth	r2, r3
 8001604:	4b24      	ldr	r3, [pc, #144]	; (8001698 <MPU6050_Read_Accel+0x130>)
 8001606:	801a      	strh	r2, [r3, #0]

	// To convert raw accelerometer values to value in "g"
	// It is necessary to also divide them by the value set in the FS_SEL register
	// We set FS_SEL to 0, so we divide the raw values by 16384.0
	Ax = Accel_X_RAW / 16384.0;
 8001608:	4b21      	ldr	r3, [pc, #132]	; (8001690 <MPU6050_Read_Accel+0x128>)
 800160a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ff88 	bl	8000524 <__aeabi_i2d>
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	4b20      	ldr	r3, [pc, #128]	; (800169c <MPU6050_Read_Accel+0x134>)
 800161a:	f7ff f917 	bl	800084c <__aeabi_ddiv>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff fabf 	bl	8000ba8 <__aeabi_d2f>
 800162a:	4603      	mov	r3, r0
 800162c:	4a1c      	ldr	r2, [pc, #112]	; (80016a0 <MPU6050_Read_Accel+0x138>)
 800162e:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW / 16384.0;
 8001630:	4b18      	ldr	r3, [pc, #96]	; (8001694 <MPU6050_Read_Accel+0x12c>)
 8001632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff74 	bl	8000524 <__aeabi_i2d>
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	4b16      	ldr	r3, [pc, #88]	; (800169c <MPU6050_Read_Accel+0x134>)
 8001642:	f7ff f903 	bl	800084c <__aeabi_ddiv>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f7ff faab 	bl	8000ba8 <__aeabi_d2f>
 8001652:	4603      	mov	r3, r0
 8001654:	4a13      	ldr	r2, [pc, #76]	; (80016a4 <MPU6050_Read_Accel+0x13c>)
 8001656:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW / 16384.0;
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <MPU6050_Read_Accel+0x130>)
 800165a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe ff60 	bl	8000524 <__aeabi_i2d>
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <MPU6050_Read_Accel+0x134>)
 800166a:	f7ff f8ef 	bl	800084c <__aeabi_ddiv>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f7ff fa97 	bl	8000ba8 <__aeabi_d2f>
 800167a:	4603      	mov	r3, r0
 800167c:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <MPU6050_Read_Accel+0x140>)
 800167e:	6013      	str	r3, [r2, #0]
}
 8001680:	3738      	adds	r7, #56	; 0x38
 8001682:	46bd      	mov	sp, r7
 8001684:	bdb0      	pop	{r4, r5, r7, pc}
 8001686:	bf00      	nop
 8001688:	20000338 	.word	0x20000338
 800168c:	0800e028 	.word	0x0800e028
 8001690:	20000308 	.word	0x20000308
 8001694:	2000030a 	.word	0x2000030a
 8001698:	2000030c 	.word	0x2000030c
 800169c:	40d00000 	.word	0x40d00000
 80016a0:	20000314 	.word	0x20000314
 80016a4:	20000318 	.word	0x20000318
 80016a8:	2000031c 	.word	0x2000031c
 80016ac:	00000000 	.word	0x00000000

080016b0 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(void)
{
 80016b0:	b5b0      	push	{r4, r5, r7, lr}
 80016b2:	b094      	sub	sp, #80	; 0x50
 80016b4:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR,
 80016b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ba:	9302      	str	r3, [sp, #8]
 80016bc:	2306      	movs	r3, #6
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2301      	movs	r3, #1
 80016c8:	2243      	movs	r2, #67	; 0x43
 80016ca:	21d0      	movs	r1, #208	; 0xd0
 80016cc:	48ae      	ldr	r0, [pc, #696]	; (8001988 <MPU6050_Read_Gyro+0x2d8>)
 80016ce:	f001 fc8b 	bl	8002fe8 <HAL_I2C_Mem_Read>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
	if (status != HAL_OK)
 80016d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d016      	beq.n	800170e <MPU6050_Read_Gyro+0x5e>
	{
		char errorMessage[] = "Error reading gyroscope data with I2C\r\n";
 80016e0:	4baa      	ldr	r3, [pc, #680]	; (800198c <MPU6050_Read_Gyro+0x2dc>)
 80016e2:	1d3c      	adds	r4, r7, #4
 80016e4:	461d      	mov	r5, r3
 80016e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 80016f2:	e884 0003 	stmia.w	r4, {r0, r1}
		CDC_Transmit_FS((uint8_t*) errorMessage, strlen(errorMessage));
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe fdb9 	bl	8000270 <strlen>
 80016fe:	4603      	mov	r3, r0
 8001700:	b29a      	uxth	r2, r3
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	4611      	mov	r1, r2
 8001706:	4618      	mov	r0, r3
 8001708:	f007 fdc4 	bl	8009294 <CDC_Transmit_FS>
 800170c:	e12e      	b.n	800196c <MPU6050_Read_Gyro+0x2bc>
		return;
	}

	Gyro_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800170e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	b21a      	sxth	r2, r3
 8001716:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800171a:	b21b      	sxth	r3, r3
 800171c:	4313      	orrs	r3, r2
 800171e:	b21a      	sxth	r2, r3
 8001720:	4b9b      	ldr	r3, [pc, #620]	; (8001990 <MPU6050_Read_Gyro+0x2e0>)
 8001722:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001724:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001728:	021b      	lsls	r3, r3, #8
 800172a:	b21a      	sxth	r2, r3
 800172c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001730:	b21b      	sxth	r3, r3
 8001732:	4313      	orrs	r3, r2
 8001734:	b21a      	sxth	r2, r3
 8001736:	4b97      	ldr	r3, [pc, #604]	; (8001994 <MPU6050_Read_Gyro+0x2e4>)
 8001738:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800173a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	b21a      	sxth	r2, r3
 8001742:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001746:	b21b      	sxth	r3, r3
 8001748:	4313      	orrs	r3, r2
 800174a:	b21a      	sxth	r2, r3
 800174c:	4b92      	ldr	r3, [pc, #584]	; (8001998 <MPU6050_Read_Gyro+0x2e8>)
 800174e:	801a      	strh	r2, [r3, #0]

	// To convert raw gyroscope values to value in "degree per second"
	// It is necessary to also divide them by the value set in the FS_SEL register
	// We set FS_SEL to 0, so we divide the raw values by 131.0
	Gx = Gyro_X_RAW / 131.0;
 8001750:	4b8f      	ldr	r3, [pc, #572]	; (8001990 <MPU6050_Read_Gyro+0x2e0>)
 8001752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fee4 	bl	8000524 <__aeabi_i2d>
 800175c:	a386      	add	r3, pc, #536	; (adr r3, 8001978 <MPU6050_Read_Gyro+0x2c8>)
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001762:	f7ff f873 	bl	800084c <__aeabi_ddiv>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff fa1b 	bl	8000ba8 <__aeabi_d2f>
 8001772:	4603      	mov	r3, r0
 8001774:	4a89      	ldr	r2, [pc, #548]	; (800199c <MPU6050_Read_Gyro+0x2ec>)
 8001776:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW / 131.0;
 8001778:	4b86      	ldr	r3, [pc, #536]	; (8001994 <MPU6050_Read_Gyro+0x2e4>)
 800177a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fed0 	bl	8000524 <__aeabi_i2d>
 8001784:	a37c      	add	r3, pc, #496	; (adr r3, 8001978 <MPU6050_Read_Gyro+0x2c8>)
 8001786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178a:	f7ff f85f 	bl	800084c <__aeabi_ddiv>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	f7ff fa07 	bl	8000ba8 <__aeabi_d2f>
 800179a:	4603      	mov	r3, r0
 800179c:	4a80      	ldr	r2, [pc, #512]	; (80019a0 <MPU6050_Read_Gyro+0x2f0>)
 800179e:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW / 131.0;
 80017a0:	4b7d      	ldr	r3, [pc, #500]	; (8001998 <MPU6050_Read_Gyro+0x2e8>)
 80017a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe febc 	bl	8000524 <__aeabi_i2d>
 80017ac:	a372      	add	r3, pc, #456	; (adr r3, 8001978 <MPU6050_Read_Gyro+0x2c8>)
 80017ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b2:	f7ff f84b 	bl	800084c <__aeabi_ddiv>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f7ff f9f3 	bl	8000ba8 <__aeabi_d2f>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4a77      	ldr	r2, [pc, #476]	; (80019a4 <MPU6050_Read_Gyro+0x2f4>)
 80017c6:	6013      	str	r3, [r2, #0]

	// If use without (180.0 * M_PI) then the result will be in radians not in degrees
	MPU6050_Data.X = atan2(Ay, Az) * 180.0 / M_PI;
 80017c8:	4b77      	ldr	r3, [pc, #476]	; (80019a8 <MPU6050_Read_Gyro+0x2f8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe febb 	bl	8000548 <__aeabi_f2d>
 80017d2:	4604      	mov	r4, r0
 80017d4:	460d      	mov	r5, r1
 80017d6:	4b75      	ldr	r3, [pc, #468]	; (80019ac <MPU6050_Read_Gyro+0x2fc>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe feb4 	bl	8000548 <__aeabi_f2d>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	ec43 2b11 	vmov	d1, r2, r3
 80017e8:	ec45 4b10 	vmov	d0, r4, r5
 80017ec:	f00b f854 	bl	800c898 <atan2>
 80017f0:	ec51 0b10 	vmov	r0, r1, d0
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	4b6d      	ldr	r3, [pc, #436]	; (80019b0 <MPU6050_Read_Gyro+0x300>)
 80017fa:	f7fe fefd 	bl	80005f8 <__aeabi_dmul>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	a35e      	add	r3, pc, #376	; (adr r3, 8001980 <MPU6050_Read_Gyro+0x2d0>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f7ff f81e 	bl	800084c <__aeabi_ddiv>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f9c6 	bl	8000ba8 <__aeabi_d2f>
 800181c:	4603      	mov	r3, r0
 800181e:	4a65      	ldr	r2, [pc, #404]	; (80019b4 <MPU6050_Read_Gyro+0x304>)
 8001820:	6013      	str	r3, [r2, #0]
	MPU6050_Data.Y = atan2(-Ax, sqrt(Ay * Ay + Az * Az)) / 180.0 * M_PI;
 8001822:	4b65      	ldr	r3, [pc, #404]	; (80019b8 <MPU6050_Read_Gyro+0x308>)
 8001824:	edd3 7a00 	vldr	s15, [r3]
 8001828:	eef1 7a67 	vneg.f32	s15, s15
 800182c:	ee17 3a90 	vmov	r3, s15
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe fe89 	bl	8000548 <__aeabi_f2d>
 8001836:	4604      	mov	r4, r0
 8001838:	460d      	mov	r5, r1
 800183a:	4b5b      	ldr	r3, [pc, #364]	; (80019a8 <MPU6050_Read_Gyro+0x2f8>)
 800183c:	ed93 7a00 	vldr	s14, [r3]
 8001840:	4b59      	ldr	r3, [pc, #356]	; (80019a8 <MPU6050_Read_Gyro+0x2f8>)
 8001842:	edd3 7a00 	vldr	s15, [r3]
 8001846:	ee27 7a27 	vmul.f32	s14, s14, s15
 800184a:	4b58      	ldr	r3, [pc, #352]	; (80019ac <MPU6050_Read_Gyro+0x2fc>)
 800184c:	edd3 6a00 	vldr	s13, [r3]
 8001850:	4b56      	ldr	r3, [pc, #344]	; (80019ac <MPU6050_Read_Gyro+0x2fc>)
 8001852:	edd3 7a00 	vldr	s15, [r3]
 8001856:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800185a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185e:	ee17 0a90 	vmov	r0, s15
 8001862:	f7fe fe71 	bl	8000548 <__aeabi_f2d>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	ec43 2b10 	vmov	d0, r2, r3
 800186e:	f00b f815 	bl	800c89c <sqrt>
 8001872:	eeb0 7a40 	vmov.f32	s14, s0
 8001876:	eef0 7a60 	vmov.f32	s15, s1
 800187a:	eeb0 1a47 	vmov.f32	s2, s14
 800187e:	eef0 1a67 	vmov.f32	s3, s15
 8001882:	ec45 4b10 	vmov	d0, r4, r5
 8001886:	f00b f807 	bl	800c898 <atan2>
 800188a:	ec51 0b10 	vmov	r0, r1, d0
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	4b47      	ldr	r3, [pc, #284]	; (80019b0 <MPU6050_Read_Gyro+0x300>)
 8001894:	f7fe ffda 	bl	800084c <__aeabi_ddiv>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	a337      	add	r3, pc, #220	; (adr r3, 8001980 <MPU6050_Read_Gyro+0x2d0>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	f7fe fea7 	bl	80005f8 <__aeabi_dmul>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff f979 	bl	8000ba8 <__aeabi_d2f>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a3e      	ldr	r2, [pc, #248]	; (80019b4 <MPU6050_Read_Gyro+0x304>)
 80018ba:	6053      	str	r3, [r2, #4]

	float Z = (Gz) / 131.0;
 80018bc:	4b39      	ldr	r3, [pc, #228]	; (80019a4 <MPU6050_Read_Gyro+0x2f4>)
 80018be:	ed93 7a00 	vldr	s14, [r3]
 80018c2:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80019bc <MPU6050_Read_Gyro+0x30c>
 80018c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ca:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	MPU6050_Data.Z = Z;
 80018ce:	4a39      	ldr	r2, [pc, #228]	; (80019b4 <MPU6050_Read_Gyro+0x304>)
 80018d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018d2:	6093      	str	r3, [r2, #8]
	if (abs(Z) > 0.01)
 80018d4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80018d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018dc:	ee17 3a90 	vmov	r3, s15
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	bfb8      	it	lt
 80018e4:	425b      	neglt	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	dd40      	ble.n	800196c <MPU6050_Read_Gyro+0x2bc>
	{
		float _Z = sin(Z * M_PI / 180);
 80018ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80018ec:	f7fe fe2c 	bl	8000548 <__aeabi_f2d>
 80018f0:	a323      	add	r3, pc, #140	; (adr r3, 8001980 <MPU6050_Read_Gyro+0x2d0>)
 80018f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f6:	f7fe fe7f 	bl	80005f8 <__aeabi_dmul>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <MPU6050_Read_Gyro+0x300>)
 8001908:	f7fe ffa0 	bl	800084c <__aeabi_ddiv>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	ec43 2b17 	vmov	d7, r2, r3
 8001914:	eeb0 0a47 	vmov.f32	s0, s14
 8001918:	eef0 0a67 	vmov.f32	s1, s15
 800191c:	f00a ffec 	bl	800c8f8 <sin>
 8001920:	ec53 2b10 	vmov	r2, r3, d0
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	f7ff f93e 	bl	8000ba8 <__aeabi_d2f>
 800192c:	4603      	mov	r3, r0
 800192e:	637b      	str	r3, [r7, #52]	; 0x34
		MPU6050_Data.X -= MPU6050_Data.Y * _Z;
 8001930:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <MPU6050_Read_Gyro+0x304>)
 8001932:	ed93 7a00 	vldr	s14, [r3]
 8001936:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <MPU6050_Read_Gyro+0x304>)
 8001938:	edd3 6a01 	vldr	s13, [r3, #4]
 800193c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001940:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001944:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001948:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <MPU6050_Read_Gyro+0x304>)
 800194a:	edc3 7a00 	vstr	s15, [r3]
		MPU6050_Data.Y += MPU6050_Data.X * _Z;
 800194e:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <MPU6050_Read_Gyro+0x304>)
 8001950:	ed93 7a01 	vldr	s14, [r3, #4]
 8001954:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <MPU6050_Read_Gyro+0x304>)
 8001956:	edd3 6a00 	vldr	s13, [r3]
 800195a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800195e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001962:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001966:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <MPU6050_Read_Gyro+0x304>)
 8001968:	edc3 7a01 	vstr	s15, [r3, #4]
	}
}
 800196c:	3740      	adds	r7, #64	; 0x40
 800196e:	46bd      	mov	sp, r7
 8001970:	bdb0      	pop	{r4, r5, r7, pc}
 8001972:	bf00      	nop
 8001974:	f3af 8000 	nop.w
 8001978:	00000000 	.word	0x00000000
 800197c:	40606000 	.word	0x40606000
 8001980:	54442d18 	.word	0x54442d18
 8001984:	400921fb 	.word	0x400921fb
 8001988:	20000338 	.word	0x20000338
 800198c:	0800e054 	.word	0x0800e054
 8001990:	2000030e 	.word	0x2000030e
 8001994:	20000310 	.word	0x20000310
 8001998:	20000312 	.word	0x20000312
 800199c:	20000320 	.word	0x20000320
 80019a0:	20000324 	.word	0x20000324
 80019a4:	20000328 	.word	0x20000328
 80019a8:	20000318 	.word	0x20000318
 80019ac:	2000031c 	.word	0x2000031c
 80019b0:	40668000 	.word	0x40668000
 80019b4:	200002fc 	.word	0x200002fc
 80019b8:	20000314 	.word	0x20000314
 80019bc:	43030000 	.word	0x43030000

080019c0 <ComplementaryFilter>:
void ComplementaryFilter(float accelX, float gyroX, float accelY, float gyroY,
		float accelZ, float gyroZ)
{
 80019c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019c4:	b098      	sub	sp, #96	; 0x60
 80019c6:	af04      	add	r7, sp, #16
 80019c8:	ed87 0a05 	vstr	s0, [r7, #20]
 80019cc:	edc7 0a04 	vstr	s1, [r7, #16]
 80019d0:	ed87 1a03 	vstr	s2, [r7, #12]
 80019d4:	edc7 1a02 	vstr	s3, [r7, #8]
 80019d8:	ed87 2a01 	vstr	s4, [r7, #4]
 80019dc:	edc7 2a00 	vstr	s5, [r7]
	char USB_DataBufer[50];
	// Apply a complementary filter to smooth out accelerometer and gyroscope measurements
	MPU6050_Data.X = COMP_FILTER_ALPHA * (gyroX + accelX)
 80019e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80019e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80019e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ec:	ee17 0a90 	vmov	r0, s15
 80019f0:	f7fe fdaa 	bl	8000548 <__aeabi_f2d>
 80019f4:	a358      	add	r3, pc, #352	; (adr r3, 8001b58 <ComplementaryFilter+0x198>)
 80019f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fa:	f7fe fdfd 	bl	80005f8 <__aeabi_dmul>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4614      	mov	r4, r2
 8001a04:	461d      	mov	r5, r3
			+ (1 - COMP_FILTER_ALPHA) * prevX;
 8001a06:	4b56      	ldr	r3, [pc, #344]	; (8001b60 <ComplementaryFilter+0x1a0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fd9c 	bl	8000548 <__aeabi_f2d>
 8001a10:	a34f      	add	r3, pc, #316	; (adr r3, 8001b50 <ComplementaryFilter+0x190>)
 8001a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a16:	f7fe fdef 	bl	80005f8 <__aeabi_dmul>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4620      	mov	r0, r4
 8001a20:	4629      	mov	r1, r5
 8001a22:	f7fe fc33 	bl	800028c <__adddf3>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f7ff f8bb 	bl	8000ba8 <__aeabi_d2f>
 8001a32:	4603      	mov	r3, r0
	MPU6050_Data.X = COMP_FILTER_ALPHA * (gyroX + accelX)
 8001a34:	4a4b      	ldr	r2, [pc, #300]	; (8001b64 <ComplementaryFilter+0x1a4>)
 8001a36:	6013      	str	r3, [r2, #0]
	MPU6050_Data.Y = COMP_FILTER_ALPHA * (gyroY + accelY)
 8001a38:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a44:	ee17 0a90 	vmov	r0, s15
 8001a48:	f7fe fd7e 	bl	8000548 <__aeabi_f2d>
 8001a4c:	a342      	add	r3, pc, #264	; (adr r3, 8001b58 <ComplementaryFilter+0x198>)
 8001a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a52:	f7fe fdd1 	bl	80005f8 <__aeabi_dmul>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4614      	mov	r4, r2
 8001a5c:	461d      	mov	r5, r3
			+ (1 - COMP_FILTER_ALPHA) * prevY;
 8001a5e:	4b42      	ldr	r3, [pc, #264]	; (8001b68 <ComplementaryFilter+0x1a8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fd70 	bl	8000548 <__aeabi_f2d>
 8001a68:	a339      	add	r3, pc, #228	; (adr r3, 8001b50 <ComplementaryFilter+0x190>)
 8001a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6e:	f7fe fdc3 	bl	80005f8 <__aeabi_dmul>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4620      	mov	r0, r4
 8001a78:	4629      	mov	r1, r5
 8001a7a:	f7fe fc07 	bl	800028c <__adddf3>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	f7ff f88f 	bl	8000ba8 <__aeabi_d2f>
 8001a8a:	4603      	mov	r3, r0
	MPU6050_Data.Y = COMP_FILTER_ALPHA * (gyroY + accelY)
 8001a8c:	4a35      	ldr	r2, [pc, #212]	; (8001b64 <ComplementaryFilter+0x1a4>)
 8001a8e:	6053      	str	r3, [r2, #4]
	MPU6050_Data.Z = COMP_FILTER_ALPHA * (gyroZ + accelZ)
 8001a90:	ed97 7a00 	vldr	s14, [r7]
 8001a94:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9c:	ee17 0a90 	vmov	r0, s15
 8001aa0:	f7fe fd52 	bl	8000548 <__aeabi_f2d>
 8001aa4:	a32c      	add	r3, pc, #176	; (adr r3, 8001b58 <ComplementaryFilter+0x198>)
 8001aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aaa:	f7fe fda5 	bl	80005f8 <__aeabi_dmul>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4614      	mov	r4, r2
 8001ab4:	461d      	mov	r5, r3
			+ (1 - COMP_FILTER_ALPHA) * prevZ;
 8001ab6:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <ComplementaryFilter+0x1ac>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fd44 	bl	8000548 <__aeabi_f2d>
 8001ac0:	a323      	add	r3, pc, #140	; (adr r3, 8001b50 <ComplementaryFilter+0x190>)
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	f7fe fd97 	bl	80005f8 <__aeabi_dmul>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4620      	mov	r0, r4
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	f7fe fbdb 	bl	800028c <__adddf3>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7ff f863 	bl	8000ba8 <__aeabi_d2f>
 8001ae2:	4603      	mov	r3, r0
	MPU6050_Data.Z = COMP_FILTER_ALPHA * (gyroZ + accelZ)
 8001ae4:	4a1f      	ldr	r2, [pc, #124]	; (8001b64 <ComplementaryFilter+0x1a4>)
 8001ae6:	6093      	str	r3, [r2, #8]

	sprintf(USB_DataBufer, "%1.f; %1.f; %1.f\n", MPU6050_Data.X, MPU6050_Data.Y,
 8001ae8:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <ComplementaryFilter+0x1a4>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fd2b 	bl	8000548 <__aeabi_f2d>
 8001af2:	4680      	mov	r8, r0
 8001af4:	4689      	mov	r9, r1
 8001af6:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <ComplementaryFilter+0x1a4>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fd24 	bl	8000548 <__aeabi_f2d>
 8001b00:	4604      	mov	r4, r0
 8001b02:	460d      	mov	r5, r1
			MPU6050_Data.Z);
 8001b04:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <ComplementaryFilter+0x1a4>)
 8001b06:	689b      	ldr	r3, [r3, #8]
	sprintf(USB_DataBufer, "%1.f; %1.f; %1.f\n", MPU6050_Data.X, MPU6050_Data.Y,
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fd1d 	bl	8000548 <__aeabi_f2d>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	f107 001c 	add.w	r0, r7, #28
 8001b16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001b1a:	e9cd 4500 	strd	r4, r5, [sp]
 8001b1e:	4642      	mov	r2, r8
 8001b20:	464b      	mov	r3, r9
 8001b22:	4913      	ldr	r1, [pc, #76]	; (8001b70 <ComplementaryFilter+0x1b0>)
 8001b24:	f008 fd5c 	bl	800a5e0 <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_DataBufer, strlen(USB_DataBufer));
 8001b28:	f107 031c 	add.w	r3, r7, #28
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fb9f 	bl	8000270 <strlen>
 8001b32:	4603      	mov	r3, r0
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	f107 031c 	add.w	r3, r7, #28
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f007 fba9 	bl	8009294 <CDC_Transmit_FS>
}
 8001b42:	bf00      	nop
 8001b44:	3750      	adds	r7, #80	; 0x50
 8001b46:	46bd      	mov	sp, r7
 8001b48:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b4c:	f3af 8000 	nop.w
 8001b50:	47ae1480 	.word	0x47ae1480
 8001b54:	3f947ae1 	.word	0x3f947ae1
 8001b58:	f5c28f5c 	.word	0xf5c28f5c
 8001b5c:	3fef5c28 	.word	0x3fef5c28
 8001b60:	2000032c 	.word	0x2000032c
 8001b64:	200002fc 	.word	0x200002fc
 8001b68:	20000330 	.word	0x20000330
 8001b6c:	20000334 	.word	0x20000334
 8001b70:	0800e07c 	.word	0x0800e07c

08001b74 <ControlLEDs>:

void ControlLEDs(float x, float y, float z)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b7e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b82:	ed87 1a01 	vstr	s2, [r7, #4]
	if (x < LEFT_THRESHOLD)
 8001b86:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b8a:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001b8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b96:	d506      	bpl.n	8001ba6 <ControlLEDs+0x32>
	{
		// Turn on red LED
		HAL_GPIO_WritePin(GPIOD, Red_LED_Pin, GPIO_PIN_SET);
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b9e:	4828      	ldr	r0, [pc, #160]	; (8001c40 <ControlLEDs+0xcc>)
 8001ba0:	f000 ffca 	bl	8002b38 <HAL_GPIO_WritePin>
 8001ba4:	e005      	b.n	8001bb2 <ControlLEDs+0x3e>
	}
	else
	{
		// Turn off red LED
		HAL_GPIO_WritePin(GPIOD, Red_LED_Pin, GPIO_PIN_RESET);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bac:	4824      	ldr	r0, [pc, #144]	; (8001c40 <ControlLEDs+0xcc>)
 8001bae:	f000 ffc3 	bl	8002b38 <HAL_GPIO_WritePin>
	}
	if (x > RIGHT_THRESHOLD)
 8001bb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bb6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc2:	dd06      	ble.n	8001bd2 <ControlLEDs+0x5e>
	{
		// Turn on green LED
		HAL_GPIO_WritePin(GPIOD, Green_LED_Pin, GPIO_PIN_SET);
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bca:	481d      	ldr	r0, [pc, #116]	; (8001c40 <ControlLEDs+0xcc>)
 8001bcc:	f000 ffb4 	bl	8002b38 <HAL_GPIO_WritePin>
 8001bd0:	e005      	b.n	8001bde <ControlLEDs+0x6a>
	}
	else
	{
		// Turn off green LED
		HAL_GPIO_WritePin(GPIOD, Green_LED_Pin, GPIO_PIN_RESET);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bd8:	4819      	ldr	r0, [pc, #100]	; (8001c40 <ControlLEDs+0xcc>)
 8001bda:	f000 ffad 	bl	8002b38 <HAL_GPIO_WritePin>
	}

	if (y > TOP_THRESHOLD)
 8001bde:	edd7 7a02 	vldr	s15, [r7, #8]
 8001be2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001be6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bee:	dd06      	ble.n	8001bfe <ControlLEDs+0x8a>
	{
		// Turn on blue LED
		HAL_GPIO_WritePin(GPIOD, Blue_LED_Pin, GPIO_PIN_SET);
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bf6:	4812      	ldr	r0, [pc, #72]	; (8001c40 <ControlLEDs+0xcc>)
 8001bf8:	f000 ff9e 	bl	8002b38 <HAL_GPIO_WritePin>
 8001bfc:	e005      	b.n	8001c0a <ControlLEDs+0x96>
	}
	else
	{
		// Turn off blue LED
		HAL_GPIO_WritePin(GPIOD, Blue_LED_Pin, GPIO_PIN_RESET);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c04:	480e      	ldr	r0, [pc, #56]	; (8001c40 <ControlLEDs+0xcc>)
 8001c06:	f000 ff97 	bl	8002b38 <HAL_GPIO_WritePin>
	}

	if (y < BOTTOM_THRESHOLD)
 8001c0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c0e:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001c12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1a:	d506      	bpl.n	8001c2a <ControlLEDs+0xb6>
	{
		// Turn on orange LED
		HAL_GPIO_WritePin(GPIOD, Orange_LED_Pin, GPIO_PIN_SET);
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c22:	4807      	ldr	r0, [pc, #28]	; (8001c40 <ControlLEDs+0xcc>)
 8001c24:	f000 ff88 	bl	8002b38 <HAL_GPIO_WritePin>
	else
	{
		// Turn off orange LED
		HAL_GPIO_WritePin(GPIOD, Orange_LED_Pin, GPIO_PIN_RESET);
	}
}
 8001c28:	e005      	b.n	8001c36 <ControlLEDs+0xc2>
		HAL_GPIO_WritePin(GPIOD, Orange_LED_Pin, GPIO_PIN_RESET);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c30:	4803      	ldr	r0, [pc, #12]	; (8001c40 <ControlLEDs+0xcc>)
 8001c32:	f000 ff81 	bl	8002b38 <HAL_GPIO_WritePin>
}
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40020c00 	.word	0x40020c00
 8001c44:	00000000 	.word	0x00000000

08001c48 <main>:

int main(void)
{
 8001c48:	b5b0      	push	{r4, r5, r7, lr}
 8001c4a:	b090      	sub	sp, #64	; 0x40
 8001c4c:	af02      	add	r7, sp, #8
	char humidity[20];
	char temperature[20];

	HAL_Init();
 8001c4e:	f000 fc17 	bl	8002480 <HAL_Init>
	SystemClock_Config();
 8001c52:	f000 f94b 	bl	8001eec <SystemClock_Config>
	MX_GPIO_Init();
 8001c56:	f000 f9e1 	bl	800201c <MX_GPIO_Init>
	MX_I2C1_Init();
 8001c5a:	f000 f9b1 	bl	8001fc0 <MX_I2C1_Init>
	MX_USB_DEVICE_Init();
 8001c5e:	f007 fa5b 	bl	8009118 <MX_USB_DEVICE_Init>
	MPU6050_Init();
 8001c62:	f7ff fc2b 	bl	80014bc <MPU6050_Init>
	LCD_Init();
 8001c66:	f7ff fbdb 	bl	8001420 <LCD_Init>

	while (1)
	{
		MPU6050_Read_Accel();
 8001c6a:	f7ff fc7d 	bl	8001568 <MPU6050_Read_Accel>
		MPU6050_Read_Gyro();
 8001c6e:	f7ff fd1f 	bl	80016b0 <MPU6050_Read_Gyro>
		MPU6050_Data.X = atan2(Ay, Az) * 180.0 / M_PI;
 8001c72:	4b91      	ldr	r3, [pc, #580]	; (8001eb8 <main+0x270>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe fc66 	bl	8000548 <__aeabi_f2d>
 8001c7c:	4604      	mov	r4, r0
 8001c7e:	460d      	mov	r5, r1
 8001c80:	4b8e      	ldr	r3, [pc, #568]	; (8001ebc <main+0x274>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fc5f 	bl	8000548 <__aeabi_f2d>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	ec43 2b11 	vmov	d1, r2, r3
 8001c92:	ec45 4b10 	vmov	d0, r4, r5
 8001c96:	f00a fdff 	bl	800c898 <atan2>
 8001c9a:	ec51 0b10 	vmov	r0, r1, d0
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	4b87      	ldr	r3, [pc, #540]	; (8001ec0 <main+0x278>)
 8001ca4:	f7fe fca8 	bl	80005f8 <__aeabi_dmul>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	a37f      	add	r3, pc, #508	; (adr r3, 8001eb0 <main+0x268>)
 8001cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb6:	f7fe fdc9 	bl	800084c <__aeabi_ddiv>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f7fe ff71 	bl	8000ba8 <__aeabi_d2f>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4a7e      	ldr	r2, [pc, #504]	; (8001ec4 <main+0x27c>)
 8001cca:	6013      	str	r3, [r2, #0]
		MPU6050_Data.Y = atan2(-Ax, sqrt(Ay * Ay + Az * Az)) * 180.0 / M_PI;
 8001ccc:	4b7e      	ldr	r3, [pc, #504]	; (8001ec8 <main+0x280>)
 8001cce:	edd3 7a00 	vldr	s15, [r3]
 8001cd2:	eef1 7a67 	vneg.f32	s15, s15
 8001cd6:	ee17 3a90 	vmov	r3, s15
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fc34 	bl	8000548 <__aeabi_f2d>
 8001ce0:	4604      	mov	r4, r0
 8001ce2:	460d      	mov	r5, r1
 8001ce4:	4b74      	ldr	r3, [pc, #464]	; (8001eb8 <main+0x270>)
 8001ce6:	ed93 7a00 	vldr	s14, [r3]
 8001cea:	4b73      	ldr	r3, [pc, #460]	; (8001eb8 <main+0x270>)
 8001cec:	edd3 7a00 	vldr	s15, [r3]
 8001cf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cf4:	4b71      	ldr	r3, [pc, #452]	; (8001ebc <main+0x274>)
 8001cf6:	edd3 6a00 	vldr	s13, [r3]
 8001cfa:	4b70      	ldr	r3, [pc, #448]	; (8001ebc <main+0x274>)
 8001cfc:	edd3 7a00 	vldr	s15, [r3]
 8001d00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d08:	ee17 0a90 	vmov	r0, s15
 8001d0c:	f7fe fc1c 	bl	8000548 <__aeabi_f2d>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	ec43 2b10 	vmov	d0, r2, r3
 8001d18:	f00a fdc0 	bl	800c89c <sqrt>
 8001d1c:	eeb0 7a40 	vmov.f32	s14, s0
 8001d20:	eef0 7a60 	vmov.f32	s15, s1
 8001d24:	eeb0 1a47 	vmov.f32	s2, s14
 8001d28:	eef0 1a67 	vmov.f32	s3, s15
 8001d2c:	ec45 4b10 	vmov	d0, r4, r5
 8001d30:	f00a fdb2 	bl	800c898 <atan2>
 8001d34:	ec51 0b10 	vmov	r0, r1, d0
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	4b60      	ldr	r3, [pc, #384]	; (8001ec0 <main+0x278>)
 8001d3e:	f7fe fc5b 	bl	80005f8 <__aeabi_dmul>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4610      	mov	r0, r2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	a359      	add	r3, pc, #356	; (adr r3, 8001eb0 <main+0x268>)
 8001d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d50:	f7fe fd7c 	bl	800084c <__aeabi_ddiv>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f7fe ff24 	bl	8000ba8 <__aeabi_d2f>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4a58      	ldr	r2, [pc, #352]	; (8001ec4 <main+0x27c>)
 8001d64:	6053      	str	r3, [r2, #4]
		MPU6050_Data.Z = 0;
 8001d66:	4b57      	ldr	r3, [pc, #348]	; (8001ec4 <main+0x27c>)
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]

		ComplementaryFilter(MPU6050_Data.X, Gx, MPU6050_Data.Y, Gy,
 8001d6e:	4b55      	ldr	r3, [pc, #340]	; (8001ec4 <main+0x27c>)
 8001d70:	edd3 7a00 	vldr	s15, [r3]
 8001d74:	4b55      	ldr	r3, [pc, #340]	; (8001ecc <main+0x284>)
 8001d76:	ed93 7a00 	vldr	s14, [r3]
 8001d7a:	4b52      	ldr	r3, [pc, #328]	; (8001ec4 <main+0x27c>)
 8001d7c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d80:	4b53      	ldr	r3, [pc, #332]	; (8001ed0 <main+0x288>)
 8001d82:	ed93 6a00 	vldr	s12, [r3]
 8001d86:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <main+0x27c>)
 8001d88:	edd3 5a02 	vldr	s11, [r3, #8]
 8001d8c:	4b51      	ldr	r3, [pc, #324]	; (8001ed4 <main+0x28c>)
 8001d8e:	ed93 5a00 	vldr	s10, [r3]
 8001d92:	eef0 2a45 	vmov.f32	s5, s10
 8001d96:	eeb0 2a65 	vmov.f32	s4, s11
 8001d9a:	eef0 1a46 	vmov.f32	s3, s12
 8001d9e:	eeb0 1a66 	vmov.f32	s2, s13
 8001da2:	eef0 0a47 	vmov.f32	s1, s14
 8001da6:	eeb0 0a67 	vmov.f32	s0, s15
 8001daa:	f7ff fe09 	bl	80019c0 <ComplementaryFilter>
				MPU6050_Data.Z, Gz);

		ControlLEDs(MPU6050_Data.X, MPU6050_Data.Y, MPU6050_Data.Z);
 8001dae:	4b45      	ldr	r3, [pc, #276]	; (8001ec4 <main+0x27c>)
 8001db0:	edd3 7a00 	vldr	s15, [r3]
 8001db4:	4b43      	ldr	r3, [pc, #268]	; (8001ec4 <main+0x27c>)
 8001db6:	ed93 7a01 	vldr	s14, [r3, #4]
 8001dba:	4b42      	ldr	r3, [pc, #264]	; (8001ec4 <main+0x27c>)
 8001dbc:	edd3 6a02 	vldr	s13, [r3, #8]
 8001dc0:	eeb0 1a66 	vmov.f32	s2, s13
 8001dc4:	eef0 0a47 	vmov.f32	s1, s14
 8001dc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dcc:	f7ff fed2 	bl	8001b74 <ControlLEDs>

		prevX = MPU6050_Data.X;
 8001dd0:	4b3c      	ldr	r3, [pc, #240]	; (8001ec4 <main+0x27c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a40      	ldr	r2, [pc, #256]	; (8001ed8 <main+0x290>)
 8001dd6:	6013      	str	r3, [r2, #0]
		prevY = MPU6050_Data.Y;
 8001dd8:	4b3a      	ldr	r3, [pc, #232]	; (8001ec4 <main+0x27c>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4a3f      	ldr	r2, [pc, #252]	; (8001edc <main+0x294>)
 8001dde:	6013      	str	r3, [r2, #0]
		prevZ = MPU6050_Data.Z;
 8001de0:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <main+0x27c>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4a3e      	ldr	r2, [pc, #248]	; (8001ee0 <main+0x298>)
 8001de6:	6013      	str	r3, [r2, #0]

		DHT_data dht = DHT_getData();
 8001de8:	f7ff f8ac 	bl	8000f44 <DHT_getData>
 8001dec:	eeb0 7a40 	vmov.f32	s14, s0
 8001df0:	eef0 7a60 	vmov.f32	s15, s1
 8001df4:	ed87 7a00 	vstr	s14, [r7]
 8001df8:	edc7 7a01 	vstr	s15, [r7, #4]
		float prevTemperature = 0;
 8001dfc:	f04f 0300 	mov.w	r3, #0
 8001e00:	637b      	str	r3, [r7, #52]	; 0x34
		float prevHumidity = 0;
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	633b      	str	r3, [r7, #48]	; 0x30
		if (dht.temperature != 0 && dht.humidity != 0
 8001e08:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e14:	d048      	beq.n	8001ea8 <main+0x260>
 8001e16:	edd7 7a00 	vldr	s15, [r7]
 8001e1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e22:	d041      	beq.n	8001ea8 <main+0x260>
				&& (dht.temperature != prevTemperature
 8001e24:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e28:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001e2c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e34:	d108      	bne.n	8001e48 <main+0x200>
						|| dht.humidity != prevHumidity))
 8001e36:	edd7 7a00 	vldr	s15, [r7]
 8001e3a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001e3e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e46:	d02f      	beq.n	8001ea8 <main+0x260>
		{
			snprintf(temperature, sizeof(temperature), "Temperature: %1.f",
					dht.temperature);
 8001e48:	687b      	ldr	r3, [r7, #4]
			snprintf(temperature, sizeof(temperature), "Temperature: %1.f",
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fb7c 	bl	8000548 <__aeabi_f2d>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	f107 0008 	add.w	r0, r7, #8
 8001e58:	e9cd 2300 	strd	r2, r3, [sp]
 8001e5c:	4a21      	ldr	r2, [pc, #132]	; (8001ee4 <main+0x29c>)
 8001e5e:	2114      	movs	r1, #20
 8001e60:	f008 fb8a 	bl	800a578 <sniprintf>
			snprintf(humidity, sizeof(humidity), "Humidity: %1.f",
					dht.humidity);
 8001e64:	683b      	ldr	r3, [r7, #0]
			snprintf(humidity, sizeof(humidity), "Humidity: %1.f",
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fb6e 	bl	8000548 <__aeabi_f2d>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	f107 001c 	add.w	r0, r7, #28
 8001e74:	e9cd 2300 	strd	r2, r3, [sp]
 8001e78:	4a1b      	ldr	r2, [pc, #108]	; (8001ee8 <main+0x2a0>)
 8001e7a:	2114      	movs	r1, #20
 8001e7c:	f008 fb7c 	bl	800a578 <sniprintf>
			LCD_Clear();
 8001e80:	f7ff fac4 	bl	800140c <LCD_Clear>
			LCD_PutString(0, 0, temperature); // Print temperature on the first line
 8001e84:	f107 0308 	add.w	r3, r7, #8
 8001e88:	461a      	mov	r2, r3
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f7ff fa51 	bl	8001334 <LCD_PutString>
			LCD_PutString(0, 1, humidity); // Print humidity on the second line
 8001e92:	f107 031c 	add.w	r3, r7, #28
 8001e96:	461a      	mov	r2, r3
 8001e98:	2101      	movs	r1, #1
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f7ff fa4a 	bl	8001334 <LCD_PutString>

			prevTemperature = dht.temperature;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	637b      	str	r3, [r7, #52]	; 0x34
			prevHumidity = dht.humidity;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	633b      	str	r3, [r7, #48]	; 0x30
		}

		// TEMP
		HAL_Delay(100);
 8001ea8:	2064      	movs	r0, #100	; 0x64
 8001eaa:	f000 fb5b 	bl	8002564 <HAL_Delay>
	{
 8001eae:	e6dc      	b.n	8001c6a <main+0x22>
 8001eb0:	54442d18 	.word	0x54442d18
 8001eb4:	400921fb 	.word	0x400921fb
 8001eb8:	20000318 	.word	0x20000318
 8001ebc:	2000031c 	.word	0x2000031c
 8001ec0:	40668000 	.word	0x40668000
 8001ec4:	200002fc 	.word	0x200002fc
 8001ec8:	20000314 	.word	0x20000314
 8001ecc:	20000320 	.word	0x20000320
 8001ed0:	20000324 	.word	0x20000324
 8001ed4:	20000328 	.word	0x20000328
 8001ed8:	2000032c 	.word	0x2000032c
 8001edc:	20000330 	.word	0x20000330
 8001ee0:	20000334 	.word	0x20000334
 8001ee4:	0800e090 	.word	0x0800e090
 8001ee8:	0800e0a4 	.word	0x0800e0a4

08001eec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b094      	sub	sp, #80	; 0x50
 8001ef0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8001ef2:	f107 0320 	add.w	r3, r7, #32
 8001ef6:	2230      	movs	r2, #48	; 0x30
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f008 fbd3 	bl	800a6a6 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <SystemClock_Config+0xcc>)
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	4a27      	ldr	r2, [pc, #156]	; (8001fb8 <SystemClock_Config+0xcc>)
 8001f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f20:	4b25      	ldr	r3, [pc, #148]	; (8001fb8 <SystemClock_Config+0xcc>)
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	607b      	str	r3, [r7, #4]
 8001f30:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <SystemClock_Config+0xd0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a21      	ldr	r2, [pc, #132]	; (8001fbc <SystemClock_Config+0xd0>)
 8001f36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <SystemClock_Config+0xd0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f52:	2302      	movs	r3, #2
 8001f54:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001f5c:	2308      	movs	r3, #8
 8001f5e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001f60:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001f64:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f66:	2302      	movs	r3, #2
 8001f68:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f6a:	2307      	movs	r3, #7
 8001f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f6e:	f107 0320 	add.w	r3, r7, #32
 8001f72:	4618      	mov	r0, r3
 8001f74:	f003 f836 	bl	8004fe4 <HAL_RCC_OscConfig>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <SystemClock_Config+0x96>
	{
		Error_Handler();
 8001f7e:	f000 f8d3 	bl	8002128 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001f82:	230f      	movs	r3, #15
 8001f84:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f86:	2302      	movs	r3, #2
 8001f88:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f92:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f98:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f9a:	f107 030c 	add.w	r3, r7, #12
 8001f9e:	2105      	movs	r1, #5
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f003 fa97 	bl	80054d4 <HAL_RCC_ClockConfig>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8001fac:	f000 f8bc 	bl	8002128 <Error_Handler>
	}
}
 8001fb0:	bf00      	nop
 8001fb2:	3750      	adds	r7, #80	; 0x50
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40007000 	.word	0x40007000

08001fc0 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <MX_I2C1_Init+0x50>)
 8001fc6:	4a13      	ldr	r2, [pc, #76]	; (8002014 <MX_I2C1_Init+0x54>)
 8001fc8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <MX_I2C1_Init+0x50>)
 8001fcc:	4a12      	ldr	r2, [pc, #72]	; (8002018 <MX_I2C1_Init+0x58>)
 8001fce:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <MX_I2C1_Init+0x50>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <MX_I2C1_Init+0x50>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <MX_I2C1_Init+0x50>)
 8001fde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fe2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <MX_I2C1_Init+0x50>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <MX_I2C1_Init+0x50>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ff0:	4b07      	ldr	r3, [pc, #28]	; (8002010 <MX_I2C1_Init+0x50>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <MX_I2C1_Init+0x50>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ffc:	4804      	ldr	r0, [pc, #16]	; (8002010 <MX_I2C1_Init+0x50>)
 8001ffe:	f000 fdb5 	bl	8002b6c <HAL_I2C_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8002008:	f000 f88e 	bl	8002128 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000338 	.word	0x20000338
 8002014:	40005400 	.word	0x40005400
 8002018:	00061a80 	.word	0x00061a80

0800201c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	; 0x28
 8002020:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]
 8002030:	611a      	str	r2, [r3, #16]
	{ 0 };
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	4b39      	ldr	r3, [pc, #228]	; (800211c <MX_GPIO_Init+0x100>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a38      	ldr	r2, [pc, #224]	; (800211c <MX_GPIO_Init+0x100>)
 800203c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b36      	ldr	r3, [pc, #216]	; (800211c <MX_GPIO_Init+0x100>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	4b32      	ldr	r3, [pc, #200]	; (800211c <MX_GPIO_Init+0x100>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a31      	ldr	r2, [pc, #196]	; (800211c <MX_GPIO_Init+0x100>)
 8002058:	f043 0310 	orr.w	r3, r3, #16
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b2f      	ldr	r3, [pc, #188]	; (800211c <MX_GPIO_Init+0x100>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	4b2b      	ldr	r3, [pc, #172]	; (800211c <MX_GPIO_Init+0x100>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a2a      	ldr	r2, [pc, #168]	; (800211c <MX_GPIO_Init+0x100>)
 8002074:	f043 0308 	orr.w	r3, r3, #8
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b28      	ldr	r3, [pc, #160]	; (800211c <MX_GPIO_Init+0x100>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	607b      	str	r3, [r7, #4]
 800208a:	4b24      	ldr	r3, [pc, #144]	; (800211c <MX_GPIO_Init+0x100>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a23      	ldr	r2, [pc, #140]	; (800211c <MX_GPIO_Init+0x100>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b21      	ldr	r3, [pc, #132]	; (800211c <MX_GPIO_Init+0x100>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	607b      	str	r3, [r7, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	603b      	str	r3, [r7, #0]
 80020a6:	4b1d      	ldr	r3, [pc, #116]	; (800211c <MX_GPIO_Init+0x100>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a1c      	ldr	r2, [pc, #112]	; (800211c <MX_GPIO_Init+0x100>)
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b1a      	ldr	r3, [pc, #104]	; (800211c <MX_GPIO_Init+0x100>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 80020be:	2200      	movs	r2, #0
 80020c0:	f64f 4180 	movw	r1, #64640	; 0xfc80
 80020c4:	4816      	ldr	r0, [pc, #88]	; (8002120 <MX_GPIO_Init+0x104>)
 80020c6:	f000 fd37 	bl	8002b38 <HAL_GPIO_WritePin>
	RS_Pin | RW_Pin | EN_Pin | DB4_Pin | DB5_Pin | DB6_Pin | DB7_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 80020ca:	2200      	movs	r2, #0
 80020cc:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80020d0:	4814      	ldr	r0, [pc, #80]	; (8002124 <MX_GPIO_Init+0x108>)
 80020d2:	f000 fd31 	bl	8002b38 <HAL_GPIO_WritePin>
	DHT11_Pin | Green_LED_Pin | Orange_LED_Pin | Red_LED_Pin | Blue_LED_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : RS_Pin RW_Pin EN_Pin DB4_Pin
	 DB5_Pin DB6_Pin DB7_Pin */
	GPIO_InitStruct.Pin = RS_Pin | RW_Pin | EN_Pin | DB4_Pin | DB5_Pin | DB6_Pin
 80020d6:	f64f 4380 	movw	r3, #64640	; 0xfc80
 80020da:	617b      	str	r3, [r7, #20]
			| DB7_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020dc:	2301      	movs	r3, #1
 80020de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e4:	2300      	movs	r3, #0
 80020e6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	4619      	mov	r1, r3
 80020ee:	480c      	ldr	r0, [pc, #48]	; (8002120 <MX_GPIO_Init+0x104>)
 80020f0:	f000 fb6e 	bl	80027d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : DHT11_Pin Green_LED_Pin Orange_LED_Pin Red_LED_Pin
	 Blue_LED_Pin */
	GPIO_InitStruct.Pin = DHT11_Pin | Green_LED_Pin | Orange_LED_Pin
 80020f4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80020f8:	617b      	str	r3, [r7, #20]
			| Red_LED_Pin | Blue_LED_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fa:	2301      	movs	r3, #1
 80020fc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002106:	f107 0314 	add.w	r3, r7, #20
 800210a:	4619      	mov	r1, r3
 800210c:	4805      	ldr	r0, [pc, #20]	; (8002124 <MX_GPIO_Init+0x108>)
 800210e:	f000 fb5f 	bl	80027d0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002112:	bf00      	nop
 8002114:	3728      	adds	r7, #40	; 0x28
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800
 8002120:	40021000 	.word	0x40021000
 8002124:	40020c00 	.word	0x40020c00

08002128 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800212c:	b672      	cpsid	i
}
 800212e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002130:	e7fe      	b.n	8002130 <Error_Handler+0x8>
	...

08002134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	607b      	str	r3, [r7, #4]
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <HAL_MspInit+0x4c>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	4a0f      	ldr	r2, [pc, #60]	; (8002180 <HAL_MspInit+0x4c>)
 8002144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002148:	6453      	str	r3, [r2, #68]	; 0x44
 800214a:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <HAL_MspInit+0x4c>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002152:	607b      	str	r3, [r7, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	603b      	str	r3, [r7, #0]
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_MspInit+0x4c>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	4a08      	ldr	r2, [pc, #32]	; (8002180 <HAL_MspInit+0x4c>)
 8002160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_MspInit+0x4c>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002172:	2007      	movs	r0, #7
 8002174:	f000 faea 	bl	800274c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40023800 	.word	0x40023800

08002184 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08a      	sub	sp, #40	; 0x28
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a19      	ldr	r2, [pc, #100]	; (8002208 <HAL_I2C_MspInit+0x84>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d12b      	bne.n	80021fe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	4b18      	ldr	r3, [pc, #96]	; (800220c <HAL_I2C_MspInit+0x88>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4a17      	ldr	r2, [pc, #92]	; (800220c <HAL_I2C_MspInit+0x88>)
 80021b0:	f043 0302 	orr.w	r3, r3, #2
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <HAL_I2C_MspInit+0x88>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021c2:	23c0      	movs	r3, #192	; 0xc0
 80021c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021c6:	2312      	movs	r3, #18
 80021c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ce:	2303      	movs	r3, #3
 80021d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021d2:	2304      	movs	r3, #4
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	480c      	ldr	r0, [pc, #48]	; (8002210 <HAL_I2C_MspInit+0x8c>)
 80021de:	f000 faf7 	bl	80027d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <HAL_I2C_MspInit+0x88>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	4a08      	ldr	r2, [pc, #32]	; (800220c <HAL_I2C_MspInit+0x88>)
 80021ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021f0:	6413      	str	r3, [r2, #64]	; 0x40
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <HAL_I2C_MspInit+0x88>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021fe:	bf00      	nop
 8002200:	3728      	adds	r7, #40	; 0x28
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40005400 	.word	0x40005400
 800220c:	40023800 	.word	0x40023800
 8002210:	40020400 	.word	0x40020400

08002214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002218:	e7fe      	b.n	8002218 <NMI_Handler+0x4>

0800221a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800221e:	e7fe      	b.n	800221e <HardFault_Handler+0x4>

08002220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002224:	e7fe      	b.n	8002224 <MemManage_Handler+0x4>

08002226 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800222a:	e7fe      	b.n	800222a <BusFault_Handler+0x4>

0800222c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002230:	e7fe      	b.n	8002230 <UsageFault_Handler+0x4>

08002232 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002260:	f000 f960 	bl	8002524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002264:	bf00      	nop
 8002266:	bd80      	pop	{r7, pc}

08002268 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800226c:	4802      	ldr	r0, [pc, #8]	; (8002278 <OTG_FS_IRQHandler+0x10>)
 800226e:	f001 fd8c 	bl	8003d8a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20001874 	.word	0x20001874

0800227c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return 1;
 8002280:	2301      	movs	r3, #1
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <_kill>:

int _kill(int pid, int sig)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002296:	f008 fa59 	bl	800a74c <__errno>
 800229a:	4603      	mov	r3, r0
 800229c:	2216      	movs	r2, #22
 800229e:	601a      	str	r2, [r3, #0]
  return -1;
 80022a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <_exit>:

void _exit (int status)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022b4:	f04f 31ff 	mov.w	r1, #4294967295
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ffe7 	bl	800228c <_kill>
  while (1) {}    /* Make sure we hang here */
 80022be:	e7fe      	b.n	80022be <_exit+0x12>

080022c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	e00a      	b.n	80022e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022d2:	f3af 8000 	nop.w
 80022d6:	4601      	mov	r1, r0
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	60ba      	str	r2, [r7, #8]
 80022de:	b2ca      	uxtb	r2, r1
 80022e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	3301      	adds	r3, #1
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	dbf0      	blt.n	80022d2 <_read+0x12>
  }

  return len;
 80022f0:	687b      	ldr	r3, [r7, #4]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	e009      	b.n	8002320 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	60ba      	str	r2, [r7, #8]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	3301      	adds	r3, #1
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	429a      	cmp	r2, r3
 8002326:	dbf1      	blt.n	800230c <_write+0x12>
  }
  return len;
 8002328:	687b      	ldr	r3, [r7, #4]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <_close>:

int _close(int file)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800233a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800235a:	605a      	str	r2, [r3, #4]
  return 0;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <_isatty>:

int _isatty(int file)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002372:	2301      	movs	r3, #1
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023a4:	4a14      	ldr	r2, [pc, #80]	; (80023f8 <_sbrk+0x5c>)
 80023a6:	4b15      	ldr	r3, [pc, #84]	; (80023fc <_sbrk+0x60>)
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b0:	4b13      	ldr	r3, [pc, #76]	; (8002400 <_sbrk+0x64>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d102      	bne.n	80023be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <_sbrk+0x64>)
 80023ba:	4a12      	ldr	r2, [pc, #72]	; (8002404 <_sbrk+0x68>)
 80023bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023be:	4b10      	ldr	r3, [pc, #64]	; (8002400 <_sbrk+0x64>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d207      	bcs.n	80023dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023cc:	f008 f9be 	bl	800a74c <__errno>
 80023d0:	4603      	mov	r3, r0
 80023d2:	220c      	movs	r2, #12
 80023d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295
 80023da:	e009      	b.n	80023f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023dc:	4b08      	ldr	r3, [pc, #32]	; (8002400 <_sbrk+0x64>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023e2:	4b07      	ldr	r3, [pc, #28]	; (8002400 <_sbrk+0x64>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	4a05      	ldr	r2, [pc, #20]	; (8002400 <_sbrk+0x64>)
 80023ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ee:	68fb      	ldr	r3, [r7, #12]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20020000 	.word	0x20020000
 80023fc:	00000400 	.word	0x00000400
 8002400:	2000038c 	.word	0x2000038c
 8002404:	200020f0 	.word	0x200020f0

08002408 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <SystemInit+0x20>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	4a05      	ldr	r2, [pc, #20]	; (8002428 <SystemInit+0x20>)
 8002414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800242c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002464 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002430:	480d      	ldr	r0, [pc, #52]	; (8002468 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002432:	490e      	ldr	r1, [pc, #56]	; (800246c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002434:	4a0e      	ldr	r2, [pc, #56]	; (8002470 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002438:	e002      	b.n	8002440 <LoopCopyDataInit>

0800243a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800243a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800243c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800243e:	3304      	adds	r3, #4

08002440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002444:	d3f9      	bcc.n	800243a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002446:	4a0b      	ldr	r2, [pc, #44]	; (8002474 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002448:	4c0b      	ldr	r4, [pc, #44]	; (8002478 <LoopFillZerobss+0x26>)
  movs r3, #0
 800244a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800244c:	e001      	b.n	8002452 <LoopFillZerobss>

0800244e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800244e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002450:	3204      	adds	r2, #4

08002452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002454:	d3fb      	bcc.n	800244e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002456:	f7ff ffd7 	bl	8002408 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800245a:	f008 f97d 	bl	800a758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800245e:	f7ff fbf3 	bl	8001c48 <main>
  bx  lr    
 8002462:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002464:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800246c:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8002470:	0800e6e0 	.word	0x0800e6e0
  ldr r2, =_sbss
 8002474:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8002478:	200020ec 	.word	0x200020ec

0800247c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800247c:	e7fe      	b.n	800247c <ADC_IRQHandler>
	...

08002480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002484:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <HAL_Init+0x40>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <HAL_Init+0x40>)
 800248a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800248e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_Init+0x40>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <HAL_Init+0x40>)
 8002496:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800249a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <HAL_Init+0x40>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a07      	ldr	r2, [pc, #28]	; (80024c0 <HAL_Init+0x40>)
 80024a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a8:	2003      	movs	r0, #3
 80024aa:	f000 f94f 	bl	800274c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ae:	2000      	movs	r0, #0
 80024b0:	f000 f808 	bl	80024c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024b4:	f7ff fe3e 	bl	8002134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40023c00 	.word	0x40023c00

080024c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024cc:	4b12      	ldr	r3, [pc, #72]	; (8002518 <HAL_InitTick+0x54>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_InitTick+0x58>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	4619      	mov	r1, r3
 80024d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024da:	fbb3 f3f1 	udiv	r3, r3, r1
 80024de:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 f967 	bl	80027b6 <HAL_SYSTICK_Config>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e00e      	b.n	8002510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b0f      	cmp	r3, #15
 80024f6:	d80a      	bhi.n	800250e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024f8:	2200      	movs	r2, #0
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002500:	f000 f92f 	bl	8002762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002504:	4a06      	ldr	r2, [pc, #24]	; (8002520 <HAL_InitTick+0x5c>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	e000      	b.n	8002510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
}
 8002510:	4618      	mov	r0, r3
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000000 	.word	0x20000000
 800251c:	20000008 	.word	0x20000008
 8002520:	20000004 	.word	0x20000004

08002524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_IncTick+0x20>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	461a      	mov	r2, r3
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_IncTick+0x24>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4413      	add	r3, r2
 8002534:	4a04      	ldr	r2, [pc, #16]	; (8002548 <HAL_IncTick+0x24>)
 8002536:	6013      	str	r3, [r2, #0]
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	20000008 	.word	0x20000008
 8002548:	20000390 	.word	0x20000390

0800254c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return uwTick;
 8002550:	4b03      	ldr	r3, [pc, #12]	; (8002560 <HAL_GetTick+0x14>)
 8002552:	681b      	ldr	r3, [r3, #0]
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	20000390 	.word	0x20000390

08002564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800256c:	f7ff ffee 	bl	800254c <HAL_GetTick>
 8002570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257c:	d005      	beq.n	800258a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800257e:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <HAL_Delay+0x44>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4413      	add	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800258a:	bf00      	nop
 800258c:	f7ff ffde 	bl	800254c <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	429a      	cmp	r2, r3
 800259a:	d8f7      	bhi.n	800258c <HAL_Delay+0x28>
  {
  }
}
 800259c:	bf00      	nop
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000008 	.word	0x20000008

080025ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c8:	4013      	ands	r3, r2
 80025ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025de:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	60d3      	str	r3, [r2, #12]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f8:	4b04      	ldr	r3, [pc, #16]	; (800260c <__NVIC_GetPriorityGrouping+0x18>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	f003 0307 	and.w	r3, r3, #7
}
 8002602:	4618      	mov	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	2b00      	cmp	r3, #0
 8002620:	db0b      	blt.n	800263a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	f003 021f 	and.w	r2, r3, #31
 8002628:	4907      	ldr	r1, [pc, #28]	; (8002648 <__NVIC_EnableIRQ+0x38>)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	2001      	movs	r0, #1
 8002632:	fa00 f202 	lsl.w	r2, r0, r2
 8002636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	e000e100 	.word	0xe000e100

0800264c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	6039      	str	r1, [r7, #0]
 8002656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265c:	2b00      	cmp	r3, #0
 800265e:	db0a      	blt.n	8002676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	b2da      	uxtb	r2, r3
 8002664:	490c      	ldr	r1, [pc, #48]	; (8002698 <__NVIC_SetPriority+0x4c>)
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	0112      	lsls	r2, r2, #4
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	440b      	add	r3, r1
 8002670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002674:	e00a      	b.n	800268c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	b2da      	uxtb	r2, r3
 800267a:	4908      	ldr	r1, [pc, #32]	; (800269c <__NVIC_SetPriority+0x50>)
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	3b04      	subs	r3, #4
 8002684:	0112      	lsls	r2, r2, #4
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	440b      	add	r3, r1
 800268a:	761a      	strb	r2, [r3, #24]
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000e100 	.word	0xe000e100
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b089      	sub	sp, #36	; 0x24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f1c3 0307 	rsb	r3, r3, #7
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	bf28      	it	cs
 80026be:	2304      	movcs	r3, #4
 80026c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3304      	adds	r3, #4
 80026c6:	2b06      	cmp	r3, #6
 80026c8:	d902      	bls.n	80026d0 <NVIC_EncodePriority+0x30>
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3b03      	subs	r3, #3
 80026ce:	e000      	b.n	80026d2 <NVIC_EncodePriority+0x32>
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d4:	f04f 32ff 	mov.w	r2, #4294967295
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43da      	mvns	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	401a      	ands	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e8:	f04f 31ff 	mov.w	r1, #4294967295
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	fa01 f303 	lsl.w	r3, r1, r3
 80026f2:	43d9      	mvns	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	4313      	orrs	r3, r2
         );
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3724      	adds	r7, #36	; 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3b01      	subs	r3, #1
 8002714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002718:	d301      	bcc.n	800271e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800271a:	2301      	movs	r3, #1
 800271c:	e00f      	b.n	800273e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800271e:	4a0a      	ldr	r2, [pc, #40]	; (8002748 <SysTick_Config+0x40>)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3b01      	subs	r3, #1
 8002724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002726:	210f      	movs	r1, #15
 8002728:	f04f 30ff 	mov.w	r0, #4294967295
 800272c:	f7ff ff8e 	bl	800264c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002730:	4b05      	ldr	r3, [pc, #20]	; (8002748 <SysTick_Config+0x40>)
 8002732:	2200      	movs	r2, #0
 8002734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002736:	4b04      	ldr	r3, [pc, #16]	; (8002748 <SysTick_Config+0x40>)
 8002738:	2207      	movs	r2, #7
 800273a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	e000e010 	.word	0xe000e010

0800274c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff ff29 	bl	80025ac <__NVIC_SetPriorityGrouping>
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002762:	b580      	push	{r7, lr}
 8002764:	b086      	sub	sp, #24
 8002766:	af00      	add	r7, sp, #0
 8002768:	4603      	mov	r3, r0
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
 800276e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002774:	f7ff ff3e 	bl	80025f4 <__NVIC_GetPriorityGrouping>
 8002778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	68b9      	ldr	r1, [r7, #8]
 800277e:	6978      	ldr	r0, [r7, #20]
 8002780:	f7ff ff8e 	bl	80026a0 <NVIC_EncodePriority>
 8002784:	4602      	mov	r2, r0
 8002786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800278a:	4611      	mov	r1, r2
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff ff5d 	bl	800264c <__NVIC_SetPriority>
}
 8002792:	bf00      	nop
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	4603      	mov	r3, r0
 80027a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff31 	bl	8002610 <__NVIC_EnableIRQ>
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff ffa2 	bl	8002708 <SysTick_Config>
 80027c4:	4603      	mov	r3, r0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
	...

080027d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b089      	sub	sp, #36	; 0x24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
 80027ea:	e16b      	b.n	8002ac4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027ec:	2201      	movs	r2, #1
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	4013      	ands	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	429a      	cmp	r2, r3
 8002806:	f040 815a 	bne.w	8002abe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b01      	cmp	r3, #1
 8002814:	d005      	beq.n	8002822 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800281e:	2b02      	cmp	r3, #2
 8002820:	d130      	bne.n	8002884 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	2203      	movs	r2, #3
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002858:	2201      	movs	r2, #1
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	f003 0201 	and.w	r2, r3, #1
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	2b03      	cmp	r3, #3
 800288e:	d017      	beq.n	80028c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	2203      	movs	r2, #3
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d123      	bne.n	8002914 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	08da      	lsrs	r2, r3, #3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3208      	adds	r2, #8
 80028d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	220f      	movs	r2, #15
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	08da      	lsrs	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3208      	adds	r2, #8
 800290e:	69b9      	ldr	r1, [r7, #24]
 8002910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	2203      	movs	r2, #3
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 0203 	and.w	r2, r3, #3
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80b4 	beq.w	8002abe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	4b60      	ldr	r3, [pc, #384]	; (8002adc <HAL_GPIO_Init+0x30c>)
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	4a5f      	ldr	r2, [pc, #380]	; (8002adc <HAL_GPIO_Init+0x30c>)
 8002960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002964:	6453      	str	r3, [r2, #68]	; 0x44
 8002966:	4b5d      	ldr	r3, [pc, #372]	; (8002adc <HAL_GPIO_Init+0x30c>)
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002972:	4a5b      	ldr	r2, [pc, #364]	; (8002ae0 <HAL_GPIO_Init+0x310>)
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	089b      	lsrs	r3, r3, #2
 8002978:	3302      	adds	r3, #2
 800297a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	220f      	movs	r2, #15
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a52      	ldr	r2, [pc, #328]	; (8002ae4 <HAL_GPIO_Init+0x314>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d02b      	beq.n	80029f6 <HAL_GPIO_Init+0x226>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a51      	ldr	r2, [pc, #324]	; (8002ae8 <HAL_GPIO_Init+0x318>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d025      	beq.n	80029f2 <HAL_GPIO_Init+0x222>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a50      	ldr	r2, [pc, #320]	; (8002aec <HAL_GPIO_Init+0x31c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01f      	beq.n	80029ee <HAL_GPIO_Init+0x21e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a4f      	ldr	r2, [pc, #316]	; (8002af0 <HAL_GPIO_Init+0x320>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d019      	beq.n	80029ea <HAL_GPIO_Init+0x21a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a4e      	ldr	r2, [pc, #312]	; (8002af4 <HAL_GPIO_Init+0x324>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d013      	beq.n	80029e6 <HAL_GPIO_Init+0x216>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a4d      	ldr	r2, [pc, #308]	; (8002af8 <HAL_GPIO_Init+0x328>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00d      	beq.n	80029e2 <HAL_GPIO_Init+0x212>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a4c      	ldr	r2, [pc, #304]	; (8002afc <HAL_GPIO_Init+0x32c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d007      	beq.n	80029de <HAL_GPIO_Init+0x20e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a4b      	ldr	r2, [pc, #300]	; (8002b00 <HAL_GPIO_Init+0x330>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d101      	bne.n	80029da <HAL_GPIO_Init+0x20a>
 80029d6:	2307      	movs	r3, #7
 80029d8:	e00e      	b.n	80029f8 <HAL_GPIO_Init+0x228>
 80029da:	2308      	movs	r3, #8
 80029dc:	e00c      	b.n	80029f8 <HAL_GPIO_Init+0x228>
 80029de:	2306      	movs	r3, #6
 80029e0:	e00a      	b.n	80029f8 <HAL_GPIO_Init+0x228>
 80029e2:	2305      	movs	r3, #5
 80029e4:	e008      	b.n	80029f8 <HAL_GPIO_Init+0x228>
 80029e6:	2304      	movs	r3, #4
 80029e8:	e006      	b.n	80029f8 <HAL_GPIO_Init+0x228>
 80029ea:	2303      	movs	r3, #3
 80029ec:	e004      	b.n	80029f8 <HAL_GPIO_Init+0x228>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e002      	b.n	80029f8 <HAL_GPIO_Init+0x228>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <HAL_GPIO_Init+0x228>
 80029f6:	2300      	movs	r3, #0
 80029f8:	69fa      	ldr	r2, [r7, #28]
 80029fa:	f002 0203 	and.w	r2, r2, #3
 80029fe:	0092      	lsls	r2, r2, #2
 8002a00:	4093      	lsls	r3, r2
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a08:	4935      	ldr	r1, [pc, #212]	; (8002ae0 <HAL_GPIO_Init+0x310>)
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	089b      	lsrs	r3, r3, #2
 8002a0e:	3302      	adds	r3, #2
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a16:	4b3b      	ldr	r3, [pc, #236]	; (8002b04 <HAL_GPIO_Init+0x334>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a3a:	4a32      	ldr	r2, [pc, #200]	; (8002b04 <HAL_GPIO_Init+0x334>)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a40:	4b30      	ldr	r3, [pc, #192]	; (8002b04 <HAL_GPIO_Init+0x334>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a64:	4a27      	ldr	r2, [pc, #156]	; (8002b04 <HAL_GPIO_Init+0x334>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a6a:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <HAL_GPIO_Init+0x334>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a8e:	4a1d      	ldr	r2, [pc, #116]	; (8002b04 <HAL_GPIO_Init+0x334>)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a94:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <HAL_GPIO_Init+0x334>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ab8:	4a12      	ldr	r2, [pc, #72]	; (8002b04 <HAL_GPIO_Init+0x334>)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	61fb      	str	r3, [r7, #28]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	2b0f      	cmp	r3, #15
 8002ac8:	f67f ae90 	bls.w	80027ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	3724      	adds	r7, #36	; 0x24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40013800 	.word	0x40013800
 8002ae4:	40020000 	.word	0x40020000
 8002ae8:	40020400 	.word	0x40020400
 8002aec:	40020800 	.word	0x40020800
 8002af0:	40020c00 	.word	0x40020c00
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40021400 	.word	0x40021400
 8002afc:	40021800 	.word	0x40021800
 8002b00:	40021c00 	.word	0x40021c00
 8002b04:	40013c00 	.word	0x40013c00

08002b08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	887b      	ldrh	r3, [r7, #2]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b20:	2301      	movs	r3, #1
 8002b22:	73fb      	strb	r3, [r7, #15]
 8002b24:	e001      	b.n	8002b2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b26:	2300      	movs	r3, #0
 8002b28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	807b      	strh	r3, [r7, #2]
 8002b44:	4613      	mov	r3, r2
 8002b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b48:	787b      	ldrb	r3, [r7, #1]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b4e:	887a      	ldrh	r2, [r7, #2]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b54:	e003      	b.n	8002b5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b56:	887b      	ldrh	r3, [r7, #2]
 8002b58:	041a      	lsls	r2, r3, #16
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	619a      	str	r2, [r3, #24]
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
	...

08002b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e12b      	b.n	8002dd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d106      	bne.n	8002b98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff faf6 	bl	8002184 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2224      	movs	r2, #36	; 0x24
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0201 	bic.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bd0:	f002 fe78 	bl	80058c4 <HAL_RCC_GetPCLK1Freq>
 8002bd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	4a81      	ldr	r2, [pc, #516]	; (8002de0 <HAL_I2C_Init+0x274>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d807      	bhi.n	8002bf0 <HAL_I2C_Init+0x84>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4a80      	ldr	r2, [pc, #512]	; (8002de4 <HAL_I2C_Init+0x278>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	bf94      	ite	ls
 8002be8:	2301      	movls	r3, #1
 8002bea:	2300      	movhi	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	e006      	b.n	8002bfe <HAL_I2C_Init+0x92>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4a7d      	ldr	r2, [pc, #500]	; (8002de8 <HAL_I2C_Init+0x27c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	bf94      	ite	ls
 8002bf8:	2301      	movls	r3, #1
 8002bfa:	2300      	movhi	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e0e7      	b.n	8002dd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4a78      	ldr	r2, [pc, #480]	; (8002dec <HAL_I2C_Init+0x280>)
 8002c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0e:	0c9b      	lsrs	r3, r3, #18
 8002c10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4a6a      	ldr	r2, [pc, #424]	; (8002de0 <HAL_I2C_Init+0x274>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d802      	bhi.n	8002c40 <HAL_I2C_Init+0xd4>
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	e009      	b.n	8002c54 <HAL_I2C_Init+0xe8>
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	4a69      	ldr	r2, [pc, #420]	; (8002df0 <HAL_I2C_Init+0x284>)
 8002c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c50:	099b      	lsrs	r3, r3, #6
 8002c52:	3301      	adds	r3, #1
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	495c      	ldr	r1, [pc, #368]	; (8002de0 <HAL_I2C_Init+0x274>)
 8002c70:	428b      	cmp	r3, r1
 8002c72:	d819      	bhi.n	8002ca8 <HAL_I2C_Init+0x13c>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	1e59      	subs	r1, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c82:	1c59      	adds	r1, r3, #1
 8002c84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c88:	400b      	ands	r3, r1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_I2C_Init+0x138>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1e59      	subs	r1, r3, #1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca2:	e051      	b.n	8002d48 <HAL_I2C_Init+0x1dc>
 8002ca4:	2304      	movs	r3, #4
 8002ca6:	e04f      	b.n	8002d48 <HAL_I2C_Init+0x1dc>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d111      	bne.n	8002cd4 <HAL_I2C_Init+0x168>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1e58      	subs	r0, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6859      	ldr	r1, [r3, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	440b      	add	r3, r1
 8002cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	bf0c      	ite	eq
 8002ccc:	2301      	moveq	r3, #1
 8002cce:	2300      	movne	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	e012      	b.n	8002cfa <HAL_I2C_Init+0x18e>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	1e58      	subs	r0, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6859      	ldr	r1, [r3, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	0099      	lsls	r1, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cea:	3301      	adds	r3, #1
 8002cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_I2C_Init+0x196>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e022      	b.n	8002d48 <HAL_I2C_Init+0x1dc>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10e      	bne.n	8002d28 <HAL_I2C_Init+0x1bc>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1e58      	subs	r0, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6859      	ldr	r1, [r3, #4]
 8002d12:	460b      	mov	r3, r1
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	440b      	add	r3, r1
 8002d18:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d26:	e00f      	b.n	8002d48 <HAL_I2C_Init+0x1dc>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1e58      	subs	r0, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6859      	ldr	r1, [r3, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	0099      	lsls	r1, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d3e:	3301      	adds	r3, #1
 8002d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	6809      	ldr	r1, [r1, #0]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69da      	ldr	r2, [r3, #28]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6911      	ldr	r1, [r2, #16]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	68d2      	ldr	r2, [r2, #12]
 8002d82:	4311      	orrs	r1, r2
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0201 	orr.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	000186a0 	.word	0x000186a0
 8002de4:	001e847f 	.word	0x001e847f
 8002de8:	003d08ff 	.word	0x003d08ff
 8002dec:	431bde83 	.word	0x431bde83
 8002df0:	10624dd3 	.word	0x10624dd3

08002df4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b088      	sub	sp, #32
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	4608      	mov	r0, r1
 8002dfe:	4611      	mov	r1, r2
 8002e00:	461a      	mov	r2, r3
 8002e02:	4603      	mov	r3, r0
 8002e04:	817b      	strh	r3, [r7, #10]
 8002e06:	460b      	mov	r3, r1
 8002e08:	813b      	strh	r3, [r7, #8]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e0e:	f7ff fb9d 	bl	800254c <HAL_GetTick>
 8002e12:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b20      	cmp	r3, #32
 8002e1e:	f040 80d9 	bne.w	8002fd4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	2319      	movs	r3, #25
 8002e28:	2201      	movs	r2, #1
 8002e2a:	496d      	ldr	r1, [pc, #436]	; (8002fe0 <HAL_I2C_Mem_Write+0x1ec>)
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 fc7f 	bl	8003730 <I2C_WaitOnFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e0cc      	b.n	8002fd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_I2C_Mem_Write+0x56>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e0c5      	b.n	8002fd6 <HAL_I2C_Mem_Write+0x1e2>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d007      	beq.n	8002e70 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2221      	movs	r2, #33	; 0x21
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2240      	movs	r2, #64	; 0x40
 8002e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6a3a      	ldr	r2, [r7, #32]
 8002e9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4a4d      	ldr	r2, [pc, #308]	; (8002fe4 <HAL_I2C_Mem_Write+0x1f0>)
 8002eb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002eb2:	88f8      	ldrh	r0, [r7, #6]
 8002eb4:	893a      	ldrh	r2, [r7, #8]
 8002eb6:	8979      	ldrh	r1, [r7, #10]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	9301      	str	r3, [sp, #4]
 8002ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 fab6 	bl	8003434 <I2C_RequestMemoryWrite>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d052      	beq.n	8002f74 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e081      	b.n	8002fd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 fd00 	bl	80038dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00d      	beq.n	8002efe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d107      	bne.n	8002efa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e06b      	b.n	8002fd6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	781a      	ldrb	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d11b      	bne.n	8002f74 <HAL_I2C_Mem_Write+0x180>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d017      	beq.n	8002f74 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	781a      	ldrb	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1aa      	bne.n	8002ed2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 fcec 	bl	800395e <I2C_WaitOnBTFFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00d      	beq.n	8002fa8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d107      	bne.n	8002fa4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e016      	b.n	8002fd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	e000      	b.n	8002fd6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002fd4:	2302      	movs	r3, #2
  }
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	00100002 	.word	0x00100002
 8002fe4:	ffff0000 	.word	0xffff0000

08002fe8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08c      	sub	sp, #48	; 0x30
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	4608      	mov	r0, r1
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	817b      	strh	r3, [r7, #10]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	813b      	strh	r3, [r7, #8]
 8002ffe:	4613      	mov	r3, r2
 8003000:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003002:	f7ff faa3 	bl	800254c <HAL_GetTick>
 8003006:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b20      	cmp	r3, #32
 8003012:	f040 8208 	bne.w	8003426 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	2319      	movs	r3, #25
 800301c:	2201      	movs	r2, #1
 800301e:	497b      	ldr	r1, [pc, #492]	; (800320c <HAL_I2C_Mem_Read+0x224>)
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 fb85 	bl	8003730 <I2C_WaitOnFlagUntilTimeout>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800302c:	2302      	movs	r3, #2
 800302e:	e1fb      	b.n	8003428 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_I2C_Mem_Read+0x56>
 800303a:	2302      	movs	r3, #2
 800303c:	e1f4      	b.n	8003428 <HAL_I2C_Mem_Read+0x440>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b01      	cmp	r3, #1
 8003052:	d007      	beq.n	8003064 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003072:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2222      	movs	r2, #34	; 0x22
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2240      	movs	r2, #64	; 0x40
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800308e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003094:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4a5b      	ldr	r2, [pc, #364]	; (8003210 <HAL_I2C_Mem_Read+0x228>)
 80030a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030a6:	88f8      	ldrh	r0, [r7, #6]
 80030a8:	893a      	ldrh	r2, [r7, #8]
 80030aa:	8979      	ldrh	r1, [r7, #10]
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	9301      	str	r3, [sp, #4]
 80030b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	4603      	mov	r3, r0
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 fa52 	bl	8003560 <I2C_RequestMemoryRead>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e1b0      	b.n	8003428 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d113      	bne.n	80030f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ce:	2300      	movs	r3, #0
 80030d0:	623b      	str	r3, [r7, #32]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	623b      	str	r3, [r7, #32]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	623b      	str	r3, [r7, #32]
 80030e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	e184      	b.n	8003400 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d11b      	bne.n	8003136 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800310c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	61fb      	str	r3, [r7, #28]
 8003122:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	e164      	b.n	8003400 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313a:	2b02      	cmp	r3, #2
 800313c:	d11b      	bne.n	8003176 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800314c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800315c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800315e:	2300      	movs	r3, #0
 8003160:	61bb      	str	r3, [r7, #24]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	61bb      	str	r3, [r7, #24]
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	e144      	b.n	8003400 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800318c:	e138      	b.n	8003400 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003192:	2b03      	cmp	r3, #3
 8003194:	f200 80f1 	bhi.w	800337a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319c:	2b01      	cmp	r3, #1
 800319e:	d123      	bne.n	80031e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 fc1b 	bl	80039e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e139      	b.n	8003428 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691a      	ldr	r2, [r3, #16]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031dc:	b29b      	uxth	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031e6:	e10b      	b.n	8003400 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d14e      	bne.n	800328e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f6:	2200      	movs	r2, #0
 80031f8:	4906      	ldr	r1, [pc, #24]	; (8003214 <HAL_I2C_Mem_Read+0x22c>)
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 fa98 	bl	8003730 <I2C_WaitOnFlagUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d008      	beq.n	8003218 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e10e      	b.n	8003428 <HAL_I2C_Mem_Read+0x440>
 800320a:	bf00      	nop
 800320c:	00100002 	.word	0x00100002
 8003210:	ffff0000 	.word	0xffff0000
 8003214:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003226:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691a      	ldr	r2, [r3, #16]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003282:	b29b      	uxth	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800328c:	e0b8      	b.n	8003400 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003294:	2200      	movs	r2, #0
 8003296:	4966      	ldr	r1, [pc, #408]	; (8003430 <HAL_I2C_Mem_Read+0x448>)
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 fa49 	bl	8003730 <I2C_WaitOnFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0bf      	b.n	8003428 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f0:	2200      	movs	r2, #0
 80032f2:	494f      	ldr	r1, [pc, #316]	; (8003430 <HAL_I2C_Mem_Read+0x448>)
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 fa1b 	bl	8003730 <I2C_WaitOnFlagUntilTimeout>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e091      	b.n	8003428 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003312:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691a      	ldr	r2, [r3, #16]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	1c5a      	adds	r2, r3, #1
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333c:	b29b      	uxth	r3, r3
 800333e:	3b01      	subs	r3, #1
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003378:	e042      	b.n	8003400 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800337a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 fb2e 	bl	80039e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e04c      	b.n	8003428 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d118      	bne.n	8003400 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003404:	2b00      	cmp	r3, #0
 8003406:	f47f aec2 	bne.w	800318e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2220      	movs	r2, #32
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	e000      	b.n	8003428 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003426:	2302      	movs	r3, #2
  }
}
 8003428:	4618      	mov	r0, r3
 800342a:	3728      	adds	r7, #40	; 0x28
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	00010004 	.word	0x00010004

08003434 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af02      	add	r7, sp, #8
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	4608      	mov	r0, r1
 800343e:	4611      	mov	r1, r2
 8003440:	461a      	mov	r2, r3
 8003442:	4603      	mov	r3, r0
 8003444:	817b      	strh	r3, [r7, #10]
 8003446:	460b      	mov	r3, r1
 8003448:	813b      	strh	r3, [r7, #8]
 800344a:	4613      	mov	r3, r2
 800344c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800345c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	2200      	movs	r2, #0
 8003466:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f960 	bl	8003730 <I2C_WaitOnFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00d      	beq.n	8003492 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003484:	d103      	bne.n	800348e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800348c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e05f      	b.n	8003552 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003492:	897b      	ldrh	r3, [r7, #10]
 8003494:	b2db      	uxtb	r3, r3
 8003496:	461a      	mov	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	6a3a      	ldr	r2, [r7, #32]
 80034a6:	492d      	ldr	r1, [pc, #180]	; (800355c <I2C_RequestMemoryWrite+0x128>)
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f998 	bl	80037de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e04c      	b.n	8003552 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d0:	6a39      	ldr	r1, [r7, #32]
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 fa02 	bl	80038dc <I2C_WaitOnTXEFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00d      	beq.n	80034fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d107      	bne.n	80034f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e02b      	b.n	8003552 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d105      	bne.n	800350c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003500:	893b      	ldrh	r3, [r7, #8]
 8003502:	b2da      	uxtb	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	611a      	str	r2, [r3, #16]
 800350a:	e021      	b.n	8003550 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800350c:	893b      	ldrh	r3, [r7, #8]
 800350e:	0a1b      	lsrs	r3, r3, #8
 8003510:	b29b      	uxth	r3, r3
 8003512:	b2da      	uxtb	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800351a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351c:	6a39      	ldr	r1, [r7, #32]
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f9dc 	bl	80038dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00d      	beq.n	8003546 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	2b04      	cmp	r3, #4
 8003530:	d107      	bne.n	8003542 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003540:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e005      	b.n	8003552 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003546:	893b      	ldrh	r3, [r7, #8]
 8003548:	b2da      	uxtb	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	00010002 	.word	0x00010002

08003560 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af02      	add	r7, sp, #8
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	4608      	mov	r0, r1
 800356a:	4611      	mov	r1, r2
 800356c:	461a      	mov	r2, r3
 800356e:	4603      	mov	r3, r0
 8003570:	817b      	strh	r3, [r7, #10]
 8003572:	460b      	mov	r3, r1
 8003574:	813b      	strh	r3, [r7, #8]
 8003576:	4613      	mov	r3, r2
 8003578:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003588:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003598:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 f8c2 	bl	8003730 <I2C_WaitOnFlagUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00d      	beq.n	80035ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c0:	d103      	bne.n	80035ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e0aa      	b.n	8003724 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035ce:	897b      	ldrh	r3, [r7, #10]
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	461a      	mov	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	6a3a      	ldr	r2, [r7, #32]
 80035e2:	4952      	ldr	r1, [pc, #328]	; (800372c <I2C_RequestMemoryRead+0x1cc>)
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f8fa 	bl	80037de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e097      	b.n	8003724 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800360a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360c:	6a39      	ldr	r1, [r7, #32]
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 f964 	bl	80038dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00d      	beq.n	8003636 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	2b04      	cmp	r3, #4
 8003620:	d107      	bne.n	8003632 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003630:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e076      	b.n	8003724 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003636:	88fb      	ldrh	r3, [r7, #6]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d105      	bne.n	8003648 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800363c:	893b      	ldrh	r3, [r7, #8]
 800363e:	b2da      	uxtb	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	611a      	str	r2, [r3, #16]
 8003646:	e021      	b.n	800368c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003648:	893b      	ldrh	r3, [r7, #8]
 800364a:	0a1b      	lsrs	r3, r3, #8
 800364c:	b29b      	uxth	r3, r3
 800364e:	b2da      	uxtb	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003658:	6a39      	ldr	r1, [r7, #32]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f93e 	bl	80038dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00d      	beq.n	8003682 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	2b04      	cmp	r3, #4
 800366c:	d107      	bne.n	800367e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e050      	b.n	8003724 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003682:	893b      	ldrh	r3, [r7, #8]
 8003684:	b2da      	uxtb	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800368c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368e:	6a39      	ldr	r1, [r7, #32]
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 f923 	bl	80038dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00d      	beq.n	80036b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d107      	bne.n	80036b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e035      	b.n	8003724 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 f82b 	bl	8003730 <I2C_WaitOnFlagUntilTimeout>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00d      	beq.n	80036fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ee:	d103      	bne.n	80036f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e013      	b.n	8003724 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036fc:	897b      	ldrh	r3, [r7, #10]
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	f043 0301 	orr.w	r3, r3, #1
 8003704:	b2da      	uxtb	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	6a3a      	ldr	r2, [r7, #32]
 8003710:	4906      	ldr	r1, [pc, #24]	; (800372c <I2C_RequestMemoryRead+0x1cc>)
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 f863 	bl	80037de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	00010002 	.word	0x00010002

08003730 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	4613      	mov	r3, r2
 800373e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003740:	e025      	b.n	800378e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003748:	d021      	beq.n	800378e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800374a:	f7fe feff 	bl	800254c <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d302      	bcc.n	8003760 <I2C_WaitOnFlagUntilTimeout+0x30>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d116      	bne.n	800378e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f043 0220 	orr.w	r2, r3, #32
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e023      	b.n	80037d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	0c1b      	lsrs	r3, r3, #16
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	d10d      	bne.n	80037b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	43da      	mvns	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4013      	ands	r3, r2
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	bf0c      	ite	eq
 80037aa:	2301      	moveq	r3, #1
 80037ac:	2300      	movne	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	461a      	mov	r2, r3
 80037b2:	e00c      	b.n	80037ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	43da      	mvns	r2, r3
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4013      	ands	r3, r2
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	bf0c      	ite	eq
 80037c6:	2301      	moveq	r3, #1
 80037c8:	2300      	movne	r3, #0
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	461a      	mov	r2, r3
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d0b6      	beq.n	8003742 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
 80037ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037ec:	e051      	b.n	8003892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fc:	d123      	bne.n	8003846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003816:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f043 0204 	orr.w	r2, r3, #4
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e046      	b.n	80038d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384c:	d021      	beq.n	8003892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384e:	f7fe fe7d 	bl	800254c <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	429a      	cmp	r2, r3
 800385c:	d302      	bcc.n	8003864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d116      	bne.n	8003892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	f043 0220 	orr.w	r2, r3, #32
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e020      	b.n	80038d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	0c1b      	lsrs	r3, r3, #16
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b01      	cmp	r3, #1
 800389a:	d10c      	bne.n	80038b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	43da      	mvns	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	4013      	ands	r3, r2
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	bf14      	ite	ne
 80038ae:	2301      	movne	r3, #1
 80038b0:	2300      	moveq	r3, #0
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	e00b      	b.n	80038ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	43da      	mvns	r2, r3
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	4013      	ands	r3, r2
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf14      	ite	ne
 80038c8:	2301      	movne	r3, #1
 80038ca:	2300      	moveq	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d18d      	bne.n	80037ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038e8:	e02d      	b.n	8003946 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 f8ce 	bl	8003a8c <I2C_IsAcknowledgeFailed>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e02d      	b.n	8003956 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003900:	d021      	beq.n	8003946 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003902:	f7fe fe23 	bl	800254c <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	429a      	cmp	r2, r3
 8003910:	d302      	bcc.n	8003918 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d116      	bne.n	8003946 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2220      	movs	r2, #32
 8003922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f043 0220 	orr.w	r2, r3, #32
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e007      	b.n	8003956 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003950:	2b80      	cmp	r3, #128	; 0x80
 8003952:	d1ca      	bne.n	80038ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	60f8      	str	r0, [r7, #12]
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800396a:	e02d      	b.n	80039c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 f88d 	bl	8003a8c <I2C_IsAcknowledgeFailed>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e02d      	b.n	80039d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003982:	d021      	beq.n	80039c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003984:	f7fe fde2 	bl	800254c <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	429a      	cmp	r2, r3
 8003992:	d302      	bcc.n	800399a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d116      	bne.n	80039c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	f043 0220 	orr.w	r2, r3, #32
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e007      	b.n	80039d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d1ca      	bne.n	800396c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039ec:	e042      	b.n	8003a74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	2b10      	cmp	r3, #16
 80039fa:	d119      	bne.n	8003a30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f06f 0210 	mvn.w	r2, #16
 8003a04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e029      	b.n	8003a84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a30:	f7fe fd8c 	bl	800254c <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d302      	bcc.n	8003a46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d116      	bne.n	8003a74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	f043 0220 	orr.w	r2, r3, #32
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e007      	b.n	8003a84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7e:	2b40      	cmp	r3, #64	; 0x40
 8003a80:	d1b5      	bne.n	80039ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa2:	d11b      	bne.n	8003adc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003aac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	f043 0204 	orr.w	r2, r3, #4
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e000      	b.n	8003ade <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003aea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aec:	b08f      	sub	sp, #60	; 0x3c
 8003aee:	af0a      	add	r7, sp, #40	; 0x28
 8003af0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e10f      	b.n	8003d1c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f005 fd04 	bl	8009524 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2203      	movs	r2, #3
 8003b20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d102      	bne.n	8003b36 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f001 ffeb 	bl	8005b16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	603b      	str	r3, [r7, #0]
 8003b46:	687e      	ldr	r6, [r7, #4]
 8003b48:	466d      	mov	r5, sp
 8003b4a:	f106 0410 	add.w	r4, r6, #16
 8003b4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b5e:	1d33      	adds	r3, r6, #4
 8003b60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b62:	6838      	ldr	r0, [r7, #0]
 8003b64:	f001 fec2 	bl	80058ec <USB_CoreInit>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2202      	movs	r2, #2
 8003b72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e0d0      	b.n	8003d1c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2100      	movs	r1, #0
 8003b80:	4618      	mov	r0, r3
 8003b82:	f001 ffd9 	bl	8005b38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b86:	2300      	movs	r3, #0
 8003b88:	73fb      	strb	r3, [r7, #15]
 8003b8a:	e04a      	b.n	8003c22 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b8c:	7bfa      	ldrb	r2, [r7, #15]
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	333d      	adds	r3, #61	; 0x3d
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ba0:	7bfa      	ldrb	r2, [r7, #15]
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	4413      	add	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	333c      	adds	r3, #60	; 0x3c
 8003bb0:	7bfa      	ldrb	r2, [r7, #15]
 8003bb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003bb4:	7bfa      	ldrb	r2, [r7, #15]
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	b298      	uxth	r0, r3
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	3344      	adds	r3, #68	; 0x44
 8003bc8:	4602      	mov	r2, r0
 8003bca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003bcc:	7bfa      	ldrb	r2, [r7, #15]
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	3340      	adds	r3, #64	; 0x40
 8003bdc:	2200      	movs	r2, #0
 8003bde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003be0:	7bfa      	ldrb	r2, [r7, #15]
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	4613      	mov	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4413      	add	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	3348      	adds	r3, #72	; 0x48
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bf4:	7bfa      	ldrb	r2, [r7, #15]
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	334c      	adds	r3, #76	; 0x4c
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c08:	7bfa      	ldrb	r2, [r7, #15]
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	3354      	adds	r3, #84	; 0x54
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	73fb      	strb	r3, [r7, #15]
 8003c22:	7bfa      	ldrb	r2, [r7, #15]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d3af      	bcc.n	8003b8c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	73fb      	strb	r3, [r7, #15]
 8003c30:	e044      	b.n	8003cbc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c32:	7bfa      	ldrb	r2, [r7, #15]
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	4413      	add	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003c44:	2200      	movs	r2, #0
 8003c46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c48:	7bfa      	ldrb	r2, [r7, #15]
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003c5a:	7bfa      	ldrb	r2, [r7, #15]
 8003c5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c5e:	7bfa      	ldrb	r2, [r7, #15]
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c70:	2200      	movs	r2, #0
 8003c72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c74:	7bfa      	ldrb	r2, [r7, #15]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c8a:	7bfa      	ldrb	r2, [r7, #15]
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ca0:	7bfa      	ldrb	r2, [r7, #15]
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
 8003cbc:	7bfa      	ldrb	r2, [r7, #15]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d3b5      	bcc.n	8003c32 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	687e      	ldr	r6, [r7, #4]
 8003cce:	466d      	mov	r5, sp
 8003cd0:	f106 0410 	add.w	r4, r6, #16
 8003cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ce0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ce4:	1d33      	adds	r3, r6, #4
 8003ce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ce8:	6838      	ldr	r0, [r7, #0]
 8003cea:	f001 ff71 	bl	8005bd0 <USB_DevInit>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e00d      	b.n	8003d1c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f003 f8c0 	bl	8006e9a <USB_DevDisconnect>

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d24 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_PCD_Start+0x1c>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e020      	b.n	8003d82 <HAL_PCD_Start+0x5e>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d109      	bne.n	8003d64 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d005      	beq.n	8003d64 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f001 fec3 	bl	8005af4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f003 f870 	bl	8006e58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003d8a:	b590      	push	{r4, r7, lr}
 8003d8c:	b08d      	sub	sp, #52	; 0x34
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f003 f92e 	bl	8007002 <USB_GetMode>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f040 848a 	bne.w	80046c2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f003 f892 	bl	8006edc <USB_ReadInterrupts>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 8480 	beq.w	80046c0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	0a1b      	lsrs	r3, r3, #8
 8003dca:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f003 f87f 	bl	8006edc <USB_ReadInterrupts>
 8003dde:	4603      	mov	r3, r0
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d107      	bne.n	8003df8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695a      	ldr	r2, [r3, #20]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f002 0202 	and.w	r2, r2, #2
 8003df6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f003 f86d 	bl	8006edc <USB_ReadInterrupts>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f003 0310 	and.w	r3, r3, #16
 8003e08:	2b10      	cmp	r3, #16
 8003e0a:	d161      	bne.n	8003ed0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699a      	ldr	r2, [r3, #24]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0210 	bic.w	r2, r2, #16
 8003e1a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	f003 020f 	and.w	r2, r3, #15
 8003e28:	4613      	mov	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	4413      	add	r3, r2
 8003e38:	3304      	adds	r3, #4
 8003e3a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	0c5b      	lsrs	r3, r3, #17
 8003e40:	f003 030f 	and.w	r3, r3, #15
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d124      	bne.n	8003e92 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003e4e:	4013      	ands	r3, r2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d035      	beq.n	8003ec0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	091b      	lsrs	r3, r3, #4
 8003e5c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	461a      	mov	r2, r3
 8003e66:	6a38      	ldr	r0, [r7, #32]
 8003e68:	f002 fea4 	bl	8006bb4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	091b      	lsrs	r3, r3, #4
 8003e74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e78:	441a      	add	r2, r3
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	6a1a      	ldr	r2, [r3, #32]
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	091b      	lsrs	r3, r3, #4
 8003e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e8a:	441a      	add	r2, r3
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	621a      	str	r2, [r3, #32]
 8003e90:	e016      	b.n	8003ec0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	0c5b      	lsrs	r3, r3, #17
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	2b06      	cmp	r3, #6
 8003e9c:	d110      	bne.n	8003ec0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ea4:	2208      	movs	r2, #8
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	6a38      	ldr	r0, [r7, #32]
 8003eaa:	f002 fe83 	bl	8006bb4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	6a1a      	ldr	r2, [r3, #32]
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	091b      	lsrs	r3, r3, #4
 8003eb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003eba:	441a      	add	r2, r3
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699a      	ldr	r2, [r3, #24]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0210 	orr.w	r2, r2, #16
 8003ece:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f003 f801 	bl	8006edc <USB_ReadInterrupts>
 8003eda:	4603      	mov	r3, r0
 8003edc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ee0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ee4:	f040 80a7 	bne.w	8004036 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f003 f806 	bl	8006f02 <USB_ReadDevAllOutEpInterrupt>
 8003ef6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003ef8:	e099      	b.n	800402e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 808e 	beq.w	8004022 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	4611      	mov	r1, r2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f003 f82a 	bl	8006f6a <USB_ReadDevOutEPInterrupt>
 8003f16:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00c      	beq.n	8003f3c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2e:	461a      	mov	r2, r3
 8003f30:	2301      	movs	r3, #1
 8003f32:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003f34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fec2 	bl	8004cc0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00c      	beq.n	8003f60 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f52:	461a      	mov	r2, r3
 8003f54:	2308      	movs	r3, #8
 8003f56:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003f58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 ff98 	bl	8004e90 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f003 0310 	and.w	r3, r3, #16
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d008      	beq.n	8003f7c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f76:	461a      	mov	r2, r3
 8003f78:	2310      	movs	r3, #16
 8003f7a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d030      	beq.n	8003fe8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8e:	2b80      	cmp	r3, #128	; 0x80
 8003f90:	d109      	bne.n	8003fa6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	69fa      	ldr	r2, [r7, #28]
 8003f9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fa0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fa4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa8:	4613      	mov	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4413      	add	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3304      	adds	r3, #4
 8003fba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	78db      	ldrb	r3, [r3, #3]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d108      	bne.n	8003fd6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	4619      	mov	r1, r3
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f005 fbad 	bl	8009730 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	015a      	lsls	r2, r3, #5
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	4413      	add	r3, r2
 8003fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f003 0320 	and.w	r3, r3, #32
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d008      	beq.n	8004004 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffe:	461a      	mov	r2, r3
 8004000:	2320      	movs	r3, #32
 8004002:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d009      	beq.n	8004022 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401a:	461a      	mov	r2, r3
 800401c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004020:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	3301      	adds	r3, #1
 8004026:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402a:	085b      	lsrs	r3, r3, #1
 800402c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800402e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004030:	2b00      	cmp	r3, #0
 8004032:	f47f af62 	bne.w	8003efa <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f002 ff4e 	bl	8006edc <USB_ReadInterrupts>
 8004040:	4603      	mov	r3, r0
 8004042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004046:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800404a:	f040 80db 	bne.w	8004204 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4618      	mov	r0, r3
 8004054:	f002 ff6f 	bl	8006f36 <USB_ReadDevAllInEpInterrupt>
 8004058:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800405e:	e0cd      	b.n	80041fc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 80c2 	beq.w	80041f0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	4611      	mov	r1, r2
 8004076:	4618      	mov	r0, r3
 8004078:	f002 ff95 	bl	8006fa6 <USB_ReadDevInEPInterrupt>
 800407c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d057      	beq.n	8004138 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	2201      	movs	r2, #1
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	43db      	mvns	r3, r3
 80040a2:	69f9      	ldr	r1, [r7, #28]
 80040a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040a8:	4013      	ands	r3, r2
 80040aa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b8:	461a      	mov	r2, r3
 80040ba:	2301      	movs	r3, #1
 80040bc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d132      	bne.n	800412c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ca:	4613      	mov	r3, r2
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	440b      	add	r3, r1
 80040d4:	334c      	adds	r3, #76	; 0x4c
 80040d6:	6819      	ldr	r1, [r3, #0]
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040dc:	4613      	mov	r3, r2
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	4413      	add	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4403      	add	r3, r0
 80040e6:	3348      	adds	r3, #72	; 0x48
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4419      	add	r1, r3
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f0:	4613      	mov	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	4413      	add	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4403      	add	r3, r0
 80040fa:	334c      	adds	r3, #76	; 0x4c
 80040fc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	2b00      	cmp	r3, #0
 8004102:	d113      	bne.n	800412c <HAL_PCD_IRQHandler+0x3a2>
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004108:	4613      	mov	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	4413      	add	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	3354      	adds	r3, #84	; 0x54
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d108      	bne.n	800412c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6818      	ldr	r0, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004124:	461a      	mov	r2, r3
 8004126:	2101      	movs	r1, #1
 8004128:	f002 ff9c 	bl	8007064 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	b2db      	uxtb	r3, r3
 8004130:	4619      	mov	r1, r3
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f005 fa77 	bl	8009626 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d008      	beq.n	8004154 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414e:	461a      	mov	r2, r3
 8004150:	2308      	movs	r3, #8
 8004152:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f003 0310 	and.w	r3, r3, #16
 800415a:	2b00      	cmp	r3, #0
 800415c:	d008      	beq.n	8004170 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416a:	461a      	mov	r2, r3
 800416c:	2310      	movs	r3, #16
 800416e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004186:	461a      	mov	r2, r3
 8004188:	2340      	movs	r3, #64	; 0x40
 800418a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d023      	beq.n	80041de <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004196:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004198:	6a38      	ldr	r0, [r7, #32]
 800419a:	f001 fe7d 	bl	8005e98 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800419e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a0:	4613      	mov	r3, r2
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	4413      	add	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	3338      	adds	r3, #56	; 0x38
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	4413      	add	r3, r2
 80041ae:	3304      	adds	r3, #4
 80041b0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	78db      	ldrb	r3, [r3, #3]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d108      	bne.n	80041cc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2200      	movs	r2, #0
 80041be:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	4619      	mov	r1, r3
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f005 fac4 	bl	8009754 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d8:	461a      	mov	r2, r3
 80041da:	2302      	movs	r3, #2
 80041dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80041e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fcdb 	bl	8004ba6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	3301      	adds	r3, #1
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80041f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f8:	085b      	lsrs	r3, r3, #1
 80041fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80041fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f47f af2e 	bne.w	8004060 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4618      	mov	r0, r3
 800420a:	f002 fe67 	bl	8006edc <USB_ReadInterrupts>
 800420e:	4603      	mov	r3, r0
 8004210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004218:	d122      	bne.n	8004260 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	69fa      	ldr	r2, [r7, #28]
 8004224:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004228:	f023 0301 	bic.w	r3, r3, #1
 800422c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004234:	2b01      	cmp	r3, #1
 8004236:	d108      	bne.n	800424a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004240:	2100      	movs	r1, #0
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 fec2 	bl	8004fcc <HAL_PCDEx_LPM_Callback>
 8004248:	e002      	b.n	8004250 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f005 fa62 	bl	8009714 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695a      	ldr	r2, [r3, #20]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800425e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f002 fe39 	bl	8006edc <USB_ReadInterrupts>
 800426a:	4603      	mov	r3, r0
 800426c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004274:	d112      	bne.n	800429c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b01      	cmp	r3, #1
 8004284:	d102      	bne.n	800428c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f005 fa1e 	bl	80096c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695a      	ldr	r2, [r3, #20]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800429a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f002 fe1b 	bl	8006edc <USB_ReadInterrupts>
 80042a6:	4603      	mov	r3, r0
 80042a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b0:	f040 80b7 	bne.w	8004422 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	69fa      	ldr	r2, [r7, #28]
 80042be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042c2:	f023 0301 	bic.w	r3, r3, #1
 80042c6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2110      	movs	r1, #16
 80042ce:	4618      	mov	r0, r3
 80042d0:	f001 fde2 	bl	8005e98 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042d4:	2300      	movs	r3, #0
 80042d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042d8:	e046      	b.n	8004368 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80042da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e6:	461a      	mov	r2, r3
 80042e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042ec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80042ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042fe:	0151      	lsls	r1, r2, #5
 8004300:	69fa      	ldr	r2, [r7, #28]
 8004302:	440a      	add	r2, r1
 8004304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004308:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800430c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800430e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	4413      	add	r3, r2
 8004316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431a:	461a      	mov	r2, r3
 800431c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004320:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	4413      	add	r3, r2
 800432a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004332:	0151      	lsls	r1, r2, #5
 8004334:	69fa      	ldr	r2, [r7, #28]
 8004336:	440a      	add	r2, r1
 8004338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800433c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004340:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	4413      	add	r3, r2
 800434a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004352:	0151      	lsls	r1, r2, #5
 8004354:	69fa      	ldr	r2, [r7, #28]
 8004356:	440a      	add	r2, r1
 8004358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800435c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004360:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004364:	3301      	adds	r3, #1
 8004366:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800436e:	429a      	cmp	r2, r3
 8004370:	d3b3      	bcc.n	80042da <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	69fa      	ldr	r2, [r7, #28]
 800437c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004380:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004384:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438a:	2b00      	cmp	r3, #0
 800438c:	d016      	beq.n	80043bc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004398:	69fa      	ldr	r2, [r7, #28]
 800439a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800439e:	f043 030b 	orr.w	r3, r3, #11
 80043a2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ae:	69fa      	ldr	r2, [r7, #28]
 80043b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043b4:	f043 030b 	orr.w	r3, r3, #11
 80043b8:	6453      	str	r3, [r2, #68]	; 0x44
 80043ba:	e015      	b.n	80043e8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	69fa      	ldr	r2, [r7, #28]
 80043c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043ce:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80043d2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	69fa      	ldr	r2, [r7, #28]
 80043de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043e2:	f043 030b 	orr.w	r3, r3, #11
 80043e6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	69fa      	ldr	r2, [r7, #28]
 80043f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80043fa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6818      	ldr	r0, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800440c:	461a      	mov	r2, r3
 800440e:	f002 fe29 	bl	8007064 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695a      	ldr	r2, [r3, #20]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004420:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f002 fd58 	bl	8006edc <USB_ReadInterrupts>
 800442c:	4603      	mov	r3, r0
 800442e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004436:	d124      	bne.n	8004482 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f002 fdee 	bl	800701e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f001 fda3 	bl	8005f92 <USB_GetDevSpeed>
 800444c:	4603      	mov	r3, r0
 800444e:	461a      	mov	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681c      	ldr	r4, [r3, #0]
 8004458:	f001 fa28 	bl	80058ac <HAL_RCC_GetHCLKFreq>
 800445c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004462:	b2db      	uxtb	r3, r3
 8004464:	461a      	mov	r2, r3
 8004466:	4620      	mov	r0, r4
 8004468:	f001 faa2 	bl	80059b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f005 f902 	bl	8009676 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695a      	ldr	r2, [r3, #20]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004480:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f002 fd28 	bl	8006edc <USB_ReadInterrupts>
 800448c:	4603      	mov	r3, r0
 800448e:	f003 0308 	and.w	r3, r3, #8
 8004492:	2b08      	cmp	r3, #8
 8004494:	d10a      	bne.n	80044ac <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f005 f8df 	bl	800965a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695a      	ldr	r2, [r3, #20]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f002 0208 	and.w	r2, r2, #8
 80044aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f002 fd13 	bl	8006edc <USB_ReadInterrupts>
 80044b6:	4603      	mov	r3, r0
 80044b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044bc:	2b80      	cmp	r3, #128	; 0x80
 80044be:	d122      	bne.n	8004506 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044cc:	2301      	movs	r3, #1
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24
 80044d0:	e014      	b.n	80044fc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d6:	4613      	mov	r3, r2
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	4413      	add	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	440b      	add	r3, r1
 80044e0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d105      	bne.n	80044f6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	4619      	mov	r1, r3
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 fb27 	bl	8004b44 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	3301      	adds	r3, #1
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004502:	429a      	cmp	r2, r3
 8004504:	d3e5      	bcc.n	80044d2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f002 fce6 	bl	8006edc <USB_ReadInterrupts>
 8004510:	4603      	mov	r3, r0
 8004512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800451a:	d13b      	bne.n	8004594 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800451c:	2301      	movs	r3, #1
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
 8004520:	e02b      	b.n	800457a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	4413      	add	r3, r2
 800452a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004532:	6879      	ldr	r1, [r7, #4]
 8004534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004536:	4613      	mov	r3, r2
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	4413      	add	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	3340      	adds	r3, #64	; 0x40
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d115      	bne.n	8004574 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004548:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800454a:	2b00      	cmp	r3, #0
 800454c:	da12      	bge.n	8004574 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800454e:	6879      	ldr	r1, [r7, #4]
 8004550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004552:	4613      	mov	r3, r2
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	4413      	add	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	440b      	add	r3, r1
 800455c:	333f      	adds	r3, #63	; 0x3f
 800455e:	2201      	movs	r2, #1
 8004560:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	b2db      	uxtb	r3, r3
 8004566:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800456a:	b2db      	uxtb	r3, r3
 800456c:	4619      	mov	r1, r3
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fae8 	bl	8004b44 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	3301      	adds	r3, #1
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004580:	429a      	cmp	r2, r3
 8004582:	d3ce      	bcc.n	8004522 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695a      	ldr	r2, [r3, #20]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004592:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f002 fc9f 	bl	8006edc <USB_ReadInterrupts>
 800459e:	4603      	mov	r3, r0
 80045a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045a8:	d155      	bne.n	8004656 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045aa:	2301      	movs	r3, #1
 80045ac:	627b      	str	r3, [r7, #36]	; 0x24
 80045ae:	e045      	b.n	800463c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80045c0:	6879      	ldr	r1, [r7, #4]
 80045c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c4:	4613      	mov	r3, r2
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d12e      	bne.n	8004636 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80045d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80045da:	2b00      	cmp	r3, #0
 80045dc:	da2b      	bge.n	8004636 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80045ea:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d121      	bne.n	8004636 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f6:	4613      	mov	r3, r2
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	4413      	add	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004604:	2201      	movs	r2, #1
 8004606:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10a      	bne.n	8004636 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	69fa      	ldr	r2, [r7, #28]
 800462a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800462e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004632:	6053      	str	r3, [r2, #4]
            break;
 8004634:	e007      	b.n	8004646 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	3301      	adds	r3, #1
 800463a:	627b      	str	r3, [r7, #36]	; 0x24
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004642:	429a      	cmp	r2, r3
 8004644:	d3b4      	bcc.n	80045b0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	695a      	ldr	r2, [r3, #20]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004654:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4618      	mov	r0, r3
 800465c:	f002 fc3e 	bl	8006edc <USB_ReadInterrupts>
 8004660:	4603      	mov	r3, r0
 8004662:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800466a:	d10a      	bne.n	8004682 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f005 f883 	bl	8009778 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695a      	ldr	r2, [r3, #20]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004680:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f002 fc28 	bl	8006edc <USB_ReadInterrupts>
 800468c:	4603      	mov	r3, r0
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	2b04      	cmp	r3, #4
 8004694:	d115      	bne.n	80046c2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d002      	beq.n	80046ae <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f005 f873 	bl	8009794 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6859      	ldr	r1, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	605a      	str	r2, [r3, #4]
 80046be:	e000      	b.n	80046c2 <HAL_PCD_IRQHandler+0x938>
      return;
 80046c0:	bf00      	nop
    }
  }
}
 80046c2:	3734      	adds	r7, #52	; 0x34
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd90      	pop	{r4, r7, pc}

080046c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_PCD_SetAddress+0x1a>
 80046de:	2302      	movs	r3, #2
 80046e0:	e013      	b.n	800470a <HAL_PCD_SetAddress+0x42>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	78fa      	ldrb	r2, [r7, #3]
 80046ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	78fa      	ldrb	r2, [r7, #3]
 80046f8:	4611      	mov	r1, r2
 80046fa:	4618      	mov	r0, r3
 80046fc:	f002 fb86 	bl	8006e0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	4608      	mov	r0, r1
 800471c:	4611      	mov	r1, r2
 800471e:	461a      	mov	r2, r3
 8004720:	4603      	mov	r3, r0
 8004722:	70fb      	strb	r3, [r7, #3]
 8004724:	460b      	mov	r3, r1
 8004726:	803b      	strh	r3, [r7, #0]
 8004728:	4613      	mov	r3, r2
 800472a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800472c:	2300      	movs	r3, #0
 800472e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004730:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004734:	2b00      	cmp	r3, #0
 8004736:	da0f      	bge.n	8004758 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	f003 020f 	and.w	r2, r3, #15
 800473e:	4613      	mov	r3, r2
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	4413      	add	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	3338      	adds	r3, #56	; 0x38
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	4413      	add	r3, r2
 800474c:	3304      	adds	r3, #4
 800474e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2201      	movs	r2, #1
 8004754:	705a      	strb	r2, [r3, #1]
 8004756:	e00f      	b.n	8004778 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	f003 020f 	and.w	r2, r3, #15
 800475e:	4613      	mov	r3, r2
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	4413      	add	r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	4413      	add	r3, r2
 800476e:	3304      	adds	r3, #4
 8004770:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004778:	78fb      	ldrb	r3, [r7, #3]
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	b2da      	uxtb	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004784:	883a      	ldrh	r2, [r7, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	78ba      	ldrb	r2, [r7, #2]
 800478e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	785b      	ldrb	r3, [r3, #1]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d004      	beq.n	80047a2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80047a2:	78bb      	ldrb	r3, [r7, #2]
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d102      	bne.n	80047ae <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_PCD_EP_Open+0xaa>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e00e      	b.n	80047da <HAL_PCD_EP_Open+0xc8>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68f9      	ldr	r1, [r7, #12]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f001 fc06 	bl	8005fdc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80047d8:	7afb      	ldrb	r3, [r7, #11]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b084      	sub	sp, #16
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	460b      	mov	r3, r1
 80047ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	da0f      	bge.n	8004816 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047f6:	78fb      	ldrb	r3, [r7, #3]
 80047f8:	f003 020f 	and.w	r2, r3, #15
 80047fc:	4613      	mov	r3, r2
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	4413      	add	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	3338      	adds	r3, #56	; 0x38
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	4413      	add	r3, r2
 800480a:	3304      	adds	r3, #4
 800480c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2201      	movs	r2, #1
 8004812:	705a      	strb	r2, [r3, #1]
 8004814:	e00f      	b.n	8004836 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004816:	78fb      	ldrb	r3, [r7, #3]
 8004818:	f003 020f 	and.w	r2, r3, #15
 800481c:	4613      	mov	r3, r2
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	4413      	add	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	4413      	add	r3, r2
 800482c:	3304      	adds	r3, #4
 800482e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004836:	78fb      	ldrb	r3, [r7, #3]
 8004838:	f003 030f 	and.w	r3, r3, #15
 800483c:	b2da      	uxtb	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_PCD_EP_Close+0x6e>
 800484c:	2302      	movs	r3, #2
 800484e:	e00e      	b.n	800486e <HAL_PCD_EP_Close+0x8c>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68f9      	ldr	r1, [r7, #12]
 800485e:	4618      	mov	r0, r3
 8004860:	f001 fc44 	bl	80060ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b086      	sub	sp, #24
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	607a      	str	r2, [r7, #4]
 8004880:	603b      	str	r3, [r7, #0]
 8004882:	460b      	mov	r3, r1
 8004884:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004886:	7afb      	ldrb	r3, [r7, #11]
 8004888:	f003 020f 	and.w	r2, r3, #15
 800488c:	4613      	mov	r3, r2
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	4413      	add	r3, r2
 800489c:	3304      	adds	r3, #4
 800489e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	2200      	movs	r2, #0
 80048b0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2200      	movs	r2, #0
 80048b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048b8:	7afb      	ldrb	r3, [r7, #11]
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d102      	bne.n	80048d2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048d2:	7afb      	ldrb	r3, [r7, #11]
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d109      	bne.n	80048f0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6818      	ldr	r0, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	461a      	mov	r2, r3
 80048e8:	6979      	ldr	r1, [r7, #20]
 80048ea:	f001 ff23 	bl	8006734 <USB_EP0StartXfer>
 80048ee:	e008      	b.n	8004902 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6818      	ldr	r0, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	461a      	mov	r2, r3
 80048fc:	6979      	ldr	r1, [r7, #20]
 80048fe:	f001 fcd1 	bl	80062a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3718      	adds	r7, #24
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	f003 020f 	and.w	r2, r3, #15
 800491e:	6879      	ldr	r1, [r7, #4]
 8004920:	4613      	mov	r3, r2
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	4413      	add	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	440b      	add	r3, r1
 800492a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800492e:	681b      	ldr	r3, [r3, #0]
}
 8004930:	4618      	mov	r0, r3
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	607a      	str	r2, [r7, #4]
 8004946:	603b      	str	r3, [r7, #0]
 8004948:	460b      	mov	r3, r1
 800494a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800494c:	7afb      	ldrb	r3, [r7, #11]
 800494e:	f003 020f 	and.w	r2, r3, #15
 8004952:	4613      	mov	r3, r2
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	4413      	add	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	3338      	adds	r3, #56	; 0x38
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	3304      	adds	r3, #4
 8004962:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2200      	movs	r2, #0
 8004974:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2201      	movs	r2, #1
 800497a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800497c:	7afb      	ldrb	r3, [r7, #11]
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	b2da      	uxtb	r2, r3
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d102      	bne.n	8004996 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004996:	7afb      	ldrb	r3, [r7, #11]
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	2b00      	cmp	r3, #0
 800499e:	d109      	bne.n	80049b4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6818      	ldr	r0, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	461a      	mov	r2, r3
 80049ac:	6979      	ldr	r1, [r7, #20]
 80049ae:	f001 fec1 	bl	8006734 <USB_EP0StartXfer>
 80049b2:	e008      	b.n	80049c6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6818      	ldr	r0, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	461a      	mov	r2, r3
 80049c0:	6979      	ldr	r1, [r7, #20]
 80049c2:	f001 fc6f 	bl	80062a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	f003 020f 	and.w	r2, r3, #15
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d901      	bls.n	80049ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e050      	b.n	8004a90 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	da0f      	bge.n	8004a16 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049f6:	78fb      	ldrb	r3, [r7, #3]
 80049f8:	f003 020f 	and.w	r2, r3, #15
 80049fc:	4613      	mov	r3, r2
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	4413      	add	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	3338      	adds	r3, #56	; 0x38
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	4413      	add	r3, r2
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2201      	movs	r2, #1
 8004a12:	705a      	strb	r2, [r3, #1]
 8004a14:	e00d      	b.n	8004a32 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a16:	78fa      	ldrb	r2, [r7, #3]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	4413      	add	r3, r2
 8004a28:	3304      	adds	r3, #4
 8004a2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2201      	movs	r2, #1
 8004a36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a38:	78fb      	ldrb	r3, [r7, #3]
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	b2da      	uxtb	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d101      	bne.n	8004a52 <HAL_PCD_EP_SetStall+0x82>
 8004a4e:	2302      	movs	r3, #2
 8004a50:	e01e      	b.n	8004a90 <HAL_PCD_EP_SetStall+0xc0>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68f9      	ldr	r1, [r7, #12]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f002 f8ff 	bl	8006c64 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a66:	78fb      	ldrb	r3, [r7, #3]
 8004a68:	f003 030f 	and.w	r3, r3, #15
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10a      	bne.n	8004a86 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	b2d9      	uxtb	r1, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a80:	461a      	mov	r2, r3
 8004a82:	f002 faef 	bl	8007064 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004aa4:	78fb      	ldrb	r3, [r7, #3]
 8004aa6:	f003 020f 	and.w	r2, r3, #15
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d901      	bls.n	8004ab6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e042      	b.n	8004b3c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ab6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	da0f      	bge.n	8004ade <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004abe:	78fb      	ldrb	r3, [r7, #3]
 8004ac0:	f003 020f 	and.w	r2, r3, #15
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	4413      	add	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	3338      	adds	r3, #56	; 0x38
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	705a      	strb	r2, [r3, #1]
 8004adc:	e00f      	b.n	8004afe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ade:	78fb      	ldrb	r3, [r7, #3]
 8004ae0:	f003 020f 	and.w	r2, r3, #15
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	4413      	add	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	4413      	add	r3, r2
 8004af4:	3304      	adds	r3, #4
 8004af6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b04:	78fb      	ldrb	r3, [r7, #3]
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <HAL_PCD_EP_ClrStall+0x86>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e00e      	b.n	8004b3c <HAL_PCD_EP_ClrStall+0xa4>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68f9      	ldr	r1, [r7, #12]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f002 f907 	bl	8006d40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004b50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	da0c      	bge.n	8004b72 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	f003 020f 	and.w	r2, r3, #15
 8004b5e:	4613      	mov	r3, r2
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	4413      	add	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	3338      	adds	r3, #56	; 0x38
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	e00c      	b.n	8004b8c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b72:	78fb      	ldrb	r3, [r7, #3]
 8004b74:	f003 020f 	and.w	r2, r3, #15
 8004b78:	4613      	mov	r3, r2
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	4413      	add	r3, r2
 8004b88:	3304      	adds	r3, #4
 8004b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68f9      	ldr	r1, [r7, #12]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f001 ff26 	bl	80069e4 <USB_EPStopXfer>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004b9c:	7afb      	ldrb	r3, [r7, #11]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b08a      	sub	sp, #40	; 0x28
 8004baa:	af02      	add	r7, sp, #8
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	3338      	adds	r3, #56	; 0x38
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	4413      	add	r3, r2
 8004bca:	3304      	adds	r3, #4
 8004bcc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a1a      	ldr	r2, [r3, #32]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d901      	bls.n	8004bde <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e06c      	b.n	8004cb8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	699a      	ldr	r2, [r3, #24]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	69fa      	ldr	r2, [r7, #28]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d902      	bls.n	8004bfa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	3303      	adds	r3, #3
 8004bfe:	089b      	lsrs	r3, r3, #2
 8004c00:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c02:	e02b      	b.n	8004c5c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	699a      	ldr	r2, [r3, #24]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	69fa      	ldr	r2, [r7, #28]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d902      	bls.n	8004c20 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	3303      	adds	r3, #3
 8004c24:	089b      	lsrs	r3, r3, #2
 8004c26:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6919      	ldr	r1, [r3, #16]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	6978      	ldr	r0, [r7, #20]
 8004c40:	f001 ff7a 	bl	8006b38 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	441a      	add	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a1a      	ldr	r2, [r3, #32]
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	441a      	add	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d809      	bhi.n	8004c86 <PCD_WriteEmptyTxFifo+0xe0>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a1a      	ldr	r2, [r3, #32]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d203      	bcs.n	8004c86 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1be      	bne.n	8004c04 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d811      	bhi.n	8004cb6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	f003 030f 	and.w	r3, r3, #15
 8004c98:	2201      	movs	r2, #1
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	43db      	mvns	r3, r3
 8004cac:	6939      	ldr	r1, [r7, #16]
 8004cae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3720      	adds	r7, #32
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	333c      	adds	r3, #60	; 0x3c
 8004cd8:	3304      	adds	r3, #4
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d17b      	bne.n	8004dee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f003 0308 	and.w	r3, r3, #8
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d015      	beq.n	8004d2c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	4a61      	ldr	r2, [pc, #388]	; (8004e88 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	f240 80b9 	bls.w	8004e7c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 80b3 	beq.w	8004e7c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d22:	461a      	mov	r2, r3
 8004d24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d28:	6093      	str	r3, [r2, #8]
 8004d2a:	e0a7      	b.n	8004e7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f003 0320 	and.w	r3, r3, #32
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d009      	beq.n	8004d4a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d42:	461a      	mov	r2, r3
 8004d44:	2320      	movs	r3, #32
 8004d46:	6093      	str	r3, [r2, #8]
 8004d48:	e098      	b.n	8004e7c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f040 8093 	bne.w	8004e7c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	4a4b      	ldr	r2, [pc, #300]	; (8004e88 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d90f      	bls.n	8004d7e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00a      	beq.n	8004d7e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d74:	461a      	mov	r2, r3
 8004d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d7a:	6093      	str	r3, [r2, #8]
 8004d7c:	e07e      	b.n	8004e7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	4613      	mov	r3, r2
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	4413      	add	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	4413      	add	r3, r2
 8004d90:	3304      	adds	r3, #4
 8004d92:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	69da      	ldr	r2, [r3, #28]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	0159      	lsls	r1, r3, #5
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	440b      	add	r3, r1
 8004da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004daa:	1ad2      	subs	r2, r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d114      	bne.n	8004de0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d109      	bne.n	8004dd2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6818      	ldr	r0, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004dc8:	461a      	mov	r2, r3
 8004dca:	2101      	movs	r1, #1
 8004dcc:	f002 f94a 	bl	8007064 <USB_EP0_OutStart>
 8004dd0:	e006      	b.n	8004de0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	691a      	ldr	r2, [r3, #16]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	441a      	add	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	4619      	mov	r1, r3
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f004 fc02 	bl	80095f0 <HAL_PCD_DataOutStageCallback>
 8004dec:	e046      	b.n	8004e7c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	4a26      	ldr	r2, [pc, #152]	; (8004e8c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d124      	bne.n	8004e40 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e12:	6093      	str	r3, [r2, #8]
 8004e14:	e032      	b.n	8004e7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	f003 0320 	and.w	r3, r3, #32
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d008      	beq.n	8004e32 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	2320      	movs	r3, #32
 8004e30:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	4619      	mov	r1, r3
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f004 fbd9 	bl	80095f0 <HAL_PCD_DataOutStageCallback>
 8004e3e:	e01d      	b.n	8004e7c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d114      	bne.n	8004e70 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	4413      	add	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	440b      	add	r3, r1
 8004e54:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d108      	bne.n	8004e70 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6818      	ldr	r0, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e68:	461a      	mov	r2, r3
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	f002 f8fa 	bl	8007064 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	4619      	mov	r1, r3
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f004 fbba 	bl	80095f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3720      	adds	r7, #32
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	4f54300a 	.word	0x4f54300a
 8004e8c:	4f54310a 	.word	0x4f54310a

08004e90 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	333c      	adds	r3, #60	; 0x3c
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4a15      	ldr	r2, [pc, #84]	; (8004f18 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d90e      	bls.n	8004ee4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d009      	beq.n	8004ee4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004edc:	461a      	mov	r2, r3
 8004ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ee2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f004 fb71 	bl	80095cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4a0a      	ldr	r2, [pc, #40]	; (8004f18 <PCD_EP_OutSetupPacket_int+0x88>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d90c      	bls.n	8004f0c <PCD_EP_OutSetupPacket_int+0x7c>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d108      	bne.n	8004f0c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6818      	ldr	r0, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f04:	461a      	mov	r2, r3
 8004f06:	2101      	movs	r1, #1
 8004f08:	f002 f8ac 	bl	8007064 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3718      	adds	r7, #24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	4f54300a 	.word	0x4f54300a

08004f1c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	70fb      	strb	r3, [r7, #3]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004f34:	78fb      	ldrb	r3, [r7, #3]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d107      	bne.n	8004f4a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004f3a:	883b      	ldrh	r3, [r7, #0]
 8004f3c:	0419      	lsls	r1, r3, #16
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	629a      	str	r2, [r3, #40]	; 0x28
 8004f48:	e028      	b.n	8004f9c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f50:	0c1b      	lsrs	r3, r3, #16
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	4413      	add	r3, r2
 8004f56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f58:	2300      	movs	r3, #0
 8004f5a:	73fb      	strb	r3, [r7, #15]
 8004f5c:	e00d      	b.n	8004f7a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	7bfb      	ldrb	r3, [r7, #15]
 8004f64:	3340      	adds	r3, #64	; 0x40
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	0c1b      	lsrs	r3, r3, #16
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	4413      	add	r3, r2
 8004f72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
 8004f76:	3301      	adds	r3, #1
 8004f78:	73fb      	strb	r3, [r7, #15]
 8004f7a:	7bfa      	ldrb	r2, [r7, #15]
 8004f7c:	78fb      	ldrb	r3, [r7, #3]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d3ec      	bcc.n	8004f5e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004f84:	883b      	ldrh	r3, [r7, #0]
 8004f86:	0418      	lsls	r0, r3, #16
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6819      	ldr	r1, [r3, #0]
 8004f8c:	78fb      	ldrb	r3, [r7, #3]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	4302      	orrs	r2, r0
 8004f94:	3340      	adds	r3, #64	; 0x40
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	440b      	add	r3, r1
 8004f9a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	887a      	ldrh	r2, [r7, #2]
 8004fbc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e267      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d075      	beq.n	80050ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005002:	4b88      	ldr	r3, [pc, #544]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 030c 	and.w	r3, r3, #12
 800500a:	2b04      	cmp	r3, #4
 800500c:	d00c      	beq.n	8005028 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800500e:	4b85      	ldr	r3, [pc, #532]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005016:	2b08      	cmp	r3, #8
 8005018:	d112      	bne.n	8005040 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800501a:	4b82      	ldr	r3, [pc, #520]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005026:	d10b      	bne.n	8005040 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005028:	4b7e      	ldr	r3, [pc, #504]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d05b      	beq.n	80050ec <HAL_RCC_OscConfig+0x108>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d157      	bne.n	80050ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e242      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005048:	d106      	bne.n	8005058 <HAL_RCC_OscConfig+0x74>
 800504a:	4b76      	ldr	r3, [pc, #472]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a75      	ldr	r2, [pc, #468]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 8005050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	e01d      	b.n	8005094 <HAL_RCC_OscConfig+0xb0>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005060:	d10c      	bne.n	800507c <HAL_RCC_OscConfig+0x98>
 8005062:	4b70      	ldr	r3, [pc, #448]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a6f      	ldr	r2, [pc, #444]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 8005068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	4b6d      	ldr	r3, [pc, #436]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a6c      	ldr	r2, [pc, #432]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 8005074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	e00b      	b.n	8005094 <HAL_RCC_OscConfig+0xb0>
 800507c:	4b69      	ldr	r3, [pc, #420]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a68      	ldr	r2, [pc, #416]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 8005082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	4b66      	ldr	r3, [pc, #408]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a65      	ldr	r2, [pc, #404]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 800508e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d013      	beq.n	80050c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509c:	f7fd fa56 	bl	800254c <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050a4:	f7fd fa52 	bl	800254c <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b64      	cmp	r3, #100	; 0x64
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e207      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050b6:	4b5b      	ldr	r3, [pc, #364]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0f0      	beq.n	80050a4 <HAL_RCC_OscConfig+0xc0>
 80050c2:	e014      	b.n	80050ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c4:	f7fd fa42 	bl	800254c <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050cc:	f7fd fa3e 	bl	800254c <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b64      	cmp	r3, #100	; 0x64
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e1f3      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050de:	4b51      	ldr	r3, [pc, #324]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1f0      	bne.n	80050cc <HAL_RCC_OscConfig+0xe8>
 80050ea:	e000      	b.n	80050ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d063      	beq.n	80051c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050fa:	4b4a      	ldr	r3, [pc, #296]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 030c 	and.w	r3, r3, #12
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00b      	beq.n	800511e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005106:	4b47      	ldr	r3, [pc, #284]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800510e:	2b08      	cmp	r3, #8
 8005110:	d11c      	bne.n	800514c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005112:	4b44      	ldr	r3, [pc, #272]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d116      	bne.n	800514c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800511e:	4b41      	ldr	r3, [pc, #260]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d005      	beq.n	8005136 <HAL_RCC_OscConfig+0x152>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d001      	beq.n	8005136 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e1c7      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005136:	4b3b      	ldr	r3, [pc, #236]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	4937      	ldr	r1, [pc, #220]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 8005146:	4313      	orrs	r3, r2
 8005148:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800514a:	e03a      	b.n	80051c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d020      	beq.n	8005196 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005154:	4b34      	ldr	r3, [pc, #208]	; (8005228 <HAL_RCC_OscConfig+0x244>)
 8005156:	2201      	movs	r2, #1
 8005158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515a:	f7fd f9f7 	bl	800254c <HAL_GetTick>
 800515e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005160:	e008      	b.n	8005174 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005162:	f7fd f9f3 	bl	800254c <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d901      	bls.n	8005174 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e1a8      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005174:	4b2b      	ldr	r3, [pc, #172]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0f0      	beq.n	8005162 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005180:	4b28      	ldr	r3, [pc, #160]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	00db      	lsls	r3, r3, #3
 800518e:	4925      	ldr	r1, [pc, #148]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 8005190:	4313      	orrs	r3, r2
 8005192:	600b      	str	r3, [r1, #0]
 8005194:	e015      	b.n	80051c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005196:	4b24      	ldr	r3, [pc, #144]	; (8005228 <HAL_RCC_OscConfig+0x244>)
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519c:	f7fd f9d6 	bl	800254c <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051a4:	f7fd f9d2 	bl	800254c <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e187      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051b6:	4b1b      	ldr	r3, [pc, #108]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1f0      	bne.n	80051a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d036      	beq.n	800523c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d016      	beq.n	8005204 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051d6:	4b15      	ldr	r3, [pc, #84]	; (800522c <HAL_RCC_OscConfig+0x248>)
 80051d8:	2201      	movs	r2, #1
 80051da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051dc:	f7fd f9b6 	bl	800254c <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051e4:	f7fd f9b2 	bl	800254c <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e167      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051f6:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <HAL_RCC_OscConfig+0x240>)
 80051f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0f0      	beq.n	80051e4 <HAL_RCC_OscConfig+0x200>
 8005202:	e01b      	b.n	800523c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005204:	4b09      	ldr	r3, [pc, #36]	; (800522c <HAL_RCC_OscConfig+0x248>)
 8005206:	2200      	movs	r2, #0
 8005208:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800520a:	f7fd f99f 	bl	800254c <HAL_GetTick>
 800520e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005210:	e00e      	b.n	8005230 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005212:	f7fd f99b 	bl	800254c <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b02      	cmp	r3, #2
 800521e:	d907      	bls.n	8005230 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e150      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
 8005224:	40023800 	.word	0x40023800
 8005228:	42470000 	.word	0x42470000
 800522c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005230:	4b88      	ldr	r3, [pc, #544]	; (8005454 <HAL_RCC_OscConfig+0x470>)
 8005232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1ea      	bne.n	8005212 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 8097 	beq.w	8005378 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800524a:	2300      	movs	r3, #0
 800524c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800524e:	4b81      	ldr	r3, [pc, #516]	; (8005454 <HAL_RCC_OscConfig+0x470>)
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10f      	bne.n	800527a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800525a:	2300      	movs	r3, #0
 800525c:	60bb      	str	r3, [r7, #8]
 800525e:	4b7d      	ldr	r3, [pc, #500]	; (8005454 <HAL_RCC_OscConfig+0x470>)
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	4a7c      	ldr	r2, [pc, #496]	; (8005454 <HAL_RCC_OscConfig+0x470>)
 8005264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005268:	6413      	str	r3, [r2, #64]	; 0x40
 800526a:	4b7a      	ldr	r3, [pc, #488]	; (8005454 <HAL_RCC_OscConfig+0x470>)
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005272:	60bb      	str	r3, [r7, #8]
 8005274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005276:	2301      	movs	r3, #1
 8005278:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800527a:	4b77      	ldr	r3, [pc, #476]	; (8005458 <HAL_RCC_OscConfig+0x474>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005282:	2b00      	cmp	r3, #0
 8005284:	d118      	bne.n	80052b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005286:	4b74      	ldr	r3, [pc, #464]	; (8005458 <HAL_RCC_OscConfig+0x474>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a73      	ldr	r2, [pc, #460]	; (8005458 <HAL_RCC_OscConfig+0x474>)
 800528c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005290:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005292:	f7fd f95b 	bl	800254c <HAL_GetTick>
 8005296:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005298:	e008      	b.n	80052ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800529a:	f7fd f957 	bl	800254c <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d901      	bls.n	80052ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e10c      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ac:	4b6a      	ldr	r3, [pc, #424]	; (8005458 <HAL_RCC_OscConfig+0x474>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0f0      	beq.n	800529a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d106      	bne.n	80052ce <HAL_RCC_OscConfig+0x2ea>
 80052c0:	4b64      	ldr	r3, [pc, #400]	; (8005454 <HAL_RCC_OscConfig+0x470>)
 80052c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c4:	4a63      	ldr	r2, [pc, #396]	; (8005454 <HAL_RCC_OscConfig+0x470>)
 80052c6:	f043 0301 	orr.w	r3, r3, #1
 80052ca:	6713      	str	r3, [r2, #112]	; 0x70
 80052cc:	e01c      	b.n	8005308 <HAL_RCC_OscConfig+0x324>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	2b05      	cmp	r3, #5
 80052d4:	d10c      	bne.n	80052f0 <HAL_RCC_OscConfig+0x30c>
 80052d6:	4b5f      	ldr	r3, [pc, #380]	; (8005454 <HAL_RCC_OscConfig+0x470>)
 80052d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052da:	4a5e      	ldr	r2, [pc, #376]	; (8005454 <HAL_RCC_OscConfig+0x470>)
 80052dc:	f043 0304 	orr.w	r3, r3, #4
 80052e0:	6713      	str	r3, [r2, #112]	; 0x70
 80052e2:	4b5c      	ldr	r3, [pc, #368]	; (8005454 <HAL_RCC_OscConfig+0x470>)
 80052e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e6:	4a5b      	ldr	r2, [pc, #364]	; (8005454 <HAL_RCC_OscConfig+0x470>)
 80052e8:	f043 0301 	orr.w	r3, r3, #1
 80052ec:	6713      	str	r3, [r2, #112]	; 0x70
 80052ee:	e00b      	b.n	8005308 <HAL_RCC_OscConfig+0x324>
 80052f0:	4b58      	ldr	r3, [pc, #352]	; (8005454 <HAL_RCC_OscConfig+0x470>)
 80052f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f4:	4a57      	ldr	r2, [pc, #348]	; (8005454 <HAL_RCC_OscConfig+0x470>)
 80052f6:	f023 0301 	bic.w	r3, r3, #1
 80052fa:	6713      	str	r3, [r2, #112]	; 0x70
 80052fc:	4b55      	ldr	r3, [pc, #340]	; (8005454 <HAL_RCC_OscConfig+0x470>)
 80052fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005300:	4a54      	ldr	r2, [pc, #336]	; (8005454 <HAL_RCC_OscConfig+0x470>)
 8005302:	f023 0304 	bic.w	r3, r3, #4
 8005306:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d015      	beq.n	800533c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005310:	f7fd f91c 	bl	800254c <HAL_GetTick>
 8005314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005316:	e00a      	b.n	800532e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005318:	f7fd f918 	bl	800254c <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	f241 3288 	movw	r2, #5000	; 0x1388
 8005326:	4293      	cmp	r3, r2
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e0cb      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800532e:	4b49      	ldr	r3, [pc, #292]	; (8005454 <HAL_RCC_OscConfig+0x470>)
 8005330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0ee      	beq.n	8005318 <HAL_RCC_OscConfig+0x334>
 800533a:	e014      	b.n	8005366 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800533c:	f7fd f906 	bl	800254c <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005342:	e00a      	b.n	800535a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005344:	f7fd f902 	bl	800254c <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005352:	4293      	cmp	r3, r2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e0b5      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800535a:	4b3e      	ldr	r3, [pc, #248]	; (8005454 <HAL_RCC_OscConfig+0x470>)
 800535c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1ee      	bne.n	8005344 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005366:	7dfb      	ldrb	r3, [r7, #23]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d105      	bne.n	8005378 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800536c:	4b39      	ldr	r3, [pc, #228]	; (8005454 <HAL_RCC_OscConfig+0x470>)
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	4a38      	ldr	r2, [pc, #224]	; (8005454 <HAL_RCC_OscConfig+0x470>)
 8005372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005376:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 80a1 	beq.w	80054c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005382:	4b34      	ldr	r3, [pc, #208]	; (8005454 <HAL_RCC_OscConfig+0x470>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 030c 	and.w	r3, r3, #12
 800538a:	2b08      	cmp	r3, #8
 800538c:	d05c      	beq.n	8005448 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	2b02      	cmp	r3, #2
 8005394:	d141      	bne.n	800541a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005396:	4b31      	ldr	r3, [pc, #196]	; (800545c <HAL_RCC_OscConfig+0x478>)
 8005398:	2200      	movs	r2, #0
 800539a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800539c:	f7fd f8d6 	bl	800254c <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053a4:	f7fd f8d2 	bl	800254c <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e087      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053b6:	4b27      	ldr	r3, [pc, #156]	; (8005454 <HAL_RCC_OscConfig+0x470>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1f0      	bne.n	80053a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	69da      	ldr	r2, [r3, #28]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	019b      	lsls	r3, r3, #6
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d8:	085b      	lsrs	r3, r3, #1
 80053da:	3b01      	subs	r3, #1
 80053dc:	041b      	lsls	r3, r3, #16
 80053de:	431a      	orrs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	061b      	lsls	r3, r3, #24
 80053e6:	491b      	ldr	r1, [pc, #108]	; (8005454 <HAL_RCC_OscConfig+0x470>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053ec:	4b1b      	ldr	r3, [pc, #108]	; (800545c <HAL_RCC_OscConfig+0x478>)
 80053ee:	2201      	movs	r2, #1
 80053f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f2:	f7fd f8ab 	bl	800254c <HAL_GetTick>
 80053f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053f8:	e008      	b.n	800540c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053fa:	f7fd f8a7 	bl	800254c <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d901      	bls.n	800540c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e05c      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800540c:	4b11      	ldr	r3, [pc, #68]	; (8005454 <HAL_RCC_OscConfig+0x470>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0f0      	beq.n	80053fa <HAL_RCC_OscConfig+0x416>
 8005418:	e054      	b.n	80054c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800541a:	4b10      	ldr	r3, [pc, #64]	; (800545c <HAL_RCC_OscConfig+0x478>)
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005420:	f7fd f894 	bl	800254c <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005428:	f7fd f890 	bl	800254c <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e045      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800543a:	4b06      	ldr	r3, [pc, #24]	; (8005454 <HAL_RCC_OscConfig+0x470>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1f0      	bne.n	8005428 <HAL_RCC_OscConfig+0x444>
 8005446:	e03d      	b.n	80054c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d107      	bne.n	8005460 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e038      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
 8005454:	40023800 	.word	0x40023800
 8005458:	40007000 	.word	0x40007000
 800545c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005460:	4b1b      	ldr	r3, [pc, #108]	; (80054d0 <HAL_RCC_OscConfig+0x4ec>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d028      	beq.n	80054c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005478:	429a      	cmp	r2, r3
 800547a:	d121      	bne.n	80054c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005486:	429a      	cmp	r2, r3
 8005488:	d11a      	bne.n	80054c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005490:	4013      	ands	r3, r2
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005496:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005498:	4293      	cmp	r3, r2
 800549a:	d111      	bne.n	80054c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a6:	085b      	lsrs	r3, r3, #1
 80054a8:	3b01      	subs	r3, #1
 80054aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d107      	bne.n	80054c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054bc:	429a      	cmp	r2, r3
 80054be:	d001      	beq.n	80054c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e000      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	40023800 	.word	0x40023800

080054d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e0cc      	b.n	8005682 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054e8:	4b68      	ldr	r3, [pc, #416]	; (800568c <HAL_RCC_ClockConfig+0x1b8>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0307 	and.w	r3, r3, #7
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d90c      	bls.n	8005510 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054f6:	4b65      	ldr	r3, [pc, #404]	; (800568c <HAL_RCC_ClockConfig+0x1b8>)
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	b2d2      	uxtb	r2, r2
 80054fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054fe:	4b63      	ldr	r3, [pc, #396]	; (800568c <HAL_RCC_ClockConfig+0x1b8>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	429a      	cmp	r2, r3
 800550a:	d001      	beq.n	8005510 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e0b8      	b.n	8005682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d020      	beq.n	800555e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	d005      	beq.n	8005534 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005528:	4b59      	ldr	r3, [pc, #356]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	4a58      	ldr	r2, [pc, #352]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 800552e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005532:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0308 	and.w	r3, r3, #8
 800553c:	2b00      	cmp	r3, #0
 800553e:	d005      	beq.n	800554c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005540:	4b53      	ldr	r3, [pc, #332]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	4a52      	ldr	r2, [pc, #328]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 8005546:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800554a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800554c:	4b50      	ldr	r3, [pc, #320]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	494d      	ldr	r1, [pc, #308]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 800555a:	4313      	orrs	r3, r2
 800555c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d044      	beq.n	80055f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d107      	bne.n	8005582 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005572:	4b47      	ldr	r3, [pc, #284]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d119      	bne.n	80055b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e07f      	b.n	8005682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b02      	cmp	r3, #2
 8005588:	d003      	beq.n	8005592 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800558e:	2b03      	cmp	r3, #3
 8005590:	d107      	bne.n	80055a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005592:	4b3f      	ldr	r3, [pc, #252]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d109      	bne.n	80055b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e06f      	b.n	8005682 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055a2:	4b3b      	ldr	r3, [pc, #236]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e067      	b.n	8005682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055b2:	4b37      	ldr	r3, [pc, #220]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f023 0203 	bic.w	r2, r3, #3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	4934      	ldr	r1, [pc, #208]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055c4:	f7fc ffc2 	bl	800254c <HAL_GetTick>
 80055c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ca:	e00a      	b.n	80055e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055cc:	f7fc ffbe 	bl	800254c <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055da:	4293      	cmp	r3, r2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e04f      	b.n	8005682 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e2:	4b2b      	ldr	r3, [pc, #172]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 020c 	and.w	r2, r3, #12
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d1eb      	bne.n	80055cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055f4:	4b25      	ldr	r3, [pc, #148]	; (800568c <HAL_RCC_ClockConfig+0x1b8>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d20c      	bcs.n	800561c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005602:	4b22      	ldr	r3, [pc, #136]	; (800568c <HAL_RCC_ClockConfig+0x1b8>)
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	b2d2      	uxtb	r2, r2
 8005608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800560a:	4b20      	ldr	r3, [pc, #128]	; (800568c <HAL_RCC_ClockConfig+0x1b8>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	429a      	cmp	r2, r3
 8005616:	d001      	beq.n	800561c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e032      	b.n	8005682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b00      	cmp	r3, #0
 8005626:	d008      	beq.n	800563a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005628:	4b19      	ldr	r3, [pc, #100]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	4916      	ldr	r1, [pc, #88]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 8005636:	4313      	orrs	r3, r2
 8005638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d009      	beq.n	800565a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005646:	4b12      	ldr	r3, [pc, #72]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	490e      	ldr	r1, [pc, #56]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 8005656:	4313      	orrs	r3, r2
 8005658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800565a:	f000 f821 	bl	80056a0 <HAL_RCC_GetSysClockFreq>
 800565e:	4602      	mov	r2, r0
 8005660:	4b0b      	ldr	r3, [pc, #44]	; (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	091b      	lsrs	r3, r3, #4
 8005666:	f003 030f 	and.w	r3, r3, #15
 800566a:	490a      	ldr	r1, [pc, #40]	; (8005694 <HAL_RCC_ClockConfig+0x1c0>)
 800566c:	5ccb      	ldrb	r3, [r1, r3]
 800566e:	fa22 f303 	lsr.w	r3, r2, r3
 8005672:	4a09      	ldr	r2, [pc, #36]	; (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 8005674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005676:	4b09      	ldr	r3, [pc, #36]	; (800569c <HAL_RCC_ClockConfig+0x1c8>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4618      	mov	r0, r3
 800567c:	f7fc ff22 	bl	80024c4 <HAL_InitTick>

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	40023c00 	.word	0x40023c00
 8005690:	40023800 	.word	0x40023800
 8005694:	0800e0fc 	.word	0x0800e0fc
 8005698:	20000000 	.word	0x20000000
 800569c:	20000004 	.word	0x20000004

080056a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056a4:	b094      	sub	sp, #80	; 0x50
 80056a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	647b      	str	r3, [r7, #68]	; 0x44
 80056ac:	2300      	movs	r3, #0
 80056ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056b0:	2300      	movs	r3, #0
 80056b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056b8:	4b79      	ldr	r3, [pc, #484]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f003 030c 	and.w	r3, r3, #12
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d00d      	beq.n	80056e0 <HAL_RCC_GetSysClockFreq+0x40>
 80056c4:	2b08      	cmp	r3, #8
 80056c6:	f200 80e1 	bhi.w	800588c <HAL_RCC_GetSysClockFreq+0x1ec>
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <HAL_RCC_GetSysClockFreq+0x34>
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d003      	beq.n	80056da <HAL_RCC_GetSysClockFreq+0x3a>
 80056d2:	e0db      	b.n	800588c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056d4:	4b73      	ldr	r3, [pc, #460]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80056d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80056d8:	e0db      	b.n	8005892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056da:	4b73      	ldr	r3, [pc, #460]	; (80058a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80056dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056de:	e0d8      	b.n	8005892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056e0:	4b6f      	ldr	r3, [pc, #444]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056ea:	4b6d      	ldr	r3, [pc, #436]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d063      	beq.n	80057be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056f6:	4b6a      	ldr	r3, [pc, #424]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	099b      	lsrs	r3, r3, #6
 80056fc:	2200      	movs	r2, #0
 80056fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005700:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005708:	633b      	str	r3, [r7, #48]	; 0x30
 800570a:	2300      	movs	r3, #0
 800570c:	637b      	str	r3, [r7, #52]	; 0x34
 800570e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005712:	4622      	mov	r2, r4
 8005714:	462b      	mov	r3, r5
 8005716:	f04f 0000 	mov.w	r0, #0
 800571a:	f04f 0100 	mov.w	r1, #0
 800571e:	0159      	lsls	r1, r3, #5
 8005720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005724:	0150      	lsls	r0, r2, #5
 8005726:	4602      	mov	r2, r0
 8005728:	460b      	mov	r3, r1
 800572a:	4621      	mov	r1, r4
 800572c:	1a51      	subs	r1, r2, r1
 800572e:	6139      	str	r1, [r7, #16]
 8005730:	4629      	mov	r1, r5
 8005732:	eb63 0301 	sbc.w	r3, r3, r1
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	f04f 0300 	mov.w	r3, #0
 8005740:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005744:	4659      	mov	r1, fp
 8005746:	018b      	lsls	r3, r1, #6
 8005748:	4651      	mov	r1, sl
 800574a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800574e:	4651      	mov	r1, sl
 8005750:	018a      	lsls	r2, r1, #6
 8005752:	4651      	mov	r1, sl
 8005754:	ebb2 0801 	subs.w	r8, r2, r1
 8005758:	4659      	mov	r1, fp
 800575a:	eb63 0901 	sbc.w	r9, r3, r1
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800576a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800576e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005772:	4690      	mov	r8, r2
 8005774:	4699      	mov	r9, r3
 8005776:	4623      	mov	r3, r4
 8005778:	eb18 0303 	adds.w	r3, r8, r3
 800577c:	60bb      	str	r3, [r7, #8]
 800577e:	462b      	mov	r3, r5
 8005780:	eb49 0303 	adc.w	r3, r9, r3
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	f04f 0200 	mov.w	r2, #0
 800578a:	f04f 0300 	mov.w	r3, #0
 800578e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005792:	4629      	mov	r1, r5
 8005794:	024b      	lsls	r3, r1, #9
 8005796:	4621      	mov	r1, r4
 8005798:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800579c:	4621      	mov	r1, r4
 800579e:	024a      	lsls	r2, r1, #9
 80057a0:	4610      	mov	r0, r2
 80057a2:	4619      	mov	r1, r3
 80057a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057a6:	2200      	movs	r2, #0
 80057a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057b0:	f7fb fa4a 	bl	8000c48 <__aeabi_uldivmod>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4613      	mov	r3, r2
 80057ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057bc:	e058      	b.n	8005870 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057be:	4b38      	ldr	r3, [pc, #224]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	099b      	lsrs	r3, r3, #6
 80057c4:	2200      	movs	r2, #0
 80057c6:	4618      	mov	r0, r3
 80057c8:	4611      	mov	r1, r2
 80057ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057ce:	623b      	str	r3, [r7, #32]
 80057d0:	2300      	movs	r3, #0
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24
 80057d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057d8:	4642      	mov	r2, r8
 80057da:	464b      	mov	r3, r9
 80057dc:	f04f 0000 	mov.w	r0, #0
 80057e0:	f04f 0100 	mov.w	r1, #0
 80057e4:	0159      	lsls	r1, r3, #5
 80057e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057ea:	0150      	lsls	r0, r2, #5
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4641      	mov	r1, r8
 80057f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80057f6:	4649      	mov	r1, r9
 80057f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	f04f 0300 	mov.w	r3, #0
 8005804:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005808:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800580c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005810:	ebb2 040a 	subs.w	r4, r2, sl
 8005814:	eb63 050b 	sbc.w	r5, r3, fp
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	f04f 0300 	mov.w	r3, #0
 8005820:	00eb      	lsls	r3, r5, #3
 8005822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005826:	00e2      	lsls	r2, r4, #3
 8005828:	4614      	mov	r4, r2
 800582a:	461d      	mov	r5, r3
 800582c:	4643      	mov	r3, r8
 800582e:	18e3      	adds	r3, r4, r3
 8005830:	603b      	str	r3, [r7, #0]
 8005832:	464b      	mov	r3, r9
 8005834:	eb45 0303 	adc.w	r3, r5, r3
 8005838:	607b      	str	r3, [r7, #4]
 800583a:	f04f 0200 	mov.w	r2, #0
 800583e:	f04f 0300 	mov.w	r3, #0
 8005842:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005846:	4629      	mov	r1, r5
 8005848:	028b      	lsls	r3, r1, #10
 800584a:	4621      	mov	r1, r4
 800584c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005850:	4621      	mov	r1, r4
 8005852:	028a      	lsls	r2, r1, #10
 8005854:	4610      	mov	r0, r2
 8005856:	4619      	mov	r1, r3
 8005858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800585a:	2200      	movs	r2, #0
 800585c:	61bb      	str	r3, [r7, #24]
 800585e:	61fa      	str	r2, [r7, #28]
 8005860:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005864:	f7fb f9f0 	bl	8000c48 <__aeabi_uldivmod>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	4613      	mov	r3, r2
 800586e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005870:	4b0b      	ldr	r3, [pc, #44]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	0c1b      	lsrs	r3, r3, #16
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	3301      	adds	r3, #1
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005880:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005884:	fbb2 f3f3 	udiv	r3, r2, r3
 8005888:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800588a:	e002      	b.n	8005892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800588c:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800588e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005894:	4618      	mov	r0, r3
 8005896:	3750      	adds	r7, #80	; 0x50
 8005898:	46bd      	mov	sp, r7
 800589a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800589e:	bf00      	nop
 80058a0:	40023800 	.word	0x40023800
 80058a4:	00f42400 	.word	0x00f42400
 80058a8:	007a1200 	.word	0x007a1200

080058ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058b0:	4b03      	ldr	r3, [pc, #12]	; (80058c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80058b2:	681b      	ldr	r3, [r3, #0]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	20000000 	.word	0x20000000

080058c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058c8:	f7ff fff0 	bl	80058ac <HAL_RCC_GetHCLKFreq>
 80058cc:	4602      	mov	r2, r0
 80058ce:	4b05      	ldr	r3, [pc, #20]	; (80058e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	0a9b      	lsrs	r3, r3, #10
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	4903      	ldr	r1, [pc, #12]	; (80058e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058da:	5ccb      	ldrb	r3, [r1, r3]
 80058dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	40023800 	.word	0x40023800
 80058e8:	0800e10c 	.word	0x0800e10c

080058ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058ec:	b084      	sub	sp, #16
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	f107 001c 	add.w	r0, r7, #28
 80058fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005900:	2b01      	cmp	r3, #1
 8005902:	d122      	bne.n	800594a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005908:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800592c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800592e:	2b01      	cmp	r3, #1
 8005930:	d105      	bne.n	800593e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f001 fbee 	bl	8007120 <USB_CoreReset>
 8005944:	4603      	mov	r3, r0
 8005946:	73fb      	strb	r3, [r7, #15]
 8005948:	e01a      	b.n	8005980 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f001 fbe2 	bl	8007120 <USB_CoreReset>
 800595c:	4603      	mov	r3, r0
 800595e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005962:	2b00      	cmp	r3, #0
 8005964:	d106      	bne.n	8005974 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	639a      	str	r2, [r3, #56]	; 0x38
 8005972:	e005      	b.n	8005980 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005978:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	2b01      	cmp	r3, #1
 8005984:	d10b      	bne.n	800599e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f043 0206 	orr.w	r2, r3, #6
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f043 0220 	orr.w	r2, r3, #32
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800599e:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059aa:	b004      	add	sp, #16
 80059ac:	4770      	bx	lr
	...

080059b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	4613      	mov	r3, r2
 80059bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80059be:	79fb      	ldrb	r3, [r7, #7]
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d165      	bne.n	8005a90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4a41      	ldr	r2, [pc, #260]	; (8005acc <USB_SetTurnaroundTime+0x11c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d906      	bls.n	80059da <USB_SetTurnaroundTime+0x2a>
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	4a40      	ldr	r2, [pc, #256]	; (8005ad0 <USB_SetTurnaroundTime+0x120>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d202      	bcs.n	80059da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80059d4:	230f      	movs	r3, #15
 80059d6:	617b      	str	r3, [r7, #20]
 80059d8:	e062      	b.n	8005aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	4a3c      	ldr	r2, [pc, #240]	; (8005ad0 <USB_SetTurnaroundTime+0x120>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d306      	bcc.n	80059f0 <USB_SetTurnaroundTime+0x40>
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	4a3b      	ldr	r2, [pc, #236]	; (8005ad4 <USB_SetTurnaroundTime+0x124>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d202      	bcs.n	80059f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80059ea:	230e      	movs	r3, #14
 80059ec:	617b      	str	r3, [r7, #20]
 80059ee:	e057      	b.n	8005aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	4a38      	ldr	r2, [pc, #224]	; (8005ad4 <USB_SetTurnaroundTime+0x124>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d306      	bcc.n	8005a06 <USB_SetTurnaroundTime+0x56>
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	4a37      	ldr	r2, [pc, #220]	; (8005ad8 <USB_SetTurnaroundTime+0x128>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d202      	bcs.n	8005a06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005a00:	230d      	movs	r3, #13
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	e04c      	b.n	8005aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	4a33      	ldr	r2, [pc, #204]	; (8005ad8 <USB_SetTurnaroundTime+0x128>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d306      	bcc.n	8005a1c <USB_SetTurnaroundTime+0x6c>
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	4a32      	ldr	r2, [pc, #200]	; (8005adc <USB_SetTurnaroundTime+0x12c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d802      	bhi.n	8005a1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005a16:	230c      	movs	r3, #12
 8005a18:	617b      	str	r3, [r7, #20]
 8005a1a:	e041      	b.n	8005aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	4a2f      	ldr	r2, [pc, #188]	; (8005adc <USB_SetTurnaroundTime+0x12c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d906      	bls.n	8005a32 <USB_SetTurnaroundTime+0x82>
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	4a2e      	ldr	r2, [pc, #184]	; (8005ae0 <USB_SetTurnaroundTime+0x130>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d802      	bhi.n	8005a32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005a2c:	230b      	movs	r3, #11
 8005a2e:	617b      	str	r3, [r7, #20]
 8005a30:	e036      	b.n	8005aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	4a2a      	ldr	r2, [pc, #168]	; (8005ae0 <USB_SetTurnaroundTime+0x130>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d906      	bls.n	8005a48 <USB_SetTurnaroundTime+0x98>
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	4a29      	ldr	r2, [pc, #164]	; (8005ae4 <USB_SetTurnaroundTime+0x134>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d802      	bhi.n	8005a48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005a42:	230a      	movs	r3, #10
 8005a44:	617b      	str	r3, [r7, #20]
 8005a46:	e02b      	b.n	8005aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	4a26      	ldr	r2, [pc, #152]	; (8005ae4 <USB_SetTurnaroundTime+0x134>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d906      	bls.n	8005a5e <USB_SetTurnaroundTime+0xae>
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	4a25      	ldr	r2, [pc, #148]	; (8005ae8 <USB_SetTurnaroundTime+0x138>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d202      	bcs.n	8005a5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005a58:	2309      	movs	r3, #9
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	e020      	b.n	8005aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	4a21      	ldr	r2, [pc, #132]	; (8005ae8 <USB_SetTurnaroundTime+0x138>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d306      	bcc.n	8005a74 <USB_SetTurnaroundTime+0xc4>
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	4a20      	ldr	r2, [pc, #128]	; (8005aec <USB_SetTurnaroundTime+0x13c>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d802      	bhi.n	8005a74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005a6e:	2308      	movs	r3, #8
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	e015      	b.n	8005aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	4a1d      	ldr	r2, [pc, #116]	; (8005aec <USB_SetTurnaroundTime+0x13c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d906      	bls.n	8005a8a <USB_SetTurnaroundTime+0xda>
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	4a1c      	ldr	r2, [pc, #112]	; (8005af0 <USB_SetTurnaroundTime+0x140>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d202      	bcs.n	8005a8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005a84:	2307      	movs	r3, #7
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	e00a      	b.n	8005aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005a8a:	2306      	movs	r3, #6
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	e007      	b.n	8005aa0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005a90:	79fb      	ldrb	r3, [r7, #7]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d102      	bne.n	8005a9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005a96:	2309      	movs	r3, #9
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	e001      	b.n	8005aa0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005a9c:	2309      	movs	r3, #9
 8005a9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	029b      	lsls	r3, r3, #10
 8005ab4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	371c      	adds	r7, #28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	00d8acbf 	.word	0x00d8acbf
 8005ad0:	00e4e1c0 	.word	0x00e4e1c0
 8005ad4:	00f42400 	.word	0x00f42400
 8005ad8:	01067380 	.word	0x01067380
 8005adc:	011a499f 	.word	0x011a499f
 8005ae0:	01312cff 	.word	0x01312cff
 8005ae4:	014ca43f 	.word	0x014ca43f
 8005ae8:	016e3600 	.word	0x016e3600
 8005aec:	01a6ab1f 	.word	0x01a6ab1f
 8005af0:	01e84800 	.word	0x01e84800

08005af4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f043 0201 	orr.w	r2, r3, #1
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f023 0201 	bic.w	r2, r3, #1
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	460b      	mov	r3, r1
 8005b42:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b54:	78fb      	ldrb	r3, [r7, #3]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d115      	bne.n	8005b86 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b66:	2001      	movs	r0, #1
 8005b68:	f7fc fcfc 	bl	8002564 <HAL_Delay>
      ms++;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f001 fa45 	bl	8007002 <USB_GetMode>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d01e      	beq.n	8005bbc <USB_SetCurrentMode+0x84>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2b31      	cmp	r3, #49	; 0x31
 8005b82:	d9f0      	bls.n	8005b66 <USB_SetCurrentMode+0x2e>
 8005b84:	e01a      	b.n	8005bbc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b86:	78fb      	ldrb	r3, [r7, #3]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d115      	bne.n	8005bb8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b98:	2001      	movs	r0, #1
 8005b9a:	f7fc fce3 	bl	8002564 <HAL_Delay>
      ms++;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f001 fa2c 	bl	8007002 <USB_GetMode>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d005      	beq.n	8005bbc <USB_SetCurrentMode+0x84>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b31      	cmp	r3, #49	; 0x31
 8005bb4:	d9f0      	bls.n	8005b98 <USB_SetCurrentMode+0x60>
 8005bb6:	e001      	b.n	8005bbc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e005      	b.n	8005bc8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b32      	cmp	r3, #50	; 0x32
 8005bc0:	d101      	bne.n	8005bc6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bd0:	b084      	sub	sp, #16
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b086      	sub	sp, #24
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005bde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005bea:	2300      	movs	r3, #0
 8005bec:	613b      	str	r3, [r7, #16]
 8005bee:	e009      	b.n	8005c04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	3340      	adds	r3, #64	; 0x40
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	3301      	adds	r3, #1
 8005c02:	613b      	str	r3, [r7, #16]
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	2b0e      	cmp	r3, #14
 8005c08:	d9f2      	bls.n	8005bf0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d11c      	bne.n	8005c4a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c1e:	f043 0302 	orr.w	r3, r3, #2
 8005c22:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c34:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c40:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	639a      	str	r2, [r3, #56]	; 0x38
 8005c48:	e00b      	b.n	8005c62 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c68:	461a      	mov	r2, r3
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c74:	4619      	mov	r1, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	680b      	ldr	r3, [r1, #0]
 8005c80:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d10c      	bne.n	8005ca2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d104      	bne.n	8005c98 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005c8e:	2100      	movs	r1, #0
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f965 	bl	8005f60 <USB_SetDevSpeed>
 8005c96:	e008      	b.n	8005caa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005c98:	2101      	movs	r1, #1
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f960 	bl	8005f60 <USB_SetDevSpeed>
 8005ca0:	e003      	b.n	8005caa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005ca2:	2103      	movs	r1, #3
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f95b 	bl	8005f60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005caa:	2110      	movs	r1, #16
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f8f3 	bl	8005e98 <USB_FlushTxFifo>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f91f 	bl	8005f00 <USB_FlushRxFifo>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cde:	461a      	mov	r2, r3
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cea:	461a      	mov	r2, r3
 8005cec:	2300      	movs	r3, #0
 8005cee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	e043      	b.n	8005d7e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d0c:	d118      	bne.n	8005d40 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10a      	bne.n	8005d2a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d20:	461a      	mov	r2, r3
 8005d22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d26:	6013      	str	r3, [r2, #0]
 8005d28:	e013      	b.n	8005d52 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d36:	461a      	mov	r2, r3
 8005d38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d3c:	6013      	str	r3, [r2, #0]
 8005d3e:	e008      	b.n	8005d52 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	2300      	movs	r3, #0
 8005d50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5e:	461a      	mov	r2, r3
 8005d60:	2300      	movs	r3, #0
 8005d62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d70:	461a      	mov	r2, r3
 8005d72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	613b      	str	r3, [r7, #16]
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d3b7      	bcc.n	8005cf6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d86:	2300      	movs	r3, #0
 8005d88:	613b      	str	r3, [r7, #16]
 8005d8a:	e043      	b.n	8005e14 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005da2:	d118      	bne.n	8005dd6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10a      	bne.n	8005dc0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db6:	461a      	mov	r2, r3
 8005db8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005dbc:	6013      	str	r3, [r2, #0]
 8005dbe:	e013      	b.n	8005de8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dcc:	461a      	mov	r2, r3
 8005dce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	e008      	b.n	8005de8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de2:	461a      	mov	r2, r3
 8005de4:	2300      	movs	r3, #0
 8005de6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df4:	461a      	mov	r2, r3
 8005df6:	2300      	movs	r3, #0
 8005df8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e06:	461a      	mov	r2, r3
 8005e08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	3301      	adds	r3, #1
 8005e12:	613b      	str	r3, [r7, #16]
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d3b7      	bcc.n	8005d8c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d105      	bne.n	8005e50 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	f043 0210 	orr.w	r2, r3, #16
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	699a      	ldr	r2, [r3, #24]
 8005e54:	4b0f      	ldr	r3, [pc, #60]	; (8005e94 <USB_DevInit+0x2c4>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d005      	beq.n	8005e6e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	f043 0208 	orr.w	r2, r3, #8
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d107      	bne.n	8005e84 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e7c:	f043 0304 	orr.w	r3, r3, #4
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3718      	adds	r7, #24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e90:	b004      	add	sp, #16
 8005e92:	4770      	bx	lr
 8005e94:	803c3800 	.word	0x803c3800

08005e98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4a13      	ldr	r2, [pc, #76]	; (8005efc <USB_FlushTxFifo+0x64>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d901      	bls.n	8005eb8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e01b      	b.n	8005ef0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	daf2      	bge.n	8005ea6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	019b      	lsls	r3, r3, #6
 8005ec8:	f043 0220 	orr.w	r2, r3, #32
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4a08      	ldr	r2, [pc, #32]	; (8005efc <USB_FlushTxFifo+0x64>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d901      	bls.n	8005ee2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e006      	b.n	8005ef0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b20      	cmp	r3, #32
 8005eec:	d0f0      	beq.n	8005ed0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3714      	adds	r7, #20
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr
 8005efc:	00030d40 	.word	0x00030d40

08005f00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	4a11      	ldr	r2, [pc, #68]	; (8005f5c <USB_FlushRxFifo+0x5c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d901      	bls.n	8005f1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e018      	b.n	8005f50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	daf2      	bge.n	8005f0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2210      	movs	r2, #16
 8005f2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	3301      	adds	r3, #1
 8005f34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4a08      	ldr	r2, [pc, #32]	; (8005f5c <USB_FlushRxFifo+0x5c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d901      	bls.n	8005f42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e006      	b.n	8005f50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	f003 0310 	and.w	r3, r3, #16
 8005f4a:	2b10      	cmp	r3, #16
 8005f4c:	d0f0      	beq.n	8005f30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	00030d40 	.word	0x00030d40

08005f60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	78fb      	ldrb	r3, [r7, #3]
 8005f7a:	68f9      	ldr	r1, [r7, #12]
 8005f7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f80:	4313      	orrs	r3, r2
 8005f82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b087      	sub	sp, #28
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f003 0306 	and.w	r3, r3, #6
 8005faa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d102      	bne.n	8005fb8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	75fb      	strb	r3, [r7, #23]
 8005fb6:	e00a      	b.n	8005fce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d002      	beq.n	8005fc4 <USB_GetDevSpeed+0x32>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2b06      	cmp	r3, #6
 8005fc2:	d102      	bne.n	8005fca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	75fb      	strb	r3, [r7, #23]
 8005fc8:	e001      	b.n	8005fce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005fca:	230f      	movs	r3, #15
 8005fcc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	371c      	adds	r7, #28
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	785b      	ldrb	r3, [r3, #1]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d13a      	bne.n	800606e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ffe:	69da      	ldr	r2, [r3, #28]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	f003 030f 	and.w	r3, r3, #15
 8006008:	2101      	movs	r1, #1
 800600a:	fa01 f303 	lsl.w	r3, r1, r3
 800600e:	b29b      	uxth	r3, r3
 8006010:	68f9      	ldr	r1, [r7, #12]
 8006012:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006016:	4313      	orrs	r3, r2
 8006018:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	4413      	add	r3, r2
 8006022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d155      	bne.n	80060dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	791b      	ldrb	r3, [r3, #4]
 800604a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800604c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	059b      	lsls	r3, r3, #22
 8006052:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006054:	4313      	orrs	r3, r2
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	0151      	lsls	r1, r2, #5
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	440a      	add	r2, r1
 800605e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800606a:	6013      	str	r3, [r2, #0]
 800606c:	e036      	b.n	80060dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006074:	69da      	ldr	r2, [r3, #28]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	f003 030f 	and.w	r3, r3, #15
 800607e:	2101      	movs	r1, #1
 8006080:	fa01 f303 	lsl.w	r3, r1, r3
 8006084:	041b      	lsls	r3, r3, #16
 8006086:	68f9      	ldr	r1, [r7, #12]
 8006088:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800608c:	4313      	orrs	r3, r2
 800608e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d11a      	bne.n	80060dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	791b      	ldrb	r3, [r3, #4]
 80060c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80060c2:	430b      	orrs	r3, r1
 80060c4:	4313      	orrs	r3, r2
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	0151      	lsls	r1, r2, #5
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	440a      	add	r2, r1
 80060ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
	...

080060ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	785b      	ldrb	r3, [r3, #1]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d161      	bne.n	80061cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800611a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800611e:	d11f      	bne.n	8006160 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	440a      	add	r2, r1
 8006136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800613a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800613e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	0151      	lsls	r1, r2, #5
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	440a      	add	r2, r1
 8006156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800615a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800615e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	f003 030f 	and.w	r3, r3, #15
 8006170:	2101      	movs	r1, #1
 8006172:	fa01 f303 	lsl.w	r3, r1, r3
 8006176:	b29b      	uxth	r3, r3
 8006178:	43db      	mvns	r3, r3
 800617a:	68f9      	ldr	r1, [r7, #12]
 800617c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006180:	4013      	ands	r3, r2
 8006182:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618a:	69da      	ldr	r2, [r3, #28]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	f003 030f 	and.w	r3, r3, #15
 8006194:	2101      	movs	r1, #1
 8006196:	fa01 f303 	lsl.w	r3, r1, r3
 800619a:	b29b      	uxth	r3, r3
 800619c:	43db      	mvns	r3, r3
 800619e:	68f9      	ldr	r1, [r7, #12]
 80061a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061a4:	4013      	ands	r3, r2
 80061a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	0159      	lsls	r1, r3, #5
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	440b      	add	r3, r1
 80061be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c2:	4619      	mov	r1, r3
 80061c4:	4b35      	ldr	r3, [pc, #212]	; (800629c <USB_DeactivateEndpoint+0x1b0>)
 80061c6:	4013      	ands	r3, r2
 80061c8:	600b      	str	r3, [r1, #0]
 80061ca:	e060      	b.n	800628e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061e2:	d11f      	bne.n	8006224 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	0151      	lsls	r1, r2, #5
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	440a      	add	r2, r1
 80061fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006202:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	0151      	lsls	r1, r2, #5
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	440a      	add	r2, r1
 800621a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800621e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006222:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800622a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	f003 030f 	and.w	r3, r3, #15
 8006234:	2101      	movs	r1, #1
 8006236:	fa01 f303 	lsl.w	r3, r1, r3
 800623a:	041b      	lsls	r3, r3, #16
 800623c:	43db      	mvns	r3, r3
 800623e:	68f9      	ldr	r1, [r7, #12]
 8006240:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006244:	4013      	ands	r3, r2
 8006246:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800624e:	69da      	ldr	r2, [r3, #28]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	f003 030f 	and.w	r3, r3, #15
 8006258:	2101      	movs	r1, #1
 800625a:	fa01 f303 	lsl.w	r3, r1, r3
 800625e:	041b      	lsls	r3, r3, #16
 8006260:	43db      	mvns	r3, r3
 8006262:	68f9      	ldr	r1, [r7, #12]
 8006264:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006268:	4013      	ands	r3, r2
 800626a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	0159      	lsls	r1, r3, #5
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	440b      	add	r3, r1
 8006282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006286:	4619      	mov	r1, r3
 8006288:	4b05      	ldr	r3, [pc, #20]	; (80062a0 <USB_DeactivateEndpoint+0x1b4>)
 800628a:	4013      	ands	r3, r2
 800628c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	ec337800 	.word	0xec337800
 80062a0:	eff37800 	.word	0xeff37800

080062a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b08a      	sub	sp, #40	; 0x28
 80062a8:	af02      	add	r7, sp, #8
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	4613      	mov	r3, r2
 80062b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	785b      	ldrb	r3, [r3, #1]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	f040 815c 	bne.w	800657e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d132      	bne.n	8006334 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	015a      	lsls	r2, r3, #5
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	0151      	lsls	r1, r2, #5
 80062e0:	69fa      	ldr	r2, [r7, #28]
 80062e2:	440a      	add	r2, r1
 80062e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	0151      	lsls	r1, r2, #5
 8006304:	69fa      	ldr	r2, [r7, #28]
 8006306:	440a      	add	r2, r1
 8006308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800630c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006310:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	0151      	lsls	r1, r2, #5
 8006324:	69fa      	ldr	r2, [r7, #28]
 8006326:	440a      	add	r2, r1
 8006328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800632c:	0cdb      	lsrs	r3, r3, #19
 800632e:	04db      	lsls	r3, r3, #19
 8006330:	6113      	str	r3, [r2, #16]
 8006332:	e074      	b.n	800641e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	0151      	lsls	r1, r2, #5
 8006346:	69fa      	ldr	r2, [r7, #28]
 8006348:	440a      	add	r2, r1
 800634a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800634e:	0cdb      	lsrs	r3, r3, #19
 8006350:	04db      	lsls	r3, r3, #19
 8006352:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	0151      	lsls	r1, r2, #5
 8006366:	69fa      	ldr	r2, [r7, #28]
 8006368:	440a      	add	r2, r1
 800636a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800636e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006372:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006376:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	4413      	add	r3, r2
 8006380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006384:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	6999      	ldr	r1, [r3, #24]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	440b      	add	r3, r1
 8006390:	1e59      	subs	r1, r3, #1
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	fbb1 f3f3 	udiv	r3, r1, r3
 800639a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800639c:	4b9d      	ldr	r3, [pc, #628]	; (8006614 <USB_EPStartXfer+0x370>)
 800639e:	400b      	ands	r3, r1
 80063a0:	69b9      	ldr	r1, [r7, #24]
 80063a2:	0148      	lsls	r0, r1, #5
 80063a4:	69f9      	ldr	r1, [r7, #28]
 80063a6:	4401      	add	r1, r0
 80063a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80063ac:	4313      	orrs	r3, r2
 80063ae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063bc:	691a      	ldr	r2, [r3, #16]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063c6:	69b9      	ldr	r1, [r7, #24]
 80063c8:	0148      	lsls	r0, r1, #5
 80063ca:	69f9      	ldr	r1, [r7, #28]
 80063cc:	4401      	add	r1, r0
 80063ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80063d2:	4313      	orrs	r3, r2
 80063d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	791b      	ldrb	r3, [r3, #4]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d11f      	bne.n	800641e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	0151      	lsls	r1, r2, #5
 80063f0:	69fa      	ldr	r2, [r7, #28]
 80063f2:	440a      	add	r2, r1
 80063f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80063fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	0151      	lsls	r1, r2, #5
 8006410:	69fa      	ldr	r2, [r7, #28]
 8006412:	440a      	add	r2, r1
 8006414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006418:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800641c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800641e:	79fb      	ldrb	r3, [r7, #7]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d14b      	bne.n	80064bc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d009      	beq.n	8006440 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006438:	461a      	mov	r2, r3
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	791b      	ldrb	r3, [r3, #4]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d128      	bne.n	800649a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006454:	2b00      	cmp	r3, #0
 8006456:	d110      	bne.n	800647a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	69ba      	ldr	r2, [r7, #24]
 8006468:	0151      	lsls	r1, r2, #5
 800646a:	69fa      	ldr	r2, [r7, #28]
 800646c:	440a      	add	r2, r1
 800646e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006472:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006476:	6013      	str	r3, [r2, #0]
 8006478:	e00f      	b.n	800649a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	4413      	add	r3, r2
 8006482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	0151      	lsls	r1, r2, #5
 800648c:	69fa      	ldr	r2, [r7, #28]
 800648e:	440a      	add	r2, r1
 8006490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006498:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	0151      	lsls	r1, r2, #5
 80064ac:	69fa      	ldr	r2, [r7, #28]
 80064ae:	440a      	add	r2, r1
 80064b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064b8:	6013      	str	r3, [r2, #0]
 80064ba:	e133      	b.n	8006724 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	69ba      	ldr	r2, [r7, #24]
 80064cc:	0151      	lsls	r1, r2, #5
 80064ce:	69fa      	ldr	r2, [r7, #28]
 80064d0:	440a      	add	r2, r1
 80064d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	791b      	ldrb	r3, [r3, #4]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d015      	beq.n	8006510 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f000 811b 	beq.w	8006724 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	f003 030f 	and.w	r3, r3, #15
 80064fe:	2101      	movs	r1, #1
 8006500:	fa01 f303 	lsl.w	r3, r1, r3
 8006504:	69f9      	ldr	r1, [r7, #28]
 8006506:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800650a:	4313      	orrs	r3, r2
 800650c:	634b      	str	r3, [r1, #52]	; 0x34
 800650e:	e109      	b.n	8006724 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651c:	2b00      	cmp	r3, #0
 800651e:	d110      	bne.n	8006542 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	0151      	lsls	r1, r2, #5
 8006532:	69fa      	ldr	r2, [r7, #28]
 8006534:	440a      	add	r2, r1
 8006536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800653a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	e00f      	b.n	8006562 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	0151      	lsls	r1, r2, #5
 8006554:	69fa      	ldr	r2, [r7, #28]
 8006556:	440a      	add	r2, r1
 8006558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800655c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006560:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	6919      	ldr	r1, [r3, #16]
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	781a      	ldrb	r2, [r3, #0]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	b298      	uxth	r0, r3
 8006570:	79fb      	ldrb	r3, [r7, #7]
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	4603      	mov	r3, r0
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f000 fade 	bl	8006b38 <USB_WritePacket>
 800657c:	e0d2      	b.n	8006724 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	0151      	lsls	r1, r2, #5
 8006590:	69fa      	ldr	r2, [r7, #28]
 8006592:	440a      	add	r2, r1
 8006594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006598:	0cdb      	lsrs	r3, r3, #19
 800659a:	04db      	lsls	r3, r3, #19
 800659c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	0151      	lsls	r1, r2, #5
 80065b0:	69fa      	ldr	r2, [r7, #28]
 80065b2:	440a      	add	r2, r1
 80065b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d126      	bne.n	8006618 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d6:	691a      	ldr	r2, [r3, #16]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065e0:	69b9      	ldr	r1, [r7, #24]
 80065e2:	0148      	lsls	r0, r1, #5
 80065e4:	69f9      	ldr	r1, [r7, #28]
 80065e6:	4401      	add	r1, r0
 80065e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065ec:	4313      	orrs	r3, r2
 80065ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	0151      	lsls	r1, r2, #5
 8006602:	69fa      	ldr	r2, [r7, #28]
 8006604:	440a      	add	r2, r1
 8006606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800660a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800660e:	6113      	str	r3, [r2, #16]
 8006610:	e03a      	b.n	8006688 <USB_EPStartXfer+0x3e4>
 8006612:	bf00      	nop
 8006614:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	699a      	ldr	r2, [r3, #24]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	4413      	add	r3, r2
 8006622:	1e5a      	subs	r2, r3, #1
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	fbb2 f3f3 	udiv	r3, r2, r3
 800662c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	8afa      	ldrh	r2, [r7, #22]
 8006634:	fb03 f202 	mul.w	r2, r3, r2
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	4413      	add	r3, r2
 8006644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006648:	691a      	ldr	r2, [r3, #16]
 800664a:	8afb      	ldrh	r3, [r7, #22]
 800664c:	04d9      	lsls	r1, r3, #19
 800664e:	4b38      	ldr	r3, [pc, #224]	; (8006730 <USB_EPStartXfer+0x48c>)
 8006650:	400b      	ands	r3, r1
 8006652:	69b9      	ldr	r1, [r7, #24]
 8006654:	0148      	lsls	r0, r1, #5
 8006656:	69f9      	ldr	r1, [r7, #28]
 8006658:	4401      	add	r1, r0
 800665a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800665e:	4313      	orrs	r3, r2
 8006660:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	4413      	add	r3, r2
 800666a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800666e:	691a      	ldr	r2, [r3, #16]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006678:	69b9      	ldr	r1, [r7, #24]
 800667a:	0148      	lsls	r0, r1, #5
 800667c:	69f9      	ldr	r1, [r7, #28]
 800667e:	4401      	add	r1, r0
 8006680:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006684:	4313      	orrs	r3, r2
 8006686:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006688:	79fb      	ldrb	r3, [r7, #7]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d10d      	bne.n	80066aa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d009      	beq.n	80066aa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	6919      	ldr	r1, [r3, #16]
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a6:	460a      	mov	r2, r1
 80066a8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	791b      	ldrb	r3, [r3, #4]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d128      	bne.n	8006704 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d110      	bne.n	80066e4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	69ba      	ldr	r2, [r7, #24]
 80066d2:	0151      	lsls	r1, r2, #5
 80066d4:	69fa      	ldr	r2, [r7, #28]
 80066d6:	440a      	add	r2, r1
 80066d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	e00f      	b.n	8006704 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	0151      	lsls	r1, r2, #5
 80066f6:	69fa      	ldr	r2, [r7, #28]
 80066f8:	440a      	add	r2, r1
 80066fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006702:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	4413      	add	r3, r2
 800670c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	0151      	lsls	r1, r2, #5
 8006716:	69fa      	ldr	r2, [r7, #28]
 8006718:	440a      	add	r2, r1
 800671a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800671e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006722:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3720      	adds	r7, #32
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	1ff80000 	.word	0x1ff80000

08006734 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	4613      	mov	r3, r2
 8006740:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	785b      	ldrb	r3, [r3, #1]
 8006750:	2b01      	cmp	r3, #1
 8006752:	f040 80ce 	bne.w	80068f2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d132      	bne.n	80067c4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	4413      	add	r3, r2
 8006766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	0151      	lsls	r1, r2, #5
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	440a      	add	r2, r1
 8006774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006778:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800677c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006780:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	015a      	lsls	r2, r3, #5
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	4413      	add	r3, r2
 800678a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	0151      	lsls	r1, r2, #5
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	440a      	add	r2, r1
 8006798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800679c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	0151      	lsls	r1, r2, #5
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	440a      	add	r2, r1
 80067b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067bc:	0cdb      	lsrs	r3, r3, #19
 80067be:	04db      	lsls	r3, r3, #19
 80067c0:	6113      	str	r3, [r2, #16]
 80067c2:	e04e      	b.n	8006862 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	0151      	lsls	r1, r2, #5
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	440a      	add	r2, r1
 80067da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067de:	0cdb      	lsrs	r3, r3, #19
 80067e0:	04db      	lsls	r3, r3, #19
 80067e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	0151      	lsls	r1, r2, #5
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	440a      	add	r2, r1
 80067fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006802:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006806:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	699a      	ldr	r2, [r3, #24]
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	429a      	cmp	r2, r3
 8006812:	d903      	bls.n	800681c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	68da      	ldr	r2, [r3, #12]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	0151      	lsls	r1, r2, #5
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	440a      	add	r2, r1
 8006832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006836:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800683a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	015a      	lsls	r2, r3, #5
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	4413      	add	r3, r2
 8006844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006848:	691a      	ldr	r2, [r3, #16]
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006852:	6939      	ldr	r1, [r7, #16]
 8006854:	0148      	lsls	r0, r1, #5
 8006856:	6979      	ldr	r1, [r7, #20]
 8006858:	4401      	add	r1, r0
 800685a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800685e:	4313      	orrs	r3, r2
 8006860:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006862:	79fb      	ldrb	r3, [r7, #7]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d11e      	bne.n	80068a6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	695b      	ldr	r3, [r3, #20]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d009      	beq.n	8006884 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	015a      	lsls	r2, r3, #5
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	4413      	add	r3, r2
 8006878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800687c:	461a      	mov	r2, r3
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	4413      	add	r3, r2
 800688c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	0151      	lsls	r1, r2, #5
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	440a      	add	r2, r1
 800689a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800689e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068a2:	6013      	str	r3, [r2, #0]
 80068a4:	e097      	b.n	80069d6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	0151      	lsls	r1, r2, #5
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	440a      	add	r2, r1
 80068bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068c4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 8083 	beq.w	80069d6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	f003 030f 	and.w	r3, r3, #15
 80068e0:	2101      	movs	r1, #1
 80068e2:	fa01 f303 	lsl.w	r3, r1, r3
 80068e6:	6979      	ldr	r1, [r7, #20]
 80068e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068ec:	4313      	orrs	r3, r2
 80068ee:	634b      	str	r3, [r1, #52]	; 0x34
 80068f0:	e071      	b.n	80069d6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	0151      	lsls	r1, r2, #5
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	440a      	add	r2, r1
 8006908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800690c:	0cdb      	lsrs	r3, r3, #19
 800690e:	04db      	lsls	r3, r3, #19
 8006910:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	4413      	add	r3, r2
 800691a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	0151      	lsls	r1, r2, #5
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	440a      	add	r2, r1
 8006928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800692c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006930:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006934:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	68da      	ldr	r2, [r3, #12]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	4413      	add	r3, r2
 8006956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	0151      	lsls	r1, r2, #5
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	440a      	add	r2, r1
 8006964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006968:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800696c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	4413      	add	r3, r2
 8006976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800697a:	691a      	ldr	r2, [r3, #16]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	69db      	ldr	r3, [r3, #28]
 8006980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006984:	6939      	ldr	r1, [r7, #16]
 8006986:	0148      	lsls	r0, r1, #5
 8006988:	6979      	ldr	r1, [r7, #20]
 800698a:	4401      	add	r1, r0
 800698c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006990:	4313      	orrs	r3, r2
 8006992:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006994:	79fb      	ldrb	r3, [r7, #7]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d10d      	bne.n	80069b6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d009      	beq.n	80069b6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	6919      	ldr	r1, [r3, #16]
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b2:	460a      	mov	r2, r1
 80069b4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	0151      	lsls	r1, r2, #5
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	440a      	add	r2, r1
 80069cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	371c      	adds	r7, #28
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	785b      	ldrb	r3, [r3, #1]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d14a      	bne.n	8006a98 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a1a:	f040 8086 	bne.w	8006b2a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	7812      	ldrb	r2, [r2, #0]
 8006a32:	0151      	lsls	r1, r2, #5
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	440a      	add	r2, r1
 8006a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a40:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	7812      	ldrb	r2, [r2, #0]
 8006a56:	0151      	lsls	r1, r2, #5
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	440a      	add	r2, r1
 8006a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d902      	bls.n	8006a7c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	75fb      	strb	r3, [r7, #23]
          break;
 8006a7a:	e056      	b.n	8006b2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	015a      	lsls	r2, r3, #5
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a94:	d0e7      	beq.n	8006a66 <USB_EPStopXfer+0x82>
 8006a96:	e048      	b.n	8006b2a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006aac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ab0:	d13b      	bne.n	8006b2a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	7812      	ldrb	r2, [r2, #0]
 8006ac6:	0151      	lsls	r1, r2, #5
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	440a      	add	r2, r1
 8006acc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ad0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ad4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	015a      	lsls	r2, r3, #5
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	7812      	ldrb	r2, [r2, #0]
 8006aea:	0151      	lsls	r1, r2, #5
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	440a      	add	r2, r1
 8006af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006af4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006af8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	3301      	adds	r3, #1
 8006afe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f242 7210 	movw	r2, #10000	; 0x2710
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d902      	bls.n	8006b10 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b0e:	e00c      	b.n	8006b2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b28:	d0e7      	beq.n	8006afa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	371c      	adds	r7, #28
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b089      	sub	sp, #36	; 0x24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	4611      	mov	r1, r2
 8006b44:	461a      	mov	r2, r3
 8006b46:	460b      	mov	r3, r1
 8006b48:	71fb      	strb	r3, [r7, #7]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006b56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d123      	bne.n	8006ba6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006b5e:	88bb      	ldrh	r3, [r7, #4]
 8006b60:	3303      	adds	r3, #3
 8006b62:	089b      	lsrs	r3, r3, #2
 8006b64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006b66:	2300      	movs	r3, #0
 8006b68:	61bb      	str	r3, [r7, #24]
 8006b6a:	e018      	b.n	8006b9e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006b6c:	79fb      	ldrb	r3, [r7, #7]
 8006b6e:	031a      	lsls	r2, r3, #12
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b78:	461a      	mov	r2, r3
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	3301      	adds	r3, #1
 8006b84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	3301      	adds	r3, #1
 8006b96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	61bb      	str	r3, [r7, #24]
 8006b9e:	69ba      	ldr	r2, [r7, #24]
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d3e2      	bcc.n	8006b6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3724      	adds	r7, #36	; 0x24
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b08b      	sub	sp, #44	; 0x2c
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006bca:	88fb      	ldrh	r3, [r7, #6]
 8006bcc:	089b      	lsrs	r3, r3, #2
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006bd2:	88fb      	ldrh	r3, [r7, #6]
 8006bd4:	f003 0303 	and.w	r3, r3, #3
 8006bd8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006bda:	2300      	movs	r3, #0
 8006bdc:	623b      	str	r3, [r7, #32]
 8006bde:	e014      	b.n	8006c0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	601a      	str	r2, [r3, #0]
    pDest++;
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	3301      	adds	r3, #1
 8006bf0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c00:	3301      	adds	r3, #1
 8006c02:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	3301      	adds	r3, #1
 8006c08:	623b      	str	r3, [r7, #32]
 8006c0a:	6a3a      	ldr	r2, [r7, #32]
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d3e6      	bcc.n	8006be0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006c12:	8bfb      	ldrh	r3, [r7, #30]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d01e      	beq.n	8006c56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c22:	461a      	mov	r2, r3
 8006c24:	f107 0310 	add.w	r3, r7, #16
 8006c28:	6812      	ldr	r2, [r2, #0]
 8006c2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	00db      	lsls	r3, r3, #3
 8006c34:	fa22 f303 	lsr.w	r3, r2, r3
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	701a      	strb	r2, [r3, #0]
      i++;
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	3301      	adds	r3, #1
 8006c42:	623b      	str	r3, [r7, #32]
      pDest++;
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	3301      	adds	r3, #1
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006c4a:	8bfb      	ldrh	r3, [r7, #30]
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006c50:	8bfb      	ldrh	r3, [r7, #30]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1ea      	bne.n	8006c2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	372c      	adds	r7, #44	; 0x2c
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	785b      	ldrb	r3, [r3, #1]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d12c      	bne.n	8006cda <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	db12      	blt.n	8006cb8 <USB_EPSetStall+0x54>
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00f      	beq.n	8006cb8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	0151      	lsls	r1, r2, #5
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	440a      	add	r2, r1
 8006cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006cb6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	0151      	lsls	r1, r2, #5
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	440a      	add	r2, r1
 8006cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	e02b      	b.n	8006d32 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	db12      	blt.n	8006d12 <USB_EPSetStall+0xae>
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00f      	beq.n	8006d12 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	0151      	lsls	r1, r2, #5
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	440a      	add	r2, r1
 8006d08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d10:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	015a      	lsls	r2, r3, #5
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	0151      	lsls	r1, r2, #5
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	440a      	add	r2, r1
 8006d28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	785b      	ldrb	r3, [r3, #1]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d128      	bne.n	8006dae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	0151      	lsls	r1, r2, #5
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	440a      	add	r2, r1
 8006d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	791b      	ldrb	r3, [r3, #4]
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	d003      	beq.n	8006d8c <USB_EPClearStall+0x4c>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	791b      	ldrb	r3, [r3, #4]
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d138      	bne.n	8006dfe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	0151      	lsls	r1, r2, #5
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	440a      	add	r2, r1
 8006da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006daa:	6013      	str	r3, [r2, #0]
 8006dac:	e027      	b.n	8006dfe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	015a      	lsls	r2, r3, #5
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	0151      	lsls	r1, r2, #5
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	440a      	add	r2, r1
 8006dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006dcc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	791b      	ldrb	r3, [r3, #4]
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d003      	beq.n	8006dde <USB_EPClearStall+0x9e>
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	791b      	ldrb	r3, [r3, #4]
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d10f      	bne.n	8006dfe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	0151      	lsls	r1, r2, #5
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	440a      	add	r2, r1
 8006df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dfc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	460b      	mov	r3, r1
 8006e16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e2a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006e2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	78fb      	ldrb	r3, [r7, #3]
 8006e3a:	011b      	lsls	r3, r3, #4
 8006e3c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006e40:	68f9      	ldr	r1, [r7, #12]
 8006e42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e46:	4313      	orrs	r3, r2
 8006e48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e72:	f023 0303 	bic.w	r3, r3, #3
 8006e76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e86:	f023 0302 	bic.w	r3, r3, #2
 8006e8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b085      	sub	sp, #20
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006eb4:	f023 0303 	bic.w	r3, r3, #3
 8006eb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ec8:	f043 0302 	orr.w	r3, r3, #2
 8006ecc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b085      	sub	sp, #20
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	4013      	ands	r3, r2
 8006f24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	0c1b      	lsrs	r3, r3, #16
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f36:	b480      	push	{r7}
 8006f38:	b085      	sub	sp, #20
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f52:	69db      	ldr	r3, [r3, #28]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	4013      	ands	r3, r2
 8006f58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	b29b      	uxth	r3, r3
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b085      	sub	sp, #20
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
 8006f72:	460b      	mov	r3, r1
 8006f74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006f7a:	78fb      	ldrb	r3, [r7, #3]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	4013      	ands	r3, r2
 8006f96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f98:	68bb      	ldr	r3, [r7, #8]
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3714      	adds	r7, #20
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b087      	sub	sp, #28
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	460b      	mov	r3, r1
 8006fb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006fca:	78fb      	ldrb	r3, [r7, #3]
 8006fcc:	f003 030f 	and.w	r3, r3, #15
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd6:	01db      	lsls	r3, r3, #7
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006fe0:	78fb      	ldrb	r3, [r7, #3]
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ff4:	68bb      	ldr	r3, [r7, #8]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	371c      	adds	r7, #28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007002:	b480      	push	{r7}
 8007004:	b083      	sub	sp, #12
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	f003 0301 	and.w	r3, r3, #1
}
 8007012:	4618      	mov	r0, r3
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800701e:	b480      	push	{r7}
 8007020:	b085      	sub	sp, #20
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007038:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800703c:	f023 0307 	bic.w	r3, r3, #7
 8007040:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007054:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	460b      	mov	r3, r1
 800706e:	607a      	str	r2, [r7, #4]
 8007070:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	333c      	adds	r3, #60	; 0x3c
 800707a:	3304      	adds	r3, #4
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	4a26      	ldr	r2, [pc, #152]	; (800711c <USB_EP0_OutStart+0xb8>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d90a      	bls.n	800709e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007094:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007098:	d101      	bne.n	800709e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	e037      	b.n	800710e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a4:	461a      	mov	r2, r3
 80070a6:	2300      	movs	r3, #0
 80070a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070cc:	f043 0318 	orr.w	r3, r3, #24
 80070d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80070e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80070e6:	7afb      	ldrb	r3, [r7, #11]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d10f      	bne.n	800710c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f2:	461a      	mov	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007106:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800710a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	371c      	adds	r7, #28
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	4f54300a 	.word	0x4f54300a

08007120 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007128:	2300      	movs	r3, #0
 800712a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	3301      	adds	r3, #1
 8007130:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	4a13      	ldr	r2, [pc, #76]	; (8007184 <USB_CoreReset+0x64>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d901      	bls.n	800713e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e01b      	b.n	8007176 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	2b00      	cmp	r3, #0
 8007144:	daf2      	bge.n	800712c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007146:	2300      	movs	r3, #0
 8007148:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	f043 0201 	orr.w	r2, r3, #1
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	3301      	adds	r3, #1
 800715a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	4a09      	ldr	r2, [pc, #36]	; (8007184 <USB_CoreReset+0x64>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d901      	bls.n	8007168 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e006      	b.n	8007176 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	f003 0301 	and.w	r3, r3, #1
 8007170:	2b01      	cmp	r3, #1
 8007172:	d0f0      	beq.n	8007156 <USB_CoreReset+0x36>

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	00030d40 	.word	0x00030d40

08007188 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	460b      	mov	r3, r1
 8007192:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007194:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007198:	f002 fc94 	bl	8009ac4 <USBD_static_malloc>
 800719c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d109      	bne.n	80071b8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	32b0      	adds	r2, #176	; 0xb0
 80071ae:	2100      	movs	r1, #0
 80071b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80071b4:	2302      	movs	r3, #2
 80071b6:	e0d4      	b.n	8007362 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80071b8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80071bc:	2100      	movs	r1, #0
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f003 fa71 	bl	800a6a6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	32b0      	adds	r2, #176	; 0xb0
 80071ce:	68f9      	ldr	r1, [r7, #12]
 80071d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	32b0      	adds	r2, #176	; 0xb0
 80071de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	7c1b      	ldrb	r3, [r3, #16]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d138      	bne.n	8007262 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80071f0:	4b5e      	ldr	r3, [pc, #376]	; (800736c <USBD_CDC_Init+0x1e4>)
 80071f2:	7819      	ldrb	r1, [r3, #0]
 80071f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071f8:	2202      	movs	r2, #2
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f002 fb3f 	bl	800987e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007200:	4b5a      	ldr	r3, [pc, #360]	; (800736c <USBD_CDC_Init+0x1e4>)
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	f003 020f 	and.w	r2, r3, #15
 8007208:	6879      	ldr	r1, [r7, #4]
 800720a:	4613      	mov	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4413      	add	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	440b      	add	r3, r1
 8007214:	3324      	adds	r3, #36	; 0x24
 8007216:	2201      	movs	r2, #1
 8007218:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800721a:	4b55      	ldr	r3, [pc, #340]	; (8007370 <USBD_CDC_Init+0x1e8>)
 800721c:	7819      	ldrb	r1, [r3, #0]
 800721e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007222:	2202      	movs	r2, #2
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f002 fb2a 	bl	800987e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800722a:	4b51      	ldr	r3, [pc, #324]	; (8007370 <USBD_CDC_Init+0x1e8>)
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	f003 020f 	and.w	r2, r3, #15
 8007232:	6879      	ldr	r1, [r7, #4]
 8007234:	4613      	mov	r3, r2
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4413      	add	r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	440b      	add	r3, r1
 800723e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007242:	2201      	movs	r2, #1
 8007244:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007246:	4b4b      	ldr	r3, [pc, #300]	; (8007374 <USBD_CDC_Init+0x1ec>)
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	f003 020f 	and.w	r2, r3, #15
 800724e:	6879      	ldr	r1, [r7, #4]
 8007250:	4613      	mov	r3, r2
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4413      	add	r3, r2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	440b      	add	r3, r1
 800725a:	3326      	adds	r3, #38	; 0x26
 800725c:	2210      	movs	r2, #16
 800725e:	801a      	strh	r2, [r3, #0]
 8007260:	e035      	b.n	80072ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007262:	4b42      	ldr	r3, [pc, #264]	; (800736c <USBD_CDC_Init+0x1e4>)
 8007264:	7819      	ldrb	r1, [r3, #0]
 8007266:	2340      	movs	r3, #64	; 0x40
 8007268:	2202      	movs	r2, #2
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f002 fb07 	bl	800987e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007270:	4b3e      	ldr	r3, [pc, #248]	; (800736c <USBD_CDC_Init+0x1e4>)
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	f003 020f 	and.w	r2, r3, #15
 8007278:	6879      	ldr	r1, [r7, #4]
 800727a:	4613      	mov	r3, r2
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	4413      	add	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	440b      	add	r3, r1
 8007284:	3324      	adds	r3, #36	; 0x24
 8007286:	2201      	movs	r2, #1
 8007288:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800728a:	4b39      	ldr	r3, [pc, #228]	; (8007370 <USBD_CDC_Init+0x1e8>)
 800728c:	7819      	ldrb	r1, [r3, #0]
 800728e:	2340      	movs	r3, #64	; 0x40
 8007290:	2202      	movs	r2, #2
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f002 faf3 	bl	800987e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007298:	4b35      	ldr	r3, [pc, #212]	; (8007370 <USBD_CDC_Init+0x1e8>)
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	f003 020f 	and.w	r2, r3, #15
 80072a0:	6879      	ldr	r1, [r7, #4]
 80072a2:	4613      	mov	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4413      	add	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	440b      	add	r3, r1
 80072ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80072b0:	2201      	movs	r2, #1
 80072b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80072b4:	4b2f      	ldr	r3, [pc, #188]	; (8007374 <USBD_CDC_Init+0x1ec>)
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	f003 020f 	and.w	r2, r3, #15
 80072bc:	6879      	ldr	r1, [r7, #4]
 80072be:	4613      	mov	r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	440b      	add	r3, r1
 80072c8:	3326      	adds	r3, #38	; 0x26
 80072ca:	2210      	movs	r2, #16
 80072cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80072ce:	4b29      	ldr	r3, [pc, #164]	; (8007374 <USBD_CDC_Init+0x1ec>)
 80072d0:	7819      	ldrb	r1, [r3, #0]
 80072d2:	2308      	movs	r3, #8
 80072d4:	2203      	movs	r2, #3
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f002 fad1 	bl	800987e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80072dc:	4b25      	ldr	r3, [pc, #148]	; (8007374 <USBD_CDC_Init+0x1ec>)
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	f003 020f 	and.w	r2, r3, #15
 80072e4:	6879      	ldr	r1, [r7, #4]
 80072e6:	4613      	mov	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	440b      	add	r3, r1
 80072f0:	3324      	adds	r3, #36	; 0x24
 80072f2:	2201      	movs	r2, #1
 80072f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	33b0      	adds	r3, #176	; 0xb0
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800732c:	2302      	movs	r3, #2
 800732e:	e018      	b.n	8007362 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	7c1b      	ldrb	r3, [r3, #16]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10a      	bne.n	800734e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007338:	4b0d      	ldr	r3, [pc, #52]	; (8007370 <USBD_CDC_Init+0x1e8>)
 800733a:	7819      	ldrb	r1, [r3, #0]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007342:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f002 fb88 	bl	8009a5c <USBD_LL_PrepareReceive>
 800734c:	e008      	b.n	8007360 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800734e:	4b08      	ldr	r3, [pc, #32]	; (8007370 <USBD_CDC_Init+0x1e8>)
 8007350:	7819      	ldrb	r1, [r3, #0]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007358:	2340      	movs	r3, #64	; 0x40
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f002 fb7e 	bl	8009a5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	20000093 	.word	0x20000093
 8007370:	20000094 	.word	0x20000094
 8007374:	20000095 	.word	0x20000095

08007378 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	460b      	mov	r3, r1
 8007382:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007384:	4b3a      	ldr	r3, [pc, #232]	; (8007470 <USBD_CDC_DeInit+0xf8>)
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	4619      	mov	r1, r3
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f002 fa9d 	bl	80098ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007390:	4b37      	ldr	r3, [pc, #220]	; (8007470 <USBD_CDC_DeInit+0xf8>)
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	f003 020f 	and.w	r2, r3, #15
 8007398:	6879      	ldr	r1, [r7, #4]
 800739a:	4613      	mov	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	440b      	add	r3, r1
 80073a4:	3324      	adds	r3, #36	; 0x24
 80073a6:	2200      	movs	r2, #0
 80073a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80073aa:	4b32      	ldr	r3, [pc, #200]	; (8007474 <USBD_CDC_DeInit+0xfc>)
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	4619      	mov	r1, r3
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f002 fa8a 	bl	80098ca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80073b6:	4b2f      	ldr	r3, [pc, #188]	; (8007474 <USBD_CDC_DeInit+0xfc>)
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	f003 020f 	and.w	r2, r3, #15
 80073be:	6879      	ldr	r1, [r7, #4]
 80073c0:	4613      	mov	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4413      	add	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	440b      	add	r3, r1
 80073ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80073ce:	2200      	movs	r2, #0
 80073d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80073d2:	4b29      	ldr	r3, [pc, #164]	; (8007478 <USBD_CDC_DeInit+0x100>)
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	4619      	mov	r1, r3
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f002 fa76 	bl	80098ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80073de:	4b26      	ldr	r3, [pc, #152]	; (8007478 <USBD_CDC_DeInit+0x100>)
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	f003 020f 	and.w	r2, r3, #15
 80073e6:	6879      	ldr	r1, [r7, #4]
 80073e8:	4613      	mov	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	440b      	add	r3, r1
 80073f2:	3324      	adds	r3, #36	; 0x24
 80073f4:	2200      	movs	r2, #0
 80073f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80073f8:	4b1f      	ldr	r3, [pc, #124]	; (8007478 <USBD_CDC_DeInit+0x100>)
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	f003 020f 	and.w	r2, r3, #15
 8007400:	6879      	ldr	r1, [r7, #4]
 8007402:	4613      	mov	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	440b      	add	r3, r1
 800740c:	3326      	adds	r3, #38	; 0x26
 800740e:	2200      	movs	r2, #0
 8007410:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	32b0      	adds	r2, #176	; 0xb0
 800741c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d01f      	beq.n	8007464 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	33b0      	adds	r3, #176	; 0xb0
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	32b0      	adds	r2, #176	; 0xb0
 8007442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007446:	4618      	mov	r0, r3
 8007448:	f002 fb4a 	bl	8009ae0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	32b0      	adds	r2, #176	; 0xb0
 8007456:	2100      	movs	r1, #0
 8007458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	20000093 	.word	0x20000093
 8007474:	20000094 	.word	0x20000094
 8007478:	20000095 	.word	0x20000095

0800747c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	32b0      	adds	r2, #176	; 0xb0
 8007490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007494:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800749a:	2300      	movs	r3, #0
 800749c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800749e:	2300      	movs	r3, #0
 80074a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e0bf      	b.n	800762c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d050      	beq.n	800755a <USBD_CDC_Setup+0xde>
 80074b8:	2b20      	cmp	r3, #32
 80074ba:	f040 80af 	bne.w	800761c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	88db      	ldrh	r3, [r3, #6]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d03a      	beq.n	800753c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	b25b      	sxtb	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	da1b      	bge.n	8007508 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	33b0      	adds	r3, #176	; 0xb0
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80074e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80074e8:	683a      	ldr	r2, [r7, #0]
 80074ea:	88d2      	ldrh	r2, [r2, #6]
 80074ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	88db      	ldrh	r3, [r3, #6]
 80074f2:	2b07      	cmp	r3, #7
 80074f4:	bf28      	it	cs
 80074f6:	2307      	movcs	r3, #7
 80074f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	89fa      	ldrh	r2, [r7, #14]
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f001 fd89 	bl	8009018 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007506:	e090      	b.n	800762a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	785a      	ldrb	r2, [r3, #1]
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	88db      	ldrh	r3, [r3, #6]
 8007516:	2b3f      	cmp	r3, #63	; 0x3f
 8007518:	d803      	bhi.n	8007522 <USBD_CDC_Setup+0xa6>
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	88db      	ldrh	r3, [r3, #6]
 800751e:	b2da      	uxtb	r2, r3
 8007520:	e000      	b.n	8007524 <USBD_CDC_Setup+0xa8>
 8007522:	2240      	movs	r2, #64	; 0x40
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800752a:	6939      	ldr	r1, [r7, #16]
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007532:	461a      	mov	r2, r3
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f001 fd9b 	bl	8009070 <USBD_CtlPrepareRx>
      break;
 800753a:	e076      	b.n	800762a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	33b0      	adds	r3, #176	; 0xb0
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	7850      	ldrb	r0, [r2, #1]
 8007552:	2200      	movs	r2, #0
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	4798      	blx	r3
      break;
 8007558:	e067      	b.n	800762a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	785b      	ldrb	r3, [r3, #1]
 800755e:	2b0b      	cmp	r3, #11
 8007560:	d851      	bhi.n	8007606 <USBD_CDC_Setup+0x18a>
 8007562:	a201      	add	r2, pc, #4	; (adr r2, 8007568 <USBD_CDC_Setup+0xec>)
 8007564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007568:	08007599 	.word	0x08007599
 800756c:	08007615 	.word	0x08007615
 8007570:	08007607 	.word	0x08007607
 8007574:	08007607 	.word	0x08007607
 8007578:	08007607 	.word	0x08007607
 800757c:	08007607 	.word	0x08007607
 8007580:	08007607 	.word	0x08007607
 8007584:	08007607 	.word	0x08007607
 8007588:	08007607 	.word	0x08007607
 800758c:	08007607 	.word	0x08007607
 8007590:	080075c3 	.word	0x080075c3
 8007594:	080075ed 	.word	0x080075ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d107      	bne.n	80075b4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80075a4:	f107 030a 	add.w	r3, r7, #10
 80075a8:	2202      	movs	r2, #2
 80075aa:	4619      	mov	r1, r3
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f001 fd33 	bl	8009018 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80075b2:	e032      	b.n	800761a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f001 fcbd 	bl	8008f36 <USBD_CtlError>
            ret = USBD_FAIL;
 80075bc:	2303      	movs	r3, #3
 80075be:	75fb      	strb	r3, [r7, #23]
          break;
 80075c0:	e02b      	b.n	800761a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	d107      	bne.n	80075de <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80075ce:	f107 030d 	add.w	r3, r7, #13
 80075d2:	2201      	movs	r2, #1
 80075d4:	4619      	mov	r1, r3
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f001 fd1e 	bl	8009018 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80075dc:	e01d      	b.n	800761a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f001 fca8 	bl	8008f36 <USBD_CtlError>
            ret = USBD_FAIL;
 80075e6:	2303      	movs	r3, #3
 80075e8:	75fb      	strb	r3, [r7, #23]
          break;
 80075ea:	e016      	b.n	800761a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b03      	cmp	r3, #3
 80075f6:	d00f      	beq.n	8007618 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80075f8:	6839      	ldr	r1, [r7, #0]
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f001 fc9b 	bl	8008f36 <USBD_CtlError>
            ret = USBD_FAIL;
 8007600:	2303      	movs	r3, #3
 8007602:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007604:	e008      	b.n	8007618 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f001 fc94 	bl	8008f36 <USBD_CtlError>
          ret = USBD_FAIL;
 800760e:	2303      	movs	r3, #3
 8007610:	75fb      	strb	r3, [r7, #23]
          break;
 8007612:	e002      	b.n	800761a <USBD_CDC_Setup+0x19e>
          break;
 8007614:	bf00      	nop
 8007616:	e008      	b.n	800762a <USBD_CDC_Setup+0x1ae>
          break;
 8007618:	bf00      	nop
      }
      break;
 800761a:	e006      	b.n	800762a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f001 fc89 	bl	8008f36 <USBD_CtlError>
      ret = USBD_FAIL;
 8007624:	2303      	movs	r3, #3
 8007626:	75fb      	strb	r3, [r7, #23]
      break;
 8007628:	bf00      	nop
  }

  return (uint8_t)ret;
 800762a:	7dfb      	ldrb	r3, [r7, #23]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3718      	adds	r7, #24
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	460b      	mov	r3, r1
 800763e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007646:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	32b0      	adds	r2, #176	; 0xb0
 8007652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800765a:	2303      	movs	r3, #3
 800765c:	e065      	b.n	800772a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	32b0      	adds	r2, #176	; 0xb0
 8007668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800766c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800766e:	78fb      	ldrb	r3, [r7, #3]
 8007670:	f003 020f 	and.w	r2, r3, #15
 8007674:	6879      	ldr	r1, [r7, #4]
 8007676:	4613      	mov	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	440b      	add	r3, r1
 8007680:	3318      	adds	r3, #24
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d02f      	beq.n	80076e8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007688:	78fb      	ldrb	r3, [r7, #3]
 800768a:	f003 020f 	and.w	r2, r3, #15
 800768e:	6879      	ldr	r1, [r7, #4]
 8007690:	4613      	mov	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	440b      	add	r3, r1
 800769a:	3318      	adds	r3, #24
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	78fb      	ldrb	r3, [r7, #3]
 80076a0:	f003 010f 	and.w	r1, r3, #15
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	460b      	mov	r3, r1
 80076a8:	00db      	lsls	r3, r3, #3
 80076aa:	440b      	add	r3, r1
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4403      	add	r3, r0
 80076b0:	3348      	adds	r3, #72	; 0x48
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80076b8:	fb01 f303 	mul.w	r3, r1, r3
 80076bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d112      	bne.n	80076e8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80076c2:	78fb      	ldrb	r3, [r7, #3]
 80076c4:	f003 020f 	and.w	r2, r3, #15
 80076c8:	6879      	ldr	r1, [r7, #4]
 80076ca:	4613      	mov	r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4413      	add	r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	440b      	add	r3, r1
 80076d4:	3318      	adds	r3, #24
 80076d6:	2200      	movs	r2, #0
 80076d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80076da:	78f9      	ldrb	r1, [r7, #3]
 80076dc:	2300      	movs	r3, #0
 80076de:	2200      	movs	r2, #0
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f002 f99a 	bl	8009a1a <USBD_LL_Transmit>
 80076e6:	e01f      	b.n	8007728 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	33b0      	adds	r3, #176	; 0xb0
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d010      	beq.n	8007728 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	33b0      	adds	r3, #176	; 0xb0
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007724:	78fa      	ldrb	r2, [r7, #3]
 8007726:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b084      	sub	sp, #16
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
 800773a:	460b      	mov	r3, r1
 800773c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	32b0      	adds	r2, #176	; 0xb0
 8007748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800774c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	32b0      	adds	r2, #176	; 0xb0
 8007758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007760:	2303      	movs	r3, #3
 8007762:	e01a      	b.n	800779a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007764:	78fb      	ldrb	r3, [r7, #3]
 8007766:	4619      	mov	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f002 f998 	bl	8009a9e <USBD_LL_GetRxDataSize>
 800776e:	4602      	mov	r2, r0
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	33b0      	adds	r3, #176	; 0xb0
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4413      	add	r3, r2
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007794:	4611      	mov	r1, r2
 8007796:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b084      	sub	sp, #16
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	32b0      	adds	r2, #176	; 0xb0
 80077b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d101      	bne.n	80077c4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80077c0:	2303      	movs	r3, #3
 80077c2:	e025      	b.n	8007810 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	33b0      	adds	r3, #176	; 0xb0
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4413      	add	r3, r2
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d01a      	beq.n	800780e <USBD_CDC_EP0_RxReady+0x6c>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80077de:	2bff      	cmp	r3, #255	; 0xff
 80077e0:	d015      	beq.n	800780e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	33b0      	adds	r3, #176	; 0xb0
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80077fa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007802:	b292      	uxth	r2, r2
 8007804:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	22ff      	movs	r2, #255	; 0xff
 800780a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007820:	2182      	movs	r1, #130	; 0x82
 8007822:	4818      	ldr	r0, [pc, #96]	; (8007884 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007824:	f000 fd4f 	bl	80082c6 <USBD_GetEpDesc>
 8007828:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800782a:	2101      	movs	r1, #1
 800782c:	4815      	ldr	r0, [pc, #84]	; (8007884 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800782e:	f000 fd4a 	bl	80082c6 <USBD_GetEpDesc>
 8007832:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007834:	2181      	movs	r1, #129	; 0x81
 8007836:	4813      	ldr	r0, [pc, #76]	; (8007884 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007838:	f000 fd45 	bl	80082c6 <USBD_GetEpDesc>
 800783c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d002      	beq.n	800784a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	2210      	movs	r2, #16
 8007848:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d006      	beq.n	800785e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	2200      	movs	r2, #0
 8007854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007858:	711a      	strb	r2, [r3, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d006      	beq.n	8007872 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800786c:	711a      	strb	r2, [r3, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2243      	movs	r2, #67	; 0x43
 8007876:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007878:	4b02      	ldr	r3, [pc, #8]	; (8007884 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800787a:	4618      	mov	r0, r3
 800787c:	3718      	adds	r7, #24
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	20000050 	.word	0x20000050

08007888 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007890:	2182      	movs	r1, #130	; 0x82
 8007892:	4818      	ldr	r0, [pc, #96]	; (80078f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007894:	f000 fd17 	bl	80082c6 <USBD_GetEpDesc>
 8007898:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800789a:	2101      	movs	r1, #1
 800789c:	4815      	ldr	r0, [pc, #84]	; (80078f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800789e:	f000 fd12 	bl	80082c6 <USBD_GetEpDesc>
 80078a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80078a4:	2181      	movs	r1, #129	; 0x81
 80078a6:	4813      	ldr	r0, [pc, #76]	; (80078f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80078a8:	f000 fd0d 	bl	80082c6 <USBD_GetEpDesc>
 80078ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d002      	beq.n	80078ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	2210      	movs	r2, #16
 80078b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d006      	beq.n	80078ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	2200      	movs	r2, #0
 80078c4:	711a      	strb	r2, [r3, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f042 0202 	orr.w	r2, r2, #2
 80078cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d006      	beq.n	80078e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	711a      	strb	r2, [r3, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	f042 0202 	orr.w	r2, r2, #2
 80078e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2243      	movs	r2, #67	; 0x43
 80078e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80078e8:	4b02      	ldr	r3, [pc, #8]	; (80078f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3718      	adds	r7, #24
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	20000050 	.word	0x20000050

080078f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007900:	2182      	movs	r1, #130	; 0x82
 8007902:	4818      	ldr	r0, [pc, #96]	; (8007964 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007904:	f000 fcdf 	bl	80082c6 <USBD_GetEpDesc>
 8007908:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800790a:	2101      	movs	r1, #1
 800790c:	4815      	ldr	r0, [pc, #84]	; (8007964 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800790e:	f000 fcda 	bl	80082c6 <USBD_GetEpDesc>
 8007912:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007914:	2181      	movs	r1, #129	; 0x81
 8007916:	4813      	ldr	r0, [pc, #76]	; (8007964 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007918:	f000 fcd5 	bl	80082c6 <USBD_GetEpDesc>
 800791c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d002      	beq.n	800792a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	2210      	movs	r2, #16
 8007928:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d006      	beq.n	800793e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	2200      	movs	r2, #0
 8007934:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007938:	711a      	strb	r2, [r3, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d006      	beq.n	8007952 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800794c:	711a      	strb	r2, [r3, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2243      	movs	r2, #67	; 0x43
 8007956:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007958:	4b02      	ldr	r3, [pc, #8]	; (8007964 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800795a:	4618      	mov	r0, r3
 800795c:	3718      	adds	r7, #24
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	20000050 	.word	0x20000050

08007968 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	220a      	movs	r2, #10
 8007974:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007976:	4b03      	ldr	r3, [pc, #12]	; (8007984 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007978:	4618      	mov	r0, r3
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr
 8007984:	2000000c 	.word	0x2000000c

08007988 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d101      	bne.n	800799c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007998:	2303      	movs	r3, #3
 800799a:	e009      	b.n	80079b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	33b0      	adds	r3, #176	; 0xb0
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	4413      	add	r3, r2
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	32b0      	adds	r2, #176	; 0xb0
 80079d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80079de:	2303      	movs	r3, #3
 80079e0:	e008      	b.n	80079f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	371c      	adds	r7, #28
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	32b0      	adds	r2, #176	; 0xb0
 8007a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d101      	bne.n	8007a24 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007a20:	2303      	movs	r3, #3
 8007a22:	e004      	b.n	8007a2e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
	...

08007a3c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	32b0      	adds	r2, #176	; 0xb0
 8007a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a52:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007a54:	2301      	movs	r3, #1
 8007a56:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	32b0      	adds	r2, #176	; 0xb0
 8007a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e025      	b.n	8007aba <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d11f      	bne.n	8007ab8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007a80:	4b10      	ldr	r3, [pc, #64]	; (8007ac4 <USBD_CDC_TransmitPacket+0x88>)
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	f003 020f 	and.w	r2, r3, #15
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	4613      	mov	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	4413      	add	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4403      	add	r3, r0
 8007a9a:	3318      	adds	r3, #24
 8007a9c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007a9e:	4b09      	ldr	r3, [pc, #36]	; (8007ac4 <USBD_CDC_TransmitPacket+0x88>)
 8007aa0:	7819      	ldrb	r1, [r3, #0]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f001 ffb3 	bl	8009a1a <USBD_LL_Transmit>

    ret = USBD_OK;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	20000093 	.word	0x20000093

08007ac8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	32b0      	adds	r2, #176	; 0xb0
 8007ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ade:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	32b0      	adds	r2, #176	; 0xb0
 8007aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d101      	bne.n	8007af6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e018      	b.n	8007b28 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	7c1b      	ldrb	r3, [r3, #16]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10a      	bne.n	8007b14 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007afe:	4b0c      	ldr	r3, [pc, #48]	; (8007b30 <USBD_CDC_ReceivePacket+0x68>)
 8007b00:	7819      	ldrb	r1, [r3, #0]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f001 ffa5 	bl	8009a5c <USBD_LL_PrepareReceive>
 8007b12:	e008      	b.n	8007b26 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b14:	4b06      	ldr	r3, [pc, #24]	; (8007b30 <USBD_CDC_ReceivePacket+0x68>)
 8007b16:	7819      	ldrb	r1, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b1e:	2340      	movs	r3, #64	; 0x40
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f001 ff9b 	bl	8009a5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	20000094 	.word	0x20000094

08007b34 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d101      	bne.n	8007b4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e01f      	b.n	8007b8c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d003      	beq.n	8007b72 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	79fa      	ldrb	r2, [r7, #7]
 8007b7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f001 fe15 	bl	80097b0 <USBD_LL_Init>
 8007b86:	4603      	mov	r3, r0
 8007b88:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3718      	adds	r7, #24
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d101      	bne.n	8007bac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e025      	b.n	8007bf8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	32ae      	adds	r2, #174	; 0xae
 8007bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00f      	beq.n	8007be8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	32ae      	adds	r2, #174	; 0xae
 8007bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd8:	f107 020e 	add.w	r2, r7, #14
 8007bdc:	4610      	mov	r0, r2
 8007bde:	4798      	blx	r3
 8007be0:	4602      	mov	r2, r0
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007bee:	1c5a      	adds	r2, r3, #1
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f001 fe1d 	bl	8009848 <USBD_LL_Start>
 8007c0e:	4603      	mov	r3, r0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c20:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b084      	sub	sp, #16
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	460b      	mov	r3, r1
 8007c38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d009      	beq.n	8007c5c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	78fa      	ldrb	r2, [r7, #3]
 8007c52:	4611      	mov	r1, r2
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	4798      	blx	r3
 8007c58:	4603      	mov	r3, r0
 8007c5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b084      	sub	sp, #16
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	460b      	mov	r3, r1
 8007c70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	78fa      	ldrb	r2, [r7, #3]
 8007c80:	4611      	mov	r1, r2
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	4798      	blx	r3
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d001      	beq.n	8007c90 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b084      	sub	sp, #16
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007caa:	6839      	ldr	r1, [r7, #0]
 8007cac:	4618      	mov	r0, r3
 8007cae:	f001 f908 	bl	8008ec2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007cce:	f003 031f 	and.w	r3, r3, #31
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d01a      	beq.n	8007d0c <USBD_LL_SetupStage+0x72>
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d822      	bhi.n	8007d20 <USBD_LL_SetupStage+0x86>
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d002      	beq.n	8007ce4 <USBD_LL_SetupStage+0x4a>
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d00a      	beq.n	8007cf8 <USBD_LL_SetupStage+0x5e>
 8007ce2:	e01d      	b.n	8007d20 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fb5f 	bl	80083b0 <USBD_StdDevReq>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf6:	e020      	b.n	8007d3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 fbc7 	bl	8008494 <USBD_StdItfReq>
 8007d06:	4603      	mov	r3, r0
 8007d08:	73fb      	strb	r3, [r7, #15]
      break;
 8007d0a:	e016      	b.n	8007d3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fc29 	bl	800856c <USBD_StdEPReq>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d1e:	e00c      	b.n	8007d3a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f001 fdea 	bl	8009908 <USBD_LL_StallEP>
 8007d34:	4603      	mov	r3, r0
 8007d36:	73fb      	strb	r3, [r7, #15]
      break;
 8007d38:	bf00      	nop
  }

  return ret;
 8007d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b086      	sub	sp, #24
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	607a      	str	r2, [r7, #4]
 8007d50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d52:	2300      	movs	r3, #0
 8007d54:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007d56:	7afb      	ldrb	r3, [r7, #11]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d16e      	bne.n	8007e3a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	f040 8098 	bne.w	8007ea0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	689a      	ldr	r2, [r3, #8]
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d913      	bls.n	8007da4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	689a      	ldr	r2, [r3, #8]
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	1ad2      	subs	r2, r2, r3
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	68da      	ldr	r2, [r3, #12]
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	4293      	cmp	r3, r2
 8007d94:	bf28      	it	cs
 8007d96:	4613      	movcs	r3, r2
 8007d98:	461a      	mov	r2, r3
 8007d9a:	6879      	ldr	r1, [r7, #4]
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f001 f984 	bl	80090aa <USBD_CtlContinueRx>
 8007da2:	e07d      	b.n	8007ea0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007daa:	f003 031f 	and.w	r3, r3, #31
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d014      	beq.n	8007ddc <USBD_LL_DataOutStage+0x98>
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d81d      	bhi.n	8007df2 <USBD_LL_DataOutStage+0xae>
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d002      	beq.n	8007dc0 <USBD_LL_DataOutStage+0x7c>
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d003      	beq.n	8007dc6 <USBD_LL_DataOutStage+0x82>
 8007dbe:	e018      	b.n	8007df2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	75bb      	strb	r3, [r7, #22]
            break;
 8007dc4:	e018      	b.n	8007df8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	4619      	mov	r1, r3
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f000 fa5e 	bl	8008292 <USBD_CoreFindIF>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	75bb      	strb	r3, [r7, #22]
            break;
 8007dda:	e00d      	b.n	8007df8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	4619      	mov	r1, r3
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f000 fa60 	bl	80082ac <USBD_CoreFindEP>
 8007dec:	4603      	mov	r3, r0
 8007dee:	75bb      	strb	r3, [r7, #22]
            break;
 8007df0:	e002      	b.n	8007df8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007df2:	2300      	movs	r3, #0
 8007df4:	75bb      	strb	r3, [r7, #22]
            break;
 8007df6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007df8:	7dbb      	ldrb	r3, [r7, #22]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d119      	bne.n	8007e32 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b03      	cmp	r3, #3
 8007e08:	d113      	bne.n	8007e32 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007e0a:	7dba      	ldrb	r2, [r7, #22]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	32ae      	adds	r2, #174	; 0xae
 8007e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00b      	beq.n	8007e32 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007e1a:	7dba      	ldrb	r2, [r7, #22]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007e22:	7dba      	ldrb	r2, [r7, #22]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	32ae      	adds	r2, #174	; 0xae
 8007e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f001 f94a 	bl	80090cc <USBD_CtlSendStatus>
 8007e38:	e032      	b.n	8007ea0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007e3a:	7afb      	ldrb	r3, [r7, #11]
 8007e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	4619      	mov	r1, r3
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 fa31 	bl	80082ac <USBD_CoreFindEP>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e4e:	7dbb      	ldrb	r3, [r7, #22]
 8007e50:	2bff      	cmp	r3, #255	; 0xff
 8007e52:	d025      	beq.n	8007ea0 <USBD_LL_DataOutStage+0x15c>
 8007e54:	7dbb      	ldrb	r3, [r7, #22]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d122      	bne.n	8007ea0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	2b03      	cmp	r3, #3
 8007e64:	d117      	bne.n	8007e96 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007e66:	7dba      	ldrb	r2, [r7, #22]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	32ae      	adds	r2, #174	; 0xae
 8007e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00f      	beq.n	8007e96 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007e76:	7dba      	ldrb	r2, [r7, #22]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007e7e:	7dba      	ldrb	r2, [r7, #22]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	32ae      	adds	r2, #174	; 0xae
 8007e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	7afa      	ldrb	r2, [r7, #11]
 8007e8c:	4611      	mov	r1, r2
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	4798      	blx	r3
 8007e92:	4603      	mov	r3, r0
 8007e94:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007e96:	7dfb      	ldrb	r3, [r7, #23]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d001      	beq.n	8007ea0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007e9c:	7dfb      	ldrb	r3, [r7, #23]
 8007e9e:	e000      	b.n	8007ea2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3718      	adds	r7, #24
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b086      	sub	sp, #24
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	60f8      	str	r0, [r7, #12]
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	607a      	str	r2, [r7, #4]
 8007eb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007eb8:	7afb      	ldrb	r3, [r7, #11]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d16f      	bne.n	8007f9e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	3314      	adds	r3, #20
 8007ec2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d15a      	bne.n	8007f84 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	689a      	ldr	r2, [r3, #8]
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d914      	bls.n	8007f04 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	689a      	ldr	r2, [r3, #8]
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	1ad2      	subs	r2, r2, r3
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	461a      	mov	r2, r3
 8007eee:	6879      	ldr	r1, [r7, #4]
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f001 f8ac 	bl	800904e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	2200      	movs	r2, #0
 8007efa:	2100      	movs	r1, #0
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f001 fdad 	bl	8009a5c <USBD_LL_PrepareReceive>
 8007f02:	e03f      	b.n	8007f84 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	68da      	ldr	r2, [r3, #12]
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d11c      	bne.n	8007f4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	685a      	ldr	r2, [r3, #4]
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d316      	bcc.n	8007f4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	685a      	ldr	r2, [r3, #4]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d20f      	bcs.n	8007f4a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f001 f88d 	bl	800904e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	2200      	movs	r2, #0
 8007f40:	2100      	movs	r1, #0
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f001 fd8a 	bl	8009a5c <USBD_LL_PrepareReceive>
 8007f48:	e01c      	b.n	8007f84 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	d10f      	bne.n	8007f76 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d009      	beq.n	8007f76 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f76:	2180      	movs	r1, #128	; 0x80
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f001 fcc5 	bl	8009908 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f001 f8b7 	bl	80090f2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d03a      	beq.n	8008004 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f7ff fe42 	bl	8007c18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f9c:	e032      	b.n	8008004 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007f9e:	7afb      	ldrb	r3, [r7, #11]
 8007fa0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f000 f97f 	bl	80082ac <USBD_CoreFindEP>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fb2:	7dfb      	ldrb	r3, [r7, #23]
 8007fb4:	2bff      	cmp	r3, #255	; 0xff
 8007fb6:	d025      	beq.n	8008004 <USBD_LL_DataInStage+0x15a>
 8007fb8:	7dfb      	ldrb	r3, [r7, #23]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d122      	bne.n	8008004 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b03      	cmp	r3, #3
 8007fc8:	d11c      	bne.n	8008004 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007fca:	7dfa      	ldrb	r2, [r7, #23]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	32ae      	adds	r2, #174	; 0xae
 8007fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d014      	beq.n	8008004 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007fda:	7dfa      	ldrb	r2, [r7, #23]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007fe2:	7dfa      	ldrb	r2, [r7, #23]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	32ae      	adds	r2, #174	; 0xae
 8007fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fec:	695b      	ldr	r3, [r3, #20]
 8007fee:	7afa      	ldrb	r2, [r7, #11]
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	4798      	blx	r3
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007ffa:	7dbb      	ldrb	r3, [r7, #22]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d001      	beq.n	8008004 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008000:	7dbb      	ldrb	r3, [r7, #22]
 8008002:	e000      	b.n	8008006 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3718      	adds	r7, #24
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b084      	sub	sp, #16
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2201      	movs	r2, #1
 800801e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008046:	2b00      	cmp	r3, #0
 8008048:	d014      	beq.n	8008074 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00e      	beq.n	8008074 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	6852      	ldr	r2, [r2, #4]
 8008062:	b2d2      	uxtb	r2, r2
 8008064:	4611      	mov	r1, r2
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	4798      	blx	r3
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d001      	beq.n	8008074 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008070:	2303      	movs	r3, #3
 8008072:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008074:	2340      	movs	r3, #64	; 0x40
 8008076:	2200      	movs	r2, #0
 8008078:	2100      	movs	r1, #0
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f001 fbff 	bl	800987e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2240      	movs	r2, #64	; 0x40
 800808c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008090:	2340      	movs	r3, #64	; 0x40
 8008092:	2200      	movs	r2, #0
 8008094:	2180      	movs	r1, #128	; 0x80
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f001 fbf1 	bl	800987e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2240      	movs	r2, #64	; 0x40
 80080a6:	621a      	str	r2, [r3, #32]

  return ret;
 80080a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b083      	sub	sp, #12
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	460b      	mov	r3, r1
 80080bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	78fa      	ldrb	r2, [r7, #3]
 80080c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80080d2:	b480      	push	{r7}
 80080d4:	b083      	sub	sp, #12
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2204      	movs	r2, #4
 80080ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080fe:	b480      	push	{r7}
 8008100:	b083      	sub	sp, #12
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b04      	cmp	r3, #4
 8008110:	d106      	bne.n	8008120 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008118:	b2da      	uxtb	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b082      	sub	sp, #8
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800813c:	b2db      	uxtb	r3, r3
 800813e:	2b03      	cmp	r3, #3
 8008140:	d110      	bne.n	8008164 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00b      	beq.n	8008164 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008152:	69db      	ldr	r3, [r3, #28]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d005      	beq.n	8008164 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800815e:	69db      	ldr	r3, [r3, #28]
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b082      	sub	sp, #8
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	460b      	mov	r3, r1
 8008178:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	32ae      	adds	r2, #174	; 0xae
 8008184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d101      	bne.n	8008190 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800818c:	2303      	movs	r3, #3
 800818e:	e01c      	b.n	80081ca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008196:	b2db      	uxtb	r3, r3
 8008198:	2b03      	cmp	r3, #3
 800819a:	d115      	bne.n	80081c8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	32ae      	adds	r2, #174	; 0xae
 80081a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081aa:	6a1b      	ldr	r3, [r3, #32]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00b      	beq.n	80081c8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	32ae      	adds	r2, #174	; 0xae
 80081ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081be:	6a1b      	ldr	r3, [r3, #32]
 80081c0:	78fa      	ldrb	r2, [r7, #3]
 80081c2:	4611      	mov	r1, r2
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b082      	sub	sp, #8
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	460b      	mov	r3, r1
 80081dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	32ae      	adds	r2, #174	; 0xae
 80081e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d101      	bne.n	80081f4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80081f0:	2303      	movs	r3, #3
 80081f2:	e01c      	b.n	800822e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	2b03      	cmp	r3, #3
 80081fe:	d115      	bne.n	800822c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	32ae      	adds	r2, #174	; 0xae
 800820a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800820e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00b      	beq.n	800822c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	32ae      	adds	r2, #174	; 0xae
 800821e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008224:	78fa      	ldrb	r2, [r7, #3]
 8008226:	4611      	mov	r1, r2
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3708      	adds	r7, #8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008236:	b480      	push	{r7}
 8008238:	b083      	sub	sp, #12
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00e      	beq.n	8008288 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	6852      	ldr	r2, [r2, #4]
 8008276:	b2d2      	uxtb	r2, r2
 8008278:	4611      	mov	r1, r2
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	4798      	blx	r3
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d001      	beq.n	8008288 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008284:	2303      	movs	r3, #3
 8008286:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008288:	7bfb      	ldrb	r3, [r7, #15]
}
 800828a:	4618      	mov	r0, r3
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008292:	b480      	push	{r7}
 8008294:	b083      	sub	sp, #12
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
 800829a:	460b      	mov	r3, r1
 800829c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800829e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80082b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	370c      	adds	r7, #12
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr

080082c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b086      	sub	sp, #24
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	460b      	mov	r3, r1
 80082d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80082da:	2300      	movs	r3, #0
 80082dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	885b      	ldrh	r3, [r3, #2]
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d920      	bls.n	8008330 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80082f6:	e013      	b.n	8008320 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80082f8:	f107 030a 	add.w	r3, r7, #10
 80082fc:	4619      	mov	r1, r3
 80082fe:	6978      	ldr	r0, [r7, #20]
 8008300:	f000 f81b 	bl	800833a <USBD_GetNextDesc>
 8008304:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	785b      	ldrb	r3, [r3, #1]
 800830a:	2b05      	cmp	r3, #5
 800830c:	d108      	bne.n	8008320 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	789b      	ldrb	r3, [r3, #2]
 8008316:	78fa      	ldrb	r2, [r7, #3]
 8008318:	429a      	cmp	r2, r3
 800831a:	d008      	beq.n	800832e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800831c:	2300      	movs	r3, #0
 800831e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	885b      	ldrh	r3, [r3, #2]
 8008324:	b29a      	uxth	r2, r3
 8008326:	897b      	ldrh	r3, [r7, #10]
 8008328:	429a      	cmp	r2, r3
 800832a:	d8e5      	bhi.n	80082f8 <USBD_GetEpDesc+0x32>
 800832c:	e000      	b.n	8008330 <USBD_GetEpDesc+0x6a>
          break;
 800832e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008330:	693b      	ldr	r3, [r7, #16]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3718      	adds	r7, #24
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800833a:	b480      	push	{r7}
 800833c:	b085      	sub	sp, #20
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
 8008342:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	881a      	ldrh	r2, [r3, #0]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	b29b      	uxth	r3, r3
 8008352:	4413      	add	r3, r2
 8008354:	b29a      	uxth	r2, r3
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	461a      	mov	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4413      	add	r3, r2
 8008364:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008366:	68fb      	ldr	r3, [r7, #12]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3714      	adds	r7, #20
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008374:	b480      	push	{r7}
 8008376:	b087      	sub	sp, #28
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	3301      	adds	r3, #1
 800838a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008392:	8a3b      	ldrh	r3, [r7, #16]
 8008394:	021b      	lsls	r3, r3, #8
 8008396:	b21a      	sxth	r2, r3
 8008398:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800839c:	4313      	orrs	r3, r2
 800839e:	b21b      	sxth	r3, r3
 80083a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80083a2:	89fb      	ldrh	r3, [r7, #14]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	371c      	adds	r7, #28
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083ba:	2300      	movs	r3, #0
 80083bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083c6:	2b40      	cmp	r3, #64	; 0x40
 80083c8:	d005      	beq.n	80083d6 <USBD_StdDevReq+0x26>
 80083ca:	2b40      	cmp	r3, #64	; 0x40
 80083cc:	d857      	bhi.n	800847e <USBD_StdDevReq+0xce>
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00f      	beq.n	80083f2 <USBD_StdDevReq+0x42>
 80083d2:	2b20      	cmp	r3, #32
 80083d4:	d153      	bne.n	800847e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	32ae      	adds	r2, #174	; 0xae
 80083e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	4798      	blx	r3
 80083ec:	4603      	mov	r3, r0
 80083ee:	73fb      	strb	r3, [r7, #15]
      break;
 80083f0:	e04a      	b.n	8008488 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	785b      	ldrb	r3, [r3, #1]
 80083f6:	2b09      	cmp	r3, #9
 80083f8:	d83b      	bhi.n	8008472 <USBD_StdDevReq+0xc2>
 80083fa:	a201      	add	r2, pc, #4	; (adr r2, 8008400 <USBD_StdDevReq+0x50>)
 80083fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008400:	08008455 	.word	0x08008455
 8008404:	08008469 	.word	0x08008469
 8008408:	08008473 	.word	0x08008473
 800840c:	0800845f 	.word	0x0800845f
 8008410:	08008473 	.word	0x08008473
 8008414:	08008433 	.word	0x08008433
 8008418:	08008429 	.word	0x08008429
 800841c:	08008473 	.word	0x08008473
 8008420:	0800844b 	.word	0x0800844b
 8008424:	0800843d 	.word	0x0800843d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008428:	6839      	ldr	r1, [r7, #0]
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fa3c 	bl	80088a8 <USBD_GetDescriptor>
          break;
 8008430:	e024      	b.n	800847c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008432:	6839      	ldr	r1, [r7, #0]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fba1 	bl	8008b7c <USBD_SetAddress>
          break;
 800843a:	e01f      	b.n	800847c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fbe0 	bl	8008c04 <USBD_SetConfig>
 8008444:	4603      	mov	r3, r0
 8008446:	73fb      	strb	r3, [r7, #15]
          break;
 8008448:	e018      	b.n	800847c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800844a:	6839      	ldr	r1, [r7, #0]
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fc83 	bl	8008d58 <USBD_GetConfig>
          break;
 8008452:	e013      	b.n	800847c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fcb4 	bl	8008dc4 <USBD_GetStatus>
          break;
 800845c:	e00e      	b.n	800847c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800845e:	6839      	ldr	r1, [r7, #0]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 fce3 	bl	8008e2c <USBD_SetFeature>
          break;
 8008466:	e009      	b.n	800847c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fd07 	bl	8008e7e <USBD_ClrFeature>
          break;
 8008470:	e004      	b.n	800847c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fd5e 	bl	8008f36 <USBD_CtlError>
          break;
 800847a:	bf00      	nop
      }
      break;
 800847c:	e004      	b.n	8008488 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fd58 	bl	8008f36 <USBD_CtlError>
      break;
 8008486:	bf00      	nop
  }

  return ret;
 8008488:	7bfb      	ldrb	r3, [r7, #15]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop

08008494 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084aa:	2b40      	cmp	r3, #64	; 0x40
 80084ac:	d005      	beq.n	80084ba <USBD_StdItfReq+0x26>
 80084ae:	2b40      	cmp	r3, #64	; 0x40
 80084b0:	d852      	bhi.n	8008558 <USBD_StdItfReq+0xc4>
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <USBD_StdItfReq+0x26>
 80084b6:	2b20      	cmp	r3, #32
 80084b8:	d14e      	bne.n	8008558 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	3b01      	subs	r3, #1
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d840      	bhi.n	800854a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	889b      	ldrh	r3, [r3, #4]
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d836      	bhi.n	8008540 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	889b      	ldrh	r3, [r3, #4]
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	4619      	mov	r1, r3
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f7ff fed9 	bl	8008292 <USBD_CoreFindIF>
 80084e0:	4603      	mov	r3, r0
 80084e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084e4:	7bbb      	ldrb	r3, [r7, #14]
 80084e6:	2bff      	cmp	r3, #255	; 0xff
 80084e8:	d01d      	beq.n	8008526 <USBD_StdItfReq+0x92>
 80084ea:	7bbb      	ldrb	r3, [r7, #14]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d11a      	bne.n	8008526 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80084f0:	7bba      	ldrb	r2, [r7, #14]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	32ae      	adds	r2, #174	; 0xae
 80084f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00f      	beq.n	8008520 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008500:	7bba      	ldrb	r2, [r7, #14]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008508:	7bba      	ldrb	r2, [r7, #14]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	32ae      	adds	r2, #174	; 0xae
 800850e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	6839      	ldr	r1, [r7, #0]
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	4798      	blx	r3
 800851a:	4603      	mov	r3, r0
 800851c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800851e:	e004      	b.n	800852a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008520:	2303      	movs	r3, #3
 8008522:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008524:	e001      	b.n	800852a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008526:	2303      	movs	r3, #3
 8008528:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	88db      	ldrh	r3, [r3, #6]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d110      	bne.n	8008554 <USBD_StdItfReq+0xc0>
 8008532:	7bfb      	ldrb	r3, [r7, #15]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10d      	bne.n	8008554 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fdc7 	bl	80090cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800853e:	e009      	b.n	8008554 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fcf7 	bl	8008f36 <USBD_CtlError>
          break;
 8008548:	e004      	b.n	8008554 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fcf2 	bl	8008f36 <USBD_CtlError>
          break;
 8008552:	e000      	b.n	8008556 <USBD_StdItfReq+0xc2>
          break;
 8008554:	bf00      	nop
      }
      break;
 8008556:	e004      	b.n	8008562 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fceb 	bl	8008f36 <USBD_CtlError>
      break;
 8008560:	bf00      	nop
  }

  return ret;
 8008562:	7bfb      	ldrb	r3, [r7, #15]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008576:	2300      	movs	r3, #0
 8008578:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	889b      	ldrh	r3, [r3, #4]
 800857e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008588:	2b40      	cmp	r3, #64	; 0x40
 800858a:	d007      	beq.n	800859c <USBD_StdEPReq+0x30>
 800858c:	2b40      	cmp	r3, #64	; 0x40
 800858e:	f200 817f 	bhi.w	8008890 <USBD_StdEPReq+0x324>
 8008592:	2b00      	cmp	r3, #0
 8008594:	d02a      	beq.n	80085ec <USBD_StdEPReq+0x80>
 8008596:	2b20      	cmp	r3, #32
 8008598:	f040 817a 	bne.w	8008890 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800859c:	7bbb      	ldrb	r3, [r7, #14]
 800859e:	4619      	mov	r1, r3
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f7ff fe83 	bl	80082ac <USBD_CoreFindEP>
 80085a6:	4603      	mov	r3, r0
 80085a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085aa:	7b7b      	ldrb	r3, [r7, #13]
 80085ac:	2bff      	cmp	r3, #255	; 0xff
 80085ae:	f000 8174 	beq.w	800889a <USBD_StdEPReq+0x32e>
 80085b2:	7b7b      	ldrb	r3, [r7, #13]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f040 8170 	bne.w	800889a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80085ba:	7b7a      	ldrb	r2, [r7, #13]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80085c2:	7b7a      	ldrb	r2, [r7, #13]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	32ae      	adds	r2, #174	; 0xae
 80085c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f000 8163 	beq.w	800889a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80085d4:	7b7a      	ldrb	r2, [r7, #13]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	32ae      	adds	r2, #174	; 0xae
 80085da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	6839      	ldr	r1, [r7, #0]
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	4798      	blx	r3
 80085e6:	4603      	mov	r3, r0
 80085e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80085ea:	e156      	b.n	800889a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	785b      	ldrb	r3, [r3, #1]
 80085f0:	2b03      	cmp	r3, #3
 80085f2:	d008      	beq.n	8008606 <USBD_StdEPReq+0x9a>
 80085f4:	2b03      	cmp	r3, #3
 80085f6:	f300 8145 	bgt.w	8008884 <USBD_StdEPReq+0x318>
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	f000 809b 	beq.w	8008736 <USBD_StdEPReq+0x1ca>
 8008600:	2b01      	cmp	r3, #1
 8008602:	d03c      	beq.n	800867e <USBD_StdEPReq+0x112>
 8008604:	e13e      	b.n	8008884 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b02      	cmp	r3, #2
 8008610:	d002      	beq.n	8008618 <USBD_StdEPReq+0xac>
 8008612:	2b03      	cmp	r3, #3
 8008614:	d016      	beq.n	8008644 <USBD_StdEPReq+0xd8>
 8008616:	e02c      	b.n	8008672 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008618:	7bbb      	ldrb	r3, [r7, #14]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00d      	beq.n	800863a <USBD_StdEPReq+0xce>
 800861e:	7bbb      	ldrb	r3, [r7, #14]
 8008620:	2b80      	cmp	r3, #128	; 0x80
 8008622:	d00a      	beq.n	800863a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008624:	7bbb      	ldrb	r3, [r7, #14]
 8008626:	4619      	mov	r1, r3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f001 f96d 	bl	8009908 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800862e:	2180      	movs	r1, #128	; 0x80
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f001 f969 	bl	8009908 <USBD_LL_StallEP>
 8008636:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008638:	e020      	b.n	800867c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800863a:	6839      	ldr	r1, [r7, #0]
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fc7a 	bl	8008f36 <USBD_CtlError>
              break;
 8008642:	e01b      	b.n	800867c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	885b      	ldrh	r3, [r3, #2]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d10e      	bne.n	800866a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800864c:	7bbb      	ldrb	r3, [r7, #14]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00b      	beq.n	800866a <USBD_StdEPReq+0xfe>
 8008652:	7bbb      	ldrb	r3, [r7, #14]
 8008654:	2b80      	cmp	r3, #128	; 0x80
 8008656:	d008      	beq.n	800866a <USBD_StdEPReq+0xfe>
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	88db      	ldrh	r3, [r3, #6]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d104      	bne.n	800866a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008660:	7bbb      	ldrb	r3, [r7, #14]
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f001 f94f 	bl	8009908 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fd2e 	bl	80090cc <USBD_CtlSendStatus>

              break;
 8008670:	e004      	b.n	800867c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fc5e 	bl	8008f36 <USBD_CtlError>
              break;
 800867a:	bf00      	nop
          }
          break;
 800867c:	e107      	b.n	800888e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b02      	cmp	r3, #2
 8008688:	d002      	beq.n	8008690 <USBD_StdEPReq+0x124>
 800868a:	2b03      	cmp	r3, #3
 800868c:	d016      	beq.n	80086bc <USBD_StdEPReq+0x150>
 800868e:	e04b      	b.n	8008728 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008690:	7bbb      	ldrb	r3, [r7, #14]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00d      	beq.n	80086b2 <USBD_StdEPReq+0x146>
 8008696:	7bbb      	ldrb	r3, [r7, #14]
 8008698:	2b80      	cmp	r3, #128	; 0x80
 800869a:	d00a      	beq.n	80086b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800869c:	7bbb      	ldrb	r3, [r7, #14]
 800869e:	4619      	mov	r1, r3
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f001 f931 	bl	8009908 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80086a6:	2180      	movs	r1, #128	; 0x80
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f001 f92d 	bl	8009908 <USBD_LL_StallEP>
 80086ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086b0:	e040      	b.n	8008734 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fc3e 	bl	8008f36 <USBD_CtlError>
              break;
 80086ba:	e03b      	b.n	8008734 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	885b      	ldrh	r3, [r3, #2]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d136      	bne.n	8008732 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d004      	beq.n	80086d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
 80086d0:	4619      	mov	r1, r3
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f001 f937 	bl	8009946 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 fcf7 	bl	80090cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	4619      	mov	r1, r3
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7ff fde2 	bl	80082ac <USBD_CoreFindEP>
 80086e8:	4603      	mov	r3, r0
 80086ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086ec:	7b7b      	ldrb	r3, [r7, #13]
 80086ee:	2bff      	cmp	r3, #255	; 0xff
 80086f0:	d01f      	beq.n	8008732 <USBD_StdEPReq+0x1c6>
 80086f2:	7b7b      	ldrb	r3, [r7, #13]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d11c      	bne.n	8008732 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80086f8:	7b7a      	ldrb	r2, [r7, #13]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008700:	7b7a      	ldrb	r2, [r7, #13]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	32ae      	adds	r2, #174	; 0xae
 8008706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d010      	beq.n	8008732 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008710:	7b7a      	ldrb	r2, [r7, #13]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	32ae      	adds	r2, #174	; 0xae
 8008716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	4798      	blx	r3
 8008722:	4603      	mov	r3, r0
 8008724:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008726:	e004      	b.n	8008732 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008728:	6839      	ldr	r1, [r7, #0]
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fc03 	bl	8008f36 <USBD_CtlError>
              break;
 8008730:	e000      	b.n	8008734 <USBD_StdEPReq+0x1c8>
              break;
 8008732:	bf00      	nop
          }
          break;
 8008734:	e0ab      	b.n	800888e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b02      	cmp	r3, #2
 8008740:	d002      	beq.n	8008748 <USBD_StdEPReq+0x1dc>
 8008742:	2b03      	cmp	r3, #3
 8008744:	d032      	beq.n	80087ac <USBD_StdEPReq+0x240>
 8008746:	e097      	b.n	8008878 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008748:	7bbb      	ldrb	r3, [r7, #14]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d007      	beq.n	800875e <USBD_StdEPReq+0x1f2>
 800874e:	7bbb      	ldrb	r3, [r7, #14]
 8008750:	2b80      	cmp	r3, #128	; 0x80
 8008752:	d004      	beq.n	800875e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 fbed 	bl	8008f36 <USBD_CtlError>
                break;
 800875c:	e091      	b.n	8008882 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800875e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008762:	2b00      	cmp	r3, #0
 8008764:	da0b      	bge.n	800877e <USBD_StdEPReq+0x212>
 8008766:	7bbb      	ldrb	r3, [r7, #14]
 8008768:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800876c:	4613      	mov	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4413      	add	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	3310      	adds	r3, #16
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	4413      	add	r3, r2
 800877a:	3304      	adds	r3, #4
 800877c:	e00b      	b.n	8008796 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800877e:	7bbb      	ldrb	r3, [r7, #14]
 8008780:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008784:	4613      	mov	r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4413      	add	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	4413      	add	r3, r2
 8008794:	3304      	adds	r3, #4
 8008796:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	2200      	movs	r2, #0
 800879c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2202      	movs	r2, #2
 80087a2:	4619      	mov	r1, r3
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 fc37 	bl	8009018 <USBD_CtlSendData>
              break;
 80087aa:	e06a      	b.n	8008882 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80087ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	da11      	bge.n	80087d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80087b4:	7bbb      	ldrb	r3, [r7, #14]
 80087b6:	f003 020f 	and.w	r2, r3, #15
 80087ba:	6879      	ldr	r1, [r7, #4]
 80087bc:	4613      	mov	r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4413      	add	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	440b      	add	r3, r1
 80087c6:	3324      	adds	r3, #36	; 0x24
 80087c8:	881b      	ldrh	r3, [r3, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d117      	bne.n	80087fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 fbb0 	bl	8008f36 <USBD_CtlError>
                  break;
 80087d6:	e054      	b.n	8008882 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087d8:	7bbb      	ldrb	r3, [r7, #14]
 80087da:	f003 020f 	and.w	r2, r3, #15
 80087de:	6879      	ldr	r1, [r7, #4]
 80087e0:	4613      	mov	r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	4413      	add	r3, r2
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	440b      	add	r3, r1
 80087ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087ee:	881b      	ldrh	r3, [r3, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d104      	bne.n	80087fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fb9d 	bl	8008f36 <USBD_CtlError>
                  break;
 80087fc:	e041      	b.n	8008882 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008802:	2b00      	cmp	r3, #0
 8008804:	da0b      	bge.n	800881e <USBD_StdEPReq+0x2b2>
 8008806:	7bbb      	ldrb	r3, [r7, #14]
 8008808:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800880c:	4613      	mov	r3, r2
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	4413      	add	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	3310      	adds	r3, #16
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	4413      	add	r3, r2
 800881a:	3304      	adds	r3, #4
 800881c:	e00b      	b.n	8008836 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800881e:	7bbb      	ldrb	r3, [r7, #14]
 8008820:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008824:	4613      	mov	r3, r2
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	4413      	add	r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	4413      	add	r3, r2
 8008834:	3304      	adds	r3, #4
 8008836:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008838:	7bbb      	ldrb	r3, [r7, #14]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d002      	beq.n	8008844 <USBD_StdEPReq+0x2d8>
 800883e:	7bbb      	ldrb	r3, [r7, #14]
 8008840:	2b80      	cmp	r3, #128	; 0x80
 8008842:	d103      	bne.n	800884c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	2200      	movs	r2, #0
 8008848:	601a      	str	r2, [r3, #0]
 800884a:	e00e      	b.n	800886a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800884c:	7bbb      	ldrb	r3, [r7, #14]
 800884e:	4619      	mov	r1, r3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f001 f897 	bl	8009984 <USBD_LL_IsStallEP>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d003      	beq.n	8008864 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	2201      	movs	r2, #1
 8008860:	601a      	str	r2, [r3, #0]
 8008862:	e002      	b.n	800886a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	2200      	movs	r2, #0
 8008868:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2202      	movs	r2, #2
 800886e:	4619      	mov	r1, r3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fbd1 	bl	8009018 <USBD_CtlSendData>
              break;
 8008876:	e004      	b.n	8008882 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fb5b 	bl	8008f36 <USBD_CtlError>
              break;
 8008880:	bf00      	nop
          }
          break;
 8008882:	e004      	b.n	800888e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008884:	6839      	ldr	r1, [r7, #0]
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 fb55 	bl	8008f36 <USBD_CtlError>
          break;
 800888c:	bf00      	nop
      }
      break;
 800888e:	e005      	b.n	800889c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fb4f 	bl	8008f36 <USBD_CtlError>
      break;
 8008898:	e000      	b.n	800889c <USBD_StdEPReq+0x330>
      break;
 800889a:	bf00      	nop
  }

  return ret;
 800889c:	7bfb      	ldrb	r3, [r7, #15]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
	...

080088a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088b2:	2300      	movs	r3, #0
 80088b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80088b6:	2300      	movs	r3, #0
 80088b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80088ba:	2300      	movs	r3, #0
 80088bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	885b      	ldrh	r3, [r3, #2]
 80088c2:	0a1b      	lsrs	r3, r3, #8
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	3b01      	subs	r3, #1
 80088c8:	2b06      	cmp	r3, #6
 80088ca:	f200 8128 	bhi.w	8008b1e <USBD_GetDescriptor+0x276>
 80088ce:	a201      	add	r2, pc, #4	; (adr r2, 80088d4 <USBD_GetDescriptor+0x2c>)
 80088d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d4:	080088f1 	.word	0x080088f1
 80088d8:	08008909 	.word	0x08008909
 80088dc:	08008949 	.word	0x08008949
 80088e0:	08008b1f 	.word	0x08008b1f
 80088e4:	08008b1f 	.word	0x08008b1f
 80088e8:	08008abf 	.word	0x08008abf
 80088ec:	08008aeb 	.word	0x08008aeb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	7c12      	ldrb	r2, [r2, #16]
 80088fc:	f107 0108 	add.w	r1, r7, #8
 8008900:	4610      	mov	r0, r2
 8008902:	4798      	blx	r3
 8008904:	60f8      	str	r0, [r7, #12]
      break;
 8008906:	e112      	b.n	8008b2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	7c1b      	ldrb	r3, [r3, #16]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d10d      	bne.n	800892c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008918:	f107 0208 	add.w	r2, r7, #8
 800891c:	4610      	mov	r0, r2
 800891e:	4798      	blx	r3
 8008920:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	3301      	adds	r3, #1
 8008926:	2202      	movs	r2, #2
 8008928:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800892a:	e100      	b.n	8008b2e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008934:	f107 0208 	add.w	r2, r7, #8
 8008938:	4610      	mov	r0, r2
 800893a:	4798      	blx	r3
 800893c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	3301      	adds	r3, #1
 8008942:	2202      	movs	r2, #2
 8008944:	701a      	strb	r2, [r3, #0]
      break;
 8008946:	e0f2      	b.n	8008b2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	885b      	ldrh	r3, [r3, #2]
 800894c:	b2db      	uxtb	r3, r3
 800894e:	2b05      	cmp	r3, #5
 8008950:	f200 80ac 	bhi.w	8008aac <USBD_GetDescriptor+0x204>
 8008954:	a201      	add	r2, pc, #4	; (adr r2, 800895c <USBD_GetDescriptor+0xb4>)
 8008956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895a:	bf00      	nop
 800895c:	08008975 	.word	0x08008975
 8008960:	080089a9 	.word	0x080089a9
 8008964:	080089dd 	.word	0x080089dd
 8008968:	08008a11 	.word	0x08008a11
 800896c:	08008a45 	.word	0x08008a45
 8008970:	08008a79 	.word	0x08008a79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00b      	beq.n	8008998 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	7c12      	ldrb	r2, [r2, #16]
 800898c:	f107 0108 	add.w	r1, r7, #8
 8008990:	4610      	mov	r0, r2
 8008992:	4798      	blx	r3
 8008994:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008996:	e091      	b.n	8008abc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008998:	6839      	ldr	r1, [r7, #0]
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 facb 	bl	8008f36 <USBD_CtlError>
            err++;
 80089a0:	7afb      	ldrb	r3, [r7, #11]
 80089a2:	3301      	adds	r3, #1
 80089a4:	72fb      	strb	r3, [r7, #11]
          break;
 80089a6:	e089      	b.n	8008abc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00b      	beq.n	80089cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	7c12      	ldrb	r2, [r2, #16]
 80089c0:	f107 0108 	add.w	r1, r7, #8
 80089c4:	4610      	mov	r0, r2
 80089c6:	4798      	blx	r3
 80089c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ca:	e077      	b.n	8008abc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089cc:	6839      	ldr	r1, [r7, #0]
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fab1 	bl	8008f36 <USBD_CtlError>
            err++;
 80089d4:	7afb      	ldrb	r3, [r7, #11]
 80089d6:	3301      	adds	r3, #1
 80089d8:	72fb      	strb	r3, [r7, #11]
          break;
 80089da:	e06f      	b.n	8008abc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00b      	beq.n	8008a00 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	7c12      	ldrb	r2, [r2, #16]
 80089f4:	f107 0108 	add.w	r1, r7, #8
 80089f8:	4610      	mov	r0, r2
 80089fa:	4798      	blx	r3
 80089fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089fe:	e05d      	b.n	8008abc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fa97 	bl	8008f36 <USBD_CtlError>
            err++;
 8008a08:	7afb      	ldrb	r3, [r7, #11]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a0e:	e055      	b.n	8008abc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00b      	beq.n	8008a34 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	7c12      	ldrb	r2, [r2, #16]
 8008a28:	f107 0108 	add.w	r1, r7, #8
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	4798      	blx	r3
 8008a30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a32:	e043      	b.n	8008abc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a34:	6839      	ldr	r1, [r7, #0]
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fa7d 	bl	8008f36 <USBD_CtlError>
            err++;
 8008a3c:	7afb      	ldrb	r3, [r7, #11]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	72fb      	strb	r3, [r7, #11]
          break;
 8008a42:	e03b      	b.n	8008abc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00b      	beq.n	8008a68 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a56:	695b      	ldr	r3, [r3, #20]
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	7c12      	ldrb	r2, [r2, #16]
 8008a5c:	f107 0108 	add.w	r1, r7, #8
 8008a60:	4610      	mov	r0, r2
 8008a62:	4798      	blx	r3
 8008a64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a66:	e029      	b.n	8008abc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fa63 	bl	8008f36 <USBD_CtlError>
            err++;
 8008a70:	7afb      	ldrb	r3, [r7, #11]
 8008a72:	3301      	adds	r3, #1
 8008a74:	72fb      	strb	r3, [r7, #11]
          break;
 8008a76:	e021      	b.n	8008abc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00b      	beq.n	8008a9c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	7c12      	ldrb	r2, [r2, #16]
 8008a90:	f107 0108 	add.w	r1, r7, #8
 8008a94:	4610      	mov	r0, r2
 8008a96:	4798      	blx	r3
 8008a98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a9a:	e00f      	b.n	8008abc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a9c:	6839      	ldr	r1, [r7, #0]
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fa49 	bl	8008f36 <USBD_CtlError>
            err++;
 8008aa4:	7afb      	ldrb	r3, [r7, #11]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	72fb      	strb	r3, [r7, #11]
          break;
 8008aaa:	e007      	b.n	8008abc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fa41 	bl	8008f36 <USBD_CtlError>
          err++;
 8008ab4:	7afb      	ldrb	r3, [r7, #11]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008aba:	bf00      	nop
      }
      break;
 8008abc:	e037      	b.n	8008b2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	7c1b      	ldrb	r3, [r3, #16]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d109      	bne.n	8008ada <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ace:	f107 0208 	add.w	r2, r7, #8
 8008ad2:	4610      	mov	r0, r2
 8008ad4:	4798      	blx	r3
 8008ad6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ad8:	e029      	b.n	8008b2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ada:	6839      	ldr	r1, [r7, #0]
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 fa2a 	bl	8008f36 <USBD_CtlError>
        err++;
 8008ae2:	7afb      	ldrb	r3, [r7, #11]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ae8:	e021      	b.n	8008b2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	7c1b      	ldrb	r3, [r3, #16]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d10d      	bne.n	8008b0e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008afa:	f107 0208 	add.w	r2, r7, #8
 8008afe:	4610      	mov	r0, r2
 8008b00:	4798      	blx	r3
 8008b02:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	3301      	adds	r3, #1
 8008b08:	2207      	movs	r2, #7
 8008b0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b0c:	e00f      	b.n	8008b2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fa10 	bl	8008f36 <USBD_CtlError>
        err++;
 8008b16:	7afb      	ldrb	r3, [r7, #11]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	72fb      	strb	r3, [r7, #11]
      break;
 8008b1c:	e007      	b.n	8008b2e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008b1e:	6839      	ldr	r1, [r7, #0]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fa08 	bl	8008f36 <USBD_CtlError>
      err++;
 8008b26:	7afb      	ldrb	r3, [r7, #11]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	72fb      	strb	r3, [r7, #11]
      break;
 8008b2c:	bf00      	nop
  }

  if (err != 0U)
 8008b2e:	7afb      	ldrb	r3, [r7, #11]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d11e      	bne.n	8008b72 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	88db      	ldrh	r3, [r3, #6]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d016      	beq.n	8008b6a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008b3c:	893b      	ldrh	r3, [r7, #8]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00e      	beq.n	8008b60 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	88da      	ldrh	r2, [r3, #6]
 8008b46:	893b      	ldrh	r3, [r7, #8]
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	bf28      	it	cs
 8008b4c:	4613      	movcs	r3, r2
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b52:	893b      	ldrh	r3, [r7, #8]
 8008b54:	461a      	mov	r2, r3
 8008b56:	68f9      	ldr	r1, [r7, #12]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fa5d 	bl	8009018 <USBD_CtlSendData>
 8008b5e:	e009      	b.n	8008b74 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f9e7 	bl	8008f36 <USBD_CtlError>
 8008b68:	e004      	b.n	8008b74 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 faae 	bl	80090cc <USBD_CtlSendStatus>
 8008b70:	e000      	b.n	8008b74 <USBD_GetDescriptor+0x2cc>
    return;
 8008b72:	bf00      	nop
  }
}
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop

08008b7c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	889b      	ldrh	r3, [r3, #4]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d131      	bne.n	8008bf2 <USBD_SetAddress+0x76>
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	88db      	ldrh	r3, [r3, #6]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d12d      	bne.n	8008bf2 <USBD_SetAddress+0x76>
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	885b      	ldrh	r3, [r3, #2]
 8008b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8008b9c:	d829      	bhi.n	8008bf2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	885b      	ldrh	r3, [r3, #2]
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ba8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	2b03      	cmp	r3, #3
 8008bb4:	d104      	bne.n	8008bc0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008bb6:	6839      	ldr	r1, [r7, #0]
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 f9bc 	bl	8008f36 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bbe:	e01d      	b.n	8008bfc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	7bfa      	ldrb	r2, [r7, #15]
 8008bc4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008bc8:	7bfb      	ldrb	r3, [r7, #15]
 8008bca:	4619      	mov	r1, r3
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 ff05 	bl	80099dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 fa7a 	bl	80090cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d004      	beq.n	8008be8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2202      	movs	r2, #2
 8008be2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008be6:	e009      	b.n	8008bfc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bf0:	e004      	b.n	8008bfc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bf2:	6839      	ldr	r1, [r7, #0]
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 f99e 	bl	8008f36 <USBD_CtlError>
  }
}
 8008bfa:	bf00      	nop
 8008bfc:	bf00      	nop
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	885b      	ldrh	r3, [r3, #2]
 8008c16:	b2da      	uxtb	r2, r3
 8008c18:	4b4e      	ldr	r3, [pc, #312]	; (8008d54 <USBD_SetConfig+0x150>)
 8008c1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c1c:	4b4d      	ldr	r3, [pc, #308]	; (8008d54 <USBD_SetConfig+0x150>)
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d905      	bls.n	8008c30 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c24:	6839      	ldr	r1, [r7, #0]
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 f985 	bl	8008f36 <USBD_CtlError>
    return USBD_FAIL;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	e08c      	b.n	8008d4a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	2b02      	cmp	r3, #2
 8008c3a:	d002      	beq.n	8008c42 <USBD_SetConfig+0x3e>
 8008c3c:	2b03      	cmp	r3, #3
 8008c3e:	d029      	beq.n	8008c94 <USBD_SetConfig+0x90>
 8008c40:	e075      	b.n	8008d2e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008c42:	4b44      	ldr	r3, [pc, #272]	; (8008d54 <USBD_SetConfig+0x150>)
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d020      	beq.n	8008c8c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008c4a:	4b42      	ldr	r3, [pc, #264]	; (8008d54 <USBD_SetConfig+0x150>)
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c54:	4b3f      	ldr	r3, [pc, #252]	; (8008d54 <USBD_SetConfig+0x150>)
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	4619      	mov	r1, r3
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7fe ffe7 	bl	8007c2e <USBD_SetClassConfig>
 8008c60:	4603      	mov	r3, r0
 8008c62:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c64:	7bfb      	ldrb	r3, [r7, #15]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d008      	beq.n	8008c7c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f962 	bl	8008f36 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2202      	movs	r2, #2
 8008c76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c7a:	e065      	b.n	8008d48 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 fa25 	bl	80090cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2203      	movs	r2, #3
 8008c86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c8a:	e05d      	b.n	8008d48 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 fa1d 	bl	80090cc <USBD_CtlSendStatus>
      break;
 8008c92:	e059      	b.n	8008d48 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c94:	4b2f      	ldr	r3, [pc, #188]	; (8008d54 <USBD_SetConfig+0x150>)
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d112      	bne.n	8008cc2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008ca4:	4b2b      	ldr	r3, [pc, #172]	; (8008d54 <USBD_SetConfig+0x150>)
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	461a      	mov	r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cae:	4b29      	ldr	r3, [pc, #164]	; (8008d54 <USBD_SetConfig+0x150>)
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f7fe ffd6 	bl	8007c66 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 fa06 	bl	80090cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008cc0:	e042      	b.n	8008d48 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008cc2:	4b24      	ldr	r3, [pc, #144]	; (8008d54 <USBD_SetConfig+0x150>)
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d02a      	beq.n	8008d26 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7fe ffc4 	bl	8007c66 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008cde:	4b1d      	ldr	r3, [pc, #116]	; (8008d54 <USBD_SetConfig+0x150>)
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ce8:	4b1a      	ldr	r3, [pc, #104]	; (8008d54 <USBD_SetConfig+0x150>)
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	4619      	mov	r1, r3
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f7fe ff9d 	bl	8007c2e <USBD_SetClassConfig>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00f      	beq.n	8008d1e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008cfe:	6839      	ldr	r1, [r7, #0]
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 f918 	bl	8008f36 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f7fe ffa9 	bl	8007c66 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2202      	movs	r2, #2
 8008d18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008d1c:	e014      	b.n	8008d48 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f9d4 	bl	80090cc <USBD_CtlSendStatus>
      break;
 8008d24:	e010      	b.n	8008d48 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f9d0 	bl	80090cc <USBD_CtlSendStatus>
      break;
 8008d2c:	e00c      	b.n	8008d48 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008d2e:	6839      	ldr	r1, [r7, #0]
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f900 	bl	8008f36 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d36:	4b07      	ldr	r3, [pc, #28]	; (8008d54 <USBD_SetConfig+0x150>)
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f7fe ff92 	bl	8007c66 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008d42:	2303      	movs	r3, #3
 8008d44:	73fb      	strb	r3, [r7, #15]
      break;
 8008d46:	bf00      	nop
  }

  return ret;
 8008d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	20000394 	.word	0x20000394

08008d58 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	88db      	ldrh	r3, [r3, #6]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d004      	beq.n	8008d74 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d6a:	6839      	ldr	r1, [r7, #0]
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 f8e2 	bl	8008f36 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d72:	e023      	b.n	8008dbc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	dc02      	bgt.n	8008d86 <USBD_GetConfig+0x2e>
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	dc03      	bgt.n	8008d8c <USBD_GetConfig+0x34>
 8008d84:	e015      	b.n	8008db2 <USBD_GetConfig+0x5a>
 8008d86:	2b03      	cmp	r3, #3
 8008d88:	d00b      	beq.n	8008da2 <USBD_GetConfig+0x4a>
 8008d8a:	e012      	b.n	8008db2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	3308      	adds	r3, #8
 8008d96:	2201      	movs	r2, #1
 8008d98:	4619      	mov	r1, r3
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f93c 	bl	8009018 <USBD_CtlSendData>
        break;
 8008da0:	e00c      	b.n	8008dbc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	3304      	adds	r3, #4
 8008da6:	2201      	movs	r2, #1
 8008da8:	4619      	mov	r1, r3
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f934 	bl	8009018 <USBD_CtlSendData>
        break;
 8008db0:	e004      	b.n	8008dbc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008db2:	6839      	ldr	r1, [r7, #0]
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f8be 	bl	8008f36 <USBD_CtlError>
        break;
 8008dba:	bf00      	nop
}
 8008dbc:	bf00      	nop
 8008dbe:	3708      	adds	r7, #8
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	d81e      	bhi.n	8008e1a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	88db      	ldrh	r3, [r3, #6]
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	d004      	beq.n	8008dee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008de4:	6839      	ldr	r1, [r7, #0]
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f8a5 	bl	8008f36 <USBD_CtlError>
        break;
 8008dec:	e01a      	b.n	8008e24 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d005      	beq.n	8008e0a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	f043 0202 	orr.w	r2, r3, #2
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	330c      	adds	r3, #12
 8008e0e:	2202      	movs	r2, #2
 8008e10:	4619      	mov	r1, r3
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f900 	bl	8009018 <USBD_CtlSendData>
      break;
 8008e18:	e004      	b.n	8008e24 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008e1a:	6839      	ldr	r1, [r7, #0]
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f88a 	bl	8008f36 <USBD_CtlError>
      break;
 8008e22:	bf00      	nop
  }
}
 8008e24:	bf00      	nop
 8008e26:	3708      	adds	r7, #8
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	885b      	ldrh	r3, [r3, #2]
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d107      	bne.n	8008e4e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f940 	bl	80090cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008e4c:	e013      	b.n	8008e76 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	885b      	ldrh	r3, [r3, #2]
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d10b      	bne.n	8008e6e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	889b      	ldrh	r3, [r3, #4]
 8008e5a:	0a1b      	lsrs	r3, r3, #8
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	b2da      	uxtb	r2, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f930 	bl	80090cc <USBD_CtlSendStatus>
}
 8008e6c:	e003      	b.n	8008e76 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008e6e:	6839      	ldr	r1, [r7, #0]
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 f860 	bl	8008f36 <USBD_CtlError>
}
 8008e76:	bf00      	nop
 8008e78:	3708      	adds	r7, #8
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b082      	sub	sp, #8
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
 8008e86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	3b01      	subs	r3, #1
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d80b      	bhi.n	8008eae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	885b      	ldrh	r3, [r3, #2]
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d10c      	bne.n	8008eb8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f910 	bl	80090cc <USBD_CtlSendStatus>
      }
      break;
 8008eac:	e004      	b.n	8008eb8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008eae:	6839      	ldr	r1, [r7, #0]
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 f840 	bl	8008f36 <USBD_CtlError>
      break;
 8008eb6:	e000      	b.n	8008eba <USBD_ClrFeature+0x3c>
      break;
 8008eb8:	bf00      	nop
  }
}
 8008eba:	bf00      	nop
 8008ebc:	3708      	adds	r7, #8
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b084      	sub	sp, #16
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
 8008eca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	781a      	ldrb	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	3301      	adds	r3, #1
 8008edc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	781a      	ldrb	r2, [r3, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	3301      	adds	r3, #1
 8008eea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f7ff fa41 	bl	8008374 <SWAPBYTE>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	3301      	adds	r3, #1
 8008efe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	3301      	adds	r3, #1
 8008f04:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f7ff fa34 	bl	8008374 <SWAPBYTE>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	461a      	mov	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	3301      	adds	r3, #1
 8008f18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f7ff fa27 	bl	8008374 <SWAPBYTE>
 8008f26:	4603      	mov	r3, r0
 8008f28:	461a      	mov	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	80da      	strh	r2, [r3, #6]
}
 8008f2e:	bf00      	nop
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b082      	sub	sp, #8
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
 8008f3e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f40:	2180      	movs	r1, #128	; 0x80
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fce0 	bl	8009908 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f48:	2100      	movs	r1, #0
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fcdc 	bl	8009908 <USBD_LL_StallEP>
}
 8008f50:	bf00      	nop
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f64:	2300      	movs	r3, #0
 8008f66:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d036      	beq.n	8008fdc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f72:	6938      	ldr	r0, [r7, #16]
 8008f74:	f000 f836 	bl	8008fe4 <USBD_GetLen>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	005b      	lsls	r3, r3, #1
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f86:	7dfb      	ldrb	r3, [r7, #23]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	7812      	ldrb	r2, [r2, #0]
 8008f90:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f92:	7dfb      	ldrb	r3, [r7, #23]
 8008f94:	3301      	adds	r3, #1
 8008f96:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f98:	7dfb      	ldrb	r3, [r7, #23]
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	2203      	movs	r2, #3
 8008fa0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008fa2:	7dfb      	ldrb	r3, [r7, #23]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008fa8:	e013      	b.n	8008fd2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008faa:	7dfb      	ldrb	r3, [r7, #23]
 8008fac:	68ba      	ldr	r2, [r7, #8]
 8008fae:	4413      	add	r3, r2
 8008fb0:	693a      	ldr	r2, [r7, #16]
 8008fb2:	7812      	ldrb	r2, [r2, #0]
 8008fb4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	613b      	str	r3, [r7, #16]
    idx++;
 8008fbc:	7dfb      	ldrb	r3, [r7, #23]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	2200      	movs	r2, #0
 8008fca:	701a      	strb	r2, [r3, #0]
    idx++;
 8008fcc:	7dfb      	ldrb	r3, [r7, #23]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d1e7      	bne.n	8008faa <USBD_GetString+0x52>
 8008fda:	e000      	b.n	8008fde <USBD_GetString+0x86>
    return;
 8008fdc:	bf00      	nop
  }
}
 8008fde:	3718      	adds	r7, #24
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008fec:	2300      	movs	r3, #0
 8008fee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008ff4:	e005      	b.n	8009002 <USBD_GetLen+0x1e>
  {
    len++;
 8008ff6:	7bfb      	ldrb	r3, [r7, #15]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	3301      	adds	r3, #1
 8009000:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1f5      	bne.n	8008ff6 <USBD_GetLen+0x12>
  }

  return len;
 800900a:	7bfb      	ldrb	r3, [r7, #15]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3714      	adds	r7, #20
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2202      	movs	r2, #2
 8009028:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	68ba      	ldr	r2, [r7, #8]
 800903c:	2100      	movs	r1, #0
 800903e:	68f8      	ldr	r0, [r7, #12]
 8009040:	f000 fceb 	bl	8009a1a <USBD_LL_Transmit>

  return USBD_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b084      	sub	sp, #16
 8009052:	af00      	add	r7, sp, #0
 8009054:	60f8      	str	r0, [r7, #12]
 8009056:	60b9      	str	r1, [r7, #8]
 8009058:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	2100      	movs	r1, #0
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f000 fcda 	bl	8009a1a <USBD_LL_Transmit>

  return USBD_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2203      	movs	r2, #3
 8009080:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68ba      	ldr	r2, [r7, #8]
 8009098:	2100      	movs	r1, #0
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	f000 fcde 	bl	8009a5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b084      	sub	sp, #16
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	60f8      	str	r0, [r7, #12]
 80090b2:	60b9      	str	r1, [r7, #8]
 80090b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	68ba      	ldr	r2, [r7, #8]
 80090ba:	2100      	movs	r1, #0
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f000 fccd 	bl	8009a5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2204      	movs	r2, #4
 80090d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80090dc:	2300      	movs	r3, #0
 80090de:	2200      	movs	r2, #0
 80090e0:	2100      	movs	r1, #0
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 fc99 	bl	8009a1a <USBD_LL_Transmit>

  return USBD_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3708      	adds	r7, #8
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b082      	sub	sp, #8
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2205      	movs	r2, #5
 80090fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009102:	2300      	movs	r3, #0
 8009104:	2200      	movs	r2, #0
 8009106:	2100      	movs	r1, #0
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fca7 	bl	8009a5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800911c:	2200      	movs	r2, #0
 800911e:	4912      	ldr	r1, [pc, #72]	; (8009168 <MX_USB_DEVICE_Init+0x50>)
 8009120:	4812      	ldr	r0, [pc, #72]	; (800916c <MX_USB_DEVICE_Init+0x54>)
 8009122:	f7fe fd07 	bl	8007b34 <USBD_Init>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d001      	beq.n	8009130 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800912c:	f7f8 fffc 	bl	8002128 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009130:	490f      	ldr	r1, [pc, #60]	; (8009170 <MX_USB_DEVICE_Init+0x58>)
 8009132:	480e      	ldr	r0, [pc, #56]	; (800916c <MX_USB_DEVICE_Init+0x54>)
 8009134:	f7fe fd2e 	bl	8007b94 <USBD_RegisterClass>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800913e:	f7f8 fff3 	bl	8002128 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009142:	490c      	ldr	r1, [pc, #48]	; (8009174 <MX_USB_DEVICE_Init+0x5c>)
 8009144:	4809      	ldr	r0, [pc, #36]	; (800916c <MX_USB_DEVICE_Init+0x54>)
 8009146:	f7fe fc1f 	bl	8007988 <USBD_CDC_RegisterInterface>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d001      	beq.n	8009154 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009150:	f7f8 ffea 	bl	8002128 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009154:	4805      	ldr	r0, [pc, #20]	; (800916c <MX_USB_DEVICE_Init+0x54>)
 8009156:	f7fe fd53 	bl	8007c00 <USBD_Start>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d001      	beq.n	8009164 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009160:	f7f8 ffe2 	bl	8002128 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009164:	bf00      	nop
 8009166:	bd80      	pop	{r7, pc}
 8009168:	200000ac 	.word	0x200000ac
 800916c:	20000398 	.word	0x20000398
 8009170:	20000018 	.word	0x20000018
 8009174:	20000098 	.word	0x20000098

08009178 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800917c:	2200      	movs	r2, #0
 800917e:	4905      	ldr	r1, [pc, #20]	; (8009194 <CDC_Init_FS+0x1c>)
 8009180:	4805      	ldr	r0, [pc, #20]	; (8009198 <CDC_Init_FS+0x20>)
 8009182:	f7fe fc1b 	bl	80079bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009186:	4905      	ldr	r1, [pc, #20]	; (800919c <CDC_Init_FS+0x24>)
 8009188:	4803      	ldr	r0, [pc, #12]	; (8009198 <CDC_Init_FS+0x20>)
 800918a:	f7fe fc39 	bl	8007a00 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800918e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009190:	4618      	mov	r0, r3
 8009192:	bd80      	pop	{r7, pc}
 8009194:	20000e74 	.word	0x20000e74
 8009198:	20000398 	.word	0x20000398
 800919c:	20000674 	.word	0x20000674

080091a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80091a0:	b480      	push	{r7}
 80091a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80091a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	4603      	mov	r3, r0
 80091b8:	6039      	str	r1, [r7, #0]
 80091ba:	71fb      	strb	r3, [r7, #7]
 80091bc:	4613      	mov	r3, r2
 80091be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80091c0:	79fb      	ldrb	r3, [r7, #7]
 80091c2:	2b23      	cmp	r3, #35	; 0x23
 80091c4:	d84a      	bhi.n	800925c <CDC_Control_FS+0xac>
 80091c6:	a201      	add	r2, pc, #4	; (adr r2, 80091cc <CDC_Control_FS+0x1c>)
 80091c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091cc:	0800925d 	.word	0x0800925d
 80091d0:	0800925d 	.word	0x0800925d
 80091d4:	0800925d 	.word	0x0800925d
 80091d8:	0800925d 	.word	0x0800925d
 80091dc:	0800925d 	.word	0x0800925d
 80091e0:	0800925d 	.word	0x0800925d
 80091e4:	0800925d 	.word	0x0800925d
 80091e8:	0800925d 	.word	0x0800925d
 80091ec:	0800925d 	.word	0x0800925d
 80091f0:	0800925d 	.word	0x0800925d
 80091f4:	0800925d 	.word	0x0800925d
 80091f8:	0800925d 	.word	0x0800925d
 80091fc:	0800925d 	.word	0x0800925d
 8009200:	0800925d 	.word	0x0800925d
 8009204:	0800925d 	.word	0x0800925d
 8009208:	0800925d 	.word	0x0800925d
 800920c:	0800925d 	.word	0x0800925d
 8009210:	0800925d 	.word	0x0800925d
 8009214:	0800925d 	.word	0x0800925d
 8009218:	0800925d 	.word	0x0800925d
 800921c:	0800925d 	.word	0x0800925d
 8009220:	0800925d 	.word	0x0800925d
 8009224:	0800925d 	.word	0x0800925d
 8009228:	0800925d 	.word	0x0800925d
 800922c:	0800925d 	.word	0x0800925d
 8009230:	0800925d 	.word	0x0800925d
 8009234:	0800925d 	.word	0x0800925d
 8009238:	0800925d 	.word	0x0800925d
 800923c:	0800925d 	.word	0x0800925d
 8009240:	0800925d 	.word	0x0800925d
 8009244:	0800925d 	.word	0x0800925d
 8009248:	0800925d 	.word	0x0800925d
 800924c:	0800925d 	.word	0x0800925d
 8009250:	0800925d 	.word	0x0800925d
 8009254:	0800925d 	.word	0x0800925d
 8009258:	0800925d 	.word	0x0800925d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800925c:	bf00      	nop
  }

  return (USBD_OK);
 800925e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009260:	4618      	mov	r0, r3
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009276:	6879      	ldr	r1, [r7, #4]
 8009278:	4805      	ldr	r0, [pc, #20]	; (8009290 <CDC_Receive_FS+0x24>)
 800927a:	f7fe fbc1 	bl	8007a00 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800927e:	4804      	ldr	r0, [pc, #16]	; (8009290 <CDC_Receive_FS+0x24>)
 8009280:	f7fe fc22 	bl	8007ac8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009284:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009286:	4618      	mov	r0, r3
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	20000398 	.word	0x20000398

08009294 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80092a0:	2300      	movs	r3, #0
 80092a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80092a4:	4b0d      	ldr	r3, [pc, #52]	; (80092dc <CDC_Transmit_FS+0x48>)
 80092a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e00b      	b.n	80092d2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80092ba:	887b      	ldrh	r3, [r7, #2]
 80092bc:	461a      	mov	r2, r3
 80092be:	6879      	ldr	r1, [r7, #4]
 80092c0:	4806      	ldr	r0, [pc, #24]	; (80092dc <CDC_Transmit_FS+0x48>)
 80092c2:	f7fe fb7b 	bl	80079bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80092c6:	4805      	ldr	r0, [pc, #20]	; (80092dc <CDC_Transmit_FS+0x48>)
 80092c8:	f7fe fbb8 	bl	8007a3c <USBD_CDC_TransmitPacket>
 80092cc:	4603      	mov	r3, r0
 80092ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80092d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	20000398 	.word	0x20000398

080092e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b087      	sub	sp, #28
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	4613      	mov	r3, r2
 80092ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80092f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	371c      	adds	r7, #28
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
	...

08009304 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	4603      	mov	r3, r0
 800930c:	6039      	str	r1, [r7, #0]
 800930e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	2212      	movs	r2, #18
 8009314:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009316:	4b03      	ldr	r3, [pc, #12]	; (8009324 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009318:	4618      	mov	r0, r3
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr
 8009324:	200000c8 	.word	0x200000c8

08009328 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	4603      	mov	r3, r0
 8009330:	6039      	str	r1, [r7, #0]
 8009332:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	2204      	movs	r2, #4
 8009338:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800933a:	4b03      	ldr	r3, [pc, #12]	; (8009348 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800933c:	4618      	mov	r0, r3
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr
 8009348:	200000dc 	.word	0x200000dc

0800934c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	4603      	mov	r3, r0
 8009354:	6039      	str	r1, [r7, #0]
 8009356:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009358:	79fb      	ldrb	r3, [r7, #7]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d105      	bne.n	800936a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	4907      	ldr	r1, [pc, #28]	; (8009380 <USBD_FS_ProductStrDescriptor+0x34>)
 8009362:	4808      	ldr	r0, [pc, #32]	; (8009384 <USBD_FS_ProductStrDescriptor+0x38>)
 8009364:	f7ff fdf8 	bl	8008f58 <USBD_GetString>
 8009368:	e004      	b.n	8009374 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800936a:	683a      	ldr	r2, [r7, #0]
 800936c:	4904      	ldr	r1, [pc, #16]	; (8009380 <USBD_FS_ProductStrDescriptor+0x34>)
 800936e:	4805      	ldr	r0, [pc, #20]	; (8009384 <USBD_FS_ProductStrDescriptor+0x38>)
 8009370:	f7ff fdf2 	bl	8008f58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009374:	4b02      	ldr	r3, [pc, #8]	; (8009380 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009376:	4618      	mov	r0, r3
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	20001674 	.word	0x20001674
 8009384:	0800e0b4 	.word	0x0800e0b4

08009388 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	4603      	mov	r3, r0
 8009390:	6039      	str	r1, [r7, #0]
 8009392:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009394:	683a      	ldr	r2, [r7, #0]
 8009396:	4904      	ldr	r1, [pc, #16]	; (80093a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009398:	4804      	ldr	r0, [pc, #16]	; (80093ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800939a:	f7ff fddd 	bl	8008f58 <USBD_GetString>
  return USBD_StrDesc;
 800939e:	4b02      	ldr	r3, [pc, #8]	; (80093a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	20001674 	.word	0x20001674
 80093ac:	0800e0cc 	.word	0x0800e0cc

080093b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	4603      	mov	r3, r0
 80093b8:	6039      	str	r1, [r7, #0]
 80093ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	221a      	movs	r2, #26
 80093c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80093c2:	f000 f843 	bl	800944c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80093c6:	4b02      	ldr	r3, [pc, #8]	; (80093d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	200000e0 	.word	0x200000e0

080093d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	4603      	mov	r3, r0
 80093dc:	6039      	str	r1, [r7, #0]
 80093de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80093e0:	79fb      	ldrb	r3, [r7, #7]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d105      	bne.n	80093f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	4907      	ldr	r1, [pc, #28]	; (8009408 <USBD_FS_ConfigStrDescriptor+0x34>)
 80093ea:	4808      	ldr	r0, [pc, #32]	; (800940c <USBD_FS_ConfigStrDescriptor+0x38>)
 80093ec:	f7ff fdb4 	bl	8008f58 <USBD_GetString>
 80093f0:	e004      	b.n	80093fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	4904      	ldr	r1, [pc, #16]	; (8009408 <USBD_FS_ConfigStrDescriptor+0x34>)
 80093f6:	4805      	ldr	r0, [pc, #20]	; (800940c <USBD_FS_ConfigStrDescriptor+0x38>)
 80093f8:	f7ff fdae 	bl	8008f58 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093fc:	4b02      	ldr	r3, [pc, #8]	; (8009408 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	20001674 	.word	0x20001674
 800940c:	0800e0e0 	.word	0x0800e0e0

08009410 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	4603      	mov	r3, r0
 8009418:	6039      	str	r1, [r7, #0]
 800941a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800941c:	79fb      	ldrb	r3, [r7, #7]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d105      	bne.n	800942e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	4907      	ldr	r1, [pc, #28]	; (8009444 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009426:	4808      	ldr	r0, [pc, #32]	; (8009448 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009428:	f7ff fd96 	bl	8008f58 <USBD_GetString>
 800942c:	e004      	b.n	8009438 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800942e:	683a      	ldr	r2, [r7, #0]
 8009430:	4904      	ldr	r1, [pc, #16]	; (8009444 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009432:	4805      	ldr	r0, [pc, #20]	; (8009448 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009434:	f7ff fd90 	bl	8008f58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009438:	4b02      	ldr	r3, [pc, #8]	; (8009444 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800943a:	4618      	mov	r0, r3
 800943c:	3708      	adds	r7, #8
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	20001674 	.word	0x20001674
 8009448:	0800e0ec 	.word	0x0800e0ec

0800944c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009452:	4b0f      	ldr	r3, [pc, #60]	; (8009490 <Get_SerialNum+0x44>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009458:	4b0e      	ldr	r3, [pc, #56]	; (8009494 <Get_SerialNum+0x48>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800945e:	4b0e      	ldr	r3, [pc, #56]	; (8009498 <Get_SerialNum+0x4c>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4413      	add	r3, r2
 800946a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d009      	beq.n	8009486 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009472:	2208      	movs	r2, #8
 8009474:	4909      	ldr	r1, [pc, #36]	; (800949c <Get_SerialNum+0x50>)
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f000 f814 	bl	80094a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800947c:	2204      	movs	r2, #4
 800947e:	4908      	ldr	r1, [pc, #32]	; (80094a0 <Get_SerialNum+0x54>)
 8009480:	68b8      	ldr	r0, [r7, #8]
 8009482:	f000 f80f 	bl	80094a4 <IntToUnicode>
  }
}
 8009486:	bf00      	nop
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	1fff7a10 	.word	0x1fff7a10
 8009494:	1fff7a14 	.word	0x1fff7a14
 8009498:	1fff7a18 	.word	0x1fff7a18
 800949c:	200000e2 	.word	0x200000e2
 80094a0:	200000f2 	.word	0x200000f2

080094a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b087      	sub	sp, #28
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	4613      	mov	r3, r2
 80094b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80094b2:	2300      	movs	r3, #0
 80094b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80094b6:	2300      	movs	r3, #0
 80094b8:	75fb      	strb	r3, [r7, #23]
 80094ba:	e027      	b.n	800950c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	0f1b      	lsrs	r3, r3, #28
 80094c0:	2b09      	cmp	r3, #9
 80094c2:	d80b      	bhi.n	80094dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	0f1b      	lsrs	r3, r3, #28
 80094c8:	b2da      	uxtb	r2, r3
 80094ca:	7dfb      	ldrb	r3, [r7, #23]
 80094cc:	005b      	lsls	r3, r3, #1
 80094ce:	4619      	mov	r1, r3
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	440b      	add	r3, r1
 80094d4:	3230      	adds	r2, #48	; 0x30
 80094d6:	b2d2      	uxtb	r2, r2
 80094d8:	701a      	strb	r2, [r3, #0]
 80094da:	e00a      	b.n	80094f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	0f1b      	lsrs	r3, r3, #28
 80094e0:	b2da      	uxtb	r2, r3
 80094e2:	7dfb      	ldrb	r3, [r7, #23]
 80094e4:	005b      	lsls	r3, r3, #1
 80094e6:	4619      	mov	r1, r3
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	440b      	add	r3, r1
 80094ec:	3237      	adds	r2, #55	; 0x37
 80094ee:	b2d2      	uxtb	r2, r2
 80094f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	011b      	lsls	r3, r3, #4
 80094f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80094f8:	7dfb      	ldrb	r3, [r7, #23]
 80094fa:	005b      	lsls	r3, r3, #1
 80094fc:	3301      	adds	r3, #1
 80094fe:	68ba      	ldr	r2, [r7, #8]
 8009500:	4413      	add	r3, r2
 8009502:	2200      	movs	r2, #0
 8009504:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009506:	7dfb      	ldrb	r3, [r7, #23]
 8009508:	3301      	adds	r3, #1
 800950a:	75fb      	strb	r3, [r7, #23]
 800950c:	7dfa      	ldrb	r2, [r7, #23]
 800950e:	79fb      	ldrb	r3, [r7, #7]
 8009510:	429a      	cmp	r2, r3
 8009512:	d3d3      	bcc.n	80094bc <IntToUnicode+0x18>
  }
}
 8009514:	bf00      	nop
 8009516:	bf00      	nop
 8009518:	371c      	adds	r7, #28
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
	...

08009524 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b08a      	sub	sp, #40	; 0x28
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800952c:	f107 0314 	add.w	r3, r7, #20
 8009530:	2200      	movs	r2, #0
 8009532:	601a      	str	r2, [r3, #0]
 8009534:	605a      	str	r2, [r3, #4]
 8009536:	609a      	str	r2, [r3, #8]
 8009538:	60da      	str	r2, [r3, #12]
 800953a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009544:	d13a      	bne.n	80095bc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009546:	2300      	movs	r3, #0
 8009548:	613b      	str	r3, [r7, #16]
 800954a:	4b1e      	ldr	r3, [pc, #120]	; (80095c4 <HAL_PCD_MspInit+0xa0>)
 800954c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800954e:	4a1d      	ldr	r2, [pc, #116]	; (80095c4 <HAL_PCD_MspInit+0xa0>)
 8009550:	f043 0301 	orr.w	r3, r3, #1
 8009554:	6313      	str	r3, [r2, #48]	; 0x30
 8009556:	4b1b      	ldr	r3, [pc, #108]	; (80095c4 <HAL_PCD_MspInit+0xa0>)
 8009558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800955a:	f003 0301 	and.w	r3, r3, #1
 800955e:	613b      	str	r3, [r7, #16]
 8009560:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009562:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009568:	2302      	movs	r3, #2
 800956a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800956c:	2300      	movs	r3, #0
 800956e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009570:	2303      	movs	r3, #3
 8009572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009574:	230a      	movs	r3, #10
 8009576:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009578:	f107 0314 	add.w	r3, r7, #20
 800957c:	4619      	mov	r1, r3
 800957e:	4812      	ldr	r0, [pc, #72]	; (80095c8 <HAL_PCD_MspInit+0xa4>)
 8009580:	f7f9 f926 	bl	80027d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009584:	4b0f      	ldr	r3, [pc, #60]	; (80095c4 <HAL_PCD_MspInit+0xa0>)
 8009586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009588:	4a0e      	ldr	r2, [pc, #56]	; (80095c4 <HAL_PCD_MspInit+0xa0>)
 800958a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800958e:	6353      	str	r3, [r2, #52]	; 0x34
 8009590:	2300      	movs	r3, #0
 8009592:	60fb      	str	r3, [r7, #12]
 8009594:	4b0b      	ldr	r3, [pc, #44]	; (80095c4 <HAL_PCD_MspInit+0xa0>)
 8009596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009598:	4a0a      	ldr	r2, [pc, #40]	; (80095c4 <HAL_PCD_MspInit+0xa0>)
 800959a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800959e:	6453      	str	r3, [r2, #68]	; 0x44
 80095a0:	4b08      	ldr	r3, [pc, #32]	; (80095c4 <HAL_PCD_MspInit+0xa0>)
 80095a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095a8:	60fb      	str	r3, [r7, #12]
 80095aa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80095ac:	2200      	movs	r2, #0
 80095ae:	2100      	movs	r1, #0
 80095b0:	2043      	movs	r0, #67	; 0x43
 80095b2:	f7f9 f8d6 	bl	8002762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80095b6:	2043      	movs	r0, #67	; 0x43
 80095b8:	f7f9 f8ef 	bl	800279a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80095bc:	bf00      	nop
 80095be:	3728      	adds	r7, #40	; 0x28
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	40023800 	.word	0x40023800
 80095c8:	40020000 	.word	0x40020000

080095cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80095e0:	4619      	mov	r1, r3
 80095e2:	4610      	mov	r0, r2
 80095e4:	f7fe fb59 	bl	8007c9a <USBD_LL_SetupStage>
}
 80095e8:	bf00      	nop
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	460b      	mov	r3, r1
 80095fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009602:	78fa      	ldrb	r2, [r7, #3]
 8009604:	6879      	ldr	r1, [r7, #4]
 8009606:	4613      	mov	r3, r2
 8009608:	00db      	lsls	r3, r3, #3
 800960a:	4413      	add	r3, r2
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	440b      	add	r3, r1
 8009610:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	78fb      	ldrb	r3, [r7, #3]
 8009618:	4619      	mov	r1, r3
 800961a:	f7fe fb93 	bl	8007d44 <USBD_LL_DataOutStage>
}
 800961e:	bf00      	nop
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009626:	b580      	push	{r7, lr}
 8009628:	b082      	sub	sp, #8
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
 800962e:	460b      	mov	r3, r1
 8009630:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009638:	78fa      	ldrb	r2, [r7, #3]
 800963a:	6879      	ldr	r1, [r7, #4]
 800963c:	4613      	mov	r3, r2
 800963e:	00db      	lsls	r3, r3, #3
 8009640:	4413      	add	r3, r2
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	440b      	add	r3, r1
 8009646:	334c      	adds	r3, #76	; 0x4c
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	78fb      	ldrb	r3, [r7, #3]
 800964c:	4619      	mov	r1, r3
 800964e:	f7fe fc2c 	bl	8007eaa <USBD_LL_DataInStage>
}
 8009652:	bf00      	nop
 8009654:	3708      	adds	r7, #8
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b082      	sub	sp, #8
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009668:	4618      	mov	r0, r3
 800966a:	f7fe fd60 	bl	800812e <USBD_LL_SOF>
}
 800966e:	bf00      	nop
 8009670:	3708      	adds	r7, #8
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b084      	sub	sp, #16
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800967e:	2301      	movs	r3, #1
 8009680:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d102      	bne.n	8009690 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800968a:	2300      	movs	r3, #0
 800968c:	73fb      	strb	r3, [r7, #15]
 800968e:	e008      	b.n	80096a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	2b02      	cmp	r3, #2
 8009696:	d102      	bne.n	800969e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009698:	2301      	movs	r3, #1
 800969a:	73fb      	strb	r3, [r7, #15]
 800969c:	e001      	b.n	80096a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800969e:	f7f8 fd43 	bl	8002128 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096a8:	7bfa      	ldrb	r2, [r7, #15]
 80096aa:	4611      	mov	r1, r2
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7fe fd00 	bl	80080b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7fe fca8 	bl	800800e <USBD_LL_Reset>
}
 80096be:	bf00      	nop
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
	...

080096c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7fe fcfb 	bl	80080d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	6812      	ldr	r2, [r2, #0]
 80096ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80096ee:	f043 0301 	orr.w	r3, r3, #1
 80096f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6a1b      	ldr	r3, [r3, #32]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d005      	beq.n	8009708 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096fc:	4b04      	ldr	r3, [pc, #16]	; (8009710 <HAL_PCD_SuspendCallback+0x48>)
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	4a03      	ldr	r2, [pc, #12]	; (8009710 <HAL_PCD_SuspendCallback+0x48>)
 8009702:	f043 0306 	orr.w	r3, r3, #6
 8009706:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009708:	bf00      	nop
 800970a:	3708      	adds	r7, #8
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	e000ed00 	.word	0xe000ed00

08009714 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009722:	4618      	mov	r0, r3
 8009724:	f7fe fceb 	bl	80080fe <USBD_LL_Resume>
}
 8009728:	bf00      	nop
 800972a:	3708      	adds	r7, #8
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	460b      	mov	r3, r1
 800973a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009742:	78fa      	ldrb	r2, [r7, #3]
 8009744:	4611      	mov	r1, r2
 8009746:	4618      	mov	r0, r3
 8009748:	f7fe fd43 	bl	80081d2 <USBD_LL_IsoOUTIncomplete>
}
 800974c:	bf00      	nop
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	460b      	mov	r3, r1
 800975e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009766:	78fa      	ldrb	r2, [r7, #3]
 8009768:	4611      	mov	r1, r2
 800976a:	4618      	mov	r0, r3
 800976c:	f7fe fcff 	bl	800816e <USBD_LL_IsoINIncomplete>
}
 8009770:	bf00      	nop
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009786:	4618      	mov	r0, r3
 8009788:	f7fe fd55 	bl	8008236 <USBD_LL_DevConnected>
}
 800978c:	bf00      	nop
 800978e:	3708      	adds	r7, #8
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fe fd52 	bl	800824c <USBD_LL_DevDisconnected>
}
 80097a8:	bf00      	nop
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d13c      	bne.n	800983a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80097c0:	4a20      	ldr	r2, [pc, #128]	; (8009844 <USBD_LL_Init+0x94>)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a1e      	ldr	r2, [pc, #120]	; (8009844 <USBD_LL_Init+0x94>)
 80097cc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80097d0:	4b1c      	ldr	r3, [pc, #112]	; (8009844 <USBD_LL_Init+0x94>)
 80097d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80097d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80097d8:	4b1a      	ldr	r3, [pc, #104]	; (8009844 <USBD_LL_Init+0x94>)
 80097da:	2204      	movs	r2, #4
 80097dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80097de:	4b19      	ldr	r3, [pc, #100]	; (8009844 <USBD_LL_Init+0x94>)
 80097e0:	2202      	movs	r2, #2
 80097e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80097e4:	4b17      	ldr	r3, [pc, #92]	; (8009844 <USBD_LL_Init+0x94>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80097ea:	4b16      	ldr	r3, [pc, #88]	; (8009844 <USBD_LL_Init+0x94>)
 80097ec:	2202      	movs	r2, #2
 80097ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80097f0:	4b14      	ldr	r3, [pc, #80]	; (8009844 <USBD_LL_Init+0x94>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80097f6:	4b13      	ldr	r3, [pc, #76]	; (8009844 <USBD_LL_Init+0x94>)
 80097f8:	2200      	movs	r2, #0
 80097fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80097fc:	4b11      	ldr	r3, [pc, #68]	; (8009844 <USBD_LL_Init+0x94>)
 80097fe:	2200      	movs	r2, #0
 8009800:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009802:	4b10      	ldr	r3, [pc, #64]	; (8009844 <USBD_LL_Init+0x94>)
 8009804:	2200      	movs	r2, #0
 8009806:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009808:	4b0e      	ldr	r3, [pc, #56]	; (8009844 <USBD_LL_Init+0x94>)
 800980a:	2200      	movs	r2, #0
 800980c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800980e:	480d      	ldr	r0, [pc, #52]	; (8009844 <USBD_LL_Init+0x94>)
 8009810:	f7fa f96b 	bl	8003aea <HAL_PCD_Init>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d001      	beq.n	800981e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800981a:	f7f8 fc85 	bl	8002128 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800981e:	2180      	movs	r1, #128	; 0x80
 8009820:	4808      	ldr	r0, [pc, #32]	; (8009844 <USBD_LL_Init+0x94>)
 8009822:	f7fb fbc2 	bl	8004faa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009826:	2240      	movs	r2, #64	; 0x40
 8009828:	2100      	movs	r1, #0
 800982a:	4806      	ldr	r0, [pc, #24]	; (8009844 <USBD_LL_Init+0x94>)
 800982c:	f7fb fb76 	bl	8004f1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009830:	2280      	movs	r2, #128	; 0x80
 8009832:	2101      	movs	r1, #1
 8009834:	4803      	ldr	r0, [pc, #12]	; (8009844 <USBD_LL_Init+0x94>)
 8009836:	f7fb fb71 	bl	8004f1c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	20001874 	.word	0x20001874

08009848 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009850:	2300      	movs	r3, #0
 8009852:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009854:	2300      	movs	r3, #0
 8009856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800985e:	4618      	mov	r0, r3
 8009860:	f7fa fa60 	bl	8003d24 <HAL_PCD_Start>
 8009864:	4603      	mov	r3, r0
 8009866:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009868:	7bfb      	ldrb	r3, [r7, #15]
 800986a:	4618      	mov	r0, r3
 800986c:	f000 f942 	bl	8009af4 <USBD_Get_USB_Status>
 8009870:	4603      	mov	r3, r0
 8009872:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009874:	7bbb      	ldrb	r3, [r7, #14]
}
 8009876:	4618      	mov	r0, r3
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b084      	sub	sp, #16
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
 8009886:	4608      	mov	r0, r1
 8009888:	4611      	mov	r1, r2
 800988a:	461a      	mov	r2, r3
 800988c:	4603      	mov	r3, r0
 800988e:	70fb      	strb	r3, [r7, #3]
 8009890:	460b      	mov	r3, r1
 8009892:	70bb      	strb	r3, [r7, #2]
 8009894:	4613      	mov	r3, r2
 8009896:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800989c:	2300      	movs	r3, #0
 800989e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80098a6:	78bb      	ldrb	r3, [r7, #2]
 80098a8:	883a      	ldrh	r2, [r7, #0]
 80098aa:	78f9      	ldrb	r1, [r7, #3]
 80098ac:	f7fa ff31 	bl	8004712 <HAL_PCD_EP_Open>
 80098b0:	4603      	mov	r3, r0
 80098b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098b4:	7bfb      	ldrb	r3, [r7, #15]
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 f91c 	bl	8009af4 <USBD_Get_USB_Status>
 80098bc:	4603      	mov	r3, r0
 80098be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b084      	sub	sp, #16
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
 80098d2:	460b      	mov	r3, r1
 80098d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098da:	2300      	movs	r3, #0
 80098dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098e4:	78fa      	ldrb	r2, [r7, #3]
 80098e6:	4611      	mov	r1, r2
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7fa ff7a 	bl	80047e2 <HAL_PCD_EP_Close>
 80098ee:	4603      	mov	r3, r0
 80098f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098f2:	7bfb      	ldrb	r3, [r7, #15]
 80098f4:	4618      	mov	r0, r3
 80098f6:	f000 f8fd 	bl	8009af4 <USBD_Get_USB_Status>
 80098fa:	4603      	mov	r3, r0
 80098fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009900:	4618      	mov	r0, r3
 8009902:	3710      	adds	r7, #16
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	460b      	mov	r3, r1
 8009912:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009914:	2300      	movs	r3, #0
 8009916:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009918:	2300      	movs	r3, #0
 800991a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009922:	78fa      	ldrb	r2, [r7, #3]
 8009924:	4611      	mov	r1, r2
 8009926:	4618      	mov	r0, r3
 8009928:	f7fb f852 	bl	80049d0 <HAL_PCD_EP_SetStall>
 800992c:	4603      	mov	r3, r0
 800992e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009930:	7bfb      	ldrb	r3, [r7, #15]
 8009932:	4618      	mov	r0, r3
 8009934:	f000 f8de 	bl	8009af4 <USBD_Get_USB_Status>
 8009938:	4603      	mov	r3, r0
 800993a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800993c:	7bbb      	ldrb	r3, [r7, #14]
}
 800993e:	4618      	mov	r0, r3
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b084      	sub	sp, #16
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
 800994e:	460b      	mov	r3, r1
 8009950:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009952:	2300      	movs	r3, #0
 8009954:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009956:	2300      	movs	r3, #0
 8009958:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009960:	78fa      	ldrb	r2, [r7, #3]
 8009962:	4611      	mov	r1, r2
 8009964:	4618      	mov	r0, r3
 8009966:	f7fb f897 	bl	8004a98 <HAL_PCD_EP_ClrStall>
 800996a:	4603      	mov	r3, r0
 800996c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800996e:	7bfb      	ldrb	r3, [r7, #15]
 8009970:	4618      	mov	r0, r3
 8009972:	f000 f8bf 	bl	8009af4 <USBD_Get_USB_Status>
 8009976:	4603      	mov	r3, r0
 8009978:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800997a:	7bbb      	ldrb	r3, [r7, #14]
}
 800997c:	4618      	mov	r0, r3
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	460b      	mov	r3, r1
 800998e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009996:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009998:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800999c:	2b00      	cmp	r3, #0
 800999e:	da0b      	bge.n	80099b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80099a0:	78fb      	ldrb	r3, [r7, #3]
 80099a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099a6:	68f9      	ldr	r1, [r7, #12]
 80099a8:	4613      	mov	r3, r2
 80099aa:	00db      	lsls	r3, r3, #3
 80099ac:	4413      	add	r3, r2
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	440b      	add	r3, r1
 80099b2:	333e      	adds	r3, #62	; 0x3e
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	e00b      	b.n	80099d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80099b8:	78fb      	ldrb	r3, [r7, #3]
 80099ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099be:	68f9      	ldr	r1, [r7, #12]
 80099c0:	4613      	mov	r3, r2
 80099c2:	00db      	lsls	r3, r3, #3
 80099c4:	4413      	add	r3, r2
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	440b      	add	r3, r1
 80099ca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80099ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3714      	adds	r7, #20
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	460b      	mov	r3, r1
 80099e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099e8:	2300      	movs	r3, #0
 80099ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099ec:	2300      	movs	r3, #0
 80099ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099f6:	78fa      	ldrb	r2, [r7, #3]
 80099f8:	4611      	mov	r1, r2
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7fa fe64 	bl	80046c8 <HAL_PCD_SetAddress>
 8009a00:	4603      	mov	r3, r0
 8009a02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a04:	7bfb      	ldrb	r3, [r7, #15]
 8009a06:	4618      	mov	r0, r3
 8009a08:	f000 f874 	bl	8009af4 <USBD_Get_USB_Status>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a10:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b086      	sub	sp, #24
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	60f8      	str	r0, [r7, #12]
 8009a22:	607a      	str	r2, [r7, #4]
 8009a24:	603b      	str	r3, [r7, #0]
 8009a26:	460b      	mov	r3, r1
 8009a28:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009a38:	7af9      	ldrb	r1, [r7, #11]
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	f7fa ff7d 	bl	800493c <HAL_PCD_EP_Transmit>
 8009a42:	4603      	mov	r3, r0
 8009a44:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a46:	7dfb      	ldrb	r3, [r7, #23]
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f000 f853 	bl	8009af4 <USBD_Get_USB_Status>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a52:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3718      	adds	r7, #24
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b086      	sub	sp, #24
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	607a      	str	r2, [r7, #4]
 8009a66:	603b      	str	r3, [r7, #0]
 8009a68:	460b      	mov	r3, r1
 8009a6a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a70:	2300      	movs	r3, #0
 8009a72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009a7a:	7af9      	ldrb	r1, [r7, #11]
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	f7fa fef9 	bl	8004876 <HAL_PCD_EP_Receive>
 8009a84:	4603      	mov	r3, r0
 8009a86:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a88:	7dfb      	ldrb	r3, [r7, #23]
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f000 f832 	bl	8009af4 <USBD_Get_USB_Status>
 8009a90:	4603      	mov	r3, r0
 8009a92:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a94:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3718      	adds	r7, #24
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b082      	sub	sp, #8
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ab0:	78fa      	ldrb	r2, [r7, #3]
 8009ab2:	4611      	mov	r1, r2
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7fa ff29 	bl	800490c <HAL_PCD_EP_GetRxCount>
 8009aba:	4603      	mov	r3, r0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3708      	adds	r7, #8
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009acc:	4b03      	ldr	r3, [pc, #12]	; (8009adc <USBD_static_malloc+0x18>)
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	370c      	adds	r7, #12
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr
 8009ada:	bf00      	nop
 8009adc:	20001d80 	.word	0x20001d80

08009ae0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]

}
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b085      	sub	sp, #20
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	4603      	mov	r3, r0
 8009afc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009afe:	2300      	movs	r3, #0
 8009b00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b02:	79fb      	ldrb	r3, [r7, #7]
 8009b04:	2b03      	cmp	r3, #3
 8009b06:	d817      	bhi.n	8009b38 <USBD_Get_USB_Status+0x44>
 8009b08:	a201      	add	r2, pc, #4	; (adr r2, 8009b10 <USBD_Get_USB_Status+0x1c>)
 8009b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0e:	bf00      	nop
 8009b10:	08009b21 	.word	0x08009b21
 8009b14:	08009b27 	.word	0x08009b27
 8009b18:	08009b2d 	.word	0x08009b2d
 8009b1c:	08009b33 	.word	0x08009b33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009b20:	2300      	movs	r3, #0
 8009b22:	73fb      	strb	r3, [r7, #15]
    break;
 8009b24:	e00b      	b.n	8009b3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b26:	2303      	movs	r3, #3
 8009b28:	73fb      	strb	r3, [r7, #15]
    break;
 8009b2a:	e008      	b.n	8009b3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b30:	e005      	b.n	8009b3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b32:	2303      	movs	r3, #3
 8009b34:	73fb      	strb	r3, [r7, #15]
    break;
 8009b36:	e002      	b.n	8009b3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b3c:	bf00      	nop
  }
  return usb_status;
 8009b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3714      	adds	r7, #20
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <__cvt>:
 8009b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b50:	ec55 4b10 	vmov	r4, r5, d0
 8009b54:	2d00      	cmp	r5, #0
 8009b56:	460e      	mov	r6, r1
 8009b58:	4619      	mov	r1, r3
 8009b5a:	462b      	mov	r3, r5
 8009b5c:	bfbb      	ittet	lt
 8009b5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009b62:	461d      	movlt	r5, r3
 8009b64:	2300      	movge	r3, #0
 8009b66:	232d      	movlt	r3, #45	; 0x2d
 8009b68:	700b      	strb	r3, [r1, #0]
 8009b6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009b70:	4691      	mov	r9, r2
 8009b72:	f023 0820 	bic.w	r8, r3, #32
 8009b76:	bfbc      	itt	lt
 8009b78:	4622      	movlt	r2, r4
 8009b7a:	4614      	movlt	r4, r2
 8009b7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b80:	d005      	beq.n	8009b8e <__cvt+0x42>
 8009b82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009b86:	d100      	bne.n	8009b8a <__cvt+0x3e>
 8009b88:	3601      	adds	r6, #1
 8009b8a:	2102      	movs	r1, #2
 8009b8c:	e000      	b.n	8009b90 <__cvt+0x44>
 8009b8e:	2103      	movs	r1, #3
 8009b90:	ab03      	add	r3, sp, #12
 8009b92:	9301      	str	r3, [sp, #4]
 8009b94:	ab02      	add	r3, sp, #8
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	ec45 4b10 	vmov	d0, r4, r5
 8009b9c:	4653      	mov	r3, sl
 8009b9e:	4632      	mov	r2, r6
 8009ba0:	f000 fe8a 	bl	800a8b8 <_dtoa_r>
 8009ba4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009ba8:	4607      	mov	r7, r0
 8009baa:	d102      	bne.n	8009bb2 <__cvt+0x66>
 8009bac:	f019 0f01 	tst.w	r9, #1
 8009bb0:	d022      	beq.n	8009bf8 <__cvt+0xac>
 8009bb2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009bb6:	eb07 0906 	add.w	r9, r7, r6
 8009bba:	d110      	bne.n	8009bde <__cvt+0x92>
 8009bbc:	783b      	ldrb	r3, [r7, #0]
 8009bbe:	2b30      	cmp	r3, #48	; 0x30
 8009bc0:	d10a      	bne.n	8009bd8 <__cvt+0x8c>
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	4629      	mov	r1, r5
 8009bca:	f7f6 ff7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bce:	b918      	cbnz	r0, 8009bd8 <__cvt+0x8c>
 8009bd0:	f1c6 0601 	rsb	r6, r6, #1
 8009bd4:	f8ca 6000 	str.w	r6, [sl]
 8009bd8:	f8da 3000 	ldr.w	r3, [sl]
 8009bdc:	4499      	add	r9, r3
 8009bde:	2200      	movs	r2, #0
 8009be0:	2300      	movs	r3, #0
 8009be2:	4620      	mov	r0, r4
 8009be4:	4629      	mov	r1, r5
 8009be6:	f7f6 ff6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bea:	b108      	cbz	r0, 8009bf0 <__cvt+0xa4>
 8009bec:	f8cd 900c 	str.w	r9, [sp, #12]
 8009bf0:	2230      	movs	r2, #48	; 0x30
 8009bf2:	9b03      	ldr	r3, [sp, #12]
 8009bf4:	454b      	cmp	r3, r9
 8009bf6:	d307      	bcc.n	8009c08 <__cvt+0xbc>
 8009bf8:	9b03      	ldr	r3, [sp, #12]
 8009bfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bfc:	1bdb      	subs	r3, r3, r7
 8009bfe:	4638      	mov	r0, r7
 8009c00:	6013      	str	r3, [r2, #0]
 8009c02:	b004      	add	sp, #16
 8009c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c08:	1c59      	adds	r1, r3, #1
 8009c0a:	9103      	str	r1, [sp, #12]
 8009c0c:	701a      	strb	r2, [r3, #0]
 8009c0e:	e7f0      	b.n	8009bf2 <__cvt+0xa6>

08009c10 <__exponent>:
 8009c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c12:	4603      	mov	r3, r0
 8009c14:	2900      	cmp	r1, #0
 8009c16:	bfb8      	it	lt
 8009c18:	4249      	neglt	r1, r1
 8009c1a:	f803 2b02 	strb.w	r2, [r3], #2
 8009c1e:	bfb4      	ite	lt
 8009c20:	222d      	movlt	r2, #45	; 0x2d
 8009c22:	222b      	movge	r2, #43	; 0x2b
 8009c24:	2909      	cmp	r1, #9
 8009c26:	7042      	strb	r2, [r0, #1]
 8009c28:	dd2a      	ble.n	8009c80 <__exponent+0x70>
 8009c2a:	f10d 0207 	add.w	r2, sp, #7
 8009c2e:	4617      	mov	r7, r2
 8009c30:	260a      	movs	r6, #10
 8009c32:	4694      	mov	ip, r2
 8009c34:	fb91 f5f6 	sdiv	r5, r1, r6
 8009c38:	fb06 1415 	mls	r4, r6, r5, r1
 8009c3c:	3430      	adds	r4, #48	; 0x30
 8009c3e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009c42:	460c      	mov	r4, r1
 8009c44:	2c63      	cmp	r4, #99	; 0x63
 8009c46:	f102 32ff 	add.w	r2, r2, #4294967295
 8009c4a:	4629      	mov	r1, r5
 8009c4c:	dcf1      	bgt.n	8009c32 <__exponent+0x22>
 8009c4e:	3130      	adds	r1, #48	; 0x30
 8009c50:	f1ac 0402 	sub.w	r4, ip, #2
 8009c54:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009c58:	1c41      	adds	r1, r0, #1
 8009c5a:	4622      	mov	r2, r4
 8009c5c:	42ba      	cmp	r2, r7
 8009c5e:	d30a      	bcc.n	8009c76 <__exponent+0x66>
 8009c60:	f10d 0209 	add.w	r2, sp, #9
 8009c64:	eba2 020c 	sub.w	r2, r2, ip
 8009c68:	42bc      	cmp	r4, r7
 8009c6a:	bf88      	it	hi
 8009c6c:	2200      	movhi	r2, #0
 8009c6e:	4413      	add	r3, r2
 8009c70:	1a18      	subs	r0, r3, r0
 8009c72:	b003      	add	sp, #12
 8009c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c76:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009c7a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009c7e:	e7ed      	b.n	8009c5c <__exponent+0x4c>
 8009c80:	2330      	movs	r3, #48	; 0x30
 8009c82:	3130      	adds	r1, #48	; 0x30
 8009c84:	7083      	strb	r3, [r0, #2]
 8009c86:	70c1      	strb	r1, [r0, #3]
 8009c88:	1d03      	adds	r3, r0, #4
 8009c8a:	e7f1      	b.n	8009c70 <__exponent+0x60>

08009c8c <_printf_float>:
 8009c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c90:	ed2d 8b02 	vpush	{d8}
 8009c94:	b08d      	sub	sp, #52	; 0x34
 8009c96:	460c      	mov	r4, r1
 8009c98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009c9c:	4616      	mov	r6, r2
 8009c9e:	461f      	mov	r7, r3
 8009ca0:	4605      	mov	r5, r0
 8009ca2:	f000 fd09 	bl	800a6b8 <_localeconv_r>
 8009ca6:	f8d0 a000 	ldr.w	sl, [r0]
 8009caa:	4650      	mov	r0, sl
 8009cac:	f7f6 fae0 	bl	8000270 <strlen>
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	930a      	str	r3, [sp, #40]	; 0x28
 8009cb4:	6823      	ldr	r3, [r4, #0]
 8009cb6:	9305      	str	r3, [sp, #20]
 8009cb8:	f8d8 3000 	ldr.w	r3, [r8]
 8009cbc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009cc0:	3307      	adds	r3, #7
 8009cc2:	f023 0307 	bic.w	r3, r3, #7
 8009cc6:	f103 0208 	add.w	r2, r3, #8
 8009cca:	f8c8 2000 	str.w	r2, [r8]
 8009cce:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009cd2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009cd6:	9307      	str	r3, [sp, #28]
 8009cd8:	f8cd 8018 	str.w	r8, [sp, #24]
 8009cdc:	ee08 0a10 	vmov	s16, r0
 8009ce0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009ce4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ce8:	4b9e      	ldr	r3, [pc, #632]	; (8009f64 <_printf_float+0x2d8>)
 8009cea:	f04f 32ff 	mov.w	r2, #4294967295
 8009cee:	f7f6 ff1d 	bl	8000b2c <__aeabi_dcmpun>
 8009cf2:	bb88      	cbnz	r0, 8009d58 <_printf_float+0xcc>
 8009cf4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cf8:	4b9a      	ldr	r3, [pc, #616]	; (8009f64 <_printf_float+0x2d8>)
 8009cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8009cfe:	f7f6 fef7 	bl	8000af0 <__aeabi_dcmple>
 8009d02:	bb48      	cbnz	r0, 8009d58 <_printf_float+0xcc>
 8009d04:	2200      	movs	r2, #0
 8009d06:	2300      	movs	r3, #0
 8009d08:	4640      	mov	r0, r8
 8009d0a:	4649      	mov	r1, r9
 8009d0c:	f7f6 fee6 	bl	8000adc <__aeabi_dcmplt>
 8009d10:	b110      	cbz	r0, 8009d18 <_printf_float+0x8c>
 8009d12:	232d      	movs	r3, #45	; 0x2d
 8009d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d18:	4a93      	ldr	r2, [pc, #588]	; (8009f68 <_printf_float+0x2dc>)
 8009d1a:	4b94      	ldr	r3, [pc, #592]	; (8009f6c <_printf_float+0x2e0>)
 8009d1c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009d20:	bf94      	ite	ls
 8009d22:	4690      	movls	r8, r2
 8009d24:	4698      	movhi	r8, r3
 8009d26:	2303      	movs	r3, #3
 8009d28:	6123      	str	r3, [r4, #16]
 8009d2a:	9b05      	ldr	r3, [sp, #20]
 8009d2c:	f023 0304 	bic.w	r3, r3, #4
 8009d30:	6023      	str	r3, [r4, #0]
 8009d32:	f04f 0900 	mov.w	r9, #0
 8009d36:	9700      	str	r7, [sp, #0]
 8009d38:	4633      	mov	r3, r6
 8009d3a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009d3c:	4621      	mov	r1, r4
 8009d3e:	4628      	mov	r0, r5
 8009d40:	f000 f9da 	bl	800a0f8 <_printf_common>
 8009d44:	3001      	adds	r0, #1
 8009d46:	f040 8090 	bne.w	8009e6a <_printf_float+0x1de>
 8009d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d4e:	b00d      	add	sp, #52	; 0x34
 8009d50:	ecbd 8b02 	vpop	{d8}
 8009d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d58:	4642      	mov	r2, r8
 8009d5a:	464b      	mov	r3, r9
 8009d5c:	4640      	mov	r0, r8
 8009d5e:	4649      	mov	r1, r9
 8009d60:	f7f6 fee4 	bl	8000b2c <__aeabi_dcmpun>
 8009d64:	b140      	cbz	r0, 8009d78 <_printf_float+0xec>
 8009d66:	464b      	mov	r3, r9
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	bfbc      	itt	lt
 8009d6c:	232d      	movlt	r3, #45	; 0x2d
 8009d6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009d72:	4a7f      	ldr	r2, [pc, #508]	; (8009f70 <_printf_float+0x2e4>)
 8009d74:	4b7f      	ldr	r3, [pc, #508]	; (8009f74 <_printf_float+0x2e8>)
 8009d76:	e7d1      	b.n	8009d1c <_printf_float+0x90>
 8009d78:	6863      	ldr	r3, [r4, #4]
 8009d7a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009d7e:	9206      	str	r2, [sp, #24]
 8009d80:	1c5a      	adds	r2, r3, #1
 8009d82:	d13f      	bne.n	8009e04 <_printf_float+0x178>
 8009d84:	2306      	movs	r3, #6
 8009d86:	6063      	str	r3, [r4, #4]
 8009d88:	9b05      	ldr	r3, [sp, #20]
 8009d8a:	6861      	ldr	r1, [r4, #4]
 8009d8c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009d90:	2300      	movs	r3, #0
 8009d92:	9303      	str	r3, [sp, #12]
 8009d94:	ab0a      	add	r3, sp, #40	; 0x28
 8009d96:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009d9a:	ab09      	add	r3, sp, #36	; 0x24
 8009d9c:	ec49 8b10 	vmov	d0, r8, r9
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	6022      	str	r2, [r4, #0]
 8009da4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009da8:	4628      	mov	r0, r5
 8009daa:	f7ff fecf 	bl	8009b4c <__cvt>
 8009dae:	9b06      	ldr	r3, [sp, #24]
 8009db0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009db2:	2b47      	cmp	r3, #71	; 0x47
 8009db4:	4680      	mov	r8, r0
 8009db6:	d108      	bne.n	8009dca <_printf_float+0x13e>
 8009db8:	1cc8      	adds	r0, r1, #3
 8009dba:	db02      	blt.n	8009dc2 <_printf_float+0x136>
 8009dbc:	6863      	ldr	r3, [r4, #4]
 8009dbe:	4299      	cmp	r1, r3
 8009dc0:	dd41      	ble.n	8009e46 <_printf_float+0x1ba>
 8009dc2:	f1ab 0302 	sub.w	r3, fp, #2
 8009dc6:	fa5f fb83 	uxtb.w	fp, r3
 8009dca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009dce:	d820      	bhi.n	8009e12 <_printf_float+0x186>
 8009dd0:	3901      	subs	r1, #1
 8009dd2:	465a      	mov	r2, fp
 8009dd4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009dd8:	9109      	str	r1, [sp, #36]	; 0x24
 8009dda:	f7ff ff19 	bl	8009c10 <__exponent>
 8009dde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009de0:	1813      	adds	r3, r2, r0
 8009de2:	2a01      	cmp	r2, #1
 8009de4:	4681      	mov	r9, r0
 8009de6:	6123      	str	r3, [r4, #16]
 8009de8:	dc02      	bgt.n	8009df0 <_printf_float+0x164>
 8009dea:	6822      	ldr	r2, [r4, #0]
 8009dec:	07d2      	lsls	r2, r2, #31
 8009dee:	d501      	bpl.n	8009df4 <_printf_float+0x168>
 8009df0:	3301      	adds	r3, #1
 8009df2:	6123      	str	r3, [r4, #16]
 8009df4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d09c      	beq.n	8009d36 <_printf_float+0xaa>
 8009dfc:	232d      	movs	r3, #45	; 0x2d
 8009dfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e02:	e798      	b.n	8009d36 <_printf_float+0xaa>
 8009e04:	9a06      	ldr	r2, [sp, #24]
 8009e06:	2a47      	cmp	r2, #71	; 0x47
 8009e08:	d1be      	bne.n	8009d88 <_printf_float+0xfc>
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1bc      	bne.n	8009d88 <_printf_float+0xfc>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e7b9      	b.n	8009d86 <_printf_float+0xfa>
 8009e12:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009e16:	d118      	bne.n	8009e4a <_printf_float+0x1be>
 8009e18:	2900      	cmp	r1, #0
 8009e1a:	6863      	ldr	r3, [r4, #4]
 8009e1c:	dd0b      	ble.n	8009e36 <_printf_float+0x1aa>
 8009e1e:	6121      	str	r1, [r4, #16]
 8009e20:	b913      	cbnz	r3, 8009e28 <_printf_float+0x19c>
 8009e22:	6822      	ldr	r2, [r4, #0]
 8009e24:	07d0      	lsls	r0, r2, #31
 8009e26:	d502      	bpl.n	8009e2e <_printf_float+0x1a2>
 8009e28:	3301      	adds	r3, #1
 8009e2a:	440b      	add	r3, r1
 8009e2c:	6123      	str	r3, [r4, #16]
 8009e2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e30:	f04f 0900 	mov.w	r9, #0
 8009e34:	e7de      	b.n	8009df4 <_printf_float+0x168>
 8009e36:	b913      	cbnz	r3, 8009e3e <_printf_float+0x1b2>
 8009e38:	6822      	ldr	r2, [r4, #0]
 8009e3a:	07d2      	lsls	r2, r2, #31
 8009e3c:	d501      	bpl.n	8009e42 <_printf_float+0x1b6>
 8009e3e:	3302      	adds	r3, #2
 8009e40:	e7f4      	b.n	8009e2c <_printf_float+0x1a0>
 8009e42:	2301      	movs	r3, #1
 8009e44:	e7f2      	b.n	8009e2c <_printf_float+0x1a0>
 8009e46:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009e4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e4c:	4299      	cmp	r1, r3
 8009e4e:	db05      	blt.n	8009e5c <_printf_float+0x1d0>
 8009e50:	6823      	ldr	r3, [r4, #0]
 8009e52:	6121      	str	r1, [r4, #16]
 8009e54:	07d8      	lsls	r0, r3, #31
 8009e56:	d5ea      	bpl.n	8009e2e <_printf_float+0x1a2>
 8009e58:	1c4b      	adds	r3, r1, #1
 8009e5a:	e7e7      	b.n	8009e2c <_printf_float+0x1a0>
 8009e5c:	2900      	cmp	r1, #0
 8009e5e:	bfd4      	ite	le
 8009e60:	f1c1 0202 	rsble	r2, r1, #2
 8009e64:	2201      	movgt	r2, #1
 8009e66:	4413      	add	r3, r2
 8009e68:	e7e0      	b.n	8009e2c <_printf_float+0x1a0>
 8009e6a:	6823      	ldr	r3, [r4, #0]
 8009e6c:	055a      	lsls	r2, r3, #21
 8009e6e:	d407      	bmi.n	8009e80 <_printf_float+0x1f4>
 8009e70:	6923      	ldr	r3, [r4, #16]
 8009e72:	4642      	mov	r2, r8
 8009e74:	4631      	mov	r1, r6
 8009e76:	4628      	mov	r0, r5
 8009e78:	47b8      	blx	r7
 8009e7a:	3001      	adds	r0, #1
 8009e7c:	d12c      	bne.n	8009ed8 <_printf_float+0x24c>
 8009e7e:	e764      	b.n	8009d4a <_printf_float+0xbe>
 8009e80:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e84:	f240 80e0 	bls.w	800a048 <_printf_float+0x3bc>
 8009e88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	2300      	movs	r3, #0
 8009e90:	f7f6 fe1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d034      	beq.n	8009f02 <_printf_float+0x276>
 8009e98:	4a37      	ldr	r2, [pc, #220]	; (8009f78 <_printf_float+0x2ec>)
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	4631      	mov	r1, r6
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	47b8      	blx	r7
 8009ea2:	3001      	adds	r0, #1
 8009ea4:	f43f af51 	beq.w	8009d4a <_printf_float+0xbe>
 8009ea8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009eac:	429a      	cmp	r2, r3
 8009eae:	db02      	blt.n	8009eb6 <_printf_float+0x22a>
 8009eb0:	6823      	ldr	r3, [r4, #0]
 8009eb2:	07d8      	lsls	r0, r3, #31
 8009eb4:	d510      	bpl.n	8009ed8 <_printf_float+0x24c>
 8009eb6:	ee18 3a10 	vmov	r3, s16
 8009eba:	4652      	mov	r2, sl
 8009ebc:	4631      	mov	r1, r6
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	47b8      	blx	r7
 8009ec2:	3001      	adds	r0, #1
 8009ec4:	f43f af41 	beq.w	8009d4a <_printf_float+0xbe>
 8009ec8:	f04f 0800 	mov.w	r8, #0
 8009ecc:	f104 091a 	add.w	r9, r4, #26
 8009ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ed2:	3b01      	subs	r3, #1
 8009ed4:	4543      	cmp	r3, r8
 8009ed6:	dc09      	bgt.n	8009eec <_printf_float+0x260>
 8009ed8:	6823      	ldr	r3, [r4, #0]
 8009eda:	079b      	lsls	r3, r3, #30
 8009edc:	f100 8107 	bmi.w	800a0ee <_printf_float+0x462>
 8009ee0:	68e0      	ldr	r0, [r4, #12]
 8009ee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ee4:	4298      	cmp	r0, r3
 8009ee6:	bfb8      	it	lt
 8009ee8:	4618      	movlt	r0, r3
 8009eea:	e730      	b.n	8009d4e <_printf_float+0xc2>
 8009eec:	2301      	movs	r3, #1
 8009eee:	464a      	mov	r2, r9
 8009ef0:	4631      	mov	r1, r6
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	47b8      	blx	r7
 8009ef6:	3001      	adds	r0, #1
 8009ef8:	f43f af27 	beq.w	8009d4a <_printf_float+0xbe>
 8009efc:	f108 0801 	add.w	r8, r8, #1
 8009f00:	e7e6      	b.n	8009ed0 <_printf_float+0x244>
 8009f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	dc39      	bgt.n	8009f7c <_printf_float+0x2f0>
 8009f08:	4a1b      	ldr	r2, [pc, #108]	; (8009f78 <_printf_float+0x2ec>)
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	4631      	mov	r1, r6
 8009f0e:	4628      	mov	r0, r5
 8009f10:	47b8      	blx	r7
 8009f12:	3001      	adds	r0, #1
 8009f14:	f43f af19 	beq.w	8009d4a <_printf_float+0xbe>
 8009f18:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	d102      	bne.n	8009f26 <_printf_float+0x29a>
 8009f20:	6823      	ldr	r3, [r4, #0]
 8009f22:	07d9      	lsls	r1, r3, #31
 8009f24:	d5d8      	bpl.n	8009ed8 <_printf_float+0x24c>
 8009f26:	ee18 3a10 	vmov	r3, s16
 8009f2a:	4652      	mov	r2, sl
 8009f2c:	4631      	mov	r1, r6
 8009f2e:	4628      	mov	r0, r5
 8009f30:	47b8      	blx	r7
 8009f32:	3001      	adds	r0, #1
 8009f34:	f43f af09 	beq.w	8009d4a <_printf_float+0xbe>
 8009f38:	f04f 0900 	mov.w	r9, #0
 8009f3c:	f104 0a1a 	add.w	sl, r4, #26
 8009f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f42:	425b      	negs	r3, r3
 8009f44:	454b      	cmp	r3, r9
 8009f46:	dc01      	bgt.n	8009f4c <_printf_float+0x2c0>
 8009f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f4a:	e792      	b.n	8009e72 <_printf_float+0x1e6>
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	4652      	mov	r2, sl
 8009f50:	4631      	mov	r1, r6
 8009f52:	4628      	mov	r0, r5
 8009f54:	47b8      	blx	r7
 8009f56:	3001      	adds	r0, #1
 8009f58:	f43f aef7 	beq.w	8009d4a <_printf_float+0xbe>
 8009f5c:	f109 0901 	add.w	r9, r9, #1
 8009f60:	e7ee      	b.n	8009f40 <_printf_float+0x2b4>
 8009f62:	bf00      	nop
 8009f64:	7fefffff 	.word	0x7fefffff
 8009f68:	0800e114 	.word	0x0800e114
 8009f6c:	0800e118 	.word	0x0800e118
 8009f70:	0800e11c 	.word	0x0800e11c
 8009f74:	0800e120 	.word	0x0800e120
 8009f78:	0800e124 	.word	0x0800e124
 8009f7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f80:	429a      	cmp	r2, r3
 8009f82:	bfa8      	it	ge
 8009f84:	461a      	movge	r2, r3
 8009f86:	2a00      	cmp	r2, #0
 8009f88:	4691      	mov	r9, r2
 8009f8a:	dc37      	bgt.n	8009ffc <_printf_float+0x370>
 8009f8c:	f04f 0b00 	mov.w	fp, #0
 8009f90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f94:	f104 021a 	add.w	r2, r4, #26
 8009f98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f9a:	9305      	str	r3, [sp, #20]
 8009f9c:	eba3 0309 	sub.w	r3, r3, r9
 8009fa0:	455b      	cmp	r3, fp
 8009fa2:	dc33      	bgt.n	800a00c <_printf_float+0x380>
 8009fa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	db3b      	blt.n	800a024 <_printf_float+0x398>
 8009fac:	6823      	ldr	r3, [r4, #0]
 8009fae:	07da      	lsls	r2, r3, #31
 8009fb0:	d438      	bmi.n	800a024 <_printf_float+0x398>
 8009fb2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009fb6:	eba2 0903 	sub.w	r9, r2, r3
 8009fba:	9b05      	ldr	r3, [sp, #20]
 8009fbc:	1ad2      	subs	r2, r2, r3
 8009fbe:	4591      	cmp	r9, r2
 8009fc0:	bfa8      	it	ge
 8009fc2:	4691      	movge	r9, r2
 8009fc4:	f1b9 0f00 	cmp.w	r9, #0
 8009fc8:	dc35      	bgt.n	800a036 <_printf_float+0x3aa>
 8009fca:	f04f 0800 	mov.w	r8, #0
 8009fce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fd2:	f104 0a1a 	add.w	sl, r4, #26
 8009fd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fda:	1a9b      	subs	r3, r3, r2
 8009fdc:	eba3 0309 	sub.w	r3, r3, r9
 8009fe0:	4543      	cmp	r3, r8
 8009fe2:	f77f af79 	ble.w	8009ed8 <_printf_float+0x24c>
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	4652      	mov	r2, sl
 8009fea:	4631      	mov	r1, r6
 8009fec:	4628      	mov	r0, r5
 8009fee:	47b8      	blx	r7
 8009ff0:	3001      	adds	r0, #1
 8009ff2:	f43f aeaa 	beq.w	8009d4a <_printf_float+0xbe>
 8009ff6:	f108 0801 	add.w	r8, r8, #1
 8009ffa:	e7ec      	b.n	8009fd6 <_printf_float+0x34a>
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	4631      	mov	r1, r6
 800a000:	4642      	mov	r2, r8
 800a002:	4628      	mov	r0, r5
 800a004:	47b8      	blx	r7
 800a006:	3001      	adds	r0, #1
 800a008:	d1c0      	bne.n	8009f8c <_printf_float+0x300>
 800a00a:	e69e      	b.n	8009d4a <_printf_float+0xbe>
 800a00c:	2301      	movs	r3, #1
 800a00e:	4631      	mov	r1, r6
 800a010:	4628      	mov	r0, r5
 800a012:	9205      	str	r2, [sp, #20]
 800a014:	47b8      	blx	r7
 800a016:	3001      	adds	r0, #1
 800a018:	f43f ae97 	beq.w	8009d4a <_printf_float+0xbe>
 800a01c:	9a05      	ldr	r2, [sp, #20]
 800a01e:	f10b 0b01 	add.w	fp, fp, #1
 800a022:	e7b9      	b.n	8009f98 <_printf_float+0x30c>
 800a024:	ee18 3a10 	vmov	r3, s16
 800a028:	4652      	mov	r2, sl
 800a02a:	4631      	mov	r1, r6
 800a02c:	4628      	mov	r0, r5
 800a02e:	47b8      	blx	r7
 800a030:	3001      	adds	r0, #1
 800a032:	d1be      	bne.n	8009fb2 <_printf_float+0x326>
 800a034:	e689      	b.n	8009d4a <_printf_float+0xbe>
 800a036:	9a05      	ldr	r2, [sp, #20]
 800a038:	464b      	mov	r3, r9
 800a03a:	4442      	add	r2, r8
 800a03c:	4631      	mov	r1, r6
 800a03e:	4628      	mov	r0, r5
 800a040:	47b8      	blx	r7
 800a042:	3001      	adds	r0, #1
 800a044:	d1c1      	bne.n	8009fca <_printf_float+0x33e>
 800a046:	e680      	b.n	8009d4a <_printf_float+0xbe>
 800a048:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a04a:	2a01      	cmp	r2, #1
 800a04c:	dc01      	bgt.n	800a052 <_printf_float+0x3c6>
 800a04e:	07db      	lsls	r3, r3, #31
 800a050:	d53a      	bpl.n	800a0c8 <_printf_float+0x43c>
 800a052:	2301      	movs	r3, #1
 800a054:	4642      	mov	r2, r8
 800a056:	4631      	mov	r1, r6
 800a058:	4628      	mov	r0, r5
 800a05a:	47b8      	blx	r7
 800a05c:	3001      	adds	r0, #1
 800a05e:	f43f ae74 	beq.w	8009d4a <_printf_float+0xbe>
 800a062:	ee18 3a10 	vmov	r3, s16
 800a066:	4652      	mov	r2, sl
 800a068:	4631      	mov	r1, r6
 800a06a:	4628      	mov	r0, r5
 800a06c:	47b8      	blx	r7
 800a06e:	3001      	adds	r0, #1
 800a070:	f43f ae6b 	beq.w	8009d4a <_printf_float+0xbe>
 800a074:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a078:	2200      	movs	r2, #0
 800a07a:	2300      	movs	r3, #0
 800a07c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a080:	f7f6 fd22 	bl	8000ac8 <__aeabi_dcmpeq>
 800a084:	b9d8      	cbnz	r0, 800a0be <_printf_float+0x432>
 800a086:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a08a:	f108 0201 	add.w	r2, r8, #1
 800a08e:	4631      	mov	r1, r6
 800a090:	4628      	mov	r0, r5
 800a092:	47b8      	blx	r7
 800a094:	3001      	adds	r0, #1
 800a096:	d10e      	bne.n	800a0b6 <_printf_float+0x42a>
 800a098:	e657      	b.n	8009d4a <_printf_float+0xbe>
 800a09a:	2301      	movs	r3, #1
 800a09c:	4652      	mov	r2, sl
 800a09e:	4631      	mov	r1, r6
 800a0a0:	4628      	mov	r0, r5
 800a0a2:	47b8      	blx	r7
 800a0a4:	3001      	adds	r0, #1
 800a0a6:	f43f ae50 	beq.w	8009d4a <_printf_float+0xbe>
 800a0aa:	f108 0801 	add.w	r8, r8, #1
 800a0ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	4543      	cmp	r3, r8
 800a0b4:	dcf1      	bgt.n	800a09a <_printf_float+0x40e>
 800a0b6:	464b      	mov	r3, r9
 800a0b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a0bc:	e6da      	b.n	8009e74 <_printf_float+0x1e8>
 800a0be:	f04f 0800 	mov.w	r8, #0
 800a0c2:	f104 0a1a 	add.w	sl, r4, #26
 800a0c6:	e7f2      	b.n	800a0ae <_printf_float+0x422>
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	4642      	mov	r2, r8
 800a0cc:	e7df      	b.n	800a08e <_printf_float+0x402>
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	464a      	mov	r2, r9
 800a0d2:	4631      	mov	r1, r6
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	47b8      	blx	r7
 800a0d8:	3001      	adds	r0, #1
 800a0da:	f43f ae36 	beq.w	8009d4a <_printf_float+0xbe>
 800a0de:	f108 0801 	add.w	r8, r8, #1
 800a0e2:	68e3      	ldr	r3, [r4, #12]
 800a0e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a0e6:	1a5b      	subs	r3, r3, r1
 800a0e8:	4543      	cmp	r3, r8
 800a0ea:	dcf0      	bgt.n	800a0ce <_printf_float+0x442>
 800a0ec:	e6f8      	b.n	8009ee0 <_printf_float+0x254>
 800a0ee:	f04f 0800 	mov.w	r8, #0
 800a0f2:	f104 0919 	add.w	r9, r4, #25
 800a0f6:	e7f4      	b.n	800a0e2 <_printf_float+0x456>

0800a0f8 <_printf_common>:
 800a0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0fc:	4616      	mov	r6, r2
 800a0fe:	4699      	mov	r9, r3
 800a100:	688a      	ldr	r2, [r1, #8]
 800a102:	690b      	ldr	r3, [r1, #16]
 800a104:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a108:	4293      	cmp	r3, r2
 800a10a:	bfb8      	it	lt
 800a10c:	4613      	movlt	r3, r2
 800a10e:	6033      	str	r3, [r6, #0]
 800a110:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a114:	4607      	mov	r7, r0
 800a116:	460c      	mov	r4, r1
 800a118:	b10a      	cbz	r2, 800a11e <_printf_common+0x26>
 800a11a:	3301      	adds	r3, #1
 800a11c:	6033      	str	r3, [r6, #0]
 800a11e:	6823      	ldr	r3, [r4, #0]
 800a120:	0699      	lsls	r1, r3, #26
 800a122:	bf42      	ittt	mi
 800a124:	6833      	ldrmi	r3, [r6, #0]
 800a126:	3302      	addmi	r3, #2
 800a128:	6033      	strmi	r3, [r6, #0]
 800a12a:	6825      	ldr	r5, [r4, #0]
 800a12c:	f015 0506 	ands.w	r5, r5, #6
 800a130:	d106      	bne.n	800a140 <_printf_common+0x48>
 800a132:	f104 0a19 	add.w	sl, r4, #25
 800a136:	68e3      	ldr	r3, [r4, #12]
 800a138:	6832      	ldr	r2, [r6, #0]
 800a13a:	1a9b      	subs	r3, r3, r2
 800a13c:	42ab      	cmp	r3, r5
 800a13e:	dc26      	bgt.n	800a18e <_printf_common+0x96>
 800a140:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a144:	1e13      	subs	r3, r2, #0
 800a146:	6822      	ldr	r2, [r4, #0]
 800a148:	bf18      	it	ne
 800a14a:	2301      	movne	r3, #1
 800a14c:	0692      	lsls	r2, r2, #26
 800a14e:	d42b      	bmi.n	800a1a8 <_printf_common+0xb0>
 800a150:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a154:	4649      	mov	r1, r9
 800a156:	4638      	mov	r0, r7
 800a158:	47c0      	blx	r8
 800a15a:	3001      	adds	r0, #1
 800a15c:	d01e      	beq.n	800a19c <_printf_common+0xa4>
 800a15e:	6823      	ldr	r3, [r4, #0]
 800a160:	6922      	ldr	r2, [r4, #16]
 800a162:	f003 0306 	and.w	r3, r3, #6
 800a166:	2b04      	cmp	r3, #4
 800a168:	bf02      	ittt	eq
 800a16a:	68e5      	ldreq	r5, [r4, #12]
 800a16c:	6833      	ldreq	r3, [r6, #0]
 800a16e:	1aed      	subeq	r5, r5, r3
 800a170:	68a3      	ldr	r3, [r4, #8]
 800a172:	bf0c      	ite	eq
 800a174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a178:	2500      	movne	r5, #0
 800a17a:	4293      	cmp	r3, r2
 800a17c:	bfc4      	itt	gt
 800a17e:	1a9b      	subgt	r3, r3, r2
 800a180:	18ed      	addgt	r5, r5, r3
 800a182:	2600      	movs	r6, #0
 800a184:	341a      	adds	r4, #26
 800a186:	42b5      	cmp	r5, r6
 800a188:	d11a      	bne.n	800a1c0 <_printf_common+0xc8>
 800a18a:	2000      	movs	r0, #0
 800a18c:	e008      	b.n	800a1a0 <_printf_common+0xa8>
 800a18e:	2301      	movs	r3, #1
 800a190:	4652      	mov	r2, sl
 800a192:	4649      	mov	r1, r9
 800a194:	4638      	mov	r0, r7
 800a196:	47c0      	blx	r8
 800a198:	3001      	adds	r0, #1
 800a19a:	d103      	bne.n	800a1a4 <_printf_common+0xac>
 800a19c:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1a4:	3501      	adds	r5, #1
 800a1a6:	e7c6      	b.n	800a136 <_printf_common+0x3e>
 800a1a8:	18e1      	adds	r1, r4, r3
 800a1aa:	1c5a      	adds	r2, r3, #1
 800a1ac:	2030      	movs	r0, #48	; 0x30
 800a1ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1b2:	4422      	add	r2, r4
 800a1b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1bc:	3302      	adds	r3, #2
 800a1be:	e7c7      	b.n	800a150 <_printf_common+0x58>
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	4622      	mov	r2, r4
 800a1c4:	4649      	mov	r1, r9
 800a1c6:	4638      	mov	r0, r7
 800a1c8:	47c0      	blx	r8
 800a1ca:	3001      	adds	r0, #1
 800a1cc:	d0e6      	beq.n	800a19c <_printf_common+0xa4>
 800a1ce:	3601      	adds	r6, #1
 800a1d0:	e7d9      	b.n	800a186 <_printf_common+0x8e>
	...

0800a1d4 <_printf_i>:
 800a1d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1d8:	7e0f      	ldrb	r7, [r1, #24]
 800a1da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a1dc:	2f78      	cmp	r7, #120	; 0x78
 800a1de:	4691      	mov	r9, r2
 800a1e0:	4680      	mov	r8, r0
 800a1e2:	460c      	mov	r4, r1
 800a1e4:	469a      	mov	sl, r3
 800a1e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a1ea:	d807      	bhi.n	800a1fc <_printf_i+0x28>
 800a1ec:	2f62      	cmp	r7, #98	; 0x62
 800a1ee:	d80a      	bhi.n	800a206 <_printf_i+0x32>
 800a1f0:	2f00      	cmp	r7, #0
 800a1f2:	f000 80d4 	beq.w	800a39e <_printf_i+0x1ca>
 800a1f6:	2f58      	cmp	r7, #88	; 0x58
 800a1f8:	f000 80c0 	beq.w	800a37c <_printf_i+0x1a8>
 800a1fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a200:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a204:	e03a      	b.n	800a27c <_printf_i+0xa8>
 800a206:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a20a:	2b15      	cmp	r3, #21
 800a20c:	d8f6      	bhi.n	800a1fc <_printf_i+0x28>
 800a20e:	a101      	add	r1, pc, #4	; (adr r1, 800a214 <_printf_i+0x40>)
 800a210:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a214:	0800a26d 	.word	0x0800a26d
 800a218:	0800a281 	.word	0x0800a281
 800a21c:	0800a1fd 	.word	0x0800a1fd
 800a220:	0800a1fd 	.word	0x0800a1fd
 800a224:	0800a1fd 	.word	0x0800a1fd
 800a228:	0800a1fd 	.word	0x0800a1fd
 800a22c:	0800a281 	.word	0x0800a281
 800a230:	0800a1fd 	.word	0x0800a1fd
 800a234:	0800a1fd 	.word	0x0800a1fd
 800a238:	0800a1fd 	.word	0x0800a1fd
 800a23c:	0800a1fd 	.word	0x0800a1fd
 800a240:	0800a385 	.word	0x0800a385
 800a244:	0800a2ad 	.word	0x0800a2ad
 800a248:	0800a33f 	.word	0x0800a33f
 800a24c:	0800a1fd 	.word	0x0800a1fd
 800a250:	0800a1fd 	.word	0x0800a1fd
 800a254:	0800a3a7 	.word	0x0800a3a7
 800a258:	0800a1fd 	.word	0x0800a1fd
 800a25c:	0800a2ad 	.word	0x0800a2ad
 800a260:	0800a1fd 	.word	0x0800a1fd
 800a264:	0800a1fd 	.word	0x0800a1fd
 800a268:	0800a347 	.word	0x0800a347
 800a26c:	682b      	ldr	r3, [r5, #0]
 800a26e:	1d1a      	adds	r2, r3, #4
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	602a      	str	r2, [r5, #0]
 800a274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a278:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a27c:	2301      	movs	r3, #1
 800a27e:	e09f      	b.n	800a3c0 <_printf_i+0x1ec>
 800a280:	6820      	ldr	r0, [r4, #0]
 800a282:	682b      	ldr	r3, [r5, #0]
 800a284:	0607      	lsls	r7, r0, #24
 800a286:	f103 0104 	add.w	r1, r3, #4
 800a28a:	6029      	str	r1, [r5, #0]
 800a28c:	d501      	bpl.n	800a292 <_printf_i+0xbe>
 800a28e:	681e      	ldr	r6, [r3, #0]
 800a290:	e003      	b.n	800a29a <_printf_i+0xc6>
 800a292:	0646      	lsls	r6, r0, #25
 800a294:	d5fb      	bpl.n	800a28e <_printf_i+0xba>
 800a296:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a29a:	2e00      	cmp	r6, #0
 800a29c:	da03      	bge.n	800a2a6 <_printf_i+0xd2>
 800a29e:	232d      	movs	r3, #45	; 0x2d
 800a2a0:	4276      	negs	r6, r6
 800a2a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2a6:	485a      	ldr	r0, [pc, #360]	; (800a410 <_printf_i+0x23c>)
 800a2a8:	230a      	movs	r3, #10
 800a2aa:	e012      	b.n	800a2d2 <_printf_i+0xfe>
 800a2ac:	682b      	ldr	r3, [r5, #0]
 800a2ae:	6820      	ldr	r0, [r4, #0]
 800a2b0:	1d19      	adds	r1, r3, #4
 800a2b2:	6029      	str	r1, [r5, #0]
 800a2b4:	0605      	lsls	r5, r0, #24
 800a2b6:	d501      	bpl.n	800a2bc <_printf_i+0xe8>
 800a2b8:	681e      	ldr	r6, [r3, #0]
 800a2ba:	e002      	b.n	800a2c2 <_printf_i+0xee>
 800a2bc:	0641      	lsls	r1, r0, #25
 800a2be:	d5fb      	bpl.n	800a2b8 <_printf_i+0xe4>
 800a2c0:	881e      	ldrh	r6, [r3, #0]
 800a2c2:	4853      	ldr	r0, [pc, #332]	; (800a410 <_printf_i+0x23c>)
 800a2c4:	2f6f      	cmp	r7, #111	; 0x6f
 800a2c6:	bf0c      	ite	eq
 800a2c8:	2308      	moveq	r3, #8
 800a2ca:	230a      	movne	r3, #10
 800a2cc:	2100      	movs	r1, #0
 800a2ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2d2:	6865      	ldr	r5, [r4, #4]
 800a2d4:	60a5      	str	r5, [r4, #8]
 800a2d6:	2d00      	cmp	r5, #0
 800a2d8:	bfa2      	ittt	ge
 800a2da:	6821      	ldrge	r1, [r4, #0]
 800a2dc:	f021 0104 	bicge.w	r1, r1, #4
 800a2e0:	6021      	strge	r1, [r4, #0]
 800a2e2:	b90e      	cbnz	r6, 800a2e8 <_printf_i+0x114>
 800a2e4:	2d00      	cmp	r5, #0
 800a2e6:	d04b      	beq.n	800a380 <_printf_i+0x1ac>
 800a2e8:	4615      	mov	r5, r2
 800a2ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800a2ee:	fb03 6711 	mls	r7, r3, r1, r6
 800a2f2:	5dc7      	ldrb	r7, [r0, r7]
 800a2f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a2f8:	4637      	mov	r7, r6
 800a2fa:	42bb      	cmp	r3, r7
 800a2fc:	460e      	mov	r6, r1
 800a2fe:	d9f4      	bls.n	800a2ea <_printf_i+0x116>
 800a300:	2b08      	cmp	r3, #8
 800a302:	d10b      	bne.n	800a31c <_printf_i+0x148>
 800a304:	6823      	ldr	r3, [r4, #0]
 800a306:	07de      	lsls	r6, r3, #31
 800a308:	d508      	bpl.n	800a31c <_printf_i+0x148>
 800a30a:	6923      	ldr	r3, [r4, #16]
 800a30c:	6861      	ldr	r1, [r4, #4]
 800a30e:	4299      	cmp	r1, r3
 800a310:	bfde      	ittt	le
 800a312:	2330      	movle	r3, #48	; 0x30
 800a314:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a318:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a31c:	1b52      	subs	r2, r2, r5
 800a31e:	6122      	str	r2, [r4, #16]
 800a320:	f8cd a000 	str.w	sl, [sp]
 800a324:	464b      	mov	r3, r9
 800a326:	aa03      	add	r2, sp, #12
 800a328:	4621      	mov	r1, r4
 800a32a:	4640      	mov	r0, r8
 800a32c:	f7ff fee4 	bl	800a0f8 <_printf_common>
 800a330:	3001      	adds	r0, #1
 800a332:	d14a      	bne.n	800a3ca <_printf_i+0x1f6>
 800a334:	f04f 30ff 	mov.w	r0, #4294967295
 800a338:	b004      	add	sp, #16
 800a33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a33e:	6823      	ldr	r3, [r4, #0]
 800a340:	f043 0320 	orr.w	r3, r3, #32
 800a344:	6023      	str	r3, [r4, #0]
 800a346:	4833      	ldr	r0, [pc, #204]	; (800a414 <_printf_i+0x240>)
 800a348:	2778      	movs	r7, #120	; 0x78
 800a34a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a34e:	6823      	ldr	r3, [r4, #0]
 800a350:	6829      	ldr	r1, [r5, #0]
 800a352:	061f      	lsls	r7, r3, #24
 800a354:	f851 6b04 	ldr.w	r6, [r1], #4
 800a358:	d402      	bmi.n	800a360 <_printf_i+0x18c>
 800a35a:	065f      	lsls	r7, r3, #25
 800a35c:	bf48      	it	mi
 800a35e:	b2b6      	uxthmi	r6, r6
 800a360:	07df      	lsls	r7, r3, #31
 800a362:	bf48      	it	mi
 800a364:	f043 0320 	orrmi.w	r3, r3, #32
 800a368:	6029      	str	r1, [r5, #0]
 800a36a:	bf48      	it	mi
 800a36c:	6023      	strmi	r3, [r4, #0]
 800a36e:	b91e      	cbnz	r6, 800a378 <_printf_i+0x1a4>
 800a370:	6823      	ldr	r3, [r4, #0]
 800a372:	f023 0320 	bic.w	r3, r3, #32
 800a376:	6023      	str	r3, [r4, #0]
 800a378:	2310      	movs	r3, #16
 800a37a:	e7a7      	b.n	800a2cc <_printf_i+0xf8>
 800a37c:	4824      	ldr	r0, [pc, #144]	; (800a410 <_printf_i+0x23c>)
 800a37e:	e7e4      	b.n	800a34a <_printf_i+0x176>
 800a380:	4615      	mov	r5, r2
 800a382:	e7bd      	b.n	800a300 <_printf_i+0x12c>
 800a384:	682b      	ldr	r3, [r5, #0]
 800a386:	6826      	ldr	r6, [r4, #0]
 800a388:	6961      	ldr	r1, [r4, #20]
 800a38a:	1d18      	adds	r0, r3, #4
 800a38c:	6028      	str	r0, [r5, #0]
 800a38e:	0635      	lsls	r5, r6, #24
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	d501      	bpl.n	800a398 <_printf_i+0x1c4>
 800a394:	6019      	str	r1, [r3, #0]
 800a396:	e002      	b.n	800a39e <_printf_i+0x1ca>
 800a398:	0670      	lsls	r0, r6, #25
 800a39a:	d5fb      	bpl.n	800a394 <_printf_i+0x1c0>
 800a39c:	8019      	strh	r1, [r3, #0]
 800a39e:	2300      	movs	r3, #0
 800a3a0:	6123      	str	r3, [r4, #16]
 800a3a2:	4615      	mov	r5, r2
 800a3a4:	e7bc      	b.n	800a320 <_printf_i+0x14c>
 800a3a6:	682b      	ldr	r3, [r5, #0]
 800a3a8:	1d1a      	adds	r2, r3, #4
 800a3aa:	602a      	str	r2, [r5, #0]
 800a3ac:	681d      	ldr	r5, [r3, #0]
 800a3ae:	6862      	ldr	r2, [r4, #4]
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	f7f5 ff0c 	bl	80001d0 <memchr>
 800a3b8:	b108      	cbz	r0, 800a3be <_printf_i+0x1ea>
 800a3ba:	1b40      	subs	r0, r0, r5
 800a3bc:	6060      	str	r0, [r4, #4]
 800a3be:	6863      	ldr	r3, [r4, #4]
 800a3c0:	6123      	str	r3, [r4, #16]
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3c8:	e7aa      	b.n	800a320 <_printf_i+0x14c>
 800a3ca:	6923      	ldr	r3, [r4, #16]
 800a3cc:	462a      	mov	r2, r5
 800a3ce:	4649      	mov	r1, r9
 800a3d0:	4640      	mov	r0, r8
 800a3d2:	47d0      	blx	sl
 800a3d4:	3001      	adds	r0, #1
 800a3d6:	d0ad      	beq.n	800a334 <_printf_i+0x160>
 800a3d8:	6823      	ldr	r3, [r4, #0]
 800a3da:	079b      	lsls	r3, r3, #30
 800a3dc:	d413      	bmi.n	800a406 <_printf_i+0x232>
 800a3de:	68e0      	ldr	r0, [r4, #12]
 800a3e0:	9b03      	ldr	r3, [sp, #12]
 800a3e2:	4298      	cmp	r0, r3
 800a3e4:	bfb8      	it	lt
 800a3e6:	4618      	movlt	r0, r3
 800a3e8:	e7a6      	b.n	800a338 <_printf_i+0x164>
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	4632      	mov	r2, r6
 800a3ee:	4649      	mov	r1, r9
 800a3f0:	4640      	mov	r0, r8
 800a3f2:	47d0      	blx	sl
 800a3f4:	3001      	adds	r0, #1
 800a3f6:	d09d      	beq.n	800a334 <_printf_i+0x160>
 800a3f8:	3501      	adds	r5, #1
 800a3fa:	68e3      	ldr	r3, [r4, #12]
 800a3fc:	9903      	ldr	r1, [sp, #12]
 800a3fe:	1a5b      	subs	r3, r3, r1
 800a400:	42ab      	cmp	r3, r5
 800a402:	dcf2      	bgt.n	800a3ea <_printf_i+0x216>
 800a404:	e7eb      	b.n	800a3de <_printf_i+0x20a>
 800a406:	2500      	movs	r5, #0
 800a408:	f104 0619 	add.w	r6, r4, #25
 800a40c:	e7f5      	b.n	800a3fa <_printf_i+0x226>
 800a40e:	bf00      	nop
 800a410:	0800e126 	.word	0x0800e126
 800a414:	0800e137 	.word	0x0800e137

0800a418 <std>:
 800a418:	2300      	movs	r3, #0
 800a41a:	b510      	push	{r4, lr}
 800a41c:	4604      	mov	r4, r0
 800a41e:	e9c0 3300 	strd	r3, r3, [r0]
 800a422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a426:	6083      	str	r3, [r0, #8]
 800a428:	8181      	strh	r1, [r0, #12]
 800a42a:	6643      	str	r3, [r0, #100]	; 0x64
 800a42c:	81c2      	strh	r2, [r0, #14]
 800a42e:	6183      	str	r3, [r0, #24]
 800a430:	4619      	mov	r1, r3
 800a432:	2208      	movs	r2, #8
 800a434:	305c      	adds	r0, #92	; 0x5c
 800a436:	f000 f936 	bl	800a6a6 <memset>
 800a43a:	4b05      	ldr	r3, [pc, #20]	; (800a450 <std+0x38>)
 800a43c:	6263      	str	r3, [r4, #36]	; 0x24
 800a43e:	4b05      	ldr	r3, [pc, #20]	; (800a454 <std+0x3c>)
 800a440:	62a3      	str	r3, [r4, #40]	; 0x28
 800a442:	4b05      	ldr	r3, [pc, #20]	; (800a458 <std+0x40>)
 800a444:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a446:	4b05      	ldr	r3, [pc, #20]	; (800a45c <std+0x44>)
 800a448:	6224      	str	r4, [r4, #32]
 800a44a:	6323      	str	r3, [r4, #48]	; 0x30
 800a44c:	bd10      	pop	{r4, pc}
 800a44e:	bf00      	nop
 800a450:	0800a621 	.word	0x0800a621
 800a454:	0800a643 	.word	0x0800a643
 800a458:	0800a67b 	.word	0x0800a67b
 800a45c:	0800a69f 	.word	0x0800a69f

0800a460 <stdio_exit_handler>:
 800a460:	4a02      	ldr	r2, [pc, #8]	; (800a46c <stdio_exit_handler+0xc>)
 800a462:	4903      	ldr	r1, [pc, #12]	; (800a470 <stdio_exit_handler+0x10>)
 800a464:	4803      	ldr	r0, [pc, #12]	; (800a474 <stdio_exit_handler+0x14>)
 800a466:	f000 b869 	b.w	800a53c <_fwalk_sglue>
 800a46a:	bf00      	nop
 800a46c:	200000fc 	.word	0x200000fc
 800a470:	0800c151 	.word	0x0800c151
 800a474:	20000108 	.word	0x20000108

0800a478 <cleanup_stdio>:
 800a478:	6841      	ldr	r1, [r0, #4]
 800a47a:	4b0c      	ldr	r3, [pc, #48]	; (800a4ac <cleanup_stdio+0x34>)
 800a47c:	4299      	cmp	r1, r3
 800a47e:	b510      	push	{r4, lr}
 800a480:	4604      	mov	r4, r0
 800a482:	d001      	beq.n	800a488 <cleanup_stdio+0x10>
 800a484:	f001 fe64 	bl	800c150 <_fflush_r>
 800a488:	68a1      	ldr	r1, [r4, #8]
 800a48a:	4b09      	ldr	r3, [pc, #36]	; (800a4b0 <cleanup_stdio+0x38>)
 800a48c:	4299      	cmp	r1, r3
 800a48e:	d002      	beq.n	800a496 <cleanup_stdio+0x1e>
 800a490:	4620      	mov	r0, r4
 800a492:	f001 fe5d 	bl	800c150 <_fflush_r>
 800a496:	68e1      	ldr	r1, [r4, #12]
 800a498:	4b06      	ldr	r3, [pc, #24]	; (800a4b4 <cleanup_stdio+0x3c>)
 800a49a:	4299      	cmp	r1, r3
 800a49c:	d004      	beq.n	800a4a8 <cleanup_stdio+0x30>
 800a49e:	4620      	mov	r0, r4
 800a4a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4a4:	f001 be54 	b.w	800c150 <_fflush_r>
 800a4a8:	bd10      	pop	{r4, pc}
 800a4aa:	bf00      	nop
 800a4ac:	20001fa0 	.word	0x20001fa0
 800a4b0:	20002008 	.word	0x20002008
 800a4b4:	20002070 	.word	0x20002070

0800a4b8 <global_stdio_init.part.0>:
 800a4b8:	b510      	push	{r4, lr}
 800a4ba:	4b0b      	ldr	r3, [pc, #44]	; (800a4e8 <global_stdio_init.part.0+0x30>)
 800a4bc:	4c0b      	ldr	r4, [pc, #44]	; (800a4ec <global_stdio_init.part.0+0x34>)
 800a4be:	4a0c      	ldr	r2, [pc, #48]	; (800a4f0 <global_stdio_init.part.0+0x38>)
 800a4c0:	601a      	str	r2, [r3, #0]
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	2104      	movs	r1, #4
 800a4c8:	f7ff ffa6 	bl	800a418 <std>
 800a4cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	2109      	movs	r1, #9
 800a4d4:	f7ff ffa0 	bl	800a418 <std>
 800a4d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a4dc:	2202      	movs	r2, #2
 800a4de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4e2:	2112      	movs	r1, #18
 800a4e4:	f7ff bf98 	b.w	800a418 <std>
 800a4e8:	200020d8 	.word	0x200020d8
 800a4ec:	20001fa0 	.word	0x20001fa0
 800a4f0:	0800a461 	.word	0x0800a461

0800a4f4 <__sfp_lock_acquire>:
 800a4f4:	4801      	ldr	r0, [pc, #4]	; (800a4fc <__sfp_lock_acquire+0x8>)
 800a4f6:	f000 b953 	b.w	800a7a0 <__retarget_lock_acquire_recursive>
 800a4fa:	bf00      	nop
 800a4fc:	200020e1 	.word	0x200020e1

0800a500 <__sfp_lock_release>:
 800a500:	4801      	ldr	r0, [pc, #4]	; (800a508 <__sfp_lock_release+0x8>)
 800a502:	f000 b94e 	b.w	800a7a2 <__retarget_lock_release_recursive>
 800a506:	bf00      	nop
 800a508:	200020e1 	.word	0x200020e1

0800a50c <__sinit>:
 800a50c:	b510      	push	{r4, lr}
 800a50e:	4604      	mov	r4, r0
 800a510:	f7ff fff0 	bl	800a4f4 <__sfp_lock_acquire>
 800a514:	6a23      	ldr	r3, [r4, #32]
 800a516:	b11b      	cbz	r3, 800a520 <__sinit+0x14>
 800a518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a51c:	f7ff bff0 	b.w	800a500 <__sfp_lock_release>
 800a520:	4b04      	ldr	r3, [pc, #16]	; (800a534 <__sinit+0x28>)
 800a522:	6223      	str	r3, [r4, #32]
 800a524:	4b04      	ldr	r3, [pc, #16]	; (800a538 <__sinit+0x2c>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1f5      	bne.n	800a518 <__sinit+0xc>
 800a52c:	f7ff ffc4 	bl	800a4b8 <global_stdio_init.part.0>
 800a530:	e7f2      	b.n	800a518 <__sinit+0xc>
 800a532:	bf00      	nop
 800a534:	0800a479 	.word	0x0800a479
 800a538:	200020d8 	.word	0x200020d8

0800a53c <_fwalk_sglue>:
 800a53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a540:	4607      	mov	r7, r0
 800a542:	4688      	mov	r8, r1
 800a544:	4614      	mov	r4, r2
 800a546:	2600      	movs	r6, #0
 800a548:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a54c:	f1b9 0901 	subs.w	r9, r9, #1
 800a550:	d505      	bpl.n	800a55e <_fwalk_sglue+0x22>
 800a552:	6824      	ldr	r4, [r4, #0]
 800a554:	2c00      	cmp	r4, #0
 800a556:	d1f7      	bne.n	800a548 <_fwalk_sglue+0xc>
 800a558:	4630      	mov	r0, r6
 800a55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a55e:	89ab      	ldrh	r3, [r5, #12]
 800a560:	2b01      	cmp	r3, #1
 800a562:	d907      	bls.n	800a574 <_fwalk_sglue+0x38>
 800a564:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a568:	3301      	adds	r3, #1
 800a56a:	d003      	beq.n	800a574 <_fwalk_sglue+0x38>
 800a56c:	4629      	mov	r1, r5
 800a56e:	4638      	mov	r0, r7
 800a570:	47c0      	blx	r8
 800a572:	4306      	orrs	r6, r0
 800a574:	3568      	adds	r5, #104	; 0x68
 800a576:	e7e9      	b.n	800a54c <_fwalk_sglue+0x10>

0800a578 <sniprintf>:
 800a578:	b40c      	push	{r2, r3}
 800a57a:	b530      	push	{r4, r5, lr}
 800a57c:	4b17      	ldr	r3, [pc, #92]	; (800a5dc <sniprintf+0x64>)
 800a57e:	1e0c      	subs	r4, r1, #0
 800a580:	681d      	ldr	r5, [r3, #0]
 800a582:	b09d      	sub	sp, #116	; 0x74
 800a584:	da08      	bge.n	800a598 <sniprintf+0x20>
 800a586:	238b      	movs	r3, #139	; 0x8b
 800a588:	602b      	str	r3, [r5, #0]
 800a58a:	f04f 30ff 	mov.w	r0, #4294967295
 800a58e:	b01d      	add	sp, #116	; 0x74
 800a590:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a594:	b002      	add	sp, #8
 800a596:	4770      	bx	lr
 800a598:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a59c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a5a0:	bf14      	ite	ne
 800a5a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a5a6:	4623      	moveq	r3, r4
 800a5a8:	9304      	str	r3, [sp, #16]
 800a5aa:	9307      	str	r3, [sp, #28]
 800a5ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a5b0:	9002      	str	r0, [sp, #8]
 800a5b2:	9006      	str	r0, [sp, #24]
 800a5b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a5b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a5ba:	ab21      	add	r3, sp, #132	; 0x84
 800a5bc:	a902      	add	r1, sp, #8
 800a5be:	4628      	mov	r0, r5
 800a5c0:	9301      	str	r3, [sp, #4]
 800a5c2:	f001 fc41 	bl	800be48 <_svfiprintf_r>
 800a5c6:	1c43      	adds	r3, r0, #1
 800a5c8:	bfbc      	itt	lt
 800a5ca:	238b      	movlt	r3, #139	; 0x8b
 800a5cc:	602b      	strlt	r3, [r5, #0]
 800a5ce:	2c00      	cmp	r4, #0
 800a5d0:	d0dd      	beq.n	800a58e <sniprintf+0x16>
 800a5d2:	9b02      	ldr	r3, [sp, #8]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	701a      	strb	r2, [r3, #0]
 800a5d8:	e7d9      	b.n	800a58e <sniprintf+0x16>
 800a5da:	bf00      	nop
 800a5dc:	20000154 	.word	0x20000154

0800a5e0 <siprintf>:
 800a5e0:	b40e      	push	{r1, r2, r3}
 800a5e2:	b500      	push	{lr}
 800a5e4:	b09c      	sub	sp, #112	; 0x70
 800a5e6:	ab1d      	add	r3, sp, #116	; 0x74
 800a5e8:	9002      	str	r0, [sp, #8]
 800a5ea:	9006      	str	r0, [sp, #24]
 800a5ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a5f0:	4809      	ldr	r0, [pc, #36]	; (800a618 <siprintf+0x38>)
 800a5f2:	9107      	str	r1, [sp, #28]
 800a5f4:	9104      	str	r1, [sp, #16]
 800a5f6:	4909      	ldr	r1, [pc, #36]	; (800a61c <siprintf+0x3c>)
 800a5f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5fc:	9105      	str	r1, [sp, #20]
 800a5fe:	6800      	ldr	r0, [r0, #0]
 800a600:	9301      	str	r3, [sp, #4]
 800a602:	a902      	add	r1, sp, #8
 800a604:	f001 fc20 	bl	800be48 <_svfiprintf_r>
 800a608:	9b02      	ldr	r3, [sp, #8]
 800a60a:	2200      	movs	r2, #0
 800a60c:	701a      	strb	r2, [r3, #0]
 800a60e:	b01c      	add	sp, #112	; 0x70
 800a610:	f85d eb04 	ldr.w	lr, [sp], #4
 800a614:	b003      	add	sp, #12
 800a616:	4770      	bx	lr
 800a618:	20000154 	.word	0x20000154
 800a61c:	ffff0208 	.word	0xffff0208

0800a620 <__sread>:
 800a620:	b510      	push	{r4, lr}
 800a622:	460c      	mov	r4, r1
 800a624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a628:	f000 f86c 	bl	800a704 <_read_r>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	bfab      	itete	ge
 800a630:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a632:	89a3      	ldrhlt	r3, [r4, #12]
 800a634:	181b      	addge	r3, r3, r0
 800a636:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a63a:	bfac      	ite	ge
 800a63c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a63e:	81a3      	strhlt	r3, [r4, #12]
 800a640:	bd10      	pop	{r4, pc}

0800a642 <__swrite>:
 800a642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a646:	461f      	mov	r7, r3
 800a648:	898b      	ldrh	r3, [r1, #12]
 800a64a:	05db      	lsls	r3, r3, #23
 800a64c:	4605      	mov	r5, r0
 800a64e:	460c      	mov	r4, r1
 800a650:	4616      	mov	r6, r2
 800a652:	d505      	bpl.n	800a660 <__swrite+0x1e>
 800a654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a658:	2302      	movs	r3, #2
 800a65a:	2200      	movs	r2, #0
 800a65c:	f000 f840 	bl	800a6e0 <_lseek_r>
 800a660:	89a3      	ldrh	r3, [r4, #12]
 800a662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a666:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a66a:	81a3      	strh	r3, [r4, #12]
 800a66c:	4632      	mov	r2, r6
 800a66e:	463b      	mov	r3, r7
 800a670:	4628      	mov	r0, r5
 800a672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a676:	f000 b857 	b.w	800a728 <_write_r>

0800a67a <__sseek>:
 800a67a:	b510      	push	{r4, lr}
 800a67c:	460c      	mov	r4, r1
 800a67e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a682:	f000 f82d 	bl	800a6e0 <_lseek_r>
 800a686:	1c43      	adds	r3, r0, #1
 800a688:	89a3      	ldrh	r3, [r4, #12]
 800a68a:	bf15      	itete	ne
 800a68c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a68e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a692:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a696:	81a3      	strheq	r3, [r4, #12]
 800a698:	bf18      	it	ne
 800a69a:	81a3      	strhne	r3, [r4, #12]
 800a69c:	bd10      	pop	{r4, pc}

0800a69e <__sclose>:
 800a69e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6a2:	f000 b80d 	b.w	800a6c0 <_close_r>

0800a6a6 <memset>:
 800a6a6:	4402      	add	r2, r0
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d100      	bne.n	800a6b0 <memset+0xa>
 800a6ae:	4770      	bx	lr
 800a6b0:	f803 1b01 	strb.w	r1, [r3], #1
 800a6b4:	e7f9      	b.n	800a6aa <memset+0x4>
	...

0800a6b8 <_localeconv_r>:
 800a6b8:	4800      	ldr	r0, [pc, #0]	; (800a6bc <_localeconv_r+0x4>)
 800a6ba:	4770      	bx	lr
 800a6bc:	20000248 	.word	0x20000248

0800a6c0 <_close_r>:
 800a6c0:	b538      	push	{r3, r4, r5, lr}
 800a6c2:	4d06      	ldr	r5, [pc, #24]	; (800a6dc <_close_r+0x1c>)
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	4604      	mov	r4, r0
 800a6c8:	4608      	mov	r0, r1
 800a6ca:	602b      	str	r3, [r5, #0]
 800a6cc:	f7f7 fe31 	bl	8002332 <_close>
 800a6d0:	1c43      	adds	r3, r0, #1
 800a6d2:	d102      	bne.n	800a6da <_close_r+0x1a>
 800a6d4:	682b      	ldr	r3, [r5, #0]
 800a6d6:	b103      	cbz	r3, 800a6da <_close_r+0x1a>
 800a6d8:	6023      	str	r3, [r4, #0]
 800a6da:	bd38      	pop	{r3, r4, r5, pc}
 800a6dc:	200020dc 	.word	0x200020dc

0800a6e0 <_lseek_r>:
 800a6e0:	b538      	push	{r3, r4, r5, lr}
 800a6e2:	4d07      	ldr	r5, [pc, #28]	; (800a700 <_lseek_r+0x20>)
 800a6e4:	4604      	mov	r4, r0
 800a6e6:	4608      	mov	r0, r1
 800a6e8:	4611      	mov	r1, r2
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	602a      	str	r2, [r5, #0]
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	f7f7 fe46 	bl	8002380 <_lseek>
 800a6f4:	1c43      	adds	r3, r0, #1
 800a6f6:	d102      	bne.n	800a6fe <_lseek_r+0x1e>
 800a6f8:	682b      	ldr	r3, [r5, #0]
 800a6fa:	b103      	cbz	r3, 800a6fe <_lseek_r+0x1e>
 800a6fc:	6023      	str	r3, [r4, #0]
 800a6fe:	bd38      	pop	{r3, r4, r5, pc}
 800a700:	200020dc 	.word	0x200020dc

0800a704 <_read_r>:
 800a704:	b538      	push	{r3, r4, r5, lr}
 800a706:	4d07      	ldr	r5, [pc, #28]	; (800a724 <_read_r+0x20>)
 800a708:	4604      	mov	r4, r0
 800a70a:	4608      	mov	r0, r1
 800a70c:	4611      	mov	r1, r2
 800a70e:	2200      	movs	r2, #0
 800a710:	602a      	str	r2, [r5, #0]
 800a712:	461a      	mov	r2, r3
 800a714:	f7f7 fdd4 	bl	80022c0 <_read>
 800a718:	1c43      	adds	r3, r0, #1
 800a71a:	d102      	bne.n	800a722 <_read_r+0x1e>
 800a71c:	682b      	ldr	r3, [r5, #0]
 800a71e:	b103      	cbz	r3, 800a722 <_read_r+0x1e>
 800a720:	6023      	str	r3, [r4, #0]
 800a722:	bd38      	pop	{r3, r4, r5, pc}
 800a724:	200020dc 	.word	0x200020dc

0800a728 <_write_r>:
 800a728:	b538      	push	{r3, r4, r5, lr}
 800a72a:	4d07      	ldr	r5, [pc, #28]	; (800a748 <_write_r+0x20>)
 800a72c:	4604      	mov	r4, r0
 800a72e:	4608      	mov	r0, r1
 800a730:	4611      	mov	r1, r2
 800a732:	2200      	movs	r2, #0
 800a734:	602a      	str	r2, [r5, #0]
 800a736:	461a      	mov	r2, r3
 800a738:	f7f7 fddf 	bl	80022fa <_write>
 800a73c:	1c43      	adds	r3, r0, #1
 800a73e:	d102      	bne.n	800a746 <_write_r+0x1e>
 800a740:	682b      	ldr	r3, [r5, #0]
 800a742:	b103      	cbz	r3, 800a746 <_write_r+0x1e>
 800a744:	6023      	str	r3, [r4, #0]
 800a746:	bd38      	pop	{r3, r4, r5, pc}
 800a748:	200020dc 	.word	0x200020dc

0800a74c <__errno>:
 800a74c:	4b01      	ldr	r3, [pc, #4]	; (800a754 <__errno+0x8>)
 800a74e:	6818      	ldr	r0, [r3, #0]
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	20000154 	.word	0x20000154

0800a758 <__libc_init_array>:
 800a758:	b570      	push	{r4, r5, r6, lr}
 800a75a:	4d0d      	ldr	r5, [pc, #52]	; (800a790 <__libc_init_array+0x38>)
 800a75c:	4c0d      	ldr	r4, [pc, #52]	; (800a794 <__libc_init_array+0x3c>)
 800a75e:	1b64      	subs	r4, r4, r5
 800a760:	10a4      	asrs	r4, r4, #2
 800a762:	2600      	movs	r6, #0
 800a764:	42a6      	cmp	r6, r4
 800a766:	d109      	bne.n	800a77c <__libc_init_array+0x24>
 800a768:	4d0b      	ldr	r5, [pc, #44]	; (800a798 <__libc_init_array+0x40>)
 800a76a:	4c0c      	ldr	r4, [pc, #48]	; (800a79c <__libc_init_array+0x44>)
 800a76c:	f003 fc4c 	bl	800e008 <_init>
 800a770:	1b64      	subs	r4, r4, r5
 800a772:	10a4      	asrs	r4, r4, #2
 800a774:	2600      	movs	r6, #0
 800a776:	42a6      	cmp	r6, r4
 800a778:	d105      	bne.n	800a786 <__libc_init_array+0x2e>
 800a77a:	bd70      	pop	{r4, r5, r6, pc}
 800a77c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a780:	4798      	blx	r3
 800a782:	3601      	adds	r6, #1
 800a784:	e7ee      	b.n	800a764 <__libc_init_array+0xc>
 800a786:	f855 3b04 	ldr.w	r3, [r5], #4
 800a78a:	4798      	blx	r3
 800a78c:	3601      	adds	r6, #1
 800a78e:	e7f2      	b.n	800a776 <__libc_init_array+0x1e>
 800a790:	0800e6d8 	.word	0x0800e6d8
 800a794:	0800e6d8 	.word	0x0800e6d8
 800a798:	0800e6d8 	.word	0x0800e6d8
 800a79c:	0800e6dc 	.word	0x0800e6dc

0800a7a0 <__retarget_lock_acquire_recursive>:
 800a7a0:	4770      	bx	lr

0800a7a2 <__retarget_lock_release_recursive>:
 800a7a2:	4770      	bx	lr

0800a7a4 <quorem>:
 800a7a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7a8:	6903      	ldr	r3, [r0, #16]
 800a7aa:	690c      	ldr	r4, [r1, #16]
 800a7ac:	42a3      	cmp	r3, r4
 800a7ae:	4607      	mov	r7, r0
 800a7b0:	db7e      	blt.n	800a8b0 <quorem+0x10c>
 800a7b2:	3c01      	subs	r4, #1
 800a7b4:	f101 0814 	add.w	r8, r1, #20
 800a7b8:	f100 0514 	add.w	r5, r0, #20
 800a7bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7c0:	9301      	str	r3, [sp, #4]
 800a7c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a7c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a7d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a7d6:	fbb2 f6f3 	udiv	r6, r2, r3
 800a7da:	d331      	bcc.n	800a840 <quorem+0x9c>
 800a7dc:	f04f 0e00 	mov.w	lr, #0
 800a7e0:	4640      	mov	r0, r8
 800a7e2:	46ac      	mov	ip, r5
 800a7e4:	46f2      	mov	sl, lr
 800a7e6:	f850 2b04 	ldr.w	r2, [r0], #4
 800a7ea:	b293      	uxth	r3, r2
 800a7ec:	fb06 e303 	mla	r3, r6, r3, lr
 800a7f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a7f4:	0c1a      	lsrs	r2, r3, #16
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	ebaa 0303 	sub.w	r3, sl, r3
 800a7fc:	f8dc a000 	ldr.w	sl, [ip]
 800a800:	fa13 f38a 	uxtah	r3, r3, sl
 800a804:	fb06 220e 	mla	r2, r6, lr, r2
 800a808:	9300      	str	r3, [sp, #0]
 800a80a:	9b00      	ldr	r3, [sp, #0]
 800a80c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a810:	b292      	uxth	r2, r2
 800a812:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a816:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a81a:	f8bd 3000 	ldrh.w	r3, [sp]
 800a81e:	4581      	cmp	r9, r0
 800a820:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a824:	f84c 3b04 	str.w	r3, [ip], #4
 800a828:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a82c:	d2db      	bcs.n	800a7e6 <quorem+0x42>
 800a82e:	f855 300b 	ldr.w	r3, [r5, fp]
 800a832:	b92b      	cbnz	r3, 800a840 <quorem+0x9c>
 800a834:	9b01      	ldr	r3, [sp, #4]
 800a836:	3b04      	subs	r3, #4
 800a838:	429d      	cmp	r5, r3
 800a83a:	461a      	mov	r2, r3
 800a83c:	d32c      	bcc.n	800a898 <quorem+0xf4>
 800a83e:	613c      	str	r4, [r7, #16]
 800a840:	4638      	mov	r0, r7
 800a842:	f001 f9a7 	bl	800bb94 <__mcmp>
 800a846:	2800      	cmp	r0, #0
 800a848:	db22      	blt.n	800a890 <quorem+0xec>
 800a84a:	3601      	adds	r6, #1
 800a84c:	4629      	mov	r1, r5
 800a84e:	2000      	movs	r0, #0
 800a850:	f858 2b04 	ldr.w	r2, [r8], #4
 800a854:	f8d1 c000 	ldr.w	ip, [r1]
 800a858:	b293      	uxth	r3, r2
 800a85a:	1ac3      	subs	r3, r0, r3
 800a85c:	0c12      	lsrs	r2, r2, #16
 800a85e:	fa13 f38c 	uxtah	r3, r3, ip
 800a862:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a866:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a870:	45c1      	cmp	r9, r8
 800a872:	f841 3b04 	str.w	r3, [r1], #4
 800a876:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a87a:	d2e9      	bcs.n	800a850 <quorem+0xac>
 800a87c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a880:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a884:	b922      	cbnz	r2, 800a890 <quorem+0xec>
 800a886:	3b04      	subs	r3, #4
 800a888:	429d      	cmp	r5, r3
 800a88a:	461a      	mov	r2, r3
 800a88c:	d30a      	bcc.n	800a8a4 <quorem+0x100>
 800a88e:	613c      	str	r4, [r7, #16]
 800a890:	4630      	mov	r0, r6
 800a892:	b003      	add	sp, #12
 800a894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a898:	6812      	ldr	r2, [r2, #0]
 800a89a:	3b04      	subs	r3, #4
 800a89c:	2a00      	cmp	r2, #0
 800a89e:	d1ce      	bne.n	800a83e <quorem+0x9a>
 800a8a0:	3c01      	subs	r4, #1
 800a8a2:	e7c9      	b.n	800a838 <quorem+0x94>
 800a8a4:	6812      	ldr	r2, [r2, #0]
 800a8a6:	3b04      	subs	r3, #4
 800a8a8:	2a00      	cmp	r2, #0
 800a8aa:	d1f0      	bne.n	800a88e <quorem+0xea>
 800a8ac:	3c01      	subs	r4, #1
 800a8ae:	e7eb      	b.n	800a888 <quorem+0xe4>
 800a8b0:	2000      	movs	r0, #0
 800a8b2:	e7ee      	b.n	800a892 <quorem+0xee>
 800a8b4:	0000      	movs	r0, r0
	...

0800a8b8 <_dtoa_r>:
 800a8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8bc:	ed2d 8b04 	vpush	{d8-d9}
 800a8c0:	69c5      	ldr	r5, [r0, #28]
 800a8c2:	b093      	sub	sp, #76	; 0x4c
 800a8c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a8c8:	ec57 6b10 	vmov	r6, r7, d0
 800a8cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a8d0:	9107      	str	r1, [sp, #28]
 800a8d2:	4604      	mov	r4, r0
 800a8d4:	920a      	str	r2, [sp, #40]	; 0x28
 800a8d6:	930d      	str	r3, [sp, #52]	; 0x34
 800a8d8:	b975      	cbnz	r5, 800a8f8 <_dtoa_r+0x40>
 800a8da:	2010      	movs	r0, #16
 800a8dc:	f000 fe2a 	bl	800b534 <malloc>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	61e0      	str	r0, [r4, #28]
 800a8e4:	b920      	cbnz	r0, 800a8f0 <_dtoa_r+0x38>
 800a8e6:	4bae      	ldr	r3, [pc, #696]	; (800aba0 <_dtoa_r+0x2e8>)
 800a8e8:	21ef      	movs	r1, #239	; 0xef
 800a8ea:	48ae      	ldr	r0, [pc, #696]	; (800aba4 <_dtoa_r+0x2ec>)
 800a8ec:	f001 fc90 	bl	800c210 <__assert_func>
 800a8f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a8f4:	6005      	str	r5, [r0, #0]
 800a8f6:	60c5      	str	r5, [r0, #12]
 800a8f8:	69e3      	ldr	r3, [r4, #28]
 800a8fa:	6819      	ldr	r1, [r3, #0]
 800a8fc:	b151      	cbz	r1, 800a914 <_dtoa_r+0x5c>
 800a8fe:	685a      	ldr	r2, [r3, #4]
 800a900:	604a      	str	r2, [r1, #4]
 800a902:	2301      	movs	r3, #1
 800a904:	4093      	lsls	r3, r2
 800a906:	608b      	str	r3, [r1, #8]
 800a908:	4620      	mov	r0, r4
 800a90a:	f000 ff07 	bl	800b71c <_Bfree>
 800a90e:	69e3      	ldr	r3, [r4, #28]
 800a910:	2200      	movs	r2, #0
 800a912:	601a      	str	r2, [r3, #0]
 800a914:	1e3b      	subs	r3, r7, #0
 800a916:	bfbb      	ittet	lt
 800a918:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a91c:	9303      	strlt	r3, [sp, #12]
 800a91e:	2300      	movge	r3, #0
 800a920:	2201      	movlt	r2, #1
 800a922:	bfac      	ite	ge
 800a924:	f8c8 3000 	strge.w	r3, [r8]
 800a928:	f8c8 2000 	strlt.w	r2, [r8]
 800a92c:	4b9e      	ldr	r3, [pc, #632]	; (800aba8 <_dtoa_r+0x2f0>)
 800a92e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a932:	ea33 0308 	bics.w	r3, r3, r8
 800a936:	d11b      	bne.n	800a970 <_dtoa_r+0xb8>
 800a938:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a93a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a93e:	6013      	str	r3, [r2, #0]
 800a940:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a944:	4333      	orrs	r3, r6
 800a946:	f000 8593 	beq.w	800b470 <_dtoa_r+0xbb8>
 800a94a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a94c:	b963      	cbnz	r3, 800a968 <_dtoa_r+0xb0>
 800a94e:	4b97      	ldr	r3, [pc, #604]	; (800abac <_dtoa_r+0x2f4>)
 800a950:	e027      	b.n	800a9a2 <_dtoa_r+0xea>
 800a952:	4b97      	ldr	r3, [pc, #604]	; (800abb0 <_dtoa_r+0x2f8>)
 800a954:	9300      	str	r3, [sp, #0]
 800a956:	3308      	adds	r3, #8
 800a958:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a95a:	6013      	str	r3, [r2, #0]
 800a95c:	9800      	ldr	r0, [sp, #0]
 800a95e:	b013      	add	sp, #76	; 0x4c
 800a960:	ecbd 8b04 	vpop	{d8-d9}
 800a964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a968:	4b90      	ldr	r3, [pc, #576]	; (800abac <_dtoa_r+0x2f4>)
 800a96a:	9300      	str	r3, [sp, #0]
 800a96c:	3303      	adds	r3, #3
 800a96e:	e7f3      	b.n	800a958 <_dtoa_r+0xa0>
 800a970:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a974:	2200      	movs	r2, #0
 800a976:	ec51 0b17 	vmov	r0, r1, d7
 800a97a:	eeb0 8a47 	vmov.f32	s16, s14
 800a97e:	eef0 8a67 	vmov.f32	s17, s15
 800a982:	2300      	movs	r3, #0
 800a984:	f7f6 f8a0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a988:	4681      	mov	r9, r0
 800a98a:	b160      	cbz	r0, 800a9a6 <_dtoa_r+0xee>
 800a98c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a98e:	2301      	movs	r3, #1
 800a990:	6013      	str	r3, [r2, #0]
 800a992:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a994:	2b00      	cmp	r3, #0
 800a996:	f000 8568 	beq.w	800b46a <_dtoa_r+0xbb2>
 800a99a:	4b86      	ldr	r3, [pc, #536]	; (800abb4 <_dtoa_r+0x2fc>)
 800a99c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a99e:	6013      	str	r3, [r2, #0]
 800a9a0:	3b01      	subs	r3, #1
 800a9a2:	9300      	str	r3, [sp, #0]
 800a9a4:	e7da      	b.n	800a95c <_dtoa_r+0xa4>
 800a9a6:	aa10      	add	r2, sp, #64	; 0x40
 800a9a8:	a911      	add	r1, sp, #68	; 0x44
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	eeb0 0a48 	vmov.f32	s0, s16
 800a9b0:	eef0 0a68 	vmov.f32	s1, s17
 800a9b4:	f001 f994 	bl	800bce0 <__d2b>
 800a9b8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a9bc:	4682      	mov	sl, r0
 800a9be:	2d00      	cmp	r5, #0
 800a9c0:	d07f      	beq.n	800aac2 <_dtoa_r+0x20a>
 800a9c2:	ee18 3a90 	vmov	r3, s17
 800a9c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9ca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a9ce:	ec51 0b18 	vmov	r0, r1, d8
 800a9d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a9d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a9da:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a9de:	4619      	mov	r1, r3
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	4b75      	ldr	r3, [pc, #468]	; (800abb8 <_dtoa_r+0x300>)
 800a9e4:	f7f5 fc50 	bl	8000288 <__aeabi_dsub>
 800a9e8:	a367      	add	r3, pc, #412	; (adr r3, 800ab88 <_dtoa_r+0x2d0>)
 800a9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ee:	f7f5 fe03 	bl	80005f8 <__aeabi_dmul>
 800a9f2:	a367      	add	r3, pc, #412	; (adr r3, 800ab90 <_dtoa_r+0x2d8>)
 800a9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f8:	f7f5 fc48 	bl	800028c <__adddf3>
 800a9fc:	4606      	mov	r6, r0
 800a9fe:	4628      	mov	r0, r5
 800aa00:	460f      	mov	r7, r1
 800aa02:	f7f5 fd8f 	bl	8000524 <__aeabi_i2d>
 800aa06:	a364      	add	r3, pc, #400	; (adr r3, 800ab98 <_dtoa_r+0x2e0>)
 800aa08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0c:	f7f5 fdf4 	bl	80005f8 <__aeabi_dmul>
 800aa10:	4602      	mov	r2, r0
 800aa12:	460b      	mov	r3, r1
 800aa14:	4630      	mov	r0, r6
 800aa16:	4639      	mov	r1, r7
 800aa18:	f7f5 fc38 	bl	800028c <__adddf3>
 800aa1c:	4606      	mov	r6, r0
 800aa1e:	460f      	mov	r7, r1
 800aa20:	f7f6 f89a 	bl	8000b58 <__aeabi_d2iz>
 800aa24:	2200      	movs	r2, #0
 800aa26:	4683      	mov	fp, r0
 800aa28:	2300      	movs	r3, #0
 800aa2a:	4630      	mov	r0, r6
 800aa2c:	4639      	mov	r1, r7
 800aa2e:	f7f6 f855 	bl	8000adc <__aeabi_dcmplt>
 800aa32:	b148      	cbz	r0, 800aa48 <_dtoa_r+0x190>
 800aa34:	4658      	mov	r0, fp
 800aa36:	f7f5 fd75 	bl	8000524 <__aeabi_i2d>
 800aa3a:	4632      	mov	r2, r6
 800aa3c:	463b      	mov	r3, r7
 800aa3e:	f7f6 f843 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa42:	b908      	cbnz	r0, 800aa48 <_dtoa_r+0x190>
 800aa44:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa48:	f1bb 0f16 	cmp.w	fp, #22
 800aa4c:	d857      	bhi.n	800aafe <_dtoa_r+0x246>
 800aa4e:	4b5b      	ldr	r3, [pc, #364]	; (800abbc <_dtoa_r+0x304>)
 800aa50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aa54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa58:	ec51 0b18 	vmov	r0, r1, d8
 800aa5c:	f7f6 f83e 	bl	8000adc <__aeabi_dcmplt>
 800aa60:	2800      	cmp	r0, #0
 800aa62:	d04e      	beq.n	800ab02 <_dtoa_r+0x24a>
 800aa64:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa68:	2300      	movs	r3, #0
 800aa6a:	930c      	str	r3, [sp, #48]	; 0x30
 800aa6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa6e:	1b5b      	subs	r3, r3, r5
 800aa70:	1e5a      	subs	r2, r3, #1
 800aa72:	bf45      	ittet	mi
 800aa74:	f1c3 0301 	rsbmi	r3, r3, #1
 800aa78:	9305      	strmi	r3, [sp, #20]
 800aa7a:	2300      	movpl	r3, #0
 800aa7c:	2300      	movmi	r3, #0
 800aa7e:	9206      	str	r2, [sp, #24]
 800aa80:	bf54      	ite	pl
 800aa82:	9305      	strpl	r3, [sp, #20]
 800aa84:	9306      	strmi	r3, [sp, #24]
 800aa86:	f1bb 0f00 	cmp.w	fp, #0
 800aa8a:	db3c      	blt.n	800ab06 <_dtoa_r+0x24e>
 800aa8c:	9b06      	ldr	r3, [sp, #24]
 800aa8e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800aa92:	445b      	add	r3, fp
 800aa94:	9306      	str	r3, [sp, #24]
 800aa96:	2300      	movs	r3, #0
 800aa98:	9308      	str	r3, [sp, #32]
 800aa9a:	9b07      	ldr	r3, [sp, #28]
 800aa9c:	2b09      	cmp	r3, #9
 800aa9e:	d868      	bhi.n	800ab72 <_dtoa_r+0x2ba>
 800aaa0:	2b05      	cmp	r3, #5
 800aaa2:	bfc4      	itt	gt
 800aaa4:	3b04      	subgt	r3, #4
 800aaa6:	9307      	strgt	r3, [sp, #28]
 800aaa8:	9b07      	ldr	r3, [sp, #28]
 800aaaa:	f1a3 0302 	sub.w	r3, r3, #2
 800aaae:	bfcc      	ite	gt
 800aab0:	2500      	movgt	r5, #0
 800aab2:	2501      	movle	r5, #1
 800aab4:	2b03      	cmp	r3, #3
 800aab6:	f200 8085 	bhi.w	800abc4 <_dtoa_r+0x30c>
 800aaba:	e8df f003 	tbb	[pc, r3]
 800aabe:	3b2e      	.short	0x3b2e
 800aac0:	5839      	.short	0x5839
 800aac2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aac6:	441d      	add	r5, r3
 800aac8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aacc:	2b20      	cmp	r3, #32
 800aace:	bfc1      	itttt	gt
 800aad0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aad4:	fa08 f803 	lslgt.w	r8, r8, r3
 800aad8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800aadc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800aae0:	bfd6      	itet	le
 800aae2:	f1c3 0320 	rsble	r3, r3, #32
 800aae6:	ea48 0003 	orrgt.w	r0, r8, r3
 800aaea:	fa06 f003 	lslle.w	r0, r6, r3
 800aaee:	f7f5 fd09 	bl	8000504 <__aeabi_ui2d>
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800aaf8:	3d01      	subs	r5, #1
 800aafa:	920e      	str	r2, [sp, #56]	; 0x38
 800aafc:	e76f      	b.n	800a9de <_dtoa_r+0x126>
 800aafe:	2301      	movs	r3, #1
 800ab00:	e7b3      	b.n	800aa6a <_dtoa_r+0x1b2>
 800ab02:	900c      	str	r0, [sp, #48]	; 0x30
 800ab04:	e7b2      	b.n	800aa6c <_dtoa_r+0x1b4>
 800ab06:	9b05      	ldr	r3, [sp, #20]
 800ab08:	eba3 030b 	sub.w	r3, r3, fp
 800ab0c:	9305      	str	r3, [sp, #20]
 800ab0e:	f1cb 0300 	rsb	r3, fp, #0
 800ab12:	9308      	str	r3, [sp, #32]
 800ab14:	2300      	movs	r3, #0
 800ab16:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab18:	e7bf      	b.n	800aa9a <_dtoa_r+0x1e2>
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ab1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	dc52      	bgt.n	800abca <_dtoa_r+0x312>
 800ab24:	2301      	movs	r3, #1
 800ab26:	9301      	str	r3, [sp, #4]
 800ab28:	9304      	str	r3, [sp, #16]
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	920a      	str	r2, [sp, #40]	; 0x28
 800ab2e:	e00b      	b.n	800ab48 <_dtoa_r+0x290>
 800ab30:	2301      	movs	r3, #1
 800ab32:	e7f3      	b.n	800ab1c <_dtoa_r+0x264>
 800ab34:	2300      	movs	r3, #0
 800ab36:	9309      	str	r3, [sp, #36]	; 0x24
 800ab38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab3a:	445b      	add	r3, fp
 800ab3c:	9301      	str	r3, [sp, #4]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	9304      	str	r3, [sp, #16]
 800ab44:	bfb8      	it	lt
 800ab46:	2301      	movlt	r3, #1
 800ab48:	69e0      	ldr	r0, [r4, #28]
 800ab4a:	2100      	movs	r1, #0
 800ab4c:	2204      	movs	r2, #4
 800ab4e:	f102 0614 	add.w	r6, r2, #20
 800ab52:	429e      	cmp	r6, r3
 800ab54:	d93d      	bls.n	800abd2 <_dtoa_r+0x31a>
 800ab56:	6041      	str	r1, [r0, #4]
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f000 fd9f 	bl	800b69c <_Balloc>
 800ab5e:	9000      	str	r0, [sp, #0]
 800ab60:	2800      	cmp	r0, #0
 800ab62:	d139      	bne.n	800abd8 <_dtoa_r+0x320>
 800ab64:	4b16      	ldr	r3, [pc, #88]	; (800abc0 <_dtoa_r+0x308>)
 800ab66:	4602      	mov	r2, r0
 800ab68:	f240 11af 	movw	r1, #431	; 0x1af
 800ab6c:	e6bd      	b.n	800a8ea <_dtoa_r+0x32>
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e7e1      	b.n	800ab36 <_dtoa_r+0x27e>
 800ab72:	2501      	movs	r5, #1
 800ab74:	2300      	movs	r3, #0
 800ab76:	9307      	str	r3, [sp, #28]
 800ab78:	9509      	str	r5, [sp, #36]	; 0x24
 800ab7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab7e:	9301      	str	r3, [sp, #4]
 800ab80:	9304      	str	r3, [sp, #16]
 800ab82:	2200      	movs	r2, #0
 800ab84:	2312      	movs	r3, #18
 800ab86:	e7d1      	b.n	800ab2c <_dtoa_r+0x274>
 800ab88:	636f4361 	.word	0x636f4361
 800ab8c:	3fd287a7 	.word	0x3fd287a7
 800ab90:	8b60c8b3 	.word	0x8b60c8b3
 800ab94:	3fc68a28 	.word	0x3fc68a28
 800ab98:	509f79fb 	.word	0x509f79fb
 800ab9c:	3fd34413 	.word	0x3fd34413
 800aba0:	0800e155 	.word	0x0800e155
 800aba4:	0800e16c 	.word	0x0800e16c
 800aba8:	7ff00000 	.word	0x7ff00000
 800abac:	0800e151 	.word	0x0800e151
 800abb0:	0800e148 	.word	0x0800e148
 800abb4:	0800e125 	.word	0x0800e125
 800abb8:	3ff80000 	.word	0x3ff80000
 800abbc:	0800e258 	.word	0x0800e258
 800abc0:	0800e1c4 	.word	0x0800e1c4
 800abc4:	2301      	movs	r3, #1
 800abc6:	9309      	str	r3, [sp, #36]	; 0x24
 800abc8:	e7d7      	b.n	800ab7a <_dtoa_r+0x2c2>
 800abca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abcc:	9301      	str	r3, [sp, #4]
 800abce:	9304      	str	r3, [sp, #16]
 800abd0:	e7ba      	b.n	800ab48 <_dtoa_r+0x290>
 800abd2:	3101      	adds	r1, #1
 800abd4:	0052      	lsls	r2, r2, #1
 800abd6:	e7ba      	b.n	800ab4e <_dtoa_r+0x296>
 800abd8:	69e3      	ldr	r3, [r4, #28]
 800abda:	9a00      	ldr	r2, [sp, #0]
 800abdc:	601a      	str	r2, [r3, #0]
 800abde:	9b04      	ldr	r3, [sp, #16]
 800abe0:	2b0e      	cmp	r3, #14
 800abe2:	f200 80a8 	bhi.w	800ad36 <_dtoa_r+0x47e>
 800abe6:	2d00      	cmp	r5, #0
 800abe8:	f000 80a5 	beq.w	800ad36 <_dtoa_r+0x47e>
 800abec:	f1bb 0f00 	cmp.w	fp, #0
 800abf0:	dd38      	ble.n	800ac64 <_dtoa_r+0x3ac>
 800abf2:	4bc0      	ldr	r3, [pc, #768]	; (800aef4 <_dtoa_r+0x63c>)
 800abf4:	f00b 020f 	and.w	r2, fp, #15
 800abf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abfc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ac00:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ac04:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ac08:	d019      	beq.n	800ac3e <_dtoa_r+0x386>
 800ac0a:	4bbb      	ldr	r3, [pc, #748]	; (800aef8 <_dtoa_r+0x640>)
 800ac0c:	ec51 0b18 	vmov	r0, r1, d8
 800ac10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac14:	f7f5 fe1a 	bl	800084c <__aeabi_ddiv>
 800ac18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac1c:	f008 080f 	and.w	r8, r8, #15
 800ac20:	2503      	movs	r5, #3
 800ac22:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800aef8 <_dtoa_r+0x640>
 800ac26:	f1b8 0f00 	cmp.w	r8, #0
 800ac2a:	d10a      	bne.n	800ac42 <_dtoa_r+0x38a>
 800ac2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac30:	4632      	mov	r2, r6
 800ac32:	463b      	mov	r3, r7
 800ac34:	f7f5 fe0a 	bl	800084c <__aeabi_ddiv>
 800ac38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac3c:	e02b      	b.n	800ac96 <_dtoa_r+0x3de>
 800ac3e:	2502      	movs	r5, #2
 800ac40:	e7ef      	b.n	800ac22 <_dtoa_r+0x36a>
 800ac42:	f018 0f01 	tst.w	r8, #1
 800ac46:	d008      	beq.n	800ac5a <_dtoa_r+0x3a2>
 800ac48:	4630      	mov	r0, r6
 800ac4a:	4639      	mov	r1, r7
 800ac4c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ac50:	f7f5 fcd2 	bl	80005f8 <__aeabi_dmul>
 800ac54:	3501      	adds	r5, #1
 800ac56:	4606      	mov	r6, r0
 800ac58:	460f      	mov	r7, r1
 800ac5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ac5e:	f109 0908 	add.w	r9, r9, #8
 800ac62:	e7e0      	b.n	800ac26 <_dtoa_r+0x36e>
 800ac64:	f000 809f 	beq.w	800ada6 <_dtoa_r+0x4ee>
 800ac68:	f1cb 0600 	rsb	r6, fp, #0
 800ac6c:	4ba1      	ldr	r3, [pc, #644]	; (800aef4 <_dtoa_r+0x63c>)
 800ac6e:	4fa2      	ldr	r7, [pc, #648]	; (800aef8 <_dtoa_r+0x640>)
 800ac70:	f006 020f 	and.w	r2, r6, #15
 800ac74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7c:	ec51 0b18 	vmov	r0, r1, d8
 800ac80:	f7f5 fcba 	bl	80005f8 <__aeabi_dmul>
 800ac84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac88:	1136      	asrs	r6, r6, #4
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	2502      	movs	r5, #2
 800ac8e:	2e00      	cmp	r6, #0
 800ac90:	d17e      	bne.n	800ad90 <_dtoa_r+0x4d8>
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d1d0      	bne.n	800ac38 <_dtoa_r+0x380>
 800ac96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	f000 8084 	beq.w	800adaa <_dtoa_r+0x4f2>
 800aca2:	4b96      	ldr	r3, [pc, #600]	; (800aefc <_dtoa_r+0x644>)
 800aca4:	2200      	movs	r2, #0
 800aca6:	4640      	mov	r0, r8
 800aca8:	4649      	mov	r1, r9
 800acaa:	f7f5 ff17 	bl	8000adc <__aeabi_dcmplt>
 800acae:	2800      	cmp	r0, #0
 800acb0:	d07b      	beq.n	800adaa <_dtoa_r+0x4f2>
 800acb2:	9b04      	ldr	r3, [sp, #16]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d078      	beq.n	800adaa <_dtoa_r+0x4f2>
 800acb8:	9b01      	ldr	r3, [sp, #4]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	dd39      	ble.n	800ad32 <_dtoa_r+0x47a>
 800acbe:	4b90      	ldr	r3, [pc, #576]	; (800af00 <_dtoa_r+0x648>)
 800acc0:	2200      	movs	r2, #0
 800acc2:	4640      	mov	r0, r8
 800acc4:	4649      	mov	r1, r9
 800acc6:	f7f5 fc97 	bl	80005f8 <__aeabi_dmul>
 800acca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acce:	9e01      	ldr	r6, [sp, #4]
 800acd0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800acd4:	3501      	adds	r5, #1
 800acd6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800acda:	4628      	mov	r0, r5
 800acdc:	f7f5 fc22 	bl	8000524 <__aeabi_i2d>
 800ace0:	4642      	mov	r2, r8
 800ace2:	464b      	mov	r3, r9
 800ace4:	f7f5 fc88 	bl	80005f8 <__aeabi_dmul>
 800ace8:	4b86      	ldr	r3, [pc, #536]	; (800af04 <_dtoa_r+0x64c>)
 800acea:	2200      	movs	r2, #0
 800acec:	f7f5 face 	bl	800028c <__adddf3>
 800acf0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800acf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acf8:	9303      	str	r3, [sp, #12]
 800acfa:	2e00      	cmp	r6, #0
 800acfc:	d158      	bne.n	800adb0 <_dtoa_r+0x4f8>
 800acfe:	4b82      	ldr	r3, [pc, #520]	; (800af08 <_dtoa_r+0x650>)
 800ad00:	2200      	movs	r2, #0
 800ad02:	4640      	mov	r0, r8
 800ad04:	4649      	mov	r1, r9
 800ad06:	f7f5 fabf 	bl	8000288 <__aeabi_dsub>
 800ad0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad0e:	4680      	mov	r8, r0
 800ad10:	4689      	mov	r9, r1
 800ad12:	f7f5 ff01 	bl	8000b18 <__aeabi_dcmpgt>
 800ad16:	2800      	cmp	r0, #0
 800ad18:	f040 8296 	bne.w	800b248 <_dtoa_r+0x990>
 800ad1c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ad20:	4640      	mov	r0, r8
 800ad22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad26:	4649      	mov	r1, r9
 800ad28:	f7f5 fed8 	bl	8000adc <__aeabi_dcmplt>
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	f040 8289 	bne.w	800b244 <_dtoa_r+0x98c>
 800ad32:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ad36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f2c0 814e 	blt.w	800afda <_dtoa_r+0x722>
 800ad3e:	f1bb 0f0e 	cmp.w	fp, #14
 800ad42:	f300 814a 	bgt.w	800afda <_dtoa_r+0x722>
 800ad46:	4b6b      	ldr	r3, [pc, #428]	; (800aef4 <_dtoa_r+0x63c>)
 800ad48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ad4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	f280 80dc 	bge.w	800af10 <_dtoa_r+0x658>
 800ad58:	9b04      	ldr	r3, [sp, #16]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	f300 80d8 	bgt.w	800af10 <_dtoa_r+0x658>
 800ad60:	f040 826f 	bne.w	800b242 <_dtoa_r+0x98a>
 800ad64:	4b68      	ldr	r3, [pc, #416]	; (800af08 <_dtoa_r+0x650>)
 800ad66:	2200      	movs	r2, #0
 800ad68:	4640      	mov	r0, r8
 800ad6a:	4649      	mov	r1, r9
 800ad6c:	f7f5 fc44 	bl	80005f8 <__aeabi_dmul>
 800ad70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad74:	f7f5 fec6 	bl	8000b04 <__aeabi_dcmpge>
 800ad78:	9e04      	ldr	r6, [sp, #16]
 800ad7a:	4637      	mov	r7, r6
 800ad7c:	2800      	cmp	r0, #0
 800ad7e:	f040 8245 	bne.w	800b20c <_dtoa_r+0x954>
 800ad82:	9d00      	ldr	r5, [sp, #0]
 800ad84:	2331      	movs	r3, #49	; 0x31
 800ad86:	f805 3b01 	strb.w	r3, [r5], #1
 800ad8a:	f10b 0b01 	add.w	fp, fp, #1
 800ad8e:	e241      	b.n	800b214 <_dtoa_r+0x95c>
 800ad90:	07f2      	lsls	r2, r6, #31
 800ad92:	d505      	bpl.n	800ada0 <_dtoa_r+0x4e8>
 800ad94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad98:	f7f5 fc2e 	bl	80005f8 <__aeabi_dmul>
 800ad9c:	3501      	adds	r5, #1
 800ad9e:	2301      	movs	r3, #1
 800ada0:	1076      	asrs	r6, r6, #1
 800ada2:	3708      	adds	r7, #8
 800ada4:	e773      	b.n	800ac8e <_dtoa_r+0x3d6>
 800ada6:	2502      	movs	r5, #2
 800ada8:	e775      	b.n	800ac96 <_dtoa_r+0x3de>
 800adaa:	9e04      	ldr	r6, [sp, #16]
 800adac:	465f      	mov	r7, fp
 800adae:	e792      	b.n	800acd6 <_dtoa_r+0x41e>
 800adb0:	9900      	ldr	r1, [sp, #0]
 800adb2:	4b50      	ldr	r3, [pc, #320]	; (800aef4 <_dtoa_r+0x63c>)
 800adb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800adb8:	4431      	add	r1, r6
 800adba:	9102      	str	r1, [sp, #8]
 800adbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800adbe:	eeb0 9a47 	vmov.f32	s18, s14
 800adc2:	eef0 9a67 	vmov.f32	s19, s15
 800adc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800adca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800adce:	2900      	cmp	r1, #0
 800add0:	d044      	beq.n	800ae5c <_dtoa_r+0x5a4>
 800add2:	494e      	ldr	r1, [pc, #312]	; (800af0c <_dtoa_r+0x654>)
 800add4:	2000      	movs	r0, #0
 800add6:	f7f5 fd39 	bl	800084c <__aeabi_ddiv>
 800adda:	ec53 2b19 	vmov	r2, r3, d9
 800adde:	f7f5 fa53 	bl	8000288 <__aeabi_dsub>
 800ade2:	9d00      	ldr	r5, [sp, #0]
 800ade4:	ec41 0b19 	vmov	d9, r0, r1
 800ade8:	4649      	mov	r1, r9
 800adea:	4640      	mov	r0, r8
 800adec:	f7f5 feb4 	bl	8000b58 <__aeabi_d2iz>
 800adf0:	4606      	mov	r6, r0
 800adf2:	f7f5 fb97 	bl	8000524 <__aeabi_i2d>
 800adf6:	4602      	mov	r2, r0
 800adf8:	460b      	mov	r3, r1
 800adfa:	4640      	mov	r0, r8
 800adfc:	4649      	mov	r1, r9
 800adfe:	f7f5 fa43 	bl	8000288 <__aeabi_dsub>
 800ae02:	3630      	adds	r6, #48	; 0x30
 800ae04:	f805 6b01 	strb.w	r6, [r5], #1
 800ae08:	ec53 2b19 	vmov	r2, r3, d9
 800ae0c:	4680      	mov	r8, r0
 800ae0e:	4689      	mov	r9, r1
 800ae10:	f7f5 fe64 	bl	8000adc <__aeabi_dcmplt>
 800ae14:	2800      	cmp	r0, #0
 800ae16:	d164      	bne.n	800aee2 <_dtoa_r+0x62a>
 800ae18:	4642      	mov	r2, r8
 800ae1a:	464b      	mov	r3, r9
 800ae1c:	4937      	ldr	r1, [pc, #220]	; (800aefc <_dtoa_r+0x644>)
 800ae1e:	2000      	movs	r0, #0
 800ae20:	f7f5 fa32 	bl	8000288 <__aeabi_dsub>
 800ae24:	ec53 2b19 	vmov	r2, r3, d9
 800ae28:	f7f5 fe58 	bl	8000adc <__aeabi_dcmplt>
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	f040 80b6 	bne.w	800af9e <_dtoa_r+0x6e6>
 800ae32:	9b02      	ldr	r3, [sp, #8]
 800ae34:	429d      	cmp	r5, r3
 800ae36:	f43f af7c 	beq.w	800ad32 <_dtoa_r+0x47a>
 800ae3a:	4b31      	ldr	r3, [pc, #196]	; (800af00 <_dtoa_r+0x648>)
 800ae3c:	ec51 0b19 	vmov	r0, r1, d9
 800ae40:	2200      	movs	r2, #0
 800ae42:	f7f5 fbd9 	bl	80005f8 <__aeabi_dmul>
 800ae46:	4b2e      	ldr	r3, [pc, #184]	; (800af00 <_dtoa_r+0x648>)
 800ae48:	ec41 0b19 	vmov	d9, r0, r1
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	4640      	mov	r0, r8
 800ae50:	4649      	mov	r1, r9
 800ae52:	f7f5 fbd1 	bl	80005f8 <__aeabi_dmul>
 800ae56:	4680      	mov	r8, r0
 800ae58:	4689      	mov	r9, r1
 800ae5a:	e7c5      	b.n	800ade8 <_dtoa_r+0x530>
 800ae5c:	ec51 0b17 	vmov	r0, r1, d7
 800ae60:	f7f5 fbca 	bl	80005f8 <__aeabi_dmul>
 800ae64:	9b02      	ldr	r3, [sp, #8]
 800ae66:	9d00      	ldr	r5, [sp, #0]
 800ae68:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae6a:	ec41 0b19 	vmov	d9, r0, r1
 800ae6e:	4649      	mov	r1, r9
 800ae70:	4640      	mov	r0, r8
 800ae72:	f7f5 fe71 	bl	8000b58 <__aeabi_d2iz>
 800ae76:	4606      	mov	r6, r0
 800ae78:	f7f5 fb54 	bl	8000524 <__aeabi_i2d>
 800ae7c:	3630      	adds	r6, #48	; 0x30
 800ae7e:	4602      	mov	r2, r0
 800ae80:	460b      	mov	r3, r1
 800ae82:	4640      	mov	r0, r8
 800ae84:	4649      	mov	r1, r9
 800ae86:	f7f5 f9ff 	bl	8000288 <__aeabi_dsub>
 800ae8a:	f805 6b01 	strb.w	r6, [r5], #1
 800ae8e:	9b02      	ldr	r3, [sp, #8]
 800ae90:	429d      	cmp	r5, r3
 800ae92:	4680      	mov	r8, r0
 800ae94:	4689      	mov	r9, r1
 800ae96:	f04f 0200 	mov.w	r2, #0
 800ae9a:	d124      	bne.n	800aee6 <_dtoa_r+0x62e>
 800ae9c:	4b1b      	ldr	r3, [pc, #108]	; (800af0c <_dtoa_r+0x654>)
 800ae9e:	ec51 0b19 	vmov	r0, r1, d9
 800aea2:	f7f5 f9f3 	bl	800028c <__adddf3>
 800aea6:	4602      	mov	r2, r0
 800aea8:	460b      	mov	r3, r1
 800aeaa:	4640      	mov	r0, r8
 800aeac:	4649      	mov	r1, r9
 800aeae:	f7f5 fe33 	bl	8000b18 <__aeabi_dcmpgt>
 800aeb2:	2800      	cmp	r0, #0
 800aeb4:	d173      	bne.n	800af9e <_dtoa_r+0x6e6>
 800aeb6:	ec53 2b19 	vmov	r2, r3, d9
 800aeba:	4914      	ldr	r1, [pc, #80]	; (800af0c <_dtoa_r+0x654>)
 800aebc:	2000      	movs	r0, #0
 800aebe:	f7f5 f9e3 	bl	8000288 <__aeabi_dsub>
 800aec2:	4602      	mov	r2, r0
 800aec4:	460b      	mov	r3, r1
 800aec6:	4640      	mov	r0, r8
 800aec8:	4649      	mov	r1, r9
 800aeca:	f7f5 fe07 	bl	8000adc <__aeabi_dcmplt>
 800aece:	2800      	cmp	r0, #0
 800aed0:	f43f af2f 	beq.w	800ad32 <_dtoa_r+0x47a>
 800aed4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aed6:	1e6b      	subs	r3, r5, #1
 800aed8:	930f      	str	r3, [sp, #60]	; 0x3c
 800aeda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aede:	2b30      	cmp	r3, #48	; 0x30
 800aee0:	d0f8      	beq.n	800aed4 <_dtoa_r+0x61c>
 800aee2:	46bb      	mov	fp, r7
 800aee4:	e04a      	b.n	800af7c <_dtoa_r+0x6c4>
 800aee6:	4b06      	ldr	r3, [pc, #24]	; (800af00 <_dtoa_r+0x648>)
 800aee8:	f7f5 fb86 	bl	80005f8 <__aeabi_dmul>
 800aeec:	4680      	mov	r8, r0
 800aeee:	4689      	mov	r9, r1
 800aef0:	e7bd      	b.n	800ae6e <_dtoa_r+0x5b6>
 800aef2:	bf00      	nop
 800aef4:	0800e258 	.word	0x0800e258
 800aef8:	0800e230 	.word	0x0800e230
 800aefc:	3ff00000 	.word	0x3ff00000
 800af00:	40240000 	.word	0x40240000
 800af04:	401c0000 	.word	0x401c0000
 800af08:	40140000 	.word	0x40140000
 800af0c:	3fe00000 	.word	0x3fe00000
 800af10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800af14:	9d00      	ldr	r5, [sp, #0]
 800af16:	4642      	mov	r2, r8
 800af18:	464b      	mov	r3, r9
 800af1a:	4630      	mov	r0, r6
 800af1c:	4639      	mov	r1, r7
 800af1e:	f7f5 fc95 	bl	800084c <__aeabi_ddiv>
 800af22:	f7f5 fe19 	bl	8000b58 <__aeabi_d2iz>
 800af26:	9001      	str	r0, [sp, #4]
 800af28:	f7f5 fafc 	bl	8000524 <__aeabi_i2d>
 800af2c:	4642      	mov	r2, r8
 800af2e:	464b      	mov	r3, r9
 800af30:	f7f5 fb62 	bl	80005f8 <__aeabi_dmul>
 800af34:	4602      	mov	r2, r0
 800af36:	460b      	mov	r3, r1
 800af38:	4630      	mov	r0, r6
 800af3a:	4639      	mov	r1, r7
 800af3c:	f7f5 f9a4 	bl	8000288 <__aeabi_dsub>
 800af40:	9e01      	ldr	r6, [sp, #4]
 800af42:	9f04      	ldr	r7, [sp, #16]
 800af44:	3630      	adds	r6, #48	; 0x30
 800af46:	f805 6b01 	strb.w	r6, [r5], #1
 800af4a:	9e00      	ldr	r6, [sp, #0]
 800af4c:	1bae      	subs	r6, r5, r6
 800af4e:	42b7      	cmp	r7, r6
 800af50:	4602      	mov	r2, r0
 800af52:	460b      	mov	r3, r1
 800af54:	d134      	bne.n	800afc0 <_dtoa_r+0x708>
 800af56:	f7f5 f999 	bl	800028c <__adddf3>
 800af5a:	4642      	mov	r2, r8
 800af5c:	464b      	mov	r3, r9
 800af5e:	4606      	mov	r6, r0
 800af60:	460f      	mov	r7, r1
 800af62:	f7f5 fdd9 	bl	8000b18 <__aeabi_dcmpgt>
 800af66:	b9c8      	cbnz	r0, 800af9c <_dtoa_r+0x6e4>
 800af68:	4642      	mov	r2, r8
 800af6a:	464b      	mov	r3, r9
 800af6c:	4630      	mov	r0, r6
 800af6e:	4639      	mov	r1, r7
 800af70:	f7f5 fdaa 	bl	8000ac8 <__aeabi_dcmpeq>
 800af74:	b110      	cbz	r0, 800af7c <_dtoa_r+0x6c4>
 800af76:	9b01      	ldr	r3, [sp, #4]
 800af78:	07db      	lsls	r3, r3, #31
 800af7a:	d40f      	bmi.n	800af9c <_dtoa_r+0x6e4>
 800af7c:	4651      	mov	r1, sl
 800af7e:	4620      	mov	r0, r4
 800af80:	f000 fbcc 	bl	800b71c <_Bfree>
 800af84:	2300      	movs	r3, #0
 800af86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af88:	702b      	strb	r3, [r5, #0]
 800af8a:	f10b 0301 	add.w	r3, fp, #1
 800af8e:	6013      	str	r3, [r2, #0]
 800af90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af92:	2b00      	cmp	r3, #0
 800af94:	f43f ace2 	beq.w	800a95c <_dtoa_r+0xa4>
 800af98:	601d      	str	r5, [r3, #0]
 800af9a:	e4df      	b.n	800a95c <_dtoa_r+0xa4>
 800af9c:	465f      	mov	r7, fp
 800af9e:	462b      	mov	r3, r5
 800afa0:	461d      	mov	r5, r3
 800afa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afa6:	2a39      	cmp	r2, #57	; 0x39
 800afa8:	d106      	bne.n	800afb8 <_dtoa_r+0x700>
 800afaa:	9a00      	ldr	r2, [sp, #0]
 800afac:	429a      	cmp	r2, r3
 800afae:	d1f7      	bne.n	800afa0 <_dtoa_r+0x6e8>
 800afb0:	9900      	ldr	r1, [sp, #0]
 800afb2:	2230      	movs	r2, #48	; 0x30
 800afb4:	3701      	adds	r7, #1
 800afb6:	700a      	strb	r2, [r1, #0]
 800afb8:	781a      	ldrb	r2, [r3, #0]
 800afba:	3201      	adds	r2, #1
 800afbc:	701a      	strb	r2, [r3, #0]
 800afbe:	e790      	b.n	800aee2 <_dtoa_r+0x62a>
 800afc0:	4ba3      	ldr	r3, [pc, #652]	; (800b250 <_dtoa_r+0x998>)
 800afc2:	2200      	movs	r2, #0
 800afc4:	f7f5 fb18 	bl	80005f8 <__aeabi_dmul>
 800afc8:	2200      	movs	r2, #0
 800afca:	2300      	movs	r3, #0
 800afcc:	4606      	mov	r6, r0
 800afce:	460f      	mov	r7, r1
 800afd0:	f7f5 fd7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800afd4:	2800      	cmp	r0, #0
 800afd6:	d09e      	beq.n	800af16 <_dtoa_r+0x65e>
 800afd8:	e7d0      	b.n	800af7c <_dtoa_r+0x6c4>
 800afda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afdc:	2a00      	cmp	r2, #0
 800afde:	f000 80ca 	beq.w	800b176 <_dtoa_r+0x8be>
 800afe2:	9a07      	ldr	r2, [sp, #28]
 800afe4:	2a01      	cmp	r2, #1
 800afe6:	f300 80ad 	bgt.w	800b144 <_dtoa_r+0x88c>
 800afea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afec:	2a00      	cmp	r2, #0
 800afee:	f000 80a5 	beq.w	800b13c <_dtoa_r+0x884>
 800aff2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aff6:	9e08      	ldr	r6, [sp, #32]
 800aff8:	9d05      	ldr	r5, [sp, #20]
 800affa:	9a05      	ldr	r2, [sp, #20]
 800affc:	441a      	add	r2, r3
 800affe:	9205      	str	r2, [sp, #20]
 800b000:	9a06      	ldr	r2, [sp, #24]
 800b002:	2101      	movs	r1, #1
 800b004:	441a      	add	r2, r3
 800b006:	4620      	mov	r0, r4
 800b008:	9206      	str	r2, [sp, #24]
 800b00a:	f000 fc3d 	bl	800b888 <__i2b>
 800b00e:	4607      	mov	r7, r0
 800b010:	b165      	cbz	r5, 800b02c <_dtoa_r+0x774>
 800b012:	9b06      	ldr	r3, [sp, #24]
 800b014:	2b00      	cmp	r3, #0
 800b016:	dd09      	ble.n	800b02c <_dtoa_r+0x774>
 800b018:	42ab      	cmp	r3, r5
 800b01a:	9a05      	ldr	r2, [sp, #20]
 800b01c:	bfa8      	it	ge
 800b01e:	462b      	movge	r3, r5
 800b020:	1ad2      	subs	r2, r2, r3
 800b022:	9205      	str	r2, [sp, #20]
 800b024:	9a06      	ldr	r2, [sp, #24]
 800b026:	1aed      	subs	r5, r5, r3
 800b028:	1ad3      	subs	r3, r2, r3
 800b02a:	9306      	str	r3, [sp, #24]
 800b02c:	9b08      	ldr	r3, [sp, #32]
 800b02e:	b1f3      	cbz	r3, 800b06e <_dtoa_r+0x7b6>
 800b030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b032:	2b00      	cmp	r3, #0
 800b034:	f000 80a3 	beq.w	800b17e <_dtoa_r+0x8c6>
 800b038:	2e00      	cmp	r6, #0
 800b03a:	dd10      	ble.n	800b05e <_dtoa_r+0x7a6>
 800b03c:	4639      	mov	r1, r7
 800b03e:	4632      	mov	r2, r6
 800b040:	4620      	mov	r0, r4
 800b042:	f000 fce1 	bl	800ba08 <__pow5mult>
 800b046:	4652      	mov	r2, sl
 800b048:	4601      	mov	r1, r0
 800b04a:	4607      	mov	r7, r0
 800b04c:	4620      	mov	r0, r4
 800b04e:	f000 fc31 	bl	800b8b4 <__multiply>
 800b052:	4651      	mov	r1, sl
 800b054:	4680      	mov	r8, r0
 800b056:	4620      	mov	r0, r4
 800b058:	f000 fb60 	bl	800b71c <_Bfree>
 800b05c:	46c2      	mov	sl, r8
 800b05e:	9b08      	ldr	r3, [sp, #32]
 800b060:	1b9a      	subs	r2, r3, r6
 800b062:	d004      	beq.n	800b06e <_dtoa_r+0x7b6>
 800b064:	4651      	mov	r1, sl
 800b066:	4620      	mov	r0, r4
 800b068:	f000 fcce 	bl	800ba08 <__pow5mult>
 800b06c:	4682      	mov	sl, r0
 800b06e:	2101      	movs	r1, #1
 800b070:	4620      	mov	r0, r4
 800b072:	f000 fc09 	bl	800b888 <__i2b>
 800b076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b078:	2b00      	cmp	r3, #0
 800b07a:	4606      	mov	r6, r0
 800b07c:	f340 8081 	ble.w	800b182 <_dtoa_r+0x8ca>
 800b080:	461a      	mov	r2, r3
 800b082:	4601      	mov	r1, r0
 800b084:	4620      	mov	r0, r4
 800b086:	f000 fcbf 	bl	800ba08 <__pow5mult>
 800b08a:	9b07      	ldr	r3, [sp, #28]
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	4606      	mov	r6, r0
 800b090:	dd7a      	ble.n	800b188 <_dtoa_r+0x8d0>
 800b092:	f04f 0800 	mov.w	r8, #0
 800b096:	6933      	ldr	r3, [r6, #16]
 800b098:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b09c:	6918      	ldr	r0, [r3, #16]
 800b09e:	f000 fba5 	bl	800b7ec <__hi0bits>
 800b0a2:	f1c0 0020 	rsb	r0, r0, #32
 800b0a6:	9b06      	ldr	r3, [sp, #24]
 800b0a8:	4418      	add	r0, r3
 800b0aa:	f010 001f 	ands.w	r0, r0, #31
 800b0ae:	f000 8094 	beq.w	800b1da <_dtoa_r+0x922>
 800b0b2:	f1c0 0320 	rsb	r3, r0, #32
 800b0b6:	2b04      	cmp	r3, #4
 800b0b8:	f340 8085 	ble.w	800b1c6 <_dtoa_r+0x90e>
 800b0bc:	9b05      	ldr	r3, [sp, #20]
 800b0be:	f1c0 001c 	rsb	r0, r0, #28
 800b0c2:	4403      	add	r3, r0
 800b0c4:	9305      	str	r3, [sp, #20]
 800b0c6:	9b06      	ldr	r3, [sp, #24]
 800b0c8:	4403      	add	r3, r0
 800b0ca:	4405      	add	r5, r0
 800b0cc:	9306      	str	r3, [sp, #24]
 800b0ce:	9b05      	ldr	r3, [sp, #20]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	dd05      	ble.n	800b0e0 <_dtoa_r+0x828>
 800b0d4:	4651      	mov	r1, sl
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	4620      	mov	r0, r4
 800b0da:	f000 fcef 	bl	800babc <__lshift>
 800b0de:	4682      	mov	sl, r0
 800b0e0:	9b06      	ldr	r3, [sp, #24]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	dd05      	ble.n	800b0f2 <_dtoa_r+0x83a>
 800b0e6:	4631      	mov	r1, r6
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	f000 fce6 	bl	800babc <__lshift>
 800b0f0:	4606      	mov	r6, r0
 800b0f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d072      	beq.n	800b1de <_dtoa_r+0x926>
 800b0f8:	4631      	mov	r1, r6
 800b0fa:	4650      	mov	r0, sl
 800b0fc:	f000 fd4a 	bl	800bb94 <__mcmp>
 800b100:	2800      	cmp	r0, #0
 800b102:	da6c      	bge.n	800b1de <_dtoa_r+0x926>
 800b104:	2300      	movs	r3, #0
 800b106:	4651      	mov	r1, sl
 800b108:	220a      	movs	r2, #10
 800b10a:	4620      	mov	r0, r4
 800b10c:	f000 fb28 	bl	800b760 <__multadd>
 800b110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b112:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b116:	4682      	mov	sl, r0
 800b118:	2b00      	cmp	r3, #0
 800b11a:	f000 81b0 	beq.w	800b47e <_dtoa_r+0xbc6>
 800b11e:	2300      	movs	r3, #0
 800b120:	4639      	mov	r1, r7
 800b122:	220a      	movs	r2, #10
 800b124:	4620      	mov	r0, r4
 800b126:	f000 fb1b 	bl	800b760 <__multadd>
 800b12a:	9b01      	ldr	r3, [sp, #4]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	4607      	mov	r7, r0
 800b130:	f300 8096 	bgt.w	800b260 <_dtoa_r+0x9a8>
 800b134:	9b07      	ldr	r3, [sp, #28]
 800b136:	2b02      	cmp	r3, #2
 800b138:	dc59      	bgt.n	800b1ee <_dtoa_r+0x936>
 800b13a:	e091      	b.n	800b260 <_dtoa_r+0x9a8>
 800b13c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b13e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b142:	e758      	b.n	800aff6 <_dtoa_r+0x73e>
 800b144:	9b04      	ldr	r3, [sp, #16]
 800b146:	1e5e      	subs	r6, r3, #1
 800b148:	9b08      	ldr	r3, [sp, #32]
 800b14a:	42b3      	cmp	r3, r6
 800b14c:	bfbf      	itttt	lt
 800b14e:	9b08      	ldrlt	r3, [sp, #32]
 800b150:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b152:	9608      	strlt	r6, [sp, #32]
 800b154:	1af3      	sublt	r3, r6, r3
 800b156:	bfb4      	ite	lt
 800b158:	18d2      	addlt	r2, r2, r3
 800b15a:	1b9e      	subge	r6, r3, r6
 800b15c:	9b04      	ldr	r3, [sp, #16]
 800b15e:	bfbc      	itt	lt
 800b160:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b162:	2600      	movlt	r6, #0
 800b164:	2b00      	cmp	r3, #0
 800b166:	bfb7      	itett	lt
 800b168:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b16c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b170:	1a9d      	sublt	r5, r3, r2
 800b172:	2300      	movlt	r3, #0
 800b174:	e741      	b.n	800affa <_dtoa_r+0x742>
 800b176:	9e08      	ldr	r6, [sp, #32]
 800b178:	9d05      	ldr	r5, [sp, #20]
 800b17a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b17c:	e748      	b.n	800b010 <_dtoa_r+0x758>
 800b17e:	9a08      	ldr	r2, [sp, #32]
 800b180:	e770      	b.n	800b064 <_dtoa_r+0x7ac>
 800b182:	9b07      	ldr	r3, [sp, #28]
 800b184:	2b01      	cmp	r3, #1
 800b186:	dc19      	bgt.n	800b1bc <_dtoa_r+0x904>
 800b188:	9b02      	ldr	r3, [sp, #8]
 800b18a:	b9bb      	cbnz	r3, 800b1bc <_dtoa_r+0x904>
 800b18c:	9b03      	ldr	r3, [sp, #12]
 800b18e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b192:	b99b      	cbnz	r3, 800b1bc <_dtoa_r+0x904>
 800b194:	9b03      	ldr	r3, [sp, #12]
 800b196:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b19a:	0d1b      	lsrs	r3, r3, #20
 800b19c:	051b      	lsls	r3, r3, #20
 800b19e:	b183      	cbz	r3, 800b1c2 <_dtoa_r+0x90a>
 800b1a0:	9b05      	ldr	r3, [sp, #20]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	9305      	str	r3, [sp, #20]
 800b1a6:	9b06      	ldr	r3, [sp, #24]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	9306      	str	r3, [sp, #24]
 800b1ac:	f04f 0801 	mov.w	r8, #1
 800b1b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	f47f af6f 	bne.w	800b096 <_dtoa_r+0x7de>
 800b1b8:	2001      	movs	r0, #1
 800b1ba:	e774      	b.n	800b0a6 <_dtoa_r+0x7ee>
 800b1bc:	f04f 0800 	mov.w	r8, #0
 800b1c0:	e7f6      	b.n	800b1b0 <_dtoa_r+0x8f8>
 800b1c2:	4698      	mov	r8, r3
 800b1c4:	e7f4      	b.n	800b1b0 <_dtoa_r+0x8f8>
 800b1c6:	d082      	beq.n	800b0ce <_dtoa_r+0x816>
 800b1c8:	9a05      	ldr	r2, [sp, #20]
 800b1ca:	331c      	adds	r3, #28
 800b1cc:	441a      	add	r2, r3
 800b1ce:	9205      	str	r2, [sp, #20]
 800b1d0:	9a06      	ldr	r2, [sp, #24]
 800b1d2:	441a      	add	r2, r3
 800b1d4:	441d      	add	r5, r3
 800b1d6:	9206      	str	r2, [sp, #24]
 800b1d8:	e779      	b.n	800b0ce <_dtoa_r+0x816>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	e7f4      	b.n	800b1c8 <_dtoa_r+0x910>
 800b1de:	9b04      	ldr	r3, [sp, #16]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	dc37      	bgt.n	800b254 <_dtoa_r+0x99c>
 800b1e4:	9b07      	ldr	r3, [sp, #28]
 800b1e6:	2b02      	cmp	r3, #2
 800b1e8:	dd34      	ble.n	800b254 <_dtoa_r+0x99c>
 800b1ea:	9b04      	ldr	r3, [sp, #16]
 800b1ec:	9301      	str	r3, [sp, #4]
 800b1ee:	9b01      	ldr	r3, [sp, #4]
 800b1f0:	b963      	cbnz	r3, 800b20c <_dtoa_r+0x954>
 800b1f2:	4631      	mov	r1, r6
 800b1f4:	2205      	movs	r2, #5
 800b1f6:	4620      	mov	r0, r4
 800b1f8:	f000 fab2 	bl	800b760 <__multadd>
 800b1fc:	4601      	mov	r1, r0
 800b1fe:	4606      	mov	r6, r0
 800b200:	4650      	mov	r0, sl
 800b202:	f000 fcc7 	bl	800bb94 <__mcmp>
 800b206:	2800      	cmp	r0, #0
 800b208:	f73f adbb 	bgt.w	800ad82 <_dtoa_r+0x4ca>
 800b20c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b20e:	9d00      	ldr	r5, [sp, #0]
 800b210:	ea6f 0b03 	mvn.w	fp, r3
 800b214:	f04f 0800 	mov.w	r8, #0
 800b218:	4631      	mov	r1, r6
 800b21a:	4620      	mov	r0, r4
 800b21c:	f000 fa7e 	bl	800b71c <_Bfree>
 800b220:	2f00      	cmp	r7, #0
 800b222:	f43f aeab 	beq.w	800af7c <_dtoa_r+0x6c4>
 800b226:	f1b8 0f00 	cmp.w	r8, #0
 800b22a:	d005      	beq.n	800b238 <_dtoa_r+0x980>
 800b22c:	45b8      	cmp	r8, r7
 800b22e:	d003      	beq.n	800b238 <_dtoa_r+0x980>
 800b230:	4641      	mov	r1, r8
 800b232:	4620      	mov	r0, r4
 800b234:	f000 fa72 	bl	800b71c <_Bfree>
 800b238:	4639      	mov	r1, r7
 800b23a:	4620      	mov	r0, r4
 800b23c:	f000 fa6e 	bl	800b71c <_Bfree>
 800b240:	e69c      	b.n	800af7c <_dtoa_r+0x6c4>
 800b242:	2600      	movs	r6, #0
 800b244:	4637      	mov	r7, r6
 800b246:	e7e1      	b.n	800b20c <_dtoa_r+0x954>
 800b248:	46bb      	mov	fp, r7
 800b24a:	4637      	mov	r7, r6
 800b24c:	e599      	b.n	800ad82 <_dtoa_r+0x4ca>
 800b24e:	bf00      	nop
 800b250:	40240000 	.word	0x40240000
 800b254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b256:	2b00      	cmp	r3, #0
 800b258:	f000 80c8 	beq.w	800b3ec <_dtoa_r+0xb34>
 800b25c:	9b04      	ldr	r3, [sp, #16]
 800b25e:	9301      	str	r3, [sp, #4]
 800b260:	2d00      	cmp	r5, #0
 800b262:	dd05      	ble.n	800b270 <_dtoa_r+0x9b8>
 800b264:	4639      	mov	r1, r7
 800b266:	462a      	mov	r2, r5
 800b268:	4620      	mov	r0, r4
 800b26a:	f000 fc27 	bl	800babc <__lshift>
 800b26e:	4607      	mov	r7, r0
 800b270:	f1b8 0f00 	cmp.w	r8, #0
 800b274:	d05b      	beq.n	800b32e <_dtoa_r+0xa76>
 800b276:	6879      	ldr	r1, [r7, #4]
 800b278:	4620      	mov	r0, r4
 800b27a:	f000 fa0f 	bl	800b69c <_Balloc>
 800b27e:	4605      	mov	r5, r0
 800b280:	b928      	cbnz	r0, 800b28e <_dtoa_r+0x9d6>
 800b282:	4b83      	ldr	r3, [pc, #524]	; (800b490 <_dtoa_r+0xbd8>)
 800b284:	4602      	mov	r2, r0
 800b286:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b28a:	f7ff bb2e 	b.w	800a8ea <_dtoa_r+0x32>
 800b28e:	693a      	ldr	r2, [r7, #16]
 800b290:	3202      	adds	r2, #2
 800b292:	0092      	lsls	r2, r2, #2
 800b294:	f107 010c 	add.w	r1, r7, #12
 800b298:	300c      	adds	r0, #12
 800b29a:	f000 ffab 	bl	800c1f4 <memcpy>
 800b29e:	2201      	movs	r2, #1
 800b2a0:	4629      	mov	r1, r5
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	f000 fc0a 	bl	800babc <__lshift>
 800b2a8:	9b00      	ldr	r3, [sp, #0]
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	9304      	str	r3, [sp, #16]
 800b2ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2b2:	4413      	add	r3, r2
 800b2b4:	9308      	str	r3, [sp, #32]
 800b2b6:	9b02      	ldr	r3, [sp, #8]
 800b2b8:	f003 0301 	and.w	r3, r3, #1
 800b2bc:	46b8      	mov	r8, r7
 800b2be:	9306      	str	r3, [sp, #24]
 800b2c0:	4607      	mov	r7, r0
 800b2c2:	9b04      	ldr	r3, [sp, #16]
 800b2c4:	4631      	mov	r1, r6
 800b2c6:	3b01      	subs	r3, #1
 800b2c8:	4650      	mov	r0, sl
 800b2ca:	9301      	str	r3, [sp, #4]
 800b2cc:	f7ff fa6a 	bl	800a7a4 <quorem>
 800b2d0:	4641      	mov	r1, r8
 800b2d2:	9002      	str	r0, [sp, #8]
 800b2d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b2d8:	4650      	mov	r0, sl
 800b2da:	f000 fc5b 	bl	800bb94 <__mcmp>
 800b2de:	463a      	mov	r2, r7
 800b2e0:	9005      	str	r0, [sp, #20]
 800b2e2:	4631      	mov	r1, r6
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	f000 fc71 	bl	800bbcc <__mdiff>
 800b2ea:	68c2      	ldr	r2, [r0, #12]
 800b2ec:	4605      	mov	r5, r0
 800b2ee:	bb02      	cbnz	r2, 800b332 <_dtoa_r+0xa7a>
 800b2f0:	4601      	mov	r1, r0
 800b2f2:	4650      	mov	r0, sl
 800b2f4:	f000 fc4e 	bl	800bb94 <__mcmp>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	4629      	mov	r1, r5
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	9209      	str	r2, [sp, #36]	; 0x24
 800b300:	f000 fa0c 	bl	800b71c <_Bfree>
 800b304:	9b07      	ldr	r3, [sp, #28]
 800b306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b308:	9d04      	ldr	r5, [sp, #16]
 800b30a:	ea43 0102 	orr.w	r1, r3, r2
 800b30e:	9b06      	ldr	r3, [sp, #24]
 800b310:	4319      	orrs	r1, r3
 800b312:	d110      	bne.n	800b336 <_dtoa_r+0xa7e>
 800b314:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b318:	d029      	beq.n	800b36e <_dtoa_r+0xab6>
 800b31a:	9b05      	ldr	r3, [sp, #20]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	dd02      	ble.n	800b326 <_dtoa_r+0xa6e>
 800b320:	9b02      	ldr	r3, [sp, #8]
 800b322:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b326:	9b01      	ldr	r3, [sp, #4]
 800b328:	f883 9000 	strb.w	r9, [r3]
 800b32c:	e774      	b.n	800b218 <_dtoa_r+0x960>
 800b32e:	4638      	mov	r0, r7
 800b330:	e7ba      	b.n	800b2a8 <_dtoa_r+0x9f0>
 800b332:	2201      	movs	r2, #1
 800b334:	e7e1      	b.n	800b2fa <_dtoa_r+0xa42>
 800b336:	9b05      	ldr	r3, [sp, #20]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	db04      	blt.n	800b346 <_dtoa_r+0xa8e>
 800b33c:	9907      	ldr	r1, [sp, #28]
 800b33e:	430b      	orrs	r3, r1
 800b340:	9906      	ldr	r1, [sp, #24]
 800b342:	430b      	orrs	r3, r1
 800b344:	d120      	bne.n	800b388 <_dtoa_r+0xad0>
 800b346:	2a00      	cmp	r2, #0
 800b348:	dded      	ble.n	800b326 <_dtoa_r+0xa6e>
 800b34a:	4651      	mov	r1, sl
 800b34c:	2201      	movs	r2, #1
 800b34e:	4620      	mov	r0, r4
 800b350:	f000 fbb4 	bl	800babc <__lshift>
 800b354:	4631      	mov	r1, r6
 800b356:	4682      	mov	sl, r0
 800b358:	f000 fc1c 	bl	800bb94 <__mcmp>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	dc03      	bgt.n	800b368 <_dtoa_r+0xab0>
 800b360:	d1e1      	bne.n	800b326 <_dtoa_r+0xa6e>
 800b362:	f019 0f01 	tst.w	r9, #1
 800b366:	d0de      	beq.n	800b326 <_dtoa_r+0xa6e>
 800b368:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b36c:	d1d8      	bne.n	800b320 <_dtoa_r+0xa68>
 800b36e:	9a01      	ldr	r2, [sp, #4]
 800b370:	2339      	movs	r3, #57	; 0x39
 800b372:	7013      	strb	r3, [r2, #0]
 800b374:	462b      	mov	r3, r5
 800b376:	461d      	mov	r5, r3
 800b378:	3b01      	subs	r3, #1
 800b37a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b37e:	2a39      	cmp	r2, #57	; 0x39
 800b380:	d06c      	beq.n	800b45c <_dtoa_r+0xba4>
 800b382:	3201      	adds	r2, #1
 800b384:	701a      	strb	r2, [r3, #0]
 800b386:	e747      	b.n	800b218 <_dtoa_r+0x960>
 800b388:	2a00      	cmp	r2, #0
 800b38a:	dd07      	ble.n	800b39c <_dtoa_r+0xae4>
 800b38c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b390:	d0ed      	beq.n	800b36e <_dtoa_r+0xab6>
 800b392:	9a01      	ldr	r2, [sp, #4]
 800b394:	f109 0301 	add.w	r3, r9, #1
 800b398:	7013      	strb	r3, [r2, #0]
 800b39a:	e73d      	b.n	800b218 <_dtoa_r+0x960>
 800b39c:	9b04      	ldr	r3, [sp, #16]
 800b39e:	9a08      	ldr	r2, [sp, #32]
 800b3a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d043      	beq.n	800b430 <_dtoa_r+0xb78>
 800b3a8:	4651      	mov	r1, sl
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	220a      	movs	r2, #10
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f000 f9d6 	bl	800b760 <__multadd>
 800b3b4:	45b8      	cmp	r8, r7
 800b3b6:	4682      	mov	sl, r0
 800b3b8:	f04f 0300 	mov.w	r3, #0
 800b3bc:	f04f 020a 	mov.w	r2, #10
 800b3c0:	4641      	mov	r1, r8
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	d107      	bne.n	800b3d6 <_dtoa_r+0xb1e>
 800b3c6:	f000 f9cb 	bl	800b760 <__multadd>
 800b3ca:	4680      	mov	r8, r0
 800b3cc:	4607      	mov	r7, r0
 800b3ce:	9b04      	ldr	r3, [sp, #16]
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	9304      	str	r3, [sp, #16]
 800b3d4:	e775      	b.n	800b2c2 <_dtoa_r+0xa0a>
 800b3d6:	f000 f9c3 	bl	800b760 <__multadd>
 800b3da:	4639      	mov	r1, r7
 800b3dc:	4680      	mov	r8, r0
 800b3de:	2300      	movs	r3, #0
 800b3e0:	220a      	movs	r2, #10
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	f000 f9bc 	bl	800b760 <__multadd>
 800b3e8:	4607      	mov	r7, r0
 800b3ea:	e7f0      	b.n	800b3ce <_dtoa_r+0xb16>
 800b3ec:	9b04      	ldr	r3, [sp, #16]
 800b3ee:	9301      	str	r3, [sp, #4]
 800b3f0:	9d00      	ldr	r5, [sp, #0]
 800b3f2:	4631      	mov	r1, r6
 800b3f4:	4650      	mov	r0, sl
 800b3f6:	f7ff f9d5 	bl	800a7a4 <quorem>
 800b3fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b3fe:	9b00      	ldr	r3, [sp, #0]
 800b400:	f805 9b01 	strb.w	r9, [r5], #1
 800b404:	1aea      	subs	r2, r5, r3
 800b406:	9b01      	ldr	r3, [sp, #4]
 800b408:	4293      	cmp	r3, r2
 800b40a:	dd07      	ble.n	800b41c <_dtoa_r+0xb64>
 800b40c:	4651      	mov	r1, sl
 800b40e:	2300      	movs	r3, #0
 800b410:	220a      	movs	r2, #10
 800b412:	4620      	mov	r0, r4
 800b414:	f000 f9a4 	bl	800b760 <__multadd>
 800b418:	4682      	mov	sl, r0
 800b41a:	e7ea      	b.n	800b3f2 <_dtoa_r+0xb3a>
 800b41c:	9b01      	ldr	r3, [sp, #4]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	bfc8      	it	gt
 800b422:	461d      	movgt	r5, r3
 800b424:	9b00      	ldr	r3, [sp, #0]
 800b426:	bfd8      	it	le
 800b428:	2501      	movle	r5, #1
 800b42a:	441d      	add	r5, r3
 800b42c:	f04f 0800 	mov.w	r8, #0
 800b430:	4651      	mov	r1, sl
 800b432:	2201      	movs	r2, #1
 800b434:	4620      	mov	r0, r4
 800b436:	f000 fb41 	bl	800babc <__lshift>
 800b43a:	4631      	mov	r1, r6
 800b43c:	4682      	mov	sl, r0
 800b43e:	f000 fba9 	bl	800bb94 <__mcmp>
 800b442:	2800      	cmp	r0, #0
 800b444:	dc96      	bgt.n	800b374 <_dtoa_r+0xabc>
 800b446:	d102      	bne.n	800b44e <_dtoa_r+0xb96>
 800b448:	f019 0f01 	tst.w	r9, #1
 800b44c:	d192      	bne.n	800b374 <_dtoa_r+0xabc>
 800b44e:	462b      	mov	r3, r5
 800b450:	461d      	mov	r5, r3
 800b452:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b456:	2a30      	cmp	r2, #48	; 0x30
 800b458:	d0fa      	beq.n	800b450 <_dtoa_r+0xb98>
 800b45a:	e6dd      	b.n	800b218 <_dtoa_r+0x960>
 800b45c:	9a00      	ldr	r2, [sp, #0]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d189      	bne.n	800b376 <_dtoa_r+0xabe>
 800b462:	f10b 0b01 	add.w	fp, fp, #1
 800b466:	2331      	movs	r3, #49	; 0x31
 800b468:	e796      	b.n	800b398 <_dtoa_r+0xae0>
 800b46a:	4b0a      	ldr	r3, [pc, #40]	; (800b494 <_dtoa_r+0xbdc>)
 800b46c:	f7ff ba99 	b.w	800a9a2 <_dtoa_r+0xea>
 800b470:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b472:	2b00      	cmp	r3, #0
 800b474:	f47f aa6d 	bne.w	800a952 <_dtoa_r+0x9a>
 800b478:	4b07      	ldr	r3, [pc, #28]	; (800b498 <_dtoa_r+0xbe0>)
 800b47a:	f7ff ba92 	b.w	800a9a2 <_dtoa_r+0xea>
 800b47e:	9b01      	ldr	r3, [sp, #4]
 800b480:	2b00      	cmp	r3, #0
 800b482:	dcb5      	bgt.n	800b3f0 <_dtoa_r+0xb38>
 800b484:	9b07      	ldr	r3, [sp, #28]
 800b486:	2b02      	cmp	r3, #2
 800b488:	f73f aeb1 	bgt.w	800b1ee <_dtoa_r+0x936>
 800b48c:	e7b0      	b.n	800b3f0 <_dtoa_r+0xb38>
 800b48e:	bf00      	nop
 800b490:	0800e1c4 	.word	0x0800e1c4
 800b494:	0800e124 	.word	0x0800e124
 800b498:	0800e148 	.word	0x0800e148

0800b49c <_free_r>:
 800b49c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b49e:	2900      	cmp	r1, #0
 800b4a0:	d044      	beq.n	800b52c <_free_r+0x90>
 800b4a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4a6:	9001      	str	r0, [sp, #4]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f1a1 0404 	sub.w	r4, r1, #4
 800b4ae:	bfb8      	it	lt
 800b4b0:	18e4      	addlt	r4, r4, r3
 800b4b2:	f000 f8e7 	bl	800b684 <__malloc_lock>
 800b4b6:	4a1e      	ldr	r2, [pc, #120]	; (800b530 <_free_r+0x94>)
 800b4b8:	9801      	ldr	r0, [sp, #4]
 800b4ba:	6813      	ldr	r3, [r2, #0]
 800b4bc:	b933      	cbnz	r3, 800b4cc <_free_r+0x30>
 800b4be:	6063      	str	r3, [r4, #4]
 800b4c0:	6014      	str	r4, [r2, #0]
 800b4c2:	b003      	add	sp, #12
 800b4c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4c8:	f000 b8e2 	b.w	800b690 <__malloc_unlock>
 800b4cc:	42a3      	cmp	r3, r4
 800b4ce:	d908      	bls.n	800b4e2 <_free_r+0x46>
 800b4d0:	6825      	ldr	r5, [r4, #0]
 800b4d2:	1961      	adds	r1, r4, r5
 800b4d4:	428b      	cmp	r3, r1
 800b4d6:	bf01      	itttt	eq
 800b4d8:	6819      	ldreq	r1, [r3, #0]
 800b4da:	685b      	ldreq	r3, [r3, #4]
 800b4dc:	1949      	addeq	r1, r1, r5
 800b4de:	6021      	streq	r1, [r4, #0]
 800b4e0:	e7ed      	b.n	800b4be <_free_r+0x22>
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	b10b      	cbz	r3, 800b4ec <_free_r+0x50>
 800b4e8:	42a3      	cmp	r3, r4
 800b4ea:	d9fa      	bls.n	800b4e2 <_free_r+0x46>
 800b4ec:	6811      	ldr	r1, [r2, #0]
 800b4ee:	1855      	adds	r5, r2, r1
 800b4f0:	42a5      	cmp	r5, r4
 800b4f2:	d10b      	bne.n	800b50c <_free_r+0x70>
 800b4f4:	6824      	ldr	r4, [r4, #0]
 800b4f6:	4421      	add	r1, r4
 800b4f8:	1854      	adds	r4, r2, r1
 800b4fa:	42a3      	cmp	r3, r4
 800b4fc:	6011      	str	r1, [r2, #0]
 800b4fe:	d1e0      	bne.n	800b4c2 <_free_r+0x26>
 800b500:	681c      	ldr	r4, [r3, #0]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	6053      	str	r3, [r2, #4]
 800b506:	440c      	add	r4, r1
 800b508:	6014      	str	r4, [r2, #0]
 800b50a:	e7da      	b.n	800b4c2 <_free_r+0x26>
 800b50c:	d902      	bls.n	800b514 <_free_r+0x78>
 800b50e:	230c      	movs	r3, #12
 800b510:	6003      	str	r3, [r0, #0]
 800b512:	e7d6      	b.n	800b4c2 <_free_r+0x26>
 800b514:	6825      	ldr	r5, [r4, #0]
 800b516:	1961      	adds	r1, r4, r5
 800b518:	428b      	cmp	r3, r1
 800b51a:	bf04      	itt	eq
 800b51c:	6819      	ldreq	r1, [r3, #0]
 800b51e:	685b      	ldreq	r3, [r3, #4]
 800b520:	6063      	str	r3, [r4, #4]
 800b522:	bf04      	itt	eq
 800b524:	1949      	addeq	r1, r1, r5
 800b526:	6021      	streq	r1, [r4, #0]
 800b528:	6054      	str	r4, [r2, #4]
 800b52a:	e7ca      	b.n	800b4c2 <_free_r+0x26>
 800b52c:	b003      	add	sp, #12
 800b52e:	bd30      	pop	{r4, r5, pc}
 800b530:	200020e4 	.word	0x200020e4

0800b534 <malloc>:
 800b534:	4b02      	ldr	r3, [pc, #8]	; (800b540 <malloc+0xc>)
 800b536:	4601      	mov	r1, r0
 800b538:	6818      	ldr	r0, [r3, #0]
 800b53a:	f000 b823 	b.w	800b584 <_malloc_r>
 800b53e:	bf00      	nop
 800b540:	20000154 	.word	0x20000154

0800b544 <sbrk_aligned>:
 800b544:	b570      	push	{r4, r5, r6, lr}
 800b546:	4e0e      	ldr	r6, [pc, #56]	; (800b580 <sbrk_aligned+0x3c>)
 800b548:	460c      	mov	r4, r1
 800b54a:	6831      	ldr	r1, [r6, #0]
 800b54c:	4605      	mov	r5, r0
 800b54e:	b911      	cbnz	r1, 800b556 <sbrk_aligned+0x12>
 800b550:	f000 fe40 	bl	800c1d4 <_sbrk_r>
 800b554:	6030      	str	r0, [r6, #0]
 800b556:	4621      	mov	r1, r4
 800b558:	4628      	mov	r0, r5
 800b55a:	f000 fe3b 	bl	800c1d4 <_sbrk_r>
 800b55e:	1c43      	adds	r3, r0, #1
 800b560:	d00a      	beq.n	800b578 <sbrk_aligned+0x34>
 800b562:	1cc4      	adds	r4, r0, #3
 800b564:	f024 0403 	bic.w	r4, r4, #3
 800b568:	42a0      	cmp	r0, r4
 800b56a:	d007      	beq.n	800b57c <sbrk_aligned+0x38>
 800b56c:	1a21      	subs	r1, r4, r0
 800b56e:	4628      	mov	r0, r5
 800b570:	f000 fe30 	bl	800c1d4 <_sbrk_r>
 800b574:	3001      	adds	r0, #1
 800b576:	d101      	bne.n	800b57c <sbrk_aligned+0x38>
 800b578:	f04f 34ff 	mov.w	r4, #4294967295
 800b57c:	4620      	mov	r0, r4
 800b57e:	bd70      	pop	{r4, r5, r6, pc}
 800b580:	200020e8 	.word	0x200020e8

0800b584 <_malloc_r>:
 800b584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b588:	1ccd      	adds	r5, r1, #3
 800b58a:	f025 0503 	bic.w	r5, r5, #3
 800b58e:	3508      	adds	r5, #8
 800b590:	2d0c      	cmp	r5, #12
 800b592:	bf38      	it	cc
 800b594:	250c      	movcc	r5, #12
 800b596:	2d00      	cmp	r5, #0
 800b598:	4607      	mov	r7, r0
 800b59a:	db01      	blt.n	800b5a0 <_malloc_r+0x1c>
 800b59c:	42a9      	cmp	r1, r5
 800b59e:	d905      	bls.n	800b5ac <_malloc_r+0x28>
 800b5a0:	230c      	movs	r3, #12
 800b5a2:	603b      	str	r3, [r7, #0]
 800b5a4:	2600      	movs	r6, #0
 800b5a6:	4630      	mov	r0, r6
 800b5a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b680 <_malloc_r+0xfc>
 800b5b0:	f000 f868 	bl	800b684 <__malloc_lock>
 800b5b4:	f8d8 3000 	ldr.w	r3, [r8]
 800b5b8:	461c      	mov	r4, r3
 800b5ba:	bb5c      	cbnz	r4, 800b614 <_malloc_r+0x90>
 800b5bc:	4629      	mov	r1, r5
 800b5be:	4638      	mov	r0, r7
 800b5c0:	f7ff ffc0 	bl	800b544 <sbrk_aligned>
 800b5c4:	1c43      	adds	r3, r0, #1
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	d155      	bne.n	800b676 <_malloc_r+0xf2>
 800b5ca:	f8d8 4000 	ldr.w	r4, [r8]
 800b5ce:	4626      	mov	r6, r4
 800b5d0:	2e00      	cmp	r6, #0
 800b5d2:	d145      	bne.n	800b660 <_malloc_r+0xdc>
 800b5d4:	2c00      	cmp	r4, #0
 800b5d6:	d048      	beq.n	800b66a <_malloc_r+0xe6>
 800b5d8:	6823      	ldr	r3, [r4, #0]
 800b5da:	4631      	mov	r1, r6
 800b5dc:	4638      	mov	r0, r7
 800b5de:	eb04 0903 	add.w	r9, r4, r3
 800b5e2:	f000 fdf7 	bl	800c1d4 <_sbrk_r>
 800b5e6:	4581      	cmp	r9, r0
 800b5e8:	d13f      	bne.n	800b66a <_malloc_r+0xe6>
 800b5ea:	6821      	ldr	r1, [r4, #0]
 800b5ec:	1a6d      	subs	r5, r5, r1
 800b5ee:	4629      	mov	r1, r5
 800b5f0:	4638      	mov	r0, r7
 800b5f2:	f7ff ffa7 	bl	800b544 <sbrk_aligned>
 800b5f6:	3001      	adds	r0, #1
 800b5f8:	d037      	beq.n	800b66a <_malloc_r+0xe6>
 800b5fa:	6823      	ldr	r3, [r4, #0]
 800b5fc:	442b      	add	r3, r5
 800b5fe:	6023      	str	r3, [r4, #0]
 800b600:	f8d8 3000 	ldr.w	r3, [r8]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d038      	beq.n	800b67a <_malloc_r+0xf6>
 800b608:	685a      	ldr	r2, [r3, #4]
 800b60a:	42a2      	cmp	r2, r4
 800b60c:	d12b      	bne.n	800b666 <_malloc_r+0xe2>
 800b60e:	2200      	movs	r2, #0
 800b610:	605a      	str	r2, [r3, #4]
 800b612:	e00f      	b.n	800b634 <_malloc_r+0xb0>
 800b614:	6822      	ldr	r2, [r4, #0]
 800b616:	1b52      	subs	r2, r2, r5
 800b618:	d41f      	bmi.n	800b65a <_malloc_r+0xd6>
 800b61a:	2a0b      	cmp	r2, #11
 800b61c:	d917      	bls.n	800b64e <_malloc_r+0xca>
 800b61e:	1961      	adds	r1, r4, r5
 800b620:	42a3      	cmp	r3, r4
 800b622:	6025      	str	r5, [r4, #0]
 800b624:	bf18      	it	ne
 800b626:	6059      	strne	r1, [r3, #4]
 800b628:	6863      	ldr	r3, [r4, #4]
 800b62a:	bf08      	it	eq
 800b62c:	f8c8 1000 	streq.w	r1, [r8]
 800b630:	5162      	str	r2, [r4, r5]
 800b632:	604b      	str	r3, [r1, #4]
 800b634:	4638      	mov	r0, r7
 800b636:	f104 060b 	add.w	r6, r4, #11
 800b63a:	f000 f829 	bl	800b690 <__malloc_unlock>
 800b63e:	f026 0607 	bic.w	r6, r6, #7
 800b642:	1d23      	adds	r3, r4, #4
 800b644:	1af2      	subs	r2, r6, r3
 800b646:	d0ae      	beq.n	800b5a6 <_malloc_r+0x22>
 800b648:	1b9b      	subs	r3, r3, r6
 800b64a:	50a3      	str	r3, [r4, r2]
 800b64c:	e7ab      	b.n	800b5a6 <_malloc_r+0x22>
 800b64e:	42a3      	cmp	r3, r4
 800b650:	6862      	ldr	r2, [r4, #4]
 800b652:	d1dd      	bne.n	800b610 <_malloc_r+0x8c>
 800b654:	f8c8 2000 	str.w	r2, [r8]
 800b658:	e7ec      	b.n	800b634 <_malloc_r+0xb0>
 800b65a:	4623      	mov	r3, r4
 800b65c:	6864      	ldr	r4, [r4, #4]
 800b65e:	e7ac      	b.n	800b5ba <_malloc_r+0x36>
 800b660:	4634      	mov	r4, r6
 800b662:	6876      	ldr	r6, [r6, #4]
 800b664:	e7b4      	b.n	800b5d0 <_malloc_r+0x4c>
 800b666:	4613      	mov	r3, r2
 800b668:	e7cc      	b.n	800b604 <_malloc_r+0x80>
 800b66a:	230c      	movs	r3, #12
 800b66c:	603b      	str	r3, [r7, #0]
 800b66e:	4638      	mov	r0, r7
 800b670:	f000 f80e 	bl	800b690 <__malloc_unlock>
 800b674:	e797      	b.n	800b5a6 <_malloc_r+0x22>
 800b676:	6025      	str	r5, [r4, #0]
 800b678:	e7dc      	b.n	800b634 <_malloc_r+0xb0>
 800b67a:	605b      	str	r3, [r3, #4]
 800b67c:	deff      	udf	#255	; 0xff
 800b67e:	bf00      	nop
 800b680:	200020e4 	.word	0x200020e4

0800b684 <__malloc_lock>:
 800b684:	4801      	ldr	r0, [pc, #4]	; (800b68c <__malloc_lock+0x8>)
 800b686:	f7ff b88b 	b.w	800a7a0 <__retarget_lock_acquire_recursive>
 800b68a:	bf00      	nop
 800b68c:	200020e0 	.word	0x200020e0

0800b690 <__malloc_unlock>:
 800b690:	4801      	ldr	r0, [pc, #4]	; (800b698 <__malloc_unlock+0x8>)
 800b692:	f7ff b886 	b.w	800a7a2 <__retarget_lock_release_recursive>
 800b696:	bf00      	nop
 800b698:	200020e0 	.word	0x200020e0

0800b69c <_Balloc>:
 800b69c:	b570      	push	{r4, r5, r6, lr}
 800b69e:	69c6      	ldr	r6, [r0, #28]
 800b6a0:	4604      	mov	r4, r0
 800b6a2:	460d      	mov	r5, r1
 800b6a4:	b976      	cbnz	r6, 800b6c4 <_Balloc+0x28>
 800b6a6:	2010      	movs	r0, #16
 800b6a8:	f7ff ff44 	bl	800b534 <malloc>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	61e0      	str	r0, [r4, #28]
 800b6b0:	b920      	cbnz	r0, 800b6bc <_Balloc+0x20>
 800b6b2:	4b18      	ldr	r3, [pc, #96]	; (800b714 <_Balloc+0x78>)
 800b6b4:	4818      	ldr	r0, [pc, #96]	; (800b718 <_Balloc+0x7c>)
 800b6b6:	216b      	movs	r1, #107	; 0x6b
 800b6b8:	f000 fdaa 	bl	800c210 <__assert_func>
 800b6bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6c0:	6006      	str	r6, [r0, #0]
 800b6c2:	60c6      	str	r6, [r0, #12]
 800b6c4:	69e6      	ldr	r6, [r4, #28]
 800b6c6:	68f3      	ldr	r3, [r6, #12]
 800b6c8:	b183      	cbz	r3, 800b6ec <_Balloc+0x50>
 800b6ca:	69e3      	ldr	r3, [r4, #28]
 800b6cc:	68db      	ldr	r3, [r3, #12]
 800b6ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b6d2:	b9b8      	cbnz	r0, 800b704 <_Balloc+0x68>
 800b6d4:	2101      	movs	r1, #1
 800b6d6:	fa01 f605 	lsl.w	r6, r1, r5
 800b6da:	1d72      	adds	r2, r6, #5
 800b6dc:	0092      	lsls	r2, r2, #2
 800b6de:	4620      	mov	r0, r4
 800b6e0:	f000 fdb4 	bl	800c24c <_calloc_r>
 800b6e4:	b160      	cbz	r0, 800b700 <_Balloc+0x64>
 800b6e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b6ea:	e00e      	b.n	800b70a <_Balloc+0x6e>
 800b6ec:	2221      	movs	r2, #33	; 0x21
 800b6ee:	2104      	movs	r1, #4
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	f000 fdab 	bl	800c24c <_calloc_r>
 800b6f6:	69e3      	ldr	r3, [r4, #28]
 800b6f8:	60f0      	str	r0, [r6, #12]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d1e4      	bne.n	800b6ca <_Balloc+0x2e>
 800b700:	2000      	movs	r0, #0
 800b702:	bd70      	pop	{r4, r5, r6, pc}
 800b704:	6802      	ldr	r2, [r0, #0]
 800b706:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b70a:	2300      	movs	r3, #0
 800b70c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b710:	e7f7      	b.n	800b702 <_Balloc+0x66>
 800b712:	bf00      	nop
 800b714:	0800e155 	.word	0x0800e155
 800b718:	0800e1d5 	.word	0x0800e1d5

0800b71c <_Bfree>:
 800b71c:	b570      	push	{r4, r5, r6, lr}
 800b71e:	69c6      	ldr	r6, [r0, #28]
 800b720:	4605      	mov	r5, r0
 800b722:	460c      	mov	r4, r1
 800b724:	b976      	cbnz	r6, 800b744 <_Bfree+0x28>
 800b726:	2010      	movs	r0, #16
 800b728:	f7ff ff04 	bl	800b534 <malloc>
 800b72c:	4602      	mov	r2, r0
 800b72e:	61e8      	str	r0, [r5, #28]
 800b730:	b920      	cbnz	r0, 800b73c <_Bfree+0x20>
 800b732:	4b09      	ldr	r3, [pc, #36]	; (800b758 <_Bfree+0x3c>)
 800b734:	4809      	ldr	r0, [pc, #36]	; (800b75c <_Bfree+0x40>)
 800b736:	218f      	movs	r1, #143	; 0x8f
 800b738:	f000 fd6a 	bl	800c210 <__assert_func>
 800b73c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b740:	6006      	str	r6, [r0, #0]
 800b742:	60c6      	str	r6, [r0, #12]
 800b744:	b13c      	cbz	r4, 800b756 <_Bfree+0x3a>
 800b746:	69eb      	ldr	r3, [r5, #28]
 800b748:	6862      	ldr	r2, [r4, #4]
 800b74a:	68db      	ldr	r3, [r3, #12]
 800b74c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b750:	6021      	str	r1, [r4, #0]
 800b752:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b756:	bd70      	pop	{r4, r5, r6, pc}
 800b758:	0800e155 	.word	0x0800e155
 800b75c:	0800e1d5 	.word	0x0800e1d5

0800b760 <__multadd>:
 800b760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b764:	690d      	ldr	r5, [r1, #16]
 800b766:	4607      	mov	r7, r0
 800b768:	460c      	mov	r4, r1
 800b76a:	461e      	mov	r6, r3
 800b76c:	f101 0c14 	add.w	ip, r1, #20
 800b770:	2000      	movs	r0, #0
 800b772:	f8dc 3000 	ldr.w	r3, [ip]
 800b776:	b299      	uxth	r1, r3
 800b778:	fb02 6101 	mla	r1, r2, r1, r6
 800b77c:	0c1e      	lsrs	r6, r3, #16
 800b77e:	0c0b      	lsrs	r3, r1, #16
 800b780:	fb02 3306 	mla	r3, r2, r6, r3
 800b784:	b289      	uxth	r1, r1
 800b786:	3001      	adds	r0, #1
 800b788:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b78c:	4285      	cmp	r5, r0
 800b78e:	f84c 1b04 	str.w	r1, [ip], #4
 800b792:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b796:	dcec      	bgt.n	800b772 <__multadd+0x12>
 800b798:	b30e      	cbz	r6, 800b7de <__multadd+0x7e>
 800b79a:	68a3      	ldr	r3, [r4, #8]
 800b79c:	42ab      	cmp	r3, r5
 800b79e:	dc19      	bgt.n	800b7d4 <__multadd+0x74>
 800b7a0:	6861      	ldr	r1, [r4, #4]
 800b7a2:	4638      	mov	r0, r7
 800b7a4:	3101      	adds	r1, #1
 800b7a6:	f7ff ff79 	bl	800b69c <_Balloc>
 800b7aa:	4680      	mov	r8, r0
 800b7ac:	b928      	cbnz	r0, 800b7ba <__multadd+0x5a>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	4b0c      	ldr	r3, [pc, #48]	; (800b7e4 <__multadd+0x84>)
 800b7b2:	480d      	ldr	r0, [pc, #52]	; (800b7e8 <__multadd+0x88>)
 800b7b4:	21ba      	movs	r1, #186	; 0xba
 800b7b6:	f000 fd2b 	bl	800c210 <__assert_func>
 800b7ba:	6922      	ldr	r2, [r4, #16]
 800b7bc:	3202      	adds	r2, #2
 800b7be:	f104 010c 	add.w	r1, r4, #12
 800b7c2:	0092      	lsls	r2, r2, #2
 800b7c4:	300c      	adds	r0, #12
 800b7c6:	f000 fd15 	bl	800c1f4 <memcpy>
 800b7ca:	4621      	mov	r1, r4
 800b7cc:	4638      	mov	r0, r7
 800b7ce:	f7ff ffa5 	bl	800b71c <_Bfree>
 800b7d2:	4644      	mov	r4, r8
 800b7d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b7d8:	3501      	adds	r5, #1
 800b7da:	615e      	str	r6, [r3, #20]
 800b7dc:	6125      	str	r5, [r4, #16]
 800b7de:	4620      	mov	r0, r4
 800b7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7e4:	0800e1c4 	.word	0x0800e1c4
 800b7e8:	0800e1d5 	.word	0x0800e1d5

0800b7ec <__hi0bits>:
 800b7ec:	0c03      	lsrs	r3, r0, #16
 800b7ee:	041b      	lsls	r3, r3, #16
 800b7f0:	b9d3      	cbnz	r3, 800b828 <__hi0bits+0x3c>
 800b7f2:	0400      	lsls	r0, r0, #16
 800b7f4:	2310      	movs	r3, #16
 800b7f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b7fa:	bf04      	itt	eq
 800b7fc:	0200      	lsleq	r0, r0, #8
 800b7fe:	3308      	addeq	r3, #8
 800b800:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b804:	bf04      	itt	eq
 800b806:	0100      	lsleq	r0, r0, #4
 800b808:	3304      	addeq	r3, #4
 800b80a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b80e:	bf04      	itt	eq
 800b810:	0080      	lsleq	r0, r0, #2
 800b812:	3302      	addeq	r3, #2
 800b814:	2800      	cmp	r0, #0
 800b816:	db05      	blt.n	800b824 <__hi0bits+0x38>
 800b818:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b81c:	f103 0301 	add.w	r3, r3, #1
 800b820:	bf08      	it	eq
 800b822:	2320      	moveq	r3, #32
 800b824:	4618      	mov	r0, r3
 800b826:	4770      	bx	lr
 800b828:	2300      	movs	r3, #0
 800b82a:	e7e4      	b.n	800b7f6 <__hi0bits+0xa>

0800b82c <__lo0bits>:
 800b82c:	6803      	ldr	r3, [r0, #0]
 800b82e:	f013 0207 	ands.w	r2, r3, #7
 800b832:	d00c      	beq.n	800b84e <__lo0bits+0x22>
 800b834:	07d9      	lsls	r1, r3, #31
 800b836:	d422      	bmi.n	800b87e <__lo0bits+0x52>
 800b838:	079a      	lsls	r2, r3, #30
 800b83a:	bf49      	itett	mi
 800b83c:	085b      	lsrmi	r3, r3, #1
 800b83e:	089b      	lsrpl	r3, r3, #2
 800b840:	6003      	strmi	r3, [r0, #0]
 800b842:	2201      	movmi	r2, #1
 800b844:	bf5c      	itt	pl
 800b846:	6003      	strpl	r3, [r0, #0]
 800b848:	2202      	movpl	r2, #2
 800b84a:	4610      	mov	r0, r2
 800b84c:	4770      	bx	lr
 800b84e:	b299      	uxth	r1, r3
 800b850:	b909      	cbnz	r1, 800b856 <__lo0bits+0x2a>
 800b852:	0c1b      	lsrs	r3, r3, #16
 800b854:	2210      	movs	r2, #16
 800b856:	b2d9      	uxtb	r1, r3
 800b858:	b909      	cbnz	r1, 800b85e <__lo0bits+0x32>
 800b85a:	3208      	adds	r2, #8
 800b85c:	0a1b      	lsrs	r3, r3, #8
 800b85e:	0719      	lsls	r1, r3, #28
 800b860:	bf04      	itt	eq
 800b862:	091b      	lsreq	r3, r3, #4
 800b864:	3204      	addeq	r2, #4
 800b866:	0799      	lsls	r1, r3, #30
 800b868:	bf04      	itt	eq
 800b86a:	089b      	lsreq	r3, r3, #2
 800b86c:	3202      	addeq	r2, #2
 800b86e:	07d9      	lsls	r1, r3, #31
 800b870:	d403      	bmi.n	800b87a <__lo0bits+0x4e>
 800b872:	085b      	lsrs	r3, r3, #1
 800b874:	f102 0201 	add.w	r2, r2, #1
 800b878:	d003      	beq.n	800b882 <__lo0bits+0x56>
 800b87a:	6003      	str	r3, [r0, #0]
 800b87c:	e7e5      	b.n	800b84a <__lo0bits+0x1e>
 800b87e:	2200      	movs	r2, #0
 800b880:	e7e3      	b.n	800b84a <__lo0bits+0x1e>
 800b882:	2220      	movs	r2, #32
 800b884:	e7e1      	b.n	800b84a <__lo0bits+0x1e>
	...

0800b888 <__i2b>:
 800b888:	b510      	push	{r4, lr}
 800b88a:	460c      	mov	r4, r1
 800b88c:	2101      	movs	r1, #1
 800b88e:	f7ff ff05 	bl	800b69c <_Balloc>
 800b892:	4602      	mov	r2, r0
 800b894:	b928      	cbnz	r0, 800b8a2 <__i2b+0x1a>
 800b896:	4b05      	ldr	r3, [pc, #20]	; (800b8ac <__i2b+0x24>)
 800b898:	4805      	ldr	r0, [pc, #20]	; (800b8b0 <__i2b+0x28>)
 800b89a:	f240 1145 	movw	r1, #325	; 0x145
 800b89e:	f000 fcb7 	bl	800c210 <__assert_func>
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	6144      	str	r4, [r0, #20]
 800b8a6:	6103      	str	r3, [r0, #16]
 800b8a8:	bd10      	pop	{r4, pc}
 800b8aa:	bf00      	nop
 800b8ac:	0800e1c4 	.word	0x0800e1c4
 800b8b0:	0800e1d5 	.word	0x0800e1d5

0800b8b4 <__multiply>:
 800b8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b8:	4691      	mov	r9, r2
 800b8ba:	690a      	ldr	r2, [r1, #16]
 800b8bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	bfb8      	it	lt
 800b8c4:	460b      	movlt	r3, r1
 800b8c6:	460c      	mov	r4, r1
 800b8c8:	bfbc      	itt	lt
 800b8ca:	464c      	movlt	r4, r9
 800b8cc:	4699      	movlt	r9, r3
 800b8ce:	6927      	ldr	r7, [r4, #16]
 800b8d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b8d4:	68a3      	ldr	r3, [r4, #8]
 800b8d6:	6861      	ldr	r1, [r4, #4]
 800b8d8:	eb07 060a 	add.w	r6, r7, sl
 800b8dc:	42b3      	cmp	r3, r6
 800b8de:	b085      	sub	sp, #20
 800b8e0:	bfb8      	it	lt
 800b8e2:	3101      	addlt	r1, #1
 800b8e4:	f7ff feda 	bl	800b69c <_Balloc>
 800b8e8:	b930      	cbnz	r0, 800b8f8 <__multiply+0x44>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	4b44      	ldr	r3, [pc, #272]	; (800ba00 <__multiply+0x14c>)
 800b8ee:	4845      	ldr	r0, [pc, #276]	; (800ba04 <__multiply+0x150>)
 800b8f0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b8f4:	f000 fc8c 	bl	800c210 <__assert_func>
 800b8f8:	f100 0514 	add.w	r5, r0, #20
 800b8fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b900:	462b      	mov	r3, r5
 800b902:	2200      	movs	r2, #0
 800b904:	4543      	cmp	r3, r8
 800b906:	d321      	bcc.n	800b94c <__multiply+0x98>
 800b908:	f104 0314 	add.w	r3, r4, #20
 800b90c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b910:	f109 0314 	add.w	r3, r9, #20
 800b914:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b918:	9202      	str	r2, [sp, #8]
 800b91a:	1b3a      	subs	r2, r7, r4
 800b91c:	3a15      	subs	r2, #21
 800b91e:	f022 0203 	bic.w	r2, r2, #3
 800b922:	3204      	adds	r2, #4
 800b924:	f104 0115 	add.w	r1, r4, #21
 800b928:	428f      	cmp	r7, r1
 800b92a:	bf38      	it	cc
 800b92c:	2204      	movcc	r2, #4
 800b92e:	9201      	str	r2, [sp, #4]
 800b930:	9a02      	ldr	r2, [sp, #8]
 800b932:	9303      	str	r3, [sp, #12]
 800b934:	429a      	cmp	r2, r3
 800b936:	d80c      	bhi.n	800b952 <__multiply+0x9e>
 800b938:	2e00      	cmp	r6, #0
 800b93a:	dd03      	ble.n	800b944 <__multiply+0x90>
 800b93c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b940:	2b00      	cmp	r3, #0
 800b942:	d05b      	beq.n	800b9fc <__multiply+0x148>
 800b944:	6106      	str	r6, [r0, #16]
 800b946:	b005      	add	sp, #20
 800b948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b94c:	f843 2b04 	str.w	r2, [r3], #4
 800b950:	e7d8      	b.n	800b904 <__multiply+0x50>
 800b952:	f8b3 a000 	ldrh.w	sl, [r3]
 800b956:	f1ba 0f00 	cmp.w	sl, #0
 800b95a:	d024      	beq.n	800b9a6 <__multiply+0xf2>
 800b95c:	f104 0e14 	add.w	lr, r4, #20
 800b960:	46a9      	mov	r9, r5
 800b962:	f04f 0c00 	mov.w	ip, #0
 800b966:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b96a:	f8d9 1000 	ldr.w	r1, [r9]
 800b96e:	fa1f fb82 	uxth.w	fp, r2
 800b972:	b289      	uxth	r1, r1
 800b974:	fb0a 110b 	mla	r1, sl, fp, r1
 800b978:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b97c:	f8d9 2000 	ldr.w	r2, [r9]
 800b980:	4461      	add	r1, ip
 800b982:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b986:	fb0a c20b 	mla	r2, sl, fp, ip
 800b98a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b98e:	b289      	uxth	r1, r1
 800b990:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b994:	4577      	cmp	r7, lr
 800b996:	f849 1b04 	str.w	r1, [r9], #4
 800b99a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b99e:	d8e2      	bhi.n	800b966 <__multiply+0xb2>
 800b9a0:	9a01      	ldr	r2, [sp, #4]
 800b9a2:	f845 c002 	str.w	ip, [r5, r2]
 800b9a6:	9a03      	ldr	r2, [sp, #12]
 800b9a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b9ac:	3304      	adds	r3, #4
 800b9ae:	f1b9 0f00 	cmp.w	r9, #0
 800b9b2:	d021      	beq.n	800b9f8 <__multiply+0x144>
 800b9b4:	6829      	ldr	r1, [r5, #0]
 800b9b6:	f104 0c14 	add.w	ip, r4, #20
 800b9ba:	46ae      	mov	lr, r5
 800b9bc:	f04f 0a00 	mov.w	sl, #0
 800b9c0:	f8bc b000 	ldrh.w	fp, [ip]
 800b9c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b9c8:	fb09 220b 	mla	r2, r9, fp, r2
 800b9cc:	4452      	add	r2, sl
 800b9ce:	b289      	uxth	r1, r1
 800b9d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b9d4:	f84e 1b04 	str.w	r1, [lr], #4
 800b9d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b9dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b9e0:	f8be 1000 	ldrh.w	r1, [lr]
 800b9e4:	fb09 110a 	mla	r1, r9, sl, r1
 800b9e8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b9ec:	4567      	cmp	r7, ip
 800b9ee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b9f2:	d8e5      	bhi.n	800b9c0 <__multiply+0x10c>
 800b9f4:	9a01      	ldr	r2, [sp, #4]
 800b9f6:	50a9      	str	r1, [r5, r2]
 800b9f8:	3504      	adds	r5, #4
 800b9fa:	e799      	b.n	800b930 <__multiply+0x7c>
 800b9fc:	3e01      	subs	r6, #1
 800b9fe:	e79b      	b.n	800b938 <__multiply+0x84>
 800ba00:	0800e1c4 	.word	0x0800e1c4
 800ba04:	0800e1d5 	.word	0x0800e1d5

0800ba08 <__pow5mult>:
 800ba08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba0c:	4615      	mov	r5, r2
 800ba0e:	f012 0203 	ands.w	r2, r2, #3
 800ba12:	4606      	mov	r6, r0
 800ba14:	460f      	mov	r7, r1
 800ba16:	d007      	beq.n	800ba28 <__pow5mult+0x20>
 800ba18:	4c25      	ldr	r4, [pc, #148]	; (800bab0 <__pow5mult+0xa8>)
 800ba1a:	3a01      	subs	r2, #1
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba22:	f7ff fe9d 	bl	800b760 <__multadd>
 800ba26:	4607      	mov	r7, r0
 800ba28:	10ad      	asrs	r5, r5, #2
 800ba2a:	d03d      	beq.n	800baa8 <__pow5mult+0xa0>
 800ba2c:	69f4      	ldr	r4, [r6, #28]
 800ba2e:	b97c      	cbnz	r4, 800ba50 <__pow5mult+0x48>
 800ba30:	2010      	movs	r0, #16
 800ba32:	f7ff fd7f 	bl	800b534 <malloc>
 800ba36:	4602      	mov	r2, r0
 800ba38:	61f0      	str	r0, [r6, #28]
 800ba3a:	b928      	cbnz	r0, 800ba48 <__pow5mult+0x40>
 800ba3c:	4b1d      	ldr	r3, [pc, #116]	; (800bab4 <__pow5mult+0xac>)
 800ba3e:	481e      	ldr	r0, [pc, #120]	; (800bab8 <__pow5mult+0xb0>)
 800ba40:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ba44:	f000 fbe4 	bl	800c210 <__assert_func>
 800ba48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba4c:	6004      	str	r4, [r0, #0]
 800ba4e:	60c4      	str	r4, [r0, #12]
 800ba50:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ba54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba58:	b94c      	cbnz	r4, 800ba6e <__pow5mult+0x66>
 800ba5a:	f240 2171 	movw	r1, #625	; 0x271
 800ba5e:	4630      	mov	r0, r6
 800ba60:	f7ff ff12 	bl	800b888 <__i2b>
 800ba64:	2300      	movs	r3, #0
 800ba66:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	6003      	str	r3, [r0, #0]
 800ba6e:	f04f 0900 	mov.w	r9, #0
 800ba72:	07eb      	lsls	r3, r5, #31
 800ba74:	d50a      	bpl.n	800ba8c <__pow5mult+0x84>
 800ba76:	4639      	mov	r1, r7
 800ba78:	4622      	mov	r2, r4
 800ba7a:	4630      	mov	r0, r6
 800ba7c:	f7ff ff1a 	bl	800b8b4 <__multiply>
 800ba80:	4639      	mov	r1, r7
 800ba82:	4680      	mov	r8, r0
 800ba84:	4630      	mov	r0, r6
 800ba86:	f7ff fe49 	bl	800b71c <_Bfree>
 800ba8a:	4647      	mov	r7, r8
 800ba8c:	106d      	asrs	r5, r5, #1
 800ba8e:	d00b      	beq.n	800baa8 <__pow5mult+0xa0>
 800ba90:	6820      	ldr	r0, [r4, #0]
 800ba92:	b938      	cbnz	r0, 800baa4 <__pow5mult+0x9c>
 800ba94:	4622      	mov	r2, r4
 800ba96:	4621      	mov	r1, r4
 800ba98:	4630      	mov	r0, r6
 800ba9a:	f7ff ff0b 	bl	800b8b4 <__multiply>
 800ba9e:	6020      	str	r0, [r4, #0]
 800baa0:	f8c0 9000 	str.w	r9, [r0]
 800baa4:	4604      	mov	r4, r0
 800baa6:	e7e4      	b.n	800ba72 <__pow5mult+0x6a>
 800baa8:	4638      	mov	r0, r7
 800baaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baae:	bf00      	nop
 800bab0:	0800e320 	.word	0x0800e320
 800bab4:	0800e155 	.word	0x0800e155
 800bab8:	0800e1d5 	.word	0x0800e1d5

0800babc <__lshift>:
 800babc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bac0:	460c      	mov	r4, r1
 800bac2:	6849      	ldr	r1, [r1, #4]
 800bac4:	6923      	ldr	r3, [r4, #16]
 800bac6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800baca:	68a3      	ldr	r3, [r4, #8]
 800bacc:	4607      	mov	r7, r0
 800bace:	4691      	mov	r9, r2
 800bad0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bad4:	f108 0601 	add.w	r6, r8, #1
 800bad8:	42b3      	cmp	r3, r6
 800bada:	db0b      	blt.n	800baf4 <__lshift+0x38>
 800badc:	4638      	mov	r0, r7
 800bade:	f7ff fddd 	bl	800b69c <_Balloc>
 800bae2:	4605      	mov	r5, r0
 800bae4:	b948      	cbnz	r0, 800bafa <__lshift+0x3e>
 800bae6:	4602      	mov	r2, r0
 800bae8:	4b28      	ldr	r3, [pc, #160]	; (800bb8c <__lshift+0xd0>)
 800baea:	4829      	ldr	r0, [pc, #164]	; (800bb90 <__lshift+0xd4>)
 800baec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800baf0:	f000 fb8e 	bl	800c210 <__assert_func>
 800baf4:	3101      	adds	r1, #1
 800baf6:	005b      	lsls	r3, r3, #1
 800baf8:	e7ee      	b.n	800bad8 <__lshift+0x1c>
 800bafa:	2300      	movs	r3, #0
 800bafc:	f100 0114 	add.w	r1, r0, #20
 800bb00:	f100 0210 	add.w	r2, r0, #16
 800bb04:	4618      	mov	r0, r3
 800bb06:	4553      	cmp	r3, sl
 800bb08:	db33      	blt.n	800bb72 <__lshift+0xb6>
 800bb0a:	6920      	ldr	r0, [r4, #16]
 800bb0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb10:	f104 0314 	add.w	r3, r4, #20
 800bb14:	f019 091f 	ands.w	r9, r9, #31
 800bb18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bb20:	d02b      	beq.n	800bb7a <__lshift+0xbe>
 800bb22:	f1c9 0e20 	rsb	lr, r9, #32
 800bb26:	468a      	mov	sl, r1
 800bb28:	2200      	movs	r2, #0
 800bb2a:	6818      	ldr	r0, [r3, #0]
 800bb2c:	fa00 f009 	lsl.w	r0, r0, r9
 800bb30:	4310      	orrs	r0, r2
 800bb32:	f84a 0b04 	str.w	r0, [sl], #4
 800bb36:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb3a:	459c      	cmp	ip, r3
 800bb3c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bb40:	d8f3      	bhi.n	800bb2a <__lshift+0x6e>
 800bb42:	ebac 0304 	sub.w	r3, ip, r4
 800bb46:	3b15      	subs	r3, #21
 800bb48:	f023 0303 	bic.w	r3, r3, #3
 800bb4c:	3304      	adds	r3, #4
 800bb4e:	f104 0015 	add.w	r0, r4, #21
 800bb52:	4584      	cmp	ip, r0
 800bb54:	bf38      	it	cc
 800bb56:	2304      	movcc	r3, #4
 800bb58:	50ca      	str	r2, [r1, r3]
 800bb5a:	b10a      	cbz	r2, 800bb60 <__lshift+0xa4>
 800bb5c:	f108 0602 	add.w	r6, r8, #2
 800bb60:	3e01      	subs	r6, #1
 800bb62:	4638      	mov	r0, r7
 800bb64:	612e      	str	r6, [r5, #16]
 800bb66:	4621      	mov	r1, r4
 800bb68:	f7ff fdd8 	bl	800b71c <_Bfree>
 800bb6c:	4628      	mov	r0, r5
 800bb6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb72:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb76:	3301      	adds	r3, #1
 800bb78:	e7c5      	b.n	800bb06 <__lshift+0x4a>
 800bb7a:	3904      	subs	r1, #4
 800bb7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb80:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb84:	459c      	cmp	ip, r3
 800bb86:	d8f9      	bhi.n	800bb7c <__lshift+0xc0>
 800bb88:	e7ea      	b.n	800bb60 <__lshift+0xa4>
 800bb8a:	bf00      	nop
 800bb8c:	0800e1c4 	.word	0x0800e1c4
 800bb90:	0800e1d5 	.word	0x0800e1d5

0800bb94 <__mcmp>:
 800bb94:	b530      	push	{r4, r5, lr}
 800bb96:	6902      	ldr	r2, [r0, #16]
 800bb98:	690c      	ldr	r4, [r1, #16]
 800bb9a:	1b12      	subs	r2, r2, r4
 800bb9c:	d10e      	bne.n	800bbbc <__mcmp+0x28>
 800bb9e:	f100 0314 	add.w	r3, r0, #20
 800bba2:	3114      	adds	r1, #20
 800bba4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bba8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bbac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bbb0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bbb4:	42a5      	cmp	r5, r4
 800bbb6:	d003      	beq.n	800bbc0 <__mcmp+0x2c>
 800bbb8:	d305      	bcc.n	800bbc6 <__mcmp+0x32>
 800bbba:	2201      	movs	r2, #1
 800bbbc:	4610      	mov	r0, r2
 800bbbe:	bd30      	pop	{r4, r5, pc}
 800bbc0:	4283      	cmp	r3, r0
 800bbc2:	d3f3      	bcc.n	800bbac <__mcmp+0x18>
 800bbc4:	e7fa      	b.n	800bbbc <__mcmp+0x28>
 800bbc6:	f04f 32ff 	mov.w	r2, #4294967295
 800bbca:	e7f7      	b.n	800bbbc <__mcmp+0x28>

0800bbcc <__mdiff>:
 800bbcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd0:	460c      	mov	r4, r1
 800bbd2:	4606      	mov	r6, r0
 800bbd4:	4611      	mov	r1, r2
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	4690      	mov	r8, r2
 800bbda:	f7ff ffdb 	bl	800bb94 <__mcmp>
 800bbde:	1e05      	subs	r5, r0, #0
 800bbe0:	d110      	bne.n	800bc04 <__mdiff+0x38>
 800bbe2:	4629      	mov	r1, r5
 800bbe4:	4630      	mov	r0, r6
 800bbe6:	f7ff fd59 	bl	800b69c <_Balloc>
 800bbea:	b930      	cbnz	r0, 800bbfa <__mdiff+0x2e>
 800bbec:	4b3a      	ldr	r3, [pc, #232]	; (800bcd8 <__mdiff+0x10c>)
 800bbee:	4602      	mov	r2, r0
 800bbf0:	f240 2137 	movw	r1, #567	; 0x237
 800bbf4:	4839      	ldr	r0, [pc, #228]	; (800bcdc <__mdiff+0x110>)
 800bbf6:	f000 fb0b 	bl	800c210 <__assert_func>
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc04:	bfa4      	itt	ge
 800bc06:	4643      	movge	r3, r8
 800bc08:	46a0      	movge	r8, r4
 800bc0a:	4630      	mov	r0, r6
 800bc0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bc10:	bfa6      	itte	ge
 800bc12:	461c      	movge	r4, r3
 800bc14:	2500      	movge	r5, #0
 800bc16:	2501      	movlt	r5, #1
 800bc18:	f7ff fd40 	bl	800b69c <_Balloc>
 800bc1c:	b920      	cbnz	r0, 800bc28 <__mdiff+0x5c>
 800bc1e:	4b2e      	ldr	r3, [pc, #184]	; (800bcd8 <__mdiff+0x10c>)
 800bc20:	4602      	mov	r2, r0
 800bc22:	f240 2145 	movw	r1, #581	; 0x245
 800bc26:	e7e5      	b.n	800bbf4 <__mdiff+0x28>
 800bc28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bc2c:	6926      	ldr	r6, [r4, #16]
 800bc2e:	60c5      	str	r5, [r0, #12]
 800bc30:	f104 0914 	add.w	r9, r4, #20
 800bc34:	f108 0514 	add.w	r5, r8, #20
 800bc38:	f100 0e14 	add.w	lr, r0, #20
 800bc3c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bc40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bc44:	f108 0210 	add.w	r2, r8, #16
 800bc48:	46f2      	mov	sl, lr
 800bc4a:	2100      	movs	r1, #0
 800bc4c:	f859 3b04 	ldr.w	r3, [r9], #4
 800bc50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bc54:	fa11 f88b 	uxtah	r8, r1, fp
 800bc58:	b299      	uxth	r1, r3
 800bc5a:	0c1b      	lsrs	r3, r3, #16
 800bc5c:	eba8 0801 	sub.w	r8, r8, r1
 800bc60:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bc64:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bc68:	fa1f f888 	uxth.w	r8, r8
 800bc6c:	1419      	asrs	r1, r3, #16
 800bc6e:	454e      	cmp	r6, r9
 800bc70:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bc74:	f84a 3b04 	str.w	r3, [sl], #4
 800bc78:	d8e8      	bhi.n	800bc4c <__mdiff+0x80>
 800bc7a:	1b33      	subs	r3, r6, r4
 800bc7c:	3b15      	subs	r3, #21
 800bc7e:	f023 0303 	bic.w	r3, r3, #3
 800bc82:	3304      	adds	r3, #4
 800bc84:	3415      	adds	r4, #21
 800bc86:	42a6      	cmp	r6, r4
 800bc88:	bf38      	it	cc
 800bc8a:	2304      	movcc	r3, #4
 800bc8c:	441d      	add	r5, r3
 800bc8e:	4473      	add	r3, lr
 800bc90:	469e      	mov	lr, r3
 800bc92:	462e      	mov	r6, r5
 800bc94:	4566      	cmp	r6, ip
 800bc96:	d30e      	bcc.n	800bcb6 <__mdiff+0xea>
 800bc98:	f10c 0203 	add.w	r2, ip, #3
 800bc9c:	1b52      	subs	r2, r2, r5
 800bc9e:	f022 0203 	bic.w	r2, r2, #3
 800bca2:	3d03      	subs	r5, #3
 800bca4:	45ac      	cmp	ip, r5
 800bca6:	bf38      	it	cc
 800bca8:	2200      	movcc	r2, #0
 800bcaa:	4413      	add	r3, r2
 800bcac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bcb0:	b17a      	cbz	r2, 800bcd2 <__mdiff+0x106>
 800bcb2:	6107      	str	r7, [r0, #16]
 800bcb4:	e7a4      	b.n	800bc00 <__mdiff+0x34>
 800bcb6:	f856 8b04 	ldr.w	r8, [r6], #4
 800bcba:	fa11 f288 	uxtah	r2, r1, r8
 800bcbe:	1414      	asrs	r4, r2, #16
 800bcc0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bcc4:	b292      	uxth	r2, r2
 800bcc6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bcca:	f84e 2b04 	str.w	r2, [lr], #4
 800bcce:	1421      	asrs	r1, r4, #16
 800bcd0:	e7e0      	b.n	800bc94 <__mdiff+0xc8>
 800bcd2:	3f01      	subs	r7, #1
 800bcd4:	e7ea      	b.n	800bcac <__mdiff+0xe0>
 800bcd6:	bf00      	nop
 800bcd8:	0800e1c4 	.word	0x0800e1c4
 800bcdc:	0800e1d5 	.word	0x0800e1d5

0800bce0 <__d2b>:
 800bce0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bce4:	460f      	mov	r7, r1
 800bce6:	2101      	movs	r1, #1
 800bce8:	ec59 8b10 	vmov	r8, r9, d0
 800bcec:	4616      	mov	r6, r2
 800bcee:	f7ff fcd5 	bl	800b69c <_Balloc>
 800bcf2:	4604      	mov	r4, r0
 800bcf4:	b930      	cbnz	r0, 800bd04 <__d2b+0x24>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	4b24      	ldr	r3, [pc, #144]	; (800bd8c <__d2b+0xac>)
 800bcfa:	4825      	ldr	r0, [pc, #148]	; (800bd90 <__d2b+0xb0>)
 800bcfc:	f240 310f 	movw	r1, #783	; 0x30f
 800bd00:	f000 fa86 	bl	800c210 <__assert_func>
 800bd04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bd08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bd0c:	bb2d      	cbnz	r5, 800bd5a <__d2b+0x7a>
 800bd0e:	9301      	str	r3, [sp, #4]
 800bd10:	f1b8 0300 	subs.w	r3, r8, #0
 800bd14:	d026      	beq.n	800bd64 <__d2b+0x84>
 800bd16:	4668      	mov	r0, sp
 800bd18:	9300      	str	r3, [sp, #0]
 800bd1a:	f7ff fd87 	bl	800b82c <__lo0bits>
 800bd1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bd22:	b1e8      	cbz	r0, 800bd60 <__d2b+0x80>
 800bd24:	f1c0 0320 	rsb	r3, r0, #32
 800bd28:	fa02 f303 	lsl.w	r3, r2, r3
 800bd2c:	430b      	orrs	r3, r1
 800bd2e:	40c2      	lsrs	r2, r0
 800bd30:	6163      	str	r3, [r4, #20]
 800bd32:	9201      	str	r2, [sp, #4]
 800bd34:	9b01      	ldr	r3, [sp, #4]
 800bd36:	61a3      	str	r3, [r4, #24]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	bf14      	ite	ne
 800bd3c:	2202      	movne	r2, #2
 800bd3e:	2201      	moveq	r2, #1
 800bd40:	6122      	str	r2, [r4, #16]
 800bd42:	b1bd      	cbz	r5, 800bd74 <__d2b+0x94>
 800bd44:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bd48:	4405      	add	r5, r0
 800bd4a:	603d      	str	r5, [r7, #0]
 800bd4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bd50:	6030      	str	r0, [r6, #0]
 800bd52:	4620      	mov	r0, r4
 800bd54:	b003      	add	sp, #12
 800bd56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd5e:	e7d6      	b.n	800bd0e <__d2b+0x2e>
 800bd60:	6161      	str	r1, [r4, #20]
 800bd62:	e7e7      	b.n	800bd34 <__d2b+0x54>
 800bd64:	a801      	add	r0, sp, #4
 800bd66:	f7ff fd61 	bl	800b82c <__lo0bits>
 800bd6a:	9b01      	ldr	r3, [sp, #4]
 800bd6c:	6163      	str	r3, [r4, #20]
 800bd6e:	3020      	adds	r0, #32
 800bd70:	2201      	movs	r2, #1
 800bd72:	e7e5      	b.n	800bd40 <__d2b+0x60>
 800bd74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bd78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bd7c:	6038      	str	r0, [r7, #0]
 800bd7e:	6918      	ldr	r0, [r3, #16]
 800bd80:	f7ff fd34 	bl	800b7ec <__hi0bits>
 800bd84:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bd88:	e7e2      	b.n	800bd50 <__d2b+0x70>
 800bd8a:	bf00      	nop
 800bd8c:	0800e1c4 	.word	0x0800e1c4
 800bd90:	0800e1d5 	.word	0x0800e1d5

0800bd94 <__ssputs_r>:
 800bd94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd98:	688e      	ldr	r6, [r1, #8]
 800bd9a:	461f      	mov	r7, r3
 800bd9c:	42be      	cmp	r6, r7
 800bd9e:	680b      	ldr	r3, [r1, #0]
 800bda0:	4682      	mov	sl, r0
 800bda2:	460c      	mov	r4, r1
 800bda4:	4690      	mov	r8, r2
 800bda6:	d82c      	bhi.n	800be02 <__ssputs_r+0x6e>
 800bda8:	898a      	ldrh	r2, [r1, #12]
 800bdaa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bdae:	d026      	beq.n	800bdfe <__ssputs_r+0x6a>
 800bdb0:	6965      	ldr	r5, [r4, #20]
 800bdb2:	6909      	ldr	r1, [r1, #16]
 800bdb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bdb8:	eba3 0901 	sub.w	r9, r3, r1
 800bdbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bdc0:	1c7b      	adds	r3, r7, #1
 800bdc2:	444b      	add	r3, r9
 800bdc4:	106d      	asrs	r5, r5, #1
 800bdc6:	429d      	cmp	r5, r3
 800bdc8:	bf38      	it	cc
 800bdca:	461d      	movcc	r5, r3
 800bdcc:	0553      	lsls	r3, r2, #21
 800bdce:	d527      	bpl.n	800be20 <__ssputs_r+0x8c>
 800bdd0:	4629      	mov	r1, r5
 800bdd2:	f7ff fbd7 	bl	800b584 <_malloc_r>
 800bdd6:	4606      	mov	r6, r0
 800bdd8:	b360      	cbz	r0, 800be34 <__ssputs_r+0xa0>
 800bdda:	6921      	ldr	r1, [r4, #16]
 800bddc:	464a      	mov	r2, r9
 800bdde:	f000 fa09 	bl	800c1f4 <memcpy>
 800bde2:	89a3      	ldrh	r3, [r4, #12]
 800bde4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bde8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdec:	81a3      	strh	r3, [r4, #12]
 800bdee:	6126      	str	r6, [r4, #16]
 800bdf0:	6165      	str	r5, [r4, #20]
 800bdf2:	444e      	add	r6, r9
 800bdf4:	eba5 0509 	sub.w	r5, r5, r9
 800bdf8:	6026      	str	r6, [r4, #0]
 800bdfa:	60a5      	str	r5, [r4, #8]
 800bdfc:	463e      	mov	r6, r7
 800bdfe:	42be      	cmp	r6, r7
 800be00:	d900      	bls.n	800be04 <__ssputs_r+0x70>
 800be02:	463e      	mov	r6, r7
 800be04:	6820      	ldr	r0, [r4, #0]
 800be06:	4632      	mov	r2, r6
 800be08:	4641      	mov	r1, r8
 800be0a:	f000 f9c9 	bl	800c1a0 <memmove>
 800be0e:	68a3      	ldr	r3, [r4, #8]
 800be10:	1b9b      	subs	r3, r3, r6
 800be12:	60a3      	str	r3, [r4, #8]
 800be14:	6823      	ldr	r3, [r4, #0]
 800be16:	4433      	add	r3, r6
 800be18:	6023      	str	r3, [r4, #0]
 800be1a:	2000      	movs	r0, #0
 800be1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be20:	462a      	mov	r2, r5
 800be22:	f000 fa3b 	bl	800c29c <_realloc_r>
 800be26:	4606      	mov	r6, r0
 800be28:	2800      	cmp	r0, #0
 800be2a:	d1e0      	bne.n	800bdee <__ssputs_r+0x5a>
 800be2c:	6921      	ldr	r1, [r4, #16]
 800be2e:	4650      	mov	r0, sl
 800be30:	f7ff fb34 	bl	800b49c <_free_r>
 800be34:	230c      	movs	r3, #12
 800be36:	f8ca 3000 	str.w	r3, [sl]
 800be3a:	89a3      	ldrh	r3, [r4, #12]
 800be3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be40:	81a3      	strh	r3, [r4, #12]
 800be42:	f04f 30ff 	mov.w	r0, #4294967295
 800be46:	e7e9      	b.n	800be1c <__ssputs_r+0x88>

0800be48 <_svfiprintf_r>:
 800be48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be4c:	4698      	mov	r8, r3
 800be4e:	898b      	ldrh	r3, [r1, #12]
 800be50:	061b      	lsls	r3, r3, #24
 800be52:	b09d      	sub	sp, #116	; 0x74
 800be54:	4607      	mov	r7, r0
 800be56:	460d      	mov	r5, r1
 800be58:	4614      	mov	r4, r2
 800be5a:	d50e      	bpl.n	800be7a <_svfiprintf_r+0x32>
 800be5c:	690b      	ldr	r3, [r1, #16]
 800be5e:	b963      	cbnz	r3, 800be7a <_svfiprintf_r+0x32>
 800be60:	2140      	movs	r1, #64	; 0x40
 800be62:	f7ff fb8f 	bl	800b584 <_malloc_r>
 800be66:	6028      	str	r0, [r5, #0]
 800be68:	6128      	str	r0, [r5, #16]
 800be6a:	b920      	cbnz	r0, 800be76 <_svfiprintf_r+0x2e>
 800be6c:	230c      	movs	r3, #12
 800be6e:	603b      	str	r3, [r7, #0]
 800be70:	f04f 30ff 	mov.w	r0, #4294967295
 800be74:	e0d0      	b.n	800c018 <_svfiprintf_r+0x1d0>
 800be76:	2340      	movs	r3, #64	; 0x40
 800be78:	616b      	str	r3, [r5, #20]
 800be7a:	2300      	movs	r3, #0
 800be7c:	9309      	str	r3, [sp, #36]	; 0x24
 800be7e:	2320      	movs	r3, #32
 800be80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be84:	f8cd 800c 	str.w	r8, [sp, #12]
 800be88:	2330      	movs	r3, #48	; 0x30
 800be8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c030 <_svfiprintf_r+0x1e8>
 800be8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be92:	f04f 0901 	mov.w	r9, #1
 800be96:	4623      	mov	r3, r4
 800be98:	469a      	mov	sl, r3
 800be9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be9e:	b10a      	cbz	r2, 800bea4 <_svfiprintf_r+0x5c>
 800bea0:	2a25      	cmp	r2, #37	; 0x25
 800bea2:	d1f9      	bne.n	800be98 <_svfiprintf_r+0x50>
 800bea4:	ebba 0b04 	subs.w	fp, sl, r4
 800bea8:	d00b      	beq.n	800bec2 <_svfiprintf_r+0x7a>
 800beaa:	465b      	mov	r3, fp
 800beac:	4622      	mov	r2, r4
 800beae:	4629      	mov	r1, r5
 800beb0:	4638      	mov	r0, r7
 800beb2:	f7ff ff6f 	bl	800bd94 <__ssputs_r>
 800beb6:	3001      	adds	r0, #1
 800beb8:	f000 80a9 	beq.w	800c00e <_svfiprintf_r+0x1c6>
 800bebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bebe:	445a      	add	r2, fp
 800bec0:	9209      	str	r2, [sp, #36]	; 0x24
 800bec2:	f89a 3000 	ldrb.w	r3, [sl]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	f000 80a1 	beq.w	800c00e <_svfiprintf_r+0x1c6>
 800becc:	2300      	movs	r3, #0
 800bece:	f04f 32ff 	mov.w	r2, #4294967295
 800bed2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bed6:	f10a 0a01 	add.w	sl, sl, #1
 800beda:	9304      	str	r3, [sp, #16]
 800bedc:	9307      	str	r3, [sp, #28]
 800bede:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bee2:	931a      	str	r3, [sp, #104]	; 0x68
 800bee4:	4654      	mov	r4, sl
 800bee6:	2205      	movs	r2, #5
 800bee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beec:	4850      	ldr	r0, [pc, #320]	; (800c030 <_svfiprintf_r+0x1e8>)
 800beee:	f7f4 f96f 	bl	80001d0 <memchr>
 800bef2:	9a04      	ldr	r2, [sp, #16]
 800bef4:	b9d8      	cbnz	r0, 800bf2e <_svfiprintf_r+0xe6>
 800bef6:	06d0      	lsls	r0, r2, #27
 800bef8:	bf44      	itt	mi
 800befa:	2320      	movmi	r3, #32
 800befc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf00:	0711      	lsls	r1, r2, #28
 800bf02:	bf44      	itt	mi
 800bf04:	232b      	movmi	r3, #43	; 0x2b
 800bf06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf0a:	f89a 3000 	ldrb.w	r3, [sl]
 800bf0e:	2b2a      	cmp	r3, #42	; 0x2a
 800bf10:	d015      	beq.n	800bf3e <_svfiprintf_r+0xf6>
 800bf12:	9a07      	ldr	r2, [sp, #28]
 800bf14:	4654      	mov	r4, sl
 800bf16:	2000      	movs	r0, #0
 800bf18:	f04f 0c0a 	mov.w	ip, #10
 800bf1c:	4621      	mov	r1, r4
 800bf1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf22:	3b30      	subs	r3, #48	; 0x30
 800bf24:	2b09      	cmp	r3, #9
 800bf26:	d94d      	bls.n	800bfc4 <_svfiprintf_r+0x17c>
 800bf28:	b1b0      	cbz	r0, 800bf58 <_svfiprintf_r+0x110>
 800bf2a:	9207      	str	r2, [sp, #28]
 800bf2c:	e014      	b.n	800bf58 <_svfiprintf_r+0x110>
 800bf2e:	eba0 0308 	sub.w	r3, r0, r8
 800bf32:	fa09 f303 	lsl.w	r3, r9, r3
 800bf36:	4313      	orrs	r3, r2
 800bf38:	9304      	str	r3, [sp, #16]
 800bf3a:	46a2      	mov	sl, r4
 800bf3c:	e7d2      	b.n	800bee4 <_svfiprintf_r+0x9c>
 800bf3e:	9b03      	ldr	r3, [sp, #12]
 800bf40:	1d19      	adds	r1, r3, #4
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	9103      	str	r1, [sp, #12]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	bfbb      	ittet	lt
 800bf4a:	425b      	neglt	r3, r3
 800bf4c:	f042 0202 	orrlt.w	r2, r2, #2
 800bf50:	9307      	strge	r3, [sp, #28]
 800bf52:	9307      	strlt	r3, [sp, #28]
 800bf54:	bfb8      	it	lt
 800bf56:	9204      	strlt	r2, [sp, #16]
 800bf58:	7823      	ldrb	r3, [r4, #0]
 800bf5a:	2b2e      	cmp	r3, #46	; 0x2e
 800bf5c:	d10c      	bne.n	800bf78 <_svfiprintf_r+0x130>
 800bf5e:	7863      	ldrb	r3, [r4, #1]
 800bf60:	2b2a      	cmp	r3, #42	; 0x2a
 800bf62:	d134      	bne.n	800bfce <_svfiprintf_r+0x186>
 800bf64:	9b03      	ldr	r3, [sp, #12]
 800bf66:	1d1a      	adds	r2, r3, #4
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	9203      	str	r2, [sp, #12]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	bfb8      	it	lt
 800bf70:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf74:	3402      	adds	r4, #2
 800bf76:	9305      	str	r3, [sp, #20]
 800bf78:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c040 <_svfiprintf_r+0x1f8>
 800bf7c:	7821      	ldrb	r1, [r4, #0]
 800bf7e:	2203      	movs	r2, #3
 800bf80:	4650      	mov	r0, sl
 800bf82:	f7f4 f925 	bl	80001d0 <memchr>
 800bf86:	b138      	cbz	r0, 800bf98 <_svfiprintf_r+0x150>
 800bf88:	9b04      	ldr	r3, [sp, #16]
 800bf8a:	eba0 000a 	sub.w	r0, r0, sl
 800bf8e:	2240      	movs	r2, #64	; 0x40
 800bf90:	4082      	lsls	r2, r0
 800bf92:	4313      	orrs	r3, r2
 800bf94:	3401      	adds	r4, #1
 800bf96:	9304      	str	r3, [sp, #16]
 800bf98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf9c:	4825      	ldr	r0, [pc, #148]	; (800c034 <_svfiprintf_r+0x1ec>)
 800bf9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfa2:	2206      	movs	r2, #6
 800bfa4:	f7f4 f914 	bl	80001d0 <memchr>
 800bfa8:	2800      	cmp	r0, #0
 800bfaa:	d038      	beq.n	800c01e <_svfiprintf_r+0x1d6>
 800bfac:	4b22      	ldr	r3, [pc, #136]	; (800c038 <_svfiprintf_r+0x1f0>)
 800bfae:	bb1b      	cbnz	r3, 800bff8 <_svfiprintf_r+0x1b0>
 800bfb0:	9b03      	ldr	r3, [sp, #12]
 800bfb2:	3307      	adds	r3, #7
 800bfb4:	f023 0307 	bic.w	r3, r3, #7
 800bfb8:	3308      	adds	r3, #8
 800bfba:	9303      	str	r3, [sp, #12]
 800bfbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfbe:	4433      	add	r3, r6
 800bfc0:	9309      	str	r3, [sp, #36]	; 0x24
 800bfc2:	e768      	b.n	800be96 <_svfiprintf_r+0x4e>
 800bfc4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfc8:	460c      	mov	r4, r1
 800bfca:	2001      	movs	r0, #1
 800bfcc:	e7a6      	b.n	800bf1c <_svfiprintf_r+0xd4>
 800bfce:	2300      	movs	r3, #0
 800bfd0:	3401      	adds	r4, #1
 800bfd2:	9305      	str	r3, [sp, #20]
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	f04f 0c0a 	mov.w	ip, #10
 800bfda:	4620      	mov	r0, r4
 800bfdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfe0:	3a30      	subs	r2, #48	; 0x30
 800bfe2:	2a09      	cmp	r2, #9
 800bfe4:	d903      	bls.n	800bfee <_svfiprintf_r+0x1a6>
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d0c6      	beq.n	800bf78 <_svfiprintf_r+0x130>
 800bfea:	9105      	str	r1, [sp, #20]
 800bfec:	e7c4      	b.n	800bf78 <_svfiprintf_r+0x130>
 800bfee:	fb0c 2101 	mla	r1, ip, r1, r2
 800bff2:	4604      	mov	r4, r0
 800bff4:	2301      	movs	r3, #1
 800bff6:	e7f0      	b.n	800bfda <_svfiprintf_r+0x192>
 800bff8:	ab03      	add	r3, sp, #12
 800bffa:	9300      	str	r3, [sp, #0]
 800bffc:	462a      	mov	r2, r5
 800bffe:	4b0f      	ldr	r3, [pc, #60]	; (800c03c <_svfiprintf_r+0x1f4>)
 800c000:	a904      	add	r1, sp, #16
 800c002:	4638      	mov	r0, r7
 800c004:	f7fd fe42 	bl	8009c8c <_printf_float>
 800c008:	1c42      	adds	r2, r0, #1
 800c00a:	4606      	mov	r6, r0
 800c00c:	d1d6      	bne.n	800bfbc <_svfiprintf_r+0x174>
 800c00e:	89ab      	ldrh	r3, [r5, #12]
 800c010:	065b      	lsls	r3, r3, #25
 800c012:	f53f af2d 	bmi.w	800be70 <_svfiprintf_r+0x28>
 800c016:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c018:	b01d      	add	sp, #116	; 0x74
 800c01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c01e:	ab03      	add	r3, sp, #12
 800c020:	9300      	str	r3, [sp, #0]
 800c022:	462a      	mov	r2, r5
 800c024:	4b05      	ldr	r3, [pc, #20]	; (800c03c <_svfiprintf_r+0x1f4>)
 800c026:	a904      	add	r1, sp, #16
 800c028:	4638      	mov	r0, r7
 800c02a:	f7fe f8d3 	bl	800a1d4 <_printf_i>
 800c02e:	e7eb      	b.n	800c008 <_svfiprintf_r+0x1c0>
 800c030:	0800e32c 	.word	0x0800e32c
 800c034:	0800e336 	.word	0x0800e336
 800c038:	08009c8d 	.word	0x08009c8d
 800c03c:	0800bd95 	.word	0x0800bd95
 800c040:	0800e332 	.word	0x0800e332

0800c044 <__sflush_r>:
 800c044:	898a      	ldrh	r2, [r1, #12]
 800c046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c04a:	4605      	mov	r5, r0
 800c04c:	0710      	lsls	r0, r2, #28
 800c04e:	460c      	mov	r4, r1
 800c050:	d458      	bmi.n	800c104 <__sflush_r+0xc0>
 800c052:	684b      	ldr	r3, [r1, #4]
 800c054:	2b00      	cmp	r3, #0
 800c056:	dc05      	bgt.n	800c064 <__sflush_r+0x20>
 800c058:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	dc02      	bgt.n	800c064 <__sflush_r+0x20>
 800c05e:	2000      	movs	r0, #0
 800c060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c064:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c066:	2e00      	cmp	r6, #0
 800c068:	d0f9      	beq.n	800c05e <__sflush_r+0x1a>
 800c06a:	2300      	movs	r3, #0
 800c06c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c070:	682f      	ldr	r7, [r5, #0]
 800c072:	6a21      	ldr	r1, [r4, #32]
 800c074:	602b      	str	r3, [r5, #0]
 800c076:	d032      	beq.n	800c0de <__sflush_r+0x9a>
 800c078:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c07a:	89a3      	ldrh	r3, [r4, #12]
 800c07c:	075a      	lsls	r2, r3, #29
 800c07e:	d505      	bpl.n	800c08c <__sflush_r+0x48>
 800c080:	6863      	ldr	r3, [r4, #4]
 800c082:	1ac0      	subs	r0, r0, r3
 800c084:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c086:	b10b      	cbz	r3, 800c08c <__sflush_r+0x48>
 800c088:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c08a:	1ac0      	subs	r0, r0, r3
 800c08c:	2300      	movs	r3, #0
 800c08e:	4602      	mov	r2, r0
 800c090:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c092:	6a21      	ldr	r1, [r4, #32]
 800c094:	4628      	mov	r0, r5
 800c096:	47b0      	blx	r6
 800c098:	1c43      	adds	r3, r0, #1
 800c09a:	89a3      	ldrh	r3, [r4, #12]
 800c09c:	d106      	bne.n	800c0ac <__sflush_r+0x68>
 800c09e:	6829      	ldr	r1, [r5, #0]
 800c0a0:	291d      	cmp	r1, #29
 800c0a2:	d82b      	bhi.n	800c0fc <__sflush_r+0xb8>
 800c0a4:	4a29      	ldr	r2, [pc, #164]	; (800c14c <__sflush_r+0x108>)
 800c0a6:	410a      	asrs	r2, r1
 800c0a8:	07d6      	lsls	r6, r2, #31
 800c0aa:	d427      	bmi.n	800c0fc <__sflush_r+0xb8>
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	6062      	str	r2, [r4, #4]
 800c0b0:	04d9      	lsls	r1, r3, #19
 800c0b2:	6922      	ldr	r2, [r4, #16]
 800c0b4:	6022      	str	r2, [r4, #0]
 800c0b6:	d504      	bpl.n	800c0c2 <__sflush_r+0x7e>
 800c0b8:	1c42      	adds	r2, r0, #1
 800c0ba:	d101      	bne.n	800c0c0 <__sflush_r+0x7c>
 800c0bc:	682b      	ldr	r3, [r5, #0]
 800c0be:	b903      	cbnz	r3, 800c0c2 <__sflush_r+0x7e>
 800c0c0:	6560      	str	r0, [r4, #84]	; 0x54
 800c0c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0c4:	602f      	str	r7, [r5, #0]
 800c0c6:	2900      	cmp	r1, #0
 800c0c8:	d0c9      	beq.n	800c05e <__sflush_r+0x1a>
 800c0ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0ce:	4299      	cmp	r1, r3
 800c0d0:	d002      	beq.n	800c0d8 <__sflush_r+0x94>
 800c0d2:	4628      	mov	r0, r5
 800c0d4:	f7ff f9e2 	bl	800b49c <_free_r>
 800c0d8:	2000      	movs	r0, #0
 800c0da:	6360      	str	r0, [r4, #52]	; 0x34
 800c0dc:	e7c0      	b.n	800c060 <__sflush_r+0x1c>
 800c0de:	2301      	movs	r3, #1
 800c0e0:	4628      	mov	r0, r5
 800c0e2:	47b0      	blx	r6
 800c0e4:	1c41      	adds	r1, r0, #1
 800c0e6:	d1c8      	bne.n	800c07a <__sflush_r+0x36>
 800c0e8:	682b      	ldr	r3, [r5, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d0c5      	beq.n	800c07a <__sflush_r+0x36>
 800c0ee:	2b1d      	cmp	r3, #29
 800c0f0:	d001      	beq.n	800c0f6 <__sflush_r+0xb2>
 800c0f2:	2b16      	cmp	r3, #22
 800c0f4:	d101      	bne.n	800c0fa <__sflush_r+0xb6>
 800c0f6:	602f      	str	r7, [r5, #0]
 800c0f8:	e7b1      	b.n	800c05e <__sflush_r+0x1a>
 800c0fa:	89a3      	ldrh	r3, [r4, #12]
 800c0fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c100:	81a3      	strh	r3, [r4, #12]
 800c102:	e7ad      	b.n	800c060 <__sflush_r+0x1c>
 800c104:	690f      	ldr	r7, [r1, #16]
 800c106:	2f00      	cmp	r7, #0
 800c108:	d0a9      	beq.n	800c05e <__sflush_r+0x1a>
 800c10a:	0793      	lsls	r3, r2, #30
 800c10c:	680e      	ldr	r6, [r1, #0]
 800c10e:	bf08      	it	eq
 800c110:	694b      	ldreq	r3, [r1, #20]
 800c112:	600f      	str	r7, [r1, #0]
 800c114:	bf18      	it	ne
 800c116:	2300      	movne	r3, #0
 800c118:	eba6 0807 	sub.w	r8, r6, r7
 800c11c:	608b      	str	r3, [r1, #8]
 800c11e:	f1b8 0f00 	cmp.w	r8, #0
 800c122:	dd9c      	ble.n	800c05e <__sflush_r+0x1a>
 800c124:	6a21      	ldr	r1, [r4, #32]
 800c126:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c128:	4643      	mov	r3, r8
 800c12a:	463a      	mov	r2, r7
 800c12c:	4628      	mov	r0, r5
 800c12e:	47b0      	blx	r6
 800c130:	2800      	cmp	r0, #0
 800c132:	dc06      	bgt.n	800c142 <__sflush_r+0xfe>
 800c134:	89a3      	ldrh	r3, [r4, #12]
 800c136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c13a:	81a3      	strh	r3, [r4, #12]
 800c13c:	f04f 30ff 	mov.w	r0, #4294967295
 800c140:	e78e      	b.n	800c060 <__sflush_r+0x1c>
 800c142:	4407      	add	r7, r0
 800c144:	eba8 0800 	sub.w	r8, r8, r0
 800c148:	e7e9      	b.n	800c11e <__sflush_r+0xda>
 800c14a:	bf00      	nop
 800c14c:	dfbffffe 	.word	0xdfbffffe

0800c150 <_fflush_r>:
 800c150:	b538      	push	{r3, r4, r5, lr}
 800c152:	690b      	ldr	r3, [r1, #16]
 800c154:	4605      	mov	r5, r0
 800c156:	460c      	mov	r4, r1
 800c158:	b913      	cbnz	r3, 800c160 <_fflush_r+0x10>
 800c15a:	2500      	movs	r5, #0
 800c15c:	4628      	mov	r0, r5
 800c15e:	bd38      	pop	{r3, r4, r5, pc}
 800c160:	b118      	cbz	r0, 800c16a <_fflush_r+0x1a>
 800c162:	6a03      	ldr	r3, [r0, #32]
 800c164:	b90b      	cbnz	r3, 800c16a <_fflush_r+0x1a>
 800c166:	f7fe f9d1 	bl	800a50c <__sinit>
 800c16a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d0f3      	beq.n	800c15a <_fflush_r+0xa>
 800c172:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c174:	07d0      	lsls	r0, r2, #31
 800c176:	d404      	bmi.n	800c182 <_fflush_r+0x32>
 800c178:	0599      	lsls	r1, r3, #22
 800c17a:	d402      	bmi.n	800c182 <_fflush_r+0x32>
 800c17c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c17e:	f7fe fb0f 	bl	800a7a0 <__retarget_lock_acquire_recursive>
 800c182:	4628      	mov	r0, r5
 800c184:	4621      	mov	r1, r4
 800c186:	f7ff ff5d 	bl	800c044 <__sflush_r>
 800c18a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c18c:	07da      	lsls	r2, r3, #31
 800c18e:	4605      	mov	r5, r0
 800c190:	d4e4      	bmi.n	800c15c <_fflush_r+0xc>
 800c192:	89a3      	ldrh	r3, [r4, #12]
 800c194:	059b      	lsls	r3, r3, #22
 800c196:	d4e1      	bmi.n	800c15c <_fflush_r+0xc>
 800c198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c19a:	f7fe fb02 	bl	800a7a2 <__retarget_lock_release_recursive>
 800c19e:	e7dd      	b.n	800c15c <_fflush_r+0xc>

0800c1a0 <memmove>:
 800c1a0:	4288      	cmp	r0, r1
 800c1a2:	b510      	push	{r4, lr}
 800c1a4:	eb01 0402 	add.w	r4, r1, r2
 800c1a8:	d902      	bls.n	800c1b0 <memmove+0x10>
 800c1aa:	4284      	cmp	r4, r0
 800c1ac:	4623      	mov	r3, r4
 800c1ae:	d807      	bhi.n	800c1c0 <memmove+0x20>
 800c1b0:	1e43      	subs	r3, r0, #1
 800c1b2:	42a1      	cmp	r1, r4
 800c1b4:	d008      	beq.n	800c1c8 <memmove+0x28>
 800c1b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c1be:	e7f8      	b.n	800c1b2 <memmove+0x12>
 800c1c0:	4402      	add	r2, r0
 800c1c2:	4601      	mov	r1, r0
 800c1c4:	428a      	cmp	r2, r1
 800c1c6:	d100      	bne.n	800c1ca <memmove+0x2a>
 800c1c8:	bd10      	pop	{r4, pc}
 800c1ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c1d2:	e7f7      	b.n	800c1c4 <memmove+0x24>

0800c1d4 <_sbrk_r>:
 800c1d4:	b538      	push	{r3, r4, r5, lr}
 800c1d6:	4d06      	ldr	r5, [pc, #24]	; (800c1f0 <_sbrk_r+0x1c>)
 800c1d8:	2300      	movs	r3, #0
 800c1da:	4604      	mov	r4, r0
 800c1dc:	4608      	mov	r0, r1
 800c1de:	602b      	str	r3, [r5, #0]
 800c1e0:	f7f6 f8dc 	bl	800239c <_sbrk>
 800c1e4:	1c43      	adds	r3, r0, #1
 800c1e6:	d102      	bne.n	800c1ee <_sbrk_r+0x1a>
 800c1e8:	682b      	ldr	r3, [r5, #0]
 800c1ea:	b103      	cbz	r3, 800c1ee <_sbrk_r+0x1a>
 800c1ec:	6023      	str	r3, [r4, #0]
 800c1ee:	bd38      	pop	{r3, r4, r5, pc}
 800c1f0:	200020dc 	.word	0x200020dc

0800c1f4 <memcpy>:
 800c1f4:	440a      	add	r2, r1
 800c1f6:	4291      	cmp	r1, r2
 800c1f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c1fc:	d100      	bne.n	800c200 <memcpy+0xc>
 800c1fe:	4770      	bx	lr
 800c200:	b510      	push	{r4, lr}
 800c202:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c206:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c20a:	4291      	cmp	r1, r2
 800c20c:	d1f9      	bne.n	800c202 <memcpy+0xe>
 800c20e:	bd10      	pop	{r4, pc}

0800c210 <__assert_func>:
 800c210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c212:	4614      	mov	r4, r2
 800c214:	461a      	mov	r2, r3
 800c216:	4b09      	ldr	r3, [pc, #36]	; (800c23c <__assert_func+0x2c>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4605      	mov	r5, r0
 800c21c:	68d8      	ldr	r0, [r3, #12]
 800c21e:	b14c      	cbz	r4, 800c234 <__assert_func+0x24>
 800c220:	4b07      	ldr	r3, [pc, #28]	; (800c240 <__assert_func+0x30>)
 800c222:	9100      	str	r1, [sp, #0]
 800c224:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c228:	4906      	ldr	r1, [pc, #24]	; (800c244 <__assert_func+0x34>)
 800c22a:	462b      	mov	r3, r5
 800c22c:	f000 f872 	bl	800c314 <fiprintf>
 800c230:	f000 f882 	bl	800c338 <abort>
 800c234:	4b04      	ldr	r3, [pc, #16]	; (800c248 <__assert_func+0x38>)
 800c236:	461c      	mov	r4, r3
 800c238:	e7f3      	b.n	800c222 <__assert_func+0x12>
 800c23a:	bf00      	nop
 800c23c:	20000154 	.word	0x20000154
 800c240:	0800e347 	.word	0x0800e347
 800c244:	0800e354 	.word	0x0800e354
 800c248:	0800e382 	.word	0x0800e382

0800c24c <_calloc_r>:
 800c24c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c24e:	fba1 2402 	umull	r2, r4, r1, r2
 800c252:	b94c      	cbnz	r4, 800c268 <_calloc_r+0x1c>
 800c254:	4611      	mov	r1, r2
 800c256:	9201      	str	r2, [sp, #4]
 800c258:	f7ff f994 	bl	800b584 <_malloc_r>
 800c25c:	9a01      	ldr	r2, [sp, #4]
 800c25e:	4605      	mov	r5, r0
 800c260:	b930      	cbnz	r0, 800c270 <_calloc_r+0x24>
 800c262:	4628      	mov	r0, r5
 800c264:	b003      	add	sp, #12
 800c266:	bd30      	pop	{r4, r5, pc}
 800c268:	220c      	movs	r2, #12
 800c26a:	6002      	str	r2, [r0, #0]
 800c26c:	2500      	movs	r5, #0
 800c26e:	e7f8      	b.n	800c262 <_calloc_r+0x16>
 800c270:	4621      	mov	r1, r4
 800c272:	f7fe fa18 	bl	800a6a6 <memset>
 800c276:	e7f4      	b.n	800c262 <_calloc_r+0x16>

0800c278 <__ascii_mbtowc>:
 800c278:	b082      	sub	sp, #8
 800c27a:	b901      	cbnz	r1, 800c27e <__ascii_mbtowc+0x6>
 800c27c:	a901      	add	r1, sp, #4
 800c27e:	b142      	cbz	r2, 800c292 <__ascii_mbtowc+0x1a>
 800c280:	b14b      	cbz	r3, 800c296 <__ascii_mbtowc+0x1e>
 800c282:	7813      	ldrb	r3, [r2, #0]
 800c284:	600b      	str	r3, [r1, #0]
 800c286:	7812      	ldrb	r2, [r2, #0]
 800c288:	1e10      	subs	r0, r2, #0
 800c28a:	bf18      	it	ne
 800c28c:	2001      	movne	r0, #1
 800c28e:	b002      	add	sp, #8
 800c290:	4770      	bx	lr
 800c292:	4610      	mov	r0, r2
 800c294:	e7fb      	b.n	800c28e <__ascii_mbtowc+0x16>
 800c296:	f06f 0001 	mvn.w	r0, #1
 800c29a:	e7f8      	b.n	800c28e <__ascii_mbtowc+0x16>

0800c29c <_realloc_r>:
 800c29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2a0:	4680      	mov	r8, r0
 800c2a2:	4614      	mov	r4, r2
 800c2a4:	460e      	mov	r6, r1
 800c2a6:	b921      	cbnz	r1, 800c2b2 <_realloc_r+0x16>
 800c2a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2ac:	4611      	mov	r1, r2
 800c2ae:	f7ff b969 	b.w	800b584 <_malloc_r>
 800c2b2:	b92a      	cbnz	r2, 800c2c0 <_realloc_r+0x24>
 800c2b4:	f7ff f8f2 	bl	800b49c <_free_r>
 800c2b8:	4625      	mov	r5, r4
 800c2ba:	4628      	mov	r0, r5
 800c2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2c0:	f000 f841 	bl	800c346 <_malloc_usable_size_r>
 800c2c4:	4284      	cmp	r4, r0
 800c2c6:	4607      	mov	r7, r0
 800c2c8:	d802      	bhi.n	800c2d0 <_realloc_r+0x34>
 800c2ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c2ce:	d812      	bhi.n	800c2f6 <_realloc_r+0x5a>
 800c2d0:	4621      	mov	r1, r4
 800c2d2:	4640      	mov	r0, r8
 800c2d4:	f7ff f956 	bl	800b584 <_malloc_r>
 800c2d8:	4605      	mov	r5, r0
 800c2da:	2800      	cmp	r0, #0
 800c2dc:	d0ed      	beq.n	800c2ba <_realloc_r+0x1e>
 800c2de:	42bc      	cmp	r4, r7
 800c2e0:	4622      	mov	r2, r4
 800c2e2:	4631      	mov	r1, r6
 800c2e4:	bf28      	it	cs
 800c2e6:	463a      	movcs	r2, r7
 800c2e8:	f7ff ff84 	bl	800c1f4 <memcpy>
 800c2ec:	4631      	mov	r1, r6
 800c2ee:	4640      	mov	r0, r8
 800c2f0:	f7ff f8d4 	bl	800b49c <_free_r>
 800c2f4:	e7e1      	b.n	800c2ba <_realloc_r+0x1e>
 800c2f6:	4635      	mov	r5, r6
 800c2f8:	e7df      	b.n	800c2ba <_realloc_r+0x1e>

0800c2fa <__ascii_wctomb>:
 800c2fa:	b149      	cbz	r1, 800c310 <__ascii_wctomb+0x16>
 800c2fc:	2aff      	cmp	r2, #255	; 0xff
 800c2fe:	bf85      	ittet	hi
 800c300:	238a      	movhi	r3, #138	; 0x8a
 800c302:	6003      	strhi	r3, [r0, #0]
 800c304:	700a      	strbls	r2, [r1, #0]
 800c306:	f04f 30ff 	movhi.w	r0, #4294967295
 800c30a:	bf98      	it	ls
 800c30c:	2001      	movls	r0, #1
 800c30e:	4770      	bx	lr
 800c310:	4608      	mov	r0, r1
 800c312:	4770      	bx	lr

0800c314 <fiprintf>:
 800c314:	b40e      	push	{r1, r2, r3}
 800c316:	b503      	push	{r0, r1, lr}
 800c318:	4601      	mov	r1, r0
 800c31a:	ab03      	add	r3, sp, #12
 800c31c:	4805      	ldr	r0, [pc, #20]	; (800c334 <fiprintf+0x20>)
 800c31e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c322:	6800      	ldr	r0, [r0, #0]
 800c324:	9301      	str	r3, [sp, #4]
 800c326:	f000 f83f 	bl	800c3a8 <_vfiprintf_r>
 800c32a:	b002      	add	sp, #8
 800c32c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c330:	b003      	add	sp, #12
 800c332:	4770      	bx	lr
 800c334:	20000154 	.word	0x20000154

0800c338 <abort>:
 800c338:	b508      	push	{r3, lr}
 800c33a:	2006      	movs	r0, #6
 800c33c:	f000 fa0c 	bl	800c758 <raise>
 800c340:	2001      	movs	r0, #1
 800c342:	f7f5 ffb3 	bl	80022ac <_exit>

0800c346 <_malloc_usable_size_r>:
 800c346:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c34a:	1f18      	subs	r0, r3, #4
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	bfbc      	itt	lt
 800c350:	580b      	ldrlt	r3, [r1, r0]
 800c352:	18c0      	addlt	r0, r0, r3
 800c354:	4770      	bx	lr

0800c356 <__sfputc_r>:
 800c356:	6893      	ldr	r3, [r2, #8]
 800c358:	3b01      	subs	r3, #1
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	b410      	push	{r4}
 800c35e:	6093      	str	r3, [r2, #8]
 800c360:	da08      	bge.n	800c374 <__sfputc_r+0x1e>
 800c362:	6994      	ldr	r4, [r2, #24]
 800c364:	42a3      	cmp	r3, r4
 800c366:	db01      	blt.n	800c36c <__sfputc_r+0x16>
 800c368:	290a      	cmp	r1, #10
 800c36a:	d103      	bne.n	800c374 <__sfputc_r+0x1e>
 800c36c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c370:	f000 b934 	b.w	800c5dc <__swbuf_r>
 800c374:	6813      	ldr	r3, [r2, #0]
 800c376:	1c58      	adds	r0, r3, #1
 800c378:	6010      	str	r0, [r2, #0]
 800c37a:	7019      	strb	r1, [r3, #0]
 800c37c:	4608      	mov	r0, r1
 800c37e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c382:	4770      	bx	lr

0800c384 <__sfputs_r>:
 800c384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c386:	4606      	mov	r6, r0
 800c388:	460f      	mov	r7, r1
 800c38a:	4614      	mov	r4, r2
 800c38c:	18d5      	adds	r5, r2, r3
 800c38e:	42ac      	cmp	r4, r5
 800c390:	d101      	bne.n	800c396 <__sfputs_r+0x12>
 800c392:	2000      	movs	r0, #0
 800c394:	e007      	b.n	800c3a6 <__sfputs_r+0x22>
 800c396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c39a:	463a      	mov	r2, r7
 800c39c:	4630      	mov	r0, r6
 800c39e:	f7ff ffda 	bl	800c356 <__sfputc_r>
 800c3a2:	1c43      	adds	r3, r0, #1
 800c3a4:	d1f3      	bne.n	800c38e <__sfputs_r+0xa>
 800c3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c3a8 <_vfiprintf_r>:
 800c3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ac:	460d      	mov	r5, r1
 800c3ae:	b09d      	sub	sp, #116	; 0x74
 800c3b0:	4614      	mov	r4, r2
 800c3b2:	4698      	mov	r8, r3
 800c3b4:	4606      	mov	r6, r0
 800c3b6:	b118      	cbz	r0, 800c3c0 <_vfiprintf_r+0x18>
 800c3b8:	6a03      	ldr	r3, [r0, #32]
 800c3ba:	b90b      	cbnz	r3, 800c3c0 <_vfiprintf_r+0x18>
 800c3bc:	f7fe f8a6 	bl	800a50c <__sinit>
 800c3c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3c2:	07d9      	lsls	r1, r3, #31
 800c3c4:	d405      	bmi.n	800c3d2 <_vfiprintf_r+0x2a>
 800c3c6:	89ab      	ldrh	r3, [r5, #12]
 800c3c8:	059a      	lsls	r2, r3, #22
 800c3ca:	d402      	bmi.n	800c3d2 <_vfiprintf_r+0x2a>
 800c3cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3ce:	f7fe f9e7 	bl	800a7a0 <__retarget_lock_acquire_recursive>
 800c3d2:	89ab      	ldrh	r3, [r5, #12]
 800c3d4:	071b      	lsls	r3, r3, #28
 800c3d6:	d501      	bpl.n	800c3dc <_vfiprintf_r+0x34>
 800c3d8:	692b      	ldr	r3, [r5, #16]
 800c3da:	b99b      	cbnz	r3, 800c404 <_vfiprintf_r+0x5c>
 800c3dc:	4629      	mov	r1, r5
 800c3de:	4630      	mov	r0, r6
 800c3e0:	f000 f93a 	bl	800c658 <__swsetup_r>
 800c3e4:	b170      	cbz	r0, 800c404 <_vfiprintf_r+0x5c>
 800c3e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3e8:	07dc      	lsls	r4, r3, #31
 800c3ea:	d504      	bpl.n	800c3f6 <_vfiprintf_r+0x4e>
 800c3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f0:	b01d      	add	sp, #116	; 0x74
 800c3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f6:	89ab      	ldrh	r3, [r5, #12]
 800c3f8:	0598      	lsls	r0, r3, #22
 800c3fa:	d4f7      	bmi.n	800c3ec <_vfiprintf_r+0x44>
 800c3fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3fe:	f7fe f9d0 	bl	800a7a2 <__retarget_lock_release_recursive>
 800c402:	e7f3      	b.n	800c3ec <_vfiprintf_r+0x44>
 800c404:	2300      	movs	r3, #0
 800c406:	9309      	str	r3, [sp, #36]	; 0x24
 800c408:	2320      	movs	r3, #32
 800c40a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c40e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c412:	2330      	movs	r3, #48	; 0x30
 800c414:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c5c8 <_vfiprintf_r+0x220>
 800c418:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c41c:	f04f 0901 	mov.w	r9, #1
 800c420:	4623      	mov	r3, r4
 800c422:	469a      	mov	sl, r3
 800c424:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c428:	b10a      	cbz	r2, 800c42e <_vfiprintf_r+0x86>
 800c42a:	2a25      	cmp	r2, #37	; 0x25
 800c42c:	d1f9      	bne.n	800c422 <_vfiprintf_r+0x7a>
 800c42e:	ebba 0b04 	subs.w	fp, sl, r4
 800c432:	d00b      	beq.n	800c44c <_vfiprintf_r+0xa4>
 800c434:	465b      	mov	r3, fp
 800c436:	4622      	mov	r2, r4
 800c438:	4629      	mov	r1, r5
 800c43a:	4630      	mov	r0, r6
 800c43c:	f7ff ffa2 	bl	800c384 <__sfputs_r>
 800c440:	3001      	adds	r0, #1
 800c442:	f000 80a9 	beq.w	800c598 <_vfiprintf_r+0x1f0>
 800c446:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c448:	445a      	add	r2, fp
 800c44a:	9209      	str	r2, [sp, #36]	; 0x24
 800c44c:	f89a 3000 	ldrb.w	r3, [sl]
 800c450:	2b00      	cmp	r3, #0
 800c452:	f000 80a1 	beq.w	800c598 <_vfiprintf_r+0x1f0>
 800c456:	2300      	movs	r3, #0
 800c458:	f04f 32ff 	mov.w	r2, #4294967295
 800c45c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c460:	f10a 0a01 	add.w	sl, sl, #1
 800c464:	9304      	str	r3, [sp, #16]
 800c466:	9307      	str	r3, [sp, #28]
 800c468:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c46c:	931a      	str	r3, [sp, #104]	; 0x68
 800c46e:	4654      	mov	r4, sl
 800c470:	2205      	movs	r2, #5
 800c472:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c476:	4854      	ldr	r0, [pc, #336]	; (800c5c8 <_vfiprintf_r+0x220>)
 800c478:	f7f3 feaa 	bl	80001d0 <memchr>
 800c47c:	9a04      	ldr	r2, [sp, #16]
 800c47e:	b9d8      	cbnz	r0, 800c4b8 <_vfiprintf_r+0x110>
 800c480:	06d1      	lsls	r1, r2, #27
 800c482:	bf44      	itt	mi
 800c484:	2320      	movmi	r3, #32
 800c486:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c48a:	0713      	lsls	r3, r2, #28
 800c48c:	bf44      	itt	mi
 800c48e:	232b      	movmi	r3, #43	; 0x2b
 800c490:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c494:	f89a 3000 	ldrb.w	r3, [sl]
 800c498:	2b2a      	cmp	r3, #42	; 0x2a
 800c49a:	d015      	beq.n	800c4c8 <_vfiprintf_r+0x120>
 800c49c:	9a07      	ldr	r2, [sp, #28]
 800c49e:	4654      	mov	r4, sl
 800c4a0:	2000      	movs	r0, #0
 800c4a2:	f04f 0c0a 	mov.w	ip, #10
 800c4a6:	4621      	mov	r1, r4
 800c4a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4ac:	3b30      	subs	r3, #48	; 0x30
 800c4ae:	2b09      	cmp	r3, #9
 800c4b0:	d94d      	bls.n	800c54e <_vfiprintf_r+0x1a6>
 800c4b2:	b1b0      	cbz	r0, 800c4e2 <_vfiprintf_r+0x13a>
 800c4b4:	9207      	str	r2, [sp, #28]
 800c4b6:	e014      	b.n	800c4e2 <_vfiprintf_r+0x13a>
 800c4b8:	eba0 0308 	sub.w	r3, r0, r8
 800c4bc:	fa09 f303 	lsl.w	r3, r9, r3
 800c4c0:	4313      	orrs	r3, r2
 800c4c2:	9304      	str	r3, [sp, #16]
 800c4c4:	46a2      	mov	sl, r4
 800c4c6:	e7d2      	b.n	800c46e <_vfiprintf_r+0xc6>
 800c4c8:	9b03      	ldr	r3, [sp, #12]
 800c4ca:	1d19      	adds	r1, r3, #4
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	9103      	str	r1, [sp, #12]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	bfbb      	ittet	lt
 800c4d4:	425b      	neglt	r3, r3
 800c4d6:	f042 0202 	orrlt.w	r2, r2, #2
 800c4da:	9307      	strge	r3, [sp, #28]
 800c4dc:	9307      	strlt	r3, [sp, #28]
 800c4de:	bfb8      	it	lt
 800c4e0:	9204      	strlt	r2, [sp, #16]
 800c4e2:	7823      	ldrb	r3, [r4, #0]
 800c4e4:	2b2e      	cmp	r3, #46	; 0x2e
 800c4e6:	d10c      	bne.n	800c502 <_vfiprintf_r+0x15a>
 800c4e8:	7863      	ldrb	r3, [r4, #1]
 800c4ea:	2b2a      	cmp	r3, #42	; 0x2a
 800c4ec:	d134      	bne.n	800c558 <_vfiprintf_r+0x1b0>
 800c4ee:	9b03      	ldr	r3, [sp, #12]
 800c4f0:	1d1a      	adds	r2, r3, #4
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	9203      	str	r2, [sp, #12]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	bfb8      	it	lt
 800c4fa:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4fe:	3402      	adds	r4, #2
 800c500:	9305      	str	r3, [sp, #20]
 800c502:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c5d8 <_vfiprintf_r+0x230>
 800c506:	7821      	ldrb	r1, [r4, #0]
 800c508:	2203      	movs	r2, #3
 800c50a:	4650      	mov	r0, sl
 800c50c:	f7f3 fe60 	bl	80001d0 <memchr>
 800c510:	b138      	cbz	r0, 800c522 <_vfiprintf_r+0x17a>
 800c512:	9b04      	ldr	r3, [sp, #16]
 800c514:	eba0 000a 	sub.w	r0, r0, sl
 800c518:	2240      	movs	r2, #64	; 0x40
 800c51a:	4082      	lsls	r2, r0
 800c51c:	4313      	orrs	r3, r2
 800c51e:	3401      	adds	r4, #1
 800c520:	9304      	str	r3, [sp, #16]
 800c522:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c526:	4829      	ldr	r0, [pc, #164]	; (800c5cc <_vfiprintf_r+0x224>)
 800c528:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c52c:	2206      	movs	r2, #6
 800c52e:	f7f3 fe4f 	bl	80001d0 <memchr>
 800c532:	2800      	cmp	r0, #0
 800c534:	d03f      	beq.n	800c5b6 <_vfiprintf_r+0x20e>
 800c536:	4b26      	ldr	r3, [pc, #152]	; (800c5d0 <_vfiprintf_r+0x228>)
 800c538:	bb1b      	cbnz	r3, 800c582 <_vfiprintf_r+0x1da>
 800c53a:	9b03      	ldr	r3, [sp, #12]
 800c53c:	3307      	adds	r3, #7
 800c53e:	f023 0307 	bic.w	r3, r3, #7
 800c542:	3308      	adds	r3, #8
 800c544:	9303      	str	r3, [sp, #12]
 800c546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c548:	443b      	add	r3, r7
 800c54a:	9309      	str	r3, [sp, #36]	; 0x24
 800c54c:	e768      	b.n	800c420 <_vfiprintf_r+0x78>
 800c54e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c552:	460c      	mov	r4, r1
 800c554:	2001      	movs	r0, #1
 800c556:	e7a6      	b.n	800c4a6 <_vfiprintf_r+0xfe>
 800c558:	2300      	movs	r3, #0
 800c55a:	3401      	adds	r4, #1
 800c55c:	9305      	str	r3, [sp, #20]
 800c55e:	4619      	mov	r1, r3
 800c560:	f04f 0c0a 	mov.w	ip, #10
 800c564:	4620      	mov	r0, r4
 800c566:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c56a:	3a30      	subs	r2, #48	; 0x30
 800c56c:	2a09      	cmp	r2, #9
 800c56e:	d903      	bls.n	800c578 <_vfiprintf_r+0x1d0>
 800c570:	2b00      	cmp	r3, #0
 800c572:	d0c6      	beq.n	800c502 <_vfiprintf_r+0x15a>
 800c574:	9105      	str	r1, [sp, #20]
 800c576:	e7c4      	b.n	800c502 <_vfiprintf_r+0x15a>
 800c578:	fb0c 2101 	mla	r1, ip, r1, r2
 800c57c:	4604      	mov	r4, r0
 800c57e:	2301      	movs	r3, #1
 800c580:	e7f0      	b.n	800c564 <_vfiprintf_r+0x1bc>
 800c582:	ab03      	add	r3, sp, #12
 800c584:	9300      	str	r3, [sp, #0]
 800c586:	462a      	mov	r2, r5
 800c588:	4b12      	ldr	r3, [pc, #72]	; (800c5d4 <_vfiprintf_r+0x22c>)
 800c58a:	a904      	add	r1, sp, #16
 800c58c:	4630      	mov	r0, r6
 800c58e:	f7fd fb7d 	bl	8009c8c <_printf_float>
 800c592:	4607      	mov	r7, r0
 800c594:	1c78      	adds	r0, r7, #1
 800c596:	d1d6      	bne.n	800c546 <_vfiprintf_r+0x19e>
 800c598:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c59a:	07d9      	lsls	r1, r3, #31
 800c59c:	d405      	bmi.n	800c5aa <_vfiprintf_r+0x202>
 800c59e:	89ab      	ldrh	r3, [r5, #12]
 800c5a0:	059a      	lsls	r2, r3, #22
 800c5a2:	d402      	bmi.n	800c5aa <_vfiprintf_r+0x202>
 800c5a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5a6:	f7fe f8fc 	bl	800a7a2 <__retarget_lock_release_recursive>
 800c5aa:	89ab      	ldrh	r3, [r5, #12]
 800c5ac:	065b      	lsls	r3, r3, #25
 800c5ae:	f53f af1d 	bmi.w	800c3ec <_vfiprintf_r+0x44>
 800c5b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5b4:	e71c      	b.n	800c3f0 <_vfiprintf_r+0x48>
 800c5b6:	ab03      	add	r3, sp, #12
 800c5b8:	9300      	str	r3, [sp, #0]
 800c5ba:	462a      	mov	r2, r5
 800c5bc:	4b05      	ldr	r3, [pc, #20]	; (800c5d4 <_vfiprintf_r+0x22c>)
 800c5be:	a904      	add	r1, sp, #16
 800c5c0:	4630      	mov	r0, r6
 800c5c2:	f7fd fe07 	bl	800a1d4 <_printf_i>
 800c5c6:	e7e4      	b.n	800c592 <_vfiprintf_r+0x1ea>
 800c5c8:	0800e32c 	.word	0x0800e32c
 800c5cc:	0800e336 	.word	0x0800e336
 800c5d0:	08009c8d 	.word	0x08009c8d
 800c5d4:	0800c385 	.word	0x0800c385
 800c5d8:	0800e332 	.word	0x0800e332

0800c5dc <__swbuf_r>:
 800c5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5de:	460e      	mov	r6, r1
 800c5e0:	4614      	mov	r4, r2
 800c5e2:	4605      	mov	r5, r0
 800c5e4:	b118      	cbz	r0, 800c5ee <__swbuf_r+0x12>
 800c5e6:	6a03      	ldr	r3, [r0, #32]
 800c5e8:	b90b      	cbnz	r3, 800c5ee <__swbuf_r+0x12>
 800c5ea:	f7fd ff8f 	bl	800a50c <__sinit>
 800c5ee:	69a3      	ldr	r3, [r4, #24]
 800c5f0:	60a3      	str	r3, [r4, #8]
 800c5f2:	89a3      	ldrh	r3, [r4, #12]
 800c5f4:	071a      	lsls	r2, r3, #28
 800c5f6:	d525      	bpl.n	800c644 <__swbuf_r+0x68>
 800c5f8:	6923      	ldr	r3, [r4, #16]
 800c5fa:	b31b      	cbz	r3, 800c644 <__swbuf_r+0x68>
 800c5fc:	6823      	ldr	r3, [r4, #0]
 800c5fe:	6922      	ldr	r2, [r4, #16]
 800c600:	1a98      	subs	r0, r3, r2
 800c602:	6963      	ldr	r3, [r4, #20]
 800c604:	b2f6      	uxtb	r6, r6
 800c606:	4283      	cmp	r3, r0
 800c608:	4637      	mov	r7, r6
 800c60a:	dc04      	bgt.n	800c616 <__swbuf_r+0x3a>
 800c60c:	4621      	mov	r1, r4
 800c60e:	4628      	mov	r0, r5
 800c610:	f7ff fd9e 	bl	800c150 <_fflush_r>
 800c614:	b9e0      	cbnz	r0, 800c650 <__swbuf_r+0x74>
 800c616:	68a3      	ldr	r3, [r4, #8]
 800c618:	3b01      	subs	r3, #1
 800c61a:	60a3      	str	r3, [r4, #8]
 800c61c:	6823      	ldr	r3, [r4, #0]
 800c61e:	1c5a      	adds	r2, r3, #1
 800c620:	6022      	str	r2, [r4, #0]
 800c622:	701e      	strb	r6, [r3, #0]
 800c624:	6962      	ldr	r2, [r4, #20]
 800c626:	1c43      	adds	r3, r0, #1
 800c628:	429a      	cmp	r2, r3
 800c62a:	d004      	beq.n	800c636 <__swbuf_r+0x5a>
 800c62c:	89a3      	ldrh	r3, [r4, #12]
 800c62e:	07db      	lsls	r3, r3, #31
 800c630:	d506      	bpl.n	800c640 <__swbuf_r+0x64>
 800c632:	2e0a      	cmp	r6, #10
 800c634:	d104      	bne.n	800c640 <__swbuf_r+0x64>
 800c636:	4621      	mov	r1, r4
 800c638:	4628      	mov	r0, r5
 800c63a:	f7ff fd89 	bl	800c150 <_fflush_r>
 800c63e:	b938      	cbnz	r0, 800c650 <__swbuf_r+0x74>
 800c640:	4638      	mov	r0, r7
 800c642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c644:	4621      	mov	r1, r4
 800c646:	4628      	mov	r0, r5
 800c648:	f000 f806 	bl	800c658 <__swsetup_r>
 800c64c:	2800      	cmp	r0, #0
 800c64e:	d0d5      	beq.n	800c5fc <__swbuf_r+0x20>
 800c650:	f04f 37ff 	mov.w	r7, #4294967295
 800c654:	e7f4      	b.n	800c640 <__swbuf_r+0x64>
	...

0800c658 <__swsetup_r>:
 800c658:	b538      	push	{r3, r4, r5, lr}
 800c65a:	4b2a      	ldr	r3, [pc, #168]	; (800c704 <__swsetup_r+0xac>)
 800c65c:	4605      	mov	r5, r0
 800c65e:	6818      	ldr	r0, [r3, #0]
 800c660:	460c      	mov	r4, r1
 800c662:	b118      	cbz	r0, 800c66c <__swsetup_r+0x14>
 800c664:	6a03      	ldr	r3, [r0, #32]
 800c666:	b90b      	cbnz	r3, 800c66c <__swsetup_r+0x14>
 800c668:	f7fd ff50 	bl	800a50c <__sinit>
 800c66c:	89a3      	ldrh	r3, [r4, #12]
 800c66e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c672:	0718      	lsls	r0, r3, #28
 800c674:	d422      	bmi.n	800c6bc <__swsetup_r+0x64>
 800c676:	06d9      	lsls	r1, r3, #27
 800c678:	d407      	bmi.n	800c68a <__swsetup_r+0x32>
 800c67a:	2309      	movs	r3, #9
 800c67c:	602b      	str	r3, [r5, #0]
 800c67e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c682:	81a3      	strh	r3, [r4, #12]
 800c684:	f04f 30ff 	mov.w	r0, #4294967295
 800c688:	e034      	b.n	800c6f4 <__swsetup_r+0x9c>
 800c68a:	0758      	lsls	r0, r3, #29
 800c68c:	d512      	bpl.n	800c6b4 <__swsetup_r+0x5c>
 800c68e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c690:	b141      	cbz	r1, 800c6a4 <__swsetup_r+0x4c>
 800c692:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c696:	4299      	cmp	r1, r3
 800c698:	d002      	beq.n	800c6a0 <__swsetup_r+0x48>
 800c69a:	4628      	mov	r0, r5
 800c69c:	f7fe fefe 	bl	800b49c <_free_r>
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	6363      	str	r3, [r4, #52]	; 0x34
 800c6a4:	89a3      	ldrh	r3, [r4, #12]
 800c6a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c6aa:	81a3      	strh	r3, [r4, #12]
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	6063      	str	r3, [r4, #4]
 800c6b0:	6923      	ldr	r3, [r4, #16]
 800c6b2:	6023      	str	r3, [r4, #0]
 800c6b4:	89a3      	ldrh	r3, [r4, #12]
 800c6b6:	f043 0308 	orr.w	r3, r3, #8
 800c6ba:	81a3      	strh	r3, [r4, #12]
 800c6bc:	6923      	ldr	r3, [r4, #16]
 800c6be:	b94b      	cbnz	r3, 800c6d4 <__swsetup_r+0x7c>
 800c6c0:	89a3      	ldrh	r3, [r4, #12]
 800c6c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c6c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6ca:	d003      	beq.n	800c6d4 <__swsetup_r+0x7c>
 800c6cc:	4621      	mov	r1, r4
 800c6ce:	4628      	mov	r0, r5
 800c6d0:	f000 f884 	bl	800c7dc <__smakebuf_r>
 800c6d4:	89a0      	ldrh	r0, [r4, #12]
 800c6d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6da:	f010 0301 	ands.w	r3, r0, #1
 800c6de:	d00a      	beq.n	800c6f6 <__swsetup_r+0x9e>
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	60a3      	str	r3, [r4, #8]
 800c6e4:	6963      	ldr	r3, [r4, #20]
 800c6e6:	425b      	negs	r3, r3
 800c6e8:	61a3      	str	r3, [r4, #24]
 800c6ea:	6923      	ldr	r3, [r4, #16]
 800c6ec:	b943      	cbnz	r3, 800c700 <__swsetup_r+0xa8>
 800c6ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c6f2:	d1c4      	bne.n	800c67e <__swsetup_r+0x26>
 800c6f4:	bd38      	pop	{r3, r4, r5, pc}
 800c6f6:	0781      	lsls	r1, r0, #30
 800c6f8:	bf58      	it	pl
 800c6fa:	6963      	ldrpl	r3, [r4, #20]
 800c6fc:	60a3      	str	r3, [r4, #8]
 800c6fe:	e7f4      	b.n	800c6ea <__swsetup_r+0x92>
 800c700:	2000      	movs	r0, #0
 800c702:	e7f7      	b.n	800c6f4 <__swsetup_r+0x9c>
 800c704:	20000154 	.word	0x20000154

0800c708 <_raise_r>:
 800c708:	291f      	cmp	r1, #31
 800c70a:	b538      	push	{r3, r4, r5, lr}
 800c70c:	4604      	mov	r4, r0
 800c70e:	460d      	mov	r5, r1
 800c710:	d904      	bls.n	800c71c <_raise_r+0x14>
 800c712:	2316      	movs	r3, #22
 800c714:	6003      	str	r3, [r0, #0]
 800c716:	f04f 30ff 	mov.w	r0, #4294967295
 800c71a:	bd38      	pop	{r3, r4, r5, pc}
 800c71c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c71e:	b112      	cbz	r2, 800c726 <_raise_r+0x1e>
 800c720:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c724:	b94b      	cbnz	r3, 800c73a <_raise_r+0x32>
 800c726:	4620      	mov	r0, r4
 800c728:	f000 f830 	bl	800c78c <_getpid_r>
 800c72c:	462a      	mov	r2, r5
 800c72e:	4601      	mov	r1, r0
 800c730:	4620      	mov	r0, r4
 800c732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c736:	f000 b817 	b.w	800c768 <_kill_r>
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	d00a      	beq.n	800c754 <_raise_r+0x4c>
 800c73e:	1c59      	adds	r1, r3, #1
 800c740:	d103      	bne.n	800c74a <_raise_r+0x42>
 800c742:	2316      	movs	r3, #22
 800c744:	6003      	str	r3, [r0, #0]
 800c746:	2001      	movs	r0, #1
 800c748:	e7e7      	b.n	800c71a <_raise_r+0x12>
 800c74a:	2400      	movs	r4, #0
 800c74c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c750:	4628      	mov	r0, r5
 800c752:	4798      	blx	r3
 800c754:	2000      	movs	r0, #0
 800c756:	e7e0      	b.n	800c71a <_raise_r+0x12>

0800c758 <raise>:
 800c758:	4b02      	ldr	r3, [pc, #8]	; (800c764 <raise+0xc>)
 800c75a:	4601      	mov	r1, r0
 800c75c:	6818      	ldr	r0, [r3, #0]
 800c75e:	f7ff bfd3 	b.w	800c708 <_raise_r>
 800c762:	bf00      	nop
 800c764:	20000154 	.word	0x20000154

0800c768 <_kill_r>:
 800c768:	b538      	push	{r3, r4, r5, lr}
 800c76a:	4d07      	ldr	r5, [pc, #28]	; (800c788 <_kill_r+0x20>)
 800c76c:	2300      	movs	r3, #0
 800c76e:	4604      	mov	r4, r0
 800c770:	4608      	mov	r0, r1
 800c772:	4611      	mov	r1, r2
 800c774:	602b      	str	r3, [r5, #0]
 800c776:	f7f5 fd89 	bl	800228c <_kill>
 800c77a:	1c43      	adds	r3, r0, #1
 800c77c:	d102      	bne.n	800c784 <_kill_r+0x1c>
 800c77e:	682b      	ldr	r3, [r5, #0]
 800c780:	b103      	cbz	r3, 800c784 <_kill_r+0x1c>
 800c782:	6023      	str	r3, [r4, #0]
 800c784:	bd38      	pop	{r3, r4, r5, pc}
 800c786:	bf00      	nop
 800c788:	200020dc 	.word	0x200020dc

0800c78c <_getpid_r>:
 800c78c:	f7f5 bd76 	b.w	800227c <_getpid>

0800c790 <__swhatbuf_r>:
 800c790:	b570      	push	{r4, r5, r6, lr}
 800c792:	460c      	mov	r4, r1
 800c794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c798:	2900      	cmp	r1, #0
 800c79a:	b096      	sub	sp, #88	; 0x58
 800c79c:	4615      	mov	r5, r2
 800c79e:	461e      	mov	r6, r3
 800c7a0:	da0d      	bge.n	800c7be <__swhatbuf_r+0x2e>
 800c7a2:	89a3      	ldrh	r3, [r4, #12]
 800c7a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c7a8:	f04f 0100 	mov.w	r1, #0
 800c7ac:	bf0c      	ite	eq
 800c7ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c7b2:	2340      	movne	r3, #64	; 0x40
 800c7b4:	2000      	movs	r0, #0
 800c7b6:	6031      	str	r1, [r6, #0]
 800c7b8:	602b      	str	r3, [r5, #0]
 800c7ba:	b016      	add	sp, #88	; 0x58
 800c7bc:	bd70      	pop	{r4, r5, r6, pc}
 800c7be:	466a      	mov	r2, sp
 800c7c0:	f000 f848 	bl	800c854 <_fstat_r>
 800c7c4:	2800      	cmp	r0, #0
 800c7c6:	dbec      	blt.n	800c7a2 <__swhatbuf_r+0x12>
 800c7c8:	9901      	ldr	r1, [sp, #4]
 800c7ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c7ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c7d2:	4259      	negs	r1, r3
 800c7d4:	4159      	adcs	r1, r3
 800c7d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7da:	e7eb      	b.n	800c7b4 <__swhatbuf_r+0x24>

0800c7dc <__smakebuf_r>:
 800c7dc:	898b      	ldrh	r3, [r1, #12]
 800c7de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c7e0:	079d      	lsls	r5, r3, #30
 800c7e2:	4606      	mov	r6, r0
 800c7e4:	460c      	mov	r4, r1
 800c7e6:	d507      	bpl.n	800c7f8 <__smakebuf_r+0x1c>
 800c7e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c7ec:	6023      	str	r3, [r4, #0]
 800c7ee:	6123      	str	r3, [r4, #16]
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	6163      	str	r3, [r4, #20]
 800c7f4:	b002      	add	sp, #8
 800c7f6:	bd70      	pop	{r4, r5, r6, pc}
 800c7f8:	ab01      	add	r3, sp, #4
 800c7fa:	466a      	mov	r2, sp
 800c7fc:	f7ff ffc8 	bl	800c790 <__swhatbuf_r>
 800c800:	9900      	ldr	r1, [sp, #0]
 800c802:	4605      	mov	r5, r0
 800c804:	4630      	mov	r0, r6
 800c806:	f7fe febd 	bl	800b584 <_malloc_r>
 800c80a:	b948      	cbnz	r0, 800c820 <__smakebuf_r+0x44>
 800c80c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c810:	059a      	lsls	r2, r3, #22
 800c812:	d4ef      	bmi.n	800c7f4 <__smakebuf_r+0x18>
 800c814:	f023 0303 	bic.w	r3, r3, #3
 800c818:	f043 0302 	orr.w	r3, r3, #2
 800c81c:	81a3      	strh	r3, [r4, #12]
 800c81e:	e7e3      	b.n	800c7e8 <__smakebuf_r+0xc>
 800c820:	89a3      	ldrh	r3, [r4, #12]
 800c822:	6020      	str	r0, [r4, #0]
 800c824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c828:	81a3      	strh	r3, [r4, #12]
 800c82a:	9b00      	ldr	r3, [sp, #0]
 800c82c:	6163      	str	r3, [r4, #20]
 800c82e:	9b01      	ldr	r3, [sp, #4]
 800c830:	6120      	str	r0, [r4, #16]
 800c832:	b15b      	cbz	r3, 800c84c <__smakebuf_r+0x70>
 800c834:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c838:	4630      	mov	r0, r6
 800c83a:	f000 f81d 	bl	800c878 <_isatty_r>
 800c83e:	b128      	cbz	r0, 800c84c <__smakebuf_r+0x70>
 800c840:	89a3      	ldrh	r3, [r4, #12]
 800c842:	f023 0303 	bic.w	r3, r3, #3
 800c846:	f043 0301 	orr.w	r3, r3, #1
 800c84a:	81a3      	strh	r3, [r4, #12]
 800c84c:	89a3      	ldrh	r3, [r4, #12]
 800c84e:	431d      	orrs	r5, r3
 800c850:	81a5      	strh	r5, [r4, #12]
 800c852:	e7cf      	b.n	800c7f4 <__smakebuf_r+0x18>

0800c854 <_fstat_r>:
 800c854:	b538      	push	{r3, r4, r5, lr}
 800c856:	4d07      	ldr	r5, [pc, #28]	; (800c874 <_fstat_r+0x20>)
 800c858:	2300      	movs	r3, #0
 800c85a:	4604      	mov	r4, r0
 800c85c:	4608      	mov	r0, r1
 800c85e:	4611      	mov	r1, r2
 800c860:	602b      	str	r3, [r5, #0]
 800c862:	f7f5 fd72 	bl	800234a <_fstat>
 800c866:	1c43      	adds	r3, r0, #1
 800c868:	d102      	bne.n	800c870 <_fstat_r+0x1c>
 800c86a:	682b      	ldr	r3, [r5, #0]
 800c86c:	b103      	cbz	r3, 800c870 <_fstat_r+0x1c>
 800c86e:	6023      	str	r3, [r4, #0]
 800c870:	bd38      	pop	{r3, r4, r5, pc}
 800c872:	bf00      	nop
 800c874:	200020dc 	.word	0x200020dc

0800c878 <_isatty_r>:
 800c878:	b538      	push	{r3, r4, r5, lr}
 800c87a:	4d06      	ldr	r5, [pc, #24]	; (800c894 <_isatty_r+0x1c>)
 800c87c:	2300      	movs	r3, #0
 800c87e:	4604      	mov	r4, r0
 800c880:	4608      	mov	r0, r1
 800c882:	602b      	str	r3, [r5, #0]
 800c884:	f7f5 fd71 	bl	800236a <_isatty>
 800c888:	1c43      	adds	r3, r0, #1
 800c88a:	d102      	bne.n	800c892 <_isatty_r+0x1a>
 800c88c:	682b      	ldr	r3, [r5, #0]
 800c88e:	b103      	cbz	r3, 800c892 <_isatty_r+0x1a>
 800c890:	6023      	str	r3, [r4, #0]
 800c892:	bd38      	pop	{r3, r4, r5, pc}
 800c894:	200020dc 	.word	0x200020dc

0800c898 <atan2>:
 800c898:	f000 baea 	b.w	800ce70 <__ieee754_atan2>

0800c89c <sqrt>:
 800c89c:	b538      	push	{r3, r4, r5, lr}
 800c89e:	ed2d 8b02 	vpush	{d8}
 800c8a2:	ec55 4b10 	vmov	r4, r5, d0
 800c8a6:	f000 f87f 	bl	800c9a8 <__ieee754_sqrt>
 800c8aa:	4622      	mov	r2, r4
 800c8ac:	462b      	mov	r3, r5
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	4629      	mov	r1, r5
 800c8b2:	eeb0 8a40 	vmov.f32	s16, s0
 800c8b6:	eef0 8a60 	vmov.f32	s17, s1
 800c8ba:	f7f4 f937 	bl	8000b2c <__aeabi_dcmpun>
 800c8be:	b990      	cbnz	r0, 800c8e6 <sqrt+0x4a>
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	4629      	mov	r1, r5
 800c8c8:	f7f4 f908 	bl	8000adc <__aeabi_dcmplt>
 800c8cc:	b158      	cbz	r0, 800c8e6 <sqrt+0x4a>
 800c8ce:	f7fd ff3d 	bl	800a74c <__errno>
 800c8d2:	2321      	movs	r3, #33	; 0x21
 800c8d4:	6003      	str	r3, [r0, #0]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	2300      	movs	r3, #0
 800c8da:	4610      	mov	r0, r2
 800c8dc:	4619      	mov	r1, r3
 800c8de:	f7f3 ffb5 	bl	800084c <__aeabi_ddiv>
 800c8e2:	ec41 0b18 	vmov	d8, r0, r1
 800c8e6:	eeb0 0a48 	vmov.f32	s0, s16
 800c8ea:	eef0 0a68 	vmov.f32	s1, s17
 800c8ee:	ecbd 8b02 	vpop	{d8}
 800c8f2:	bd38      	pop	{r3, r4, r5, pc}
 800c8f4:	0000      	movs	r0, r0
	...

0800c8f8 <sin>:
 800c8f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8fa:	ec53 2b10 	vmov	r2, r3, d0
 800c8fe:	4828      	ldr	r0, [pc, #160]	; (800c9a0 <sin+0xa8>)
 800c900:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c904:	4281      	cmp	r1, r0
 800c906:	dc07      	bgt.n	800c918 <sin+0x20>
 800c908:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800c998 <sin+0xa0>
 800c90c:	2000      	movs	r0, #0
 800c90e:	b005      	add	sp, #20
 800c910:	f85d eb04 	ldr.w	lr, [sp], #4
 800c914:	f000 b9ec 	b.w	800ccf0 <__kernel_sin>
 800c918:	4822      	ldr	r0, [pc, #136]	; (800c9a4 <sin+0xac>)
 800c91a:	4281      	cmp	r1, r0
 800c91c:	dd09      	ble.n	800c932 <sin+0x3a>
 800c91e:	ee10 0a10 	vmov	r0, s0
 800c922:	4619      	mov	r1, r3
 800c924:	f7f3 fcb0 	bl	8000288 <__aeabi_dsub>
 800c928:	ec41 0b10 	vmov	d0, r0, r1
 800c92c:	b005      	add	sp, #20
 800c92e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c932:	4668      	mov	r0, sp
 800c934:	f000 fb64 	bl	800d000 <__ieee754_rem_pio2>
 800c938:	f000 0003 	and.w	r0, r0, #3
 800c93c:	2801      	cmp	r0, #1
 800c93e:	d00c      	beq.n	800c95a <sin+0x62>
 800c940:	2802      	cmp	r0, #2
 800c942:	d011      	beq.n	800c968 <sin+0x70>
 800c944:	b9f0      	cbnz	r0, 800c984 <sin+0x8c>
 800c946:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c94a:	ed9d 0b00 	vldr	d0, [sp]
 800c94e:	2001      	movs	r0, #1
 800c950:	f000 f9ce 	bl	800ccf0 <__kernel_sin>
 800c954:	ec51 0b10 	vmov	r0, r1, d0
 800c958:	e7e6      	b.n	800c928 <sin+0x30>
 800c95a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c95e:	ed9d 0b00 	vldr	d0, [sp]
 800c962:	f000 f8fd 	bl	800cb60 <__kernel_cos>
 800c966:	e7f5      	b.n	800c954 <sin+0x5c>
 800c968:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c96c:	ed9d 0b00 	vldr	d0, [sp]
 800c970:	2001      	movs	r0, #1
 800c972:	f000 f9bd 	bl	800ccf0 <__kernel_sin>
 800c976:	ec53 2b10 	vmov	r2, r3, d0
 800c97a:	ee10 0a10 	vmov	r0, s0
 800c97e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c982:	e7d1      	b.n	800c928 <sin+0x30>
 800c984:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c988:	ed9d 0b00 	vldr	d0, [sp]
 800c98c:	f000 f8e8 	bl	800cb60 <__kernel_cos>
 800c990:	e7f1      	b.n	800c976 <sin+0x7e>
 800c992:	bf00      	nop
 800c994:	f3af 8000 	nop.w
	...
 800c9a0:	3fe921fb 	.word	0x3fe921fb
 800c9a4:	7fefffff 	.word	0x7fefffff

0800c9a8 <__ieee754_sqrt>:
 800c9a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ac:	ec55 4b10 	vmov	r4, r5, d0
 800c9b0:	4e67      	ldr	r6, [pc, #412]	; (800cb50 <__ieee754_sqrt+0x1a8>)
 800c9b2:	43ae      	bics	r6, r5
 800c9b4:	ee10 0a10 	vmov	r0, s0
 800c9b8:	ee10 2a10 	vmov	r2, s0
 800c9bc:	4629      	mov	r1, r5
 800c9be:	462b      	mov	r3, r5
 800c9c0:	d10d      	bne.n	800c9de <__ieee754_sqrt+0x36>
 800c9c2:	f7f3 fe19 	bl	80005f8 <__aeabi_dmul>
 800c9c6:	4602      	mov	r2, r0
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	4629      	mov	r1, r5
 800c9ce:	f7f3 fc5d 	bl	800028c <__adddf3>
 800c9d2:	4604      	mov	r4, r0
 800c9d4:	460d      	mov	r5, r1
 800c9d6:	ec45 4b10 	vmov	d0, r4, r5
 800c9da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9de:	2d00      	cmp	r5, #0
 800c9e0:	dc0b      	bgt.n	800c9fa <__ieee754_sqrt+0x52>
 800c9e2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c9e6:	4326      	orrs	r6, r4
 800c9e8:	d0f5      	beq.n	800c9d6 <__ieee754_sqrt+0x2e>
 800c9ea:	b135      	cbz	r5, 800c9fa <__ieee754_sqrt+0x52>
 800c9ec:	f7f3 fc4c 	bl	8000288 <__aeabi_dsub>
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	460b      	mov	r3, r1
 800c9f4:	f7f3 ff2a 	bl	800084c <__aeabi_ddiv>
 800c9f8:	e7eb      	b.n	800c9d2 <__ieee754_sqrt+0x2a>
 800c9fa:	1509      	asrs	r1, r1, #20
 800c9fc:	f000 808d 	beq.w	800cb1a <__ieee754_sqrt+0x172>
 800ca00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca04:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800ca08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca0c:	07c9      	lsls	r1, r1, #31
 800ca0e:	bf5c      	itt	pl
 800ca10:	005b      	lslpl	r3, r3, #1
 800ca12:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800ca16:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ca1a:	bf58      	it	pl
 800ca1c:	0052      	lslpl	r2, r2, #1
 800ca1e:	2500      	movs	r5, #0
 800ca20:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ca24:	1076      	asrs	r6, r6, #1
 800ca26:	0052      	lsls	r2, r2, #1
 800ca28:	f04f 0e16 	mov.w	lr, #22
 800ca2c:	46ac      	mov	ip, r5
 800ca2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ca32:	eb0c 0001 	add.w	r0, ip, r1
 800ca36:	4298      	cmp	r0, r3
 800ca38:	bfde      	ittt	le
 800ca3a:	1a1b      	suble	r3, r3, r0
 800ca3c:	eb00 0c01 	addle.w	ip, r0, r1
 800ca40:	186d      	addle	r5, r5, r1
 800ca42:	005b      	lsls	r3, r3, #1
 800ca44:	f1be 0e01 	subs.w	lr, lr, #1
 800ca48:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ca4c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ca50:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ca54:	d1ed      	bne.n	800ca32 <__ieee754_sqrt+0x8a>
 800ca56:	4674      	mov	r4, lr
 800ca58:	2720      	movs	r7, #32
 800ca5a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800ca5e:	4563      	cmp	r3, ip
 800ca60:	eb01 000e 	add.w	r0, r1, lr
 800ca64:	dc02      	bgt.n	800ca6c <__ieee754_sqrt+0xc4>
 800ca66:	d113      	bne.n	800ca90 <__ieee754_sqrt+0xe8>
 800ca68:	4290      	cmp	r0, r2
 800ca6a:	d811      	bhi.n	800ca90 <__ieee754_sqrt+0xe8>
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	eb00 0e01 	add.w	lr, r0, r1
 800ca72:	da57      	bge.n	800cb24 <__ieee754_sqrt+0x17c>
 800ca74:	f1be 0f00 	cmp.w	lr, #0
 800ca78:	db54      	blt.n	800cb24 <__ieee754_sqrt+0x17c>
 800ca7a:	f10c 0801 	add.w	r8, ip, #1
 800ca7e:	eba3 030c 	sub.w	r3, r3, ip
 800ca82:	4290      	cmp	r0, r2
 800ca84:	bf88      	it	hi
 800ca86:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ca8a:	1a12      	subs	r2, r2, r0
 800ca8c:	440c      	add	r4, r1
 800ca8e:	46c4      	mov	ip, r8
 800ca90:	005b      	lsls	r3, r3, #1
 800ca92:	3f01      	subs	r7, #1
 800ca94:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ca98:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ca9c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800caa0:	d1dd      	bne.n	800ca5e <__ieee754_sqrt+0xb6>
 800caa2:	4313      	orrs	r3, r2
 800caa4:	d01b      	beq.n	800cade <__ieee754_sqrt+0x136>
 800caa6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800cb54 <__ieee754_sqrt+0x1ac>
 800caaa:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800cb58 <__ieee754_sqrt+0x1b0>
 800caae:	e9da 0100 	ldrd	r0, r1, [sl]
 800cab2:	e9db 2300 	ldrd	r2, r3, [fp]
 800cab6:	f7f3 fbe7 	bl	8000288 <__aeabi_dsub>
 800caba:	e9da 8900 	ldrd	r8, r9, [sl]
 800cabe:	4602      	mov	r2, r0
 800cac0:	460b      	mov	r3, r1
 800cac2:	4640      	mov	r0, r8
 800cac4:	4649      	mov	r1, r9
 800cac6:	f7f4 f813 	bl	8000af0 <__aeabi_dcmple>
 800caca:	b140      	cbz	r0, 800cade <__ieee754_sqrt+0x136>
 800cacc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800cad0:	e9da 0100 	ldrd	r0, r1, [sl]
 800cad4:	e9db 2300 	ldrd	r2, r3, [fp]
 800cad8:	d126      	bne.n	800cb28 <__ieee754_sqrt+0x180>
 800cada:	3501      	adds	r5, #1
 800cadc:	463c      	mov	r4, r7
 800cade:	106a      	asrs	r2, r5, #1
 800cae0:	0863      	lsrs	r3, r4, #1
 800cae2:	07e9      	lsls	r1, r5, #31
 800cae4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800cae8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800caec:	bf48      	it	mi
 800caee:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800caf2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800caf6:	461c      	mov	r4, r3
 800caf8:	e76d      	b.n	800c9d6 <__ieee754_sqrt+0x2e>
 800cafa:	0ad3      	lsrs	r3, r2, #11
 800cafc:	3815      	subs	r0, #21
 800cafe:	0552      	lsls	r2, r2, #21
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d0fa      	beq.n	800cafa <__ieee754_sqrt+0x152>
 800cb04:	02dc      	lsls	r4, r3, #11
 800cb06:	d50a      	bpl.n	800cb1e <__ieee754_sqrt+0x176>
 800cb08:	f1c1 0420 	rsb	r4, r1, #32
 800cb0c:	fa22 f404 	lsr.w	r4, r2, r4
 800cb10:	1e4d      	subs	r5, r1, #1
 800cb12:	408a      	lsls	r2, r1
 800cb14:	4323      	orrs	r3, r4
 800cb16:	1b41      	subs	r1, r0, r5
 800cb18:	e772      	b.n	800ca00 <__ieee754_sqrt+0x58>
 800cb1a:	4608      	mov	r0, r1
 800cb1c:	e7f0      	b.n	800cb00 <__ieee754_sqrt+0x158>
 800cb1e:	005b      	lsls	r3, r3, #1
 800cb20:	3101      	adds	r1, #1
 800cb22:	e7ef      	b.n	800cb04 <__ieee754_sqrt+0x15c>
 800cb24:	46e0      	mov	r8, ip
 800cb26:	e7aa      	b.n	800ca7e <__ieee754_sqrt+0xd6>
 800cb28:	f7f3 fbb0 	bl	800028c <__adddf3>
 800cb2c:	e9da 8900 	ldrd	r8, r9, [sl]
 800cb30:	4602      	mov	r2, r0
 800cb32:	460b      	mov	r3, r1
 800cb34:	4640      	mov	r0, r8
 800cb36:	4649      	mov	r1, r9
 800cb38:	f7f3 ffd0 	bl	8000adc <__aeabi_dcmplt>
 800cb3c:	b120      	cbz	r0, 800cb48 <__ieee754_sqrt+0x1a0>
 800cb3e:	1ca0      	adds	r0, r4, #2
 800cb40:	bf08      	it	eq
 800cb42:	3501      	addeq	r5, #1
 800cb44:	3402      	adds	r4, #2
 800cb46:	e7ca      	b.n	800cade <__ieee754_sqrt+0x136>
 800cb48:	3401      	adds	r4, #1
 800cb4a:	f024 0401 	bic.w	r4, r4, #1
 800cb4e:	e7c6      	b.n	800cade <__ieee754_sqrt+0x136>
 800cb50:	7ff00000 	.word	0x7ff00000
 800cb54:	200002c8 	.word	0x200002c8
 800cb58:	200002d0 	.word	0x200002d0
 800cb5c:	00000000 	.word	0x00000000

0800cb60 <__kernel_cos>:
 800cb60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb64:	ec57 6b10 	vmov	r6, r7, d0
 800cb68:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800cb6c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800cb70:	ed8d 1b00 	vstr	d1, [sp]
 800cb74:	da07      	bge.n	800cb86 <__kernel_cos+0x26>
 800cb76:	ee10 0a10 	vmov	r0, s0
 800cb7a:	4639      	mov	r1, r7
 800cb7c:	f7f3 ffec 	bl	8000b58 <__aeabi_d2iz>
 800cb80:	2800      	cmp	r0, #0
 800cb82:	f000 8088 	beq.w	800cc96 <__kernel_cos+0x136>
 800cb86:	4632      	mov	r2, r6
 800cb88:	463b      	mov	r3, r7
 800cb8a:	4630      	mov	r0, r6
 800cb8c:	4639      	mov	r1, r7
 800cb8e:	f7f3 fd33 	bl	80005f8 <__aeabi_dmul>
 800cb92:	4b51      	ldr	r3, [pc, #324]	; (800ccd8 <__kernel_cos+0x178>)
 800cb94:	2200      	movs	r2, #0
 800cb96:	4604      	mov	r4, r0
 800cb98:	460d      	mov	r5, r1
 800cb9a:	f7f3 fd2d 	bl	80005f8 <__aeabi_dmul>
 800cb9e:	a340      	add	r3, pc, #256	; (adr r3, 800cca0 <__kernel_cos+0x140>)
 800cba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba4:	4682      	mov	sl, r0
 800cba6:	468b      	mov	fp, r1
 800cba8:	4620      	mov	r0, r4
 800cbaa:	4629      	mov	r1, r5
 800cbac:	f7f3 fd24 	bl	80005f8 <__aeabi_dmul>
 800cbb0:	a33d      	add	r3, pc, #244	; (adr r3, 800cca8 <__kernel_cos+0x148>)
 800cbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb6:	f7f3 fb69 	bl	800028c <__adddf3>
 800cbba:	4622      	mov	r2, r4
 800cbbc:	462b      	mov	r3, r5
 800cbbe:	f7f3 fd1b 	bl	80005f8 <__aeabi_dmul>
 800cbc2:	a33b      	add	r3, pc, #236	; (adr r3, 800ccb0 <__kernel_cos+0x150>)
 800cbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc8:	f7f3 fb5e 	bl	8000288 <__aeabi_dsub>
 800cbcc:	4622      	mov	r2, r4
 800cbce:	462b      	mov	r3, r5
 800cbd0:	f7f3 fd12 	bl	80005f8 <__aeabi_dmul>
 800cbd4:	a338      	add	r3, pc, #224	; (adr r3, 800ccb8 <__kernel_cos+0x158>)
 800cbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbda:	f7f3 fb57 	bl	800028c <__adddf3>
 800cbde:	4622      	mov	r2, r4
 800cbe0:	462b      	mov	r3, r5
 800cbe2:	f7f3 fd09 	bl	80005f8 <__aeabi_dmul>
 800cbe6:	a336      	add	r3, pc, #216	; (adr r3, 800ccc0 <__kernel_cos+0x160>)
 800cbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbec:	f7f3 fb4c 	bl	8000288 <__aeabi_dsub>
 800cbf0:	4622      	mov	r2, r4
 800cbf2:	462b      	mov	r3, r5
 800cbf4:	f7f3 fd00 	bl	80005f8 <__aeabi_dmul>
 800cbf8:	a333      	add	r3, pc, #204	; (adr r3, 800ccc8 <__kernel_cos+0x168>)
 800cbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfe:	f7f3 fb45 	bl	800028c <__adddf3>
 800cc02:	4622      	mov	r2, r4
 800cc04:	462b      	mov	r3, r5
 800cc06:	f7f3 fcf7 	bl	80005f8 <__aeabi_dmul>
 800cc0a:	4622      	mov	r2, r4
 800cc0c:	462b      	mov	r3, r5
 800cc0e:	f7f3 fcf3 	bl	80005f8 <__aeabi_dmul>
 800cc12:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc16:	4604      	mov	r4, r0
 800cc18:	460d      	mov	r5, r1
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	4639      	mov	r1, r7
 800cc1e:	f7f3 fceb 	bl	80005f8 <__aeabi_dmul>
 800cc22:	460b      	mov	r3, r1
 800cc24:	4602      	mov	r2, r0
 800cc26:	4629      	mov	r1, r5
 800cc28:	4620      	mov	r0, r4
 800cc2a:	f7f3 fb2d 	bl	8000288 <__aeabi_dsub>
 800cc2e:	4b2b      	ldr	r3, [pc, #172]	; (800ccdc <__kernel_cos+0x17c>)
 800cc30:	4598      	cmp	r8, r3
 800cc32:	4606      	mov	r6, r0
 800cc34:	460f      	mov	r7, r1
 800cc36:	dc10      	bgt.n	800cc5a <__kernel_cos+0xfa>
 800cc38:	4602      	mov	r2, r0
 800cc3a:	460b      	mov	r3, r1
 800cc3c:	4650      	mov	r0, sl
 800cc3e:	4659      	mov	r1, fp
 800cc40:	f7f3 fb22 	bl	8000288 <__aeabi_dsub>
 800cc44:	460b      	mov	r3, r1
 800cc46:	4926      	ldr	r1, [pc, #152]	; (800cce0 <__kernel_cos+0x180>)
 800cc48:	4602      	mov	r2, r0
 800cc4a:	2000      	movs	r0, #0
 800cc4c:	f7f3 fb1c 	bl	8000288 <__aeabi_dsub>
 800cc50:	ec41 0b10 	vmov	d0, r0, r1
 800cc54:	b003      	add	sp, #12
 800cc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc5a:	4b22      	ldr	r3, [pc, #136]	; (800cce4 <__kernel_cos+0x184>)
 800cc5c:	4920      	ldr	r1, [pc, #128]	; (800cce0 <__kernel_cos+0x180>)
 800cc5e:	4598      	cmp	r8, r3
 800cc60:	bfcc      	ite	gt
 800cc62:	4d21      	ldrgt	r5, [pc, #132]	; (800cce8 <__kernel_cos+0x188>)
 800cc64:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800cc68:	2400      	movs	r4, #0
 800cc6a:	4622      	mov	r2, r4
 800cc6c:	462b      	mov	r3, r5
 800cc6e:	2000      	movs	r0, #0
 800cc70:	f7f3 fb0a 	bl	8000288 <__aeabi_dsub>
 800cc74:	4622      	mov	r2, r4
 800cc76:	4680      	mov	r8, r0
 800cc78:	4689      	mov	r9, r1
 800cc7a:	462b      	mov	r3, r5
 800cc7c:	4650      	mov	r0, sl
 800cc7e:	4659      	mov	r1, fp
 800cc80:	f7f3 fb02 	bl	8000288 <__aeabi_dsub>
 800cc84:	4632      	mov	r2, r6
 800cc86:	463b      	mov	r3, r7
 800cc88:	f7f3 fafe 	bl	8000288 <__aeabi_dsub>
 800cc8c:	4602      	mov	r2, r0
 800cc8e:	460b      	mov	r3, r1
 800cc90:	4640      	mov	r0, r8
 800cc92:	4649      	mov	r1, r9
 800cc94:	e7da      	b.n	800cc4c <__kernel_cos+0xec>
 800cc96:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ccd0 <__kernel_cos+0x170>
 800cc9a:	e7db      	b.n	800cc54 <__kernel_cos+0xf4>
 800cc9c:	f3af 8000 	nop.w
 800cca0:	be8838d4 	.word	0xbe8838d4
 800cca4:	bda8fae9 	.word	0xbda8fae9
 800cca8:	bdb4b1c4 	.word	0xbdb4b1c4
 800ccac:	3e21ee9e 	.word	0x3e21ee9e
 800ccb0:	809c52ad 	.word	0x809c52ad
 800ccb4:	3e927e4f 	.word	0x3e927e4f
 800ccb8:	19cb1590 	.word	0x19cb1590
 800ccbc:	3efa01a0 	.word	0x3efa01a0
 800ccc0:	16c15177 	.word	0x16c15177
 800ccc4:	3f56c16c 	.word	0x3f56c16c
 800ccc8:	5555554c 	.word	0x5555554c
 800cccc:	3fa55555 	.word	0x3fa55555
 800ccd0:	00000000 	.word	0x00000000
 800ccd4:	3ff00000 	.word	0x3ff00000
 800ccd8:	3fe00000 	.word	0x3fe00000
 800ccdc:	3fd33332 	.word	0x3fd33332
 800cce0:	3ff00000 	.word	0x3ff00000
 800cce4:	3fe90000 	.word	0x3fe90000
 800cce8:	3fd20000 	.word	0x3fd20000
 800ccec:	00000000 	.word	0x00000000

0800ccf0 <__kernel_sin>:
 800ccf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf4:	ed2d 8b04 	vpush	{d8-d9}
 800ccf8:	eeb0 8a41 	vmov.f32	s16, s2
 800ccfc:	eef0 8a61 	vmov.f32	s17, s3
 800cd00:	ec55 4b10 	vmov	r4, r5, d0
 800cd04:	b083      	sub	sp, #12
 800cd06:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cd0a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cd0e:	9001      	str	r0, [sp, #4]
 800cd10:	da06      	bge.n	800cd20 <__kernel_sin+0x30>
 800cd12:	ee10 0a10 	vmov	r0, s0
 800cd16:	4629      	mov	r1, r5
 800cd18:	f7f3 ff1e 	bl	8000b58 <__aeabi_d2iz>
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	d051      	beq.n	800cdc4 <__kernel_sin+0xd4>
 800cd20:	4622      	mov	r2, r4
 800cd22:	462b      	mov	r3, r5
 800cd24:	4620      	mov	r0, r4
 800cd26:	4629      	mov	r1, r5
 800cd28:	f7f3 fc66 	bl	80005f8 <__aeabi_dmul>
 800cd2c:	4682      	mov	sl, r0
 800cd2e:	468b      	mov	fp, r1
 800cd30:	4602      	mov	r2, r0
 800cd32:	460b      	mov	r3, r1
 800cd34:	4620      	mov	r0, r4
 800cd36:	4629      	mov	r1, r5
 800cd38:	f7f3 fc5e 	bl	80005f8 <__aeabi_dmul>
 800cd3c:	a341      	add	r3, pc, #260	; (adr r3, 800ce44 <__kernel_sin+0x154>)
 800cd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd42:	4680      	mov	r8, r0
 800cd44:	4689      	mov	r9, r1
 800cd46:	4650      	mov	r0, sl
 800cd48:	4659      	mov	r1, fp
 800cd4a:	f7f3 fc55 	bl	80005f8 <__aeabi_dmul>
 800cd4e:	a33f      	add	r3, pc, #252	; (adr r3, 800ce4c <__kernel_sin+0x15c>)
 800cd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd54:	f7f3 fa98 	bl	8000288 <__aeabi_dsub>
 800cd58:	4652      	mov	r2, sl
 800cd5a:	465b      	mov	r3, fp
 800cd5c:	f7f3 fc4c 	bl	80005f8 <__aeabi_dmul>
 800cd60:	a33c      	add	r3, pc, #240	; (adr r3, 800ce54 <__kernel_sin+0x164>)
 800cd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd66:	f7f3 fa91 	bl	800028c <__adddf3>
 800cd6a:	4652      	mov	r2, sl
 800cd6c:	465b      	mov	r3, fp
 800cd6e:	f7f3 fc43 	bl	80005f8 <__aeabi_dmul>
 800cd72:	a33a      	add	r3, pc, #232	; (adr r3, 800ce5c <__kernel_sin+0x16c>)
 800cd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd78:	f7f3 fa86 	bl	8000288 <__aeabi_dsub>
 800cd7c:	4652      	mov	r2, sl
 800cd7e:	465b      	mov	r3, fp
 800cd80:	f7f3 fc3a 	bl	80005f8 <__aeabi_dmul>
 800cd84:	a337      	add	r3, pc, #220	; (adr r3, 800ce64 <__kernel_sin+0x174>)
 800cd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8a:	f7f3 fa7f 	bl	800028c <__adddf3>
 800cd8e:	9b01      	ldr	r3, [sp, #4]
 800cd90:	4606      	mov	r6, r0
 800cd92:	460f      	mov	r7, r1
 800cd94:	b9eb      	cbnz	r3, 800cdd2 <__kernel_sin+0xe2>
 800cd96:	4602      	mov	r2, r0
 800cd98:	460b      	mov	r3, r1
 800cd9a:	4650      	mov	r0, sl
 800cd9c:	4659      	mov	r1, fp
 800cd9e:	f7f3 fc2b 	bl	80005f8 <__aeabi_dmul>
 800cda2:	a325      	add	r3, pc, #148	; (adr r3, 800ce38 <__kernel_sin+0x148>)
 800cda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda8:	f7f3 fa6e 	bl	8000288 <__aeabi_dsub>
 800cdac:	4642      	mov	r2, r8
 800cdae:	464b      	mov	r3, r9
 800cdb0:	f7f3 fc22 	bl	80005f8 <__aeabi_dmul>
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	4620      	mov	r0, r4
 800cdba:	4629      	mov	r1, r5
 800cdbc:	f7f3 fa66 	bl	800028c <__adddf3>
 800cdc0:	4604      	mov	r4, r0
 800cdc2:	460d      	mov	r5, r1
 800cdc4:	ec45 4b10 	vmov	d0, r4, r5
 800cdc8:	b003      	add	sp, #12
 800cdca:	ecbd 8b04 	vpop	{d8-d9}
 800cdce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdd2:	4b1b      	ldr	r3, [pc, #108]	; (800ce40 <__kernel_sin+0x150>)
 800cdd4:	ec51 0b18 	vmov	r0, r1, d8
 800cdd8:	2200      	movs	r2, #0
 800cdda:	f7f3 fc0d 	bl	80005f8 <__aeabi_dmul>
 800cdde:	4632      	mov	r2, r6
 800cde0:	ec41 0b19 	vmov	d9, r0, r1
 800cde4:	463b      	mov	r3, r7
 800cde6:	4640      	mov	r0, r8
 800cde8:	4649      	mov	r1, r9
 800cdea:	f7f3 fc05 	bl	80005f8 <__aeabi_dmul>
 800cdee:	4602      	mov	r2, r0
 800cdf0:	460b      	mov	r3, r1
 800cdf2:	ec51 0b19 	vmov	r0, r1, d9
 800cdf6:	f7f3 fa47 	bl	8000288 <__aeabi_dsub>
 800cdfa:	4652      	mov	r2, sl
 800cdfc:	465b      	mov	r3, fp
 800cdfe:	f7f3 fbfb 	bl	80005f8 <__aeabi_dmul>
 800ce02:	ec53 2b18 	vmov	r2, r3, d8
 800ce06:	f7f3 fa3f 	bl	8000288 <__aeabi_dsub>
 800ce0a:	a30b      	add	r3, pc, #44	; (adr r3, 800ce38 <__kernel_sin+0x148>)
 800ce0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce10:	4606      	mov	r6, r0
 800ce12:	460f      	mov	r7, r1
 800ce14:	4640      	mov	r0, r8
 800ce16:	4649      	mov	r1, r9
 800ce18:	f7f3 fbee 	bl	80005f8 <__aeabi_dmul>
 800ce1c:	4602      	mov	r2, r0
 800ce1e:	460b      	mov	r3, r1
 800ce20:	4630      	mov	r0, r6
 800ce22:	4639      	mov	r1, r7
 800ce24:	f7f3 fa32 	bl	800028c <__adddf3>
 800ce28:	4602      	mov	r2, r0
 800ce2a:	460b      	mov	r3, r1
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	4629      	mov	r1, r5
 800ce30:	f7f3 fa2a 	bl	8000288 <__aeabi_dsub>
 800ce34:	e7c4      	b.n	800cdc0 <__kernel_sin+0xd0>
 800ce36:	bf00      	nop
 800ce38:	55555549 	.word	0x55555549
 800ce3c:	3fc55555 	.word	0x3fc55555
 800ce40:	3fe00000 	.word	0x3fe00000
 800ce44:	5acfd57c 	.word	0x5acfd57c
 800ce48:	3de5d93a 	.word	0x3de5d93a
 800ce4c:	8a2b9ceb 	.word	0x8a2b9ceb
 800ce50:	3e5ae5e6 	.word	0x3e5ae5e6
 800ce54:	57b1fe7d 	.word	0x57b1fe7d
 800ce58:	3ec71de3 	.word	0x3ec71de3
 800ce5c:	19c161d5 	.word	0x19c161d5
 800ce60:	3f2a01a0 	.word	0x3f2a01a0
 800ce64:	1110f8a6 	.word	0x1110f8a6
 800ce68:	3f811111 	.word	0x3f811111
 800ce6c:	00000000 	.word	0x00000000

0800ce70 <__ieee754_atan2>:
 800ce70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce74:	ec57 6b11 	vmov	r6, r7, d1
 800ce78:	4273      	negs	r3, r6
 800ce7a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800cff8 <__ieee754_atan2+0x188>
 800ce7e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ce82:	4333      	orrs	r3, r6
 800ce84:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ce88:	4543      	cmp	r3, r8
 800ce8a:	ec51 0b10 	vmov	r0, r1, d0
 800ce8e:	ee11 5a10 	vmov	r5, s2
 800ce92:	d80a      	bhi.n	800ceaa <__ieee754_atan2+0x3a>
 800ce94:	4244      	negs	r4, r0
 800ce96:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ce9a:	4304      	orrs	r4, r0
 800ce9c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800cea0:	4544      	cmp	r4, r8
 800cea2:	ee10 9a10 	vmov	r9, s0
 800cea6:	468e      	mov	lr, r1
 800cea8:	d907      	bls.n	800ceba <__ieee754_atan2+0x4a>
 800ceaa:	4632      	mov	r2, r6
 800ceac:	463b      	mov	r3, r7
 800ceae:	f7f3 f9ed 	bl	800028c <__adddf3>
 800ceb2:	ec41 0b10 	vmov	d0, r0, r1
 800ceb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ceba:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800cebe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cec2:	4334      	orrs	r4, r6
 800cec4:	d103      	bne.n	800cece <__ieee754_atan2+0x5e>
 800cec6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ceca:	f000 baa1 	b.w	800d410 <atan>
 800cece:	17bc      	asrs	r4, r7, #30
 800ced0:	f004 0402 	and.w	r4, r4, #2
 800ced4:	ea53 0909 	orrs.w	r9, r3, r9
 800ced8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800cedc:	d107      	bne.n	800ceee <__ieee754_atan2+0x7e>
 800cede:	2c02      	cmp	r4, #2
 800cee0:	d05f      	beq.n	800cfa2 <__ieee754_atan2+0x132>
 800cee2:	2c03      	cmp	r4, #3
 800cee4:	d1e5      	bne.n	800ceb2 <__ieee754_atan2+0x42>
 800cee6:	a140      	add	r1, pc, #256	; (adr r1, 800cfe8 <__ieee754_atan2+0x178>)
 800cee8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ceec:	e7e1      	b.n	800ceb2 <__ieee754_atan2+0x42>
 800ceee:	4315      	orrs	r5, r2
 800cef0:	d106      	bne.n	800cf00 <__ieee754_atan2+0x90>
 800cef2:	f1be 0f00 	cmp.w	lr, #0
 800cef6:	da5f      	bge.n	800cfb8 <__ieee754_atan2+0x148>
 800cef8:	a13d      	add	r1, pc, #244	; (adr r1, 800cff0 <__ieee754_atan2+0x180>)
 800cefa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cefe:	e7d8      	b.n	800ceb2 <__ieee754_atan2+0x42>
 800cf00:	4542      	cmp	r2, r8
 800cf02:	d10f      	bne.n	800cf24 <__ieee754_atan2+0xb4>
 800cf04:	4293      	cmp	r3, r2
 800cf06:	f104 34ff 	add.w	r4, r4, #4294967295
 800cf0a:	d107      	bne.n	800cf1c <__ieee754_atan2+0xac>
 800cf0c:	2c02      	cmp	r4, #2
 800cf0e:	d84c      	bhi.n	800cfaa <__ieee754_atan2+0x13a>
 800cf10:	4b33      	ldr	r3, [pc, #204]	; (800cfe0 <__ieee754_atan2+0x170>)
 800cf12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cf16:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cf1a:	e7ca      	b.n	800ceb2 <__ieee754_atan2+0x42>
 800cf1c:	2c02      	cmp	r4, #2
 800cf1e:	d848      	bhi.n	800cfb2 <__ieee754_atan2+0x142>
 800cf20:	4b30      	ldr	r3, [pc, #192]	; (800cfe4 <__ieee754_atan2+0x174>)
 800cf22:	e7f6      	b.n	800cf12 <__ieee754_atan2+0xa2>
 800cf24:	4543      	cmp	r3, r8
 800cf26:	d0e4      	beq.n	800cef2 <__ieee754_atan2+0x82>
 800cf28:	1a9b      	subs	r3, r3, r2
 800cf2a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800cf2e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cf32:	da1e      	bge.n	800cf72 <__ieee754_atan2+0x102>
 800cf34:	2f00      	cmp	r7, #0
 800cf36:	da01      	bge.n	800cf3c <__ieee754_atan2+0xcc>
 800cf38:	323c      	adds	r2, #60	; 0x3c
 800cf3a:	db1e      	blt.n	800cf7a <__ieee754_atan2+0x10a>
 800cf3c:	4632      	mov	r2, r6
 800cf3e:	463b      	mov	r3, r7
 800cf40:	f7f3 fc84 	bl	800084c <__aeabi_ddiv>
 800cf44:	ec41 0b10 	vmov	d0, r0, r1
 800cf48:	f000 fc02 	bl	800d750 <fabs>
 800cf4c:	f000 fa60 	bl	800d410 <atan>
 800cf50:	ec51 0b10 	vmov	r0, r1, d0
 800cf54:	2c01      	cmp	r4, #1
 800cf56:	d013      	beq.n	800cf80 <__ieee754_atan2+0x110>
 800cf58:	2c02      	cmp	r4, #2
 800cf5a:	d015      	beq.n	800cf88 <__ieee754_atan2+0x118>
 800cf5c:	2c00      	cmp	r4, #0
 800cf5e:	d0a8      	beq.n	800ceb2 <__ieee754_atan2+0x42>
 800cf60:	a317      	add	r3, pc, #92	; (adr r3, 800cfc0 <__ieee754_atan2+0x150>)
 800cf62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf66:	f7f3 f98f 	bl	8000288 <__aeabi_dsub>
 800cf6a:	a317      	add	r3, pc, #92	; (adr r3, 800cfc8 <__ieee754_atan2+0x158>)
 800cf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf70:	e014      	b.n	800cf9c <__ieee754_atan2+0x12c>
 800cf72:	a117      	add	r1, pc, #92	; (adr r1, 800cfd0 <__ieee754_atan2+0x160>)
 800cf74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf78:	e7ec      	b.n	800cf54 <__ieee754_atan2+0xe4>
 800cf7a:	2000      	movs	r0, #0
 800cf7c:	2100      	movs	r1, #0
 800cf7e:	e7e9      	b.n	800cf54 <__ieee754_atan2+0xe4>
 800cf80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf84:	4619      	mov	r1, r3
 800cf86:	e794      	b.n	800ceb2 <__ieee754_atan2+0x42>
 800cf88:	a30d      	add	r3, pc, #52	; (adr r3, 800cfc0 <__ieee754_atan2+0x150>)
 800cf8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf8e:	f7f3 f97b 	bl	8000288 <__aeabi_dsub>
 800cf92:	4602      	mov	r2, r0
 800cf94:	460b      	mov	r3, r1
 800cf96:	a10c      	add	r1, pc, #48	; (adr r1, 800cfc8 <__ieee754_atan2+0x158>)
 800cf98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf9c:	f7f3 f974 	bl	8000288 <__aeabi_dsub>
 800cfa0:	e787      	b.n	800ceb2 <__ieee754_atan2+0x42>
 800cfa2:	a109      	add	r1, pc, #36	; (adr r1, 800cfc8 <__ieee754_atan2+0x158>)
 800cfa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfa8:	e783      	b.n	800ceb2 <__ieee754_atan2+0x42>
 800cfaa:	a10b      	add	r1, pc, #44	; (adr r1, 800cfd8 <__ieee754_atan2+0x168>)
 800cfac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfb0:	e77f      	b.n	800ceb2 <__ieee754_atan2+0x42>
 800cfb2:	2000      	movs	r0, #0
 800cfb4:	2100      	movs	r1, #0
 800cfb6:	e77c      	b.n	800ceb2 <__ieee754_atan2+0x42>
 800cfb8:	a105      	add	r1, pc, #20	; (adr r1, 800cfd0 <__ieee754_atan2+0x160>)
 800cfba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfbe:	e778      	b.n	800ceb2 <__ieee754_atan2+0x42>
 800cfc0:	33145c07 	.word	0x33145c07
 800cfc4:	3ca1a626 	.word	0x3ca1a626
 800cfc8:	54442d18 	.word	0x54442d18
 800cfcc:	400921fb 	.word	0x400921fb
 800cfd0:	54442d18 	.word	0x54442d18
 800cfd4:	3ff921fb 	.word	0x3ff921fb
 800cfd8:	54442d18 	.word	0x54442d18
 800cfdc:	3fe921fb 	.word	0x3fe921fb
 800cfe0:	0800e488 	.word	0x0800e488
 800cfe4:	0800e4a0 	.word	0x0800e4a0
 800cfe8:	54442d18 	.word	0x54442d18
 800cfec:	c00921fb 	.word	0xc00921fb
 800cff0:	54442d18 	.word	0x54442d18
 800cff4:	bff921fb 	.word	0xbff921fb
 800cff8:	7ff00000 	.word	0x7ff00000
 800cffc:	00000000 	.word	0x00000000

0800d000 <__ieee754_rem_pio2>:
 800d000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d004:	ed2d 8b02 	vpush	{d8}
 800d008:	ec55 4b10 	vmov	r4, r5, d0
 800d00c:	4bca      	ldr	r3, [pc, #808]	; (800d338 <__ieee754_rem_pio2+0x338>)
 800d00e:	b08b      	sub	sp, #44	; 0x2c
 800d010:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d014:	4598      	cmp	r8, r3
 800d016:	4682      	mov	sl, r0
 800d018:	9502      	str	r5, [sp, #8]
 800d01a:	dc08      	bgt.n	800d02e <__ieee754_rem_pio2+0x2e>
 800d01c:	2200      	movs	r2, #0
 800d01e:	2300      	movs	r3, #0
 800d020:	ed80 0b00 	vstr	d0, [r0]
 800d024:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d028:	f04f 0b00 	mov.w	fp, #0
 800d02c:	e028      	b.n	800d080 <__ieee754_rem_pio2+0x80>
 800d02e:	4bc3      	ldr	r3, [pc, #780]	; (800d33c <__ieee754_rem_pio2+0x33c>)
 800d030:	4598      	cmp	r8, r3
 800d032:	dc78      	bgt.n	800d126 <__ieee754_rem_pio2+0x126>
 800d034:	9b02      	ldr	r3, [sp, #8]
 800d036:	4ec2      	ldr	r6, [pc, #776]	; (800d340 <__ieee754_rem_pio2+0x340>)
 800d038:	2b00      	cmp	r3, #0
 800d03a:	ee10 0a10 	vmov	r0, s0
 800d03e:	a3b0      	add	r3, pc, #704	; (adr r3, 800d300 <__ieee754_rem_pio2+0x300>)
 800d040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d044:	4629      	mov	r1, r5
 800d046:	dd39      	ble.n	800d0bc <__ieee754_rem_pio2+0xbc>
 800d048:	f7f3 f91e 	bl	8000288 <__aeabi_dsub>
 800d04c:	45b0      	cmp	r8, r6
 800d04e:	4604      	mov	r4, r0
 800d050:	460d      	mov	r5, r1
 800d052:	d01b      	beq.n	800d08c <__ieee754_rem_pio2+0x8c>
 800d054:	a3ac      	add	r3, pc, #688	; (adr r3, 800d308 <__ieee754_rem_pio2+0x308>)
 800d056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d05a:	f7f3 f915 	bl	8000288 <__aeabi_dsub>
 800d05e:	4602      	mov	r2, r0
 800d060:	460b      	mov	r3, r1
 800d062:	e9ca 2300 	strd	r2, r3, [sl]
 800d066:	4620      	mov	r0, r4
 800d068:	4629      	mov	r1, r5
 800d06a:	f7f3 f90d 	bl	8000288 <__aeabi_dsub>
 800d06e:	a3a6      	add	r3, pc, #664	; (adr r3, 800d308 <__ieee754_rem_pio2+0x308>)
 800d070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d074:	f7f3 f908 	bl	8000288 <__aeabi_dsub>
 800d078:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d07c:	f04f 0b01 	mov.w	fp, #1
 800d080:	4658      	mov	r0, fp
 800d082:	b00b      	add	sp, #44	; 0x2c
 800d084:	ecbd 8b02 	vpop	{d8}
 800d088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d08c:	a3a0      	add	r3, pc, #640	; (adr r3, 800d310 <__ieee754_rem_pio2+0x310>)
 800d08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d092:	f7f3 f8f9 	bl	8000288 <__aeabi_dsub>
 800d096:	a3a0      	add	r3, pc, #640	; (adr r3, 800d318 <__ieee754_rem_pio2+0x318>)
 800d098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d09c:	4604      	mov	r4, r0
 800d09e:	460d      	mov	r5, r1
 800d0a0:	f7f3 f8f2 	bl	8000288 <__aeabi_dsub>
 800d0a4:	4602      	mov	r2, r0
 800d0a6:	460b      	mov	r3, r1
 800d0a8:	e9ca 2300 	strd	r2, r3, [sl]
 800d0ac:	4620      	mov	r0, r4
 800d0ae:	4629      	mov	r1, r5
 800d0b0:	f7f3 f8ea 	bl	8000288 <__aeabi_dsub>
 800d0b4:	a398      	add	r3, pc, #608	; (adr r3, 800d318 <__ieee754_rem_pio2+0x318>)
 800d0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ba:	e7db      	b.n	800d074 <__ieee754_rem_pio2+0x74>
 800d0bc:	f7f3 f8e6 	bl	800028c <__adddf3>
 800d0c0:	45b0      	cmp	r8, r6
 800d0c2:	4604      	mov	r4, r0
 800d0c4:	460d      	mov	r5, r1
 800d0c6:	d016      	beq.n	800d0f6 <__ieee754_rem_pio2+0xf6>
 800d0c8:	a38f      	add	r3, pc, #572	; (adr r3, 800d308 <__ieee754_rem_pio2+0x308>)
 800d0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ce:	f7f3 f8dd 	bl	800028c <__adddf3>
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	460b      	mov	r3, r1
 800d0d6:	e9ca 2300 	strd	r2, r3, [sl]
 800d0da:	4620      	mov	r0, r4
 800d0dc:	4629      	mov	r1, r5
 800d0de:	f7f3 f8d3 	bl	8000288 <__aeabi_dsub>
 800d0e2:	a389      	add	r3, pc, #548	; (adr r3, 800d308 <__ieee754_rem_pio2+0x308>)
 800d0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e8:	f7f3 f8d0 	bl	800028c <__adddf3>
 800d0ec:	f04f 3bff 	mov.w	fp, #4294967295
 800d0f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d0f4:	e7c4      	b.n	800d080 <__ieee754_rem_pio2+0x80>
 800d0f6:	a386      	add	r3, pc, #536	; (adr r3, 800d310 <__ieee754_rem_pio2+0x310>)
 800d0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0fc:	f7f3 f8c6 	bl	800028c <__adddf3>
 800d100:	a385      	add	r3, pc, #532	; (adr r3, 800d318 <__ieee754_rem_pio2+0x318>)
 800d102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d106:	4604      	mov	r4, r0
 800d108:	460d      	mov	r5, r1
 800d10a:	f7f3 f8bf 	bl	800028c <__adddf3>
 800d10e:	4602      	mov	r2, r0
 800d110:	460b      	mov	r3, r1
 800d112:	e9ca 2300 	strd	r2, r3, [sl]
 800d116:	4620      	mov	r0, r4
 800d118:	4629      	mov	r1, r5
 800d11a:	f7f3 f8b5 	bl	8000288 <__aeabi_dsub>
 800d11e:	a37e      	add	r3, pc, #504	; (adr r3, 800d318 <__ieee754_rem_pio2+0x318>)
 800d120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d124:	e7e0      	b.n	800d0e8 <__ieee754_rem_pio2+0xe8>
 800d126:	4b87      	ldr	r3, [pc, #540]	; (800d344 <__ieee754_rem_pio2+0x344>)
 800d128:	4598      	cmp	r8, r3
 800d12a:	f300 80d8 	bgt.w	800d2de <__ieee754_rem_pio2+0x2de>
 800d12e:	f000 fb0f 	bl	800d750 <fabs>
 800d132:	ec55 4b10 	vmov	r4, r5, d0
 800d136:	ee10 0a10 	vmov	r0, s0
 800d13a:	a379      	add	r3, pc, #484	; (adr r3, 800d320 <__ieee754_rem_pio2+0x320>)
 800d13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d140:	4629      	mov	r1, r5
 800d142:	f7f3 fa59 	bl	80005f8 <__aeabi_dmul>
 800d146:	4b80      	ldr	r3, [pc, #512]	; (800d348 <__ieee754_rem_pio2+0x348>)
 800d148:	2200      	movs	r2, #0
 800d14a:	f7f3 f89f 	bl	800028c <__adddf3>
 800d14e:	f7f3 fd03 	bl	8000b58 <__aeabi_d2iz>
 800d152:	4683      	mov	fp, r0
 800d154:	f7f3 f9e6 	bl	8000524 <__aeabi_i2d>
 800d158:	4602      	mov	r2, r0
 800d15a:	460b      	mov	r3, r1
 800d15c:	ec43 2b18 	vmov	d8, r2, r3
 800d160:	a367      	add	r3, pc, #412	; (adr r3, 800d300 <__ieee754_rem_pio2+0x300>)
 800d162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d166:	f7f3 fa47 	bl	80005f8 <__aeabi_dmul>
 800d16a:	4602      	mov	r2, r0
 800d16c:	460b      	mov	r3, r1
 800d16e:	4620      	mov	r0, r4
 800d170:	4629      	mov	r1, r5
 800d172:	f7f3 f889 	bl	8000288 <__aeabi_dsub>
 800d176:	a364      	add	r3, pc, #400	; (adr r3, 800d308 <__ieee754_rem_pio2+0x308>)
 800d178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d17c:	4606      	mov	r6, r0
 800d17e:	460f      	mov	r7, r1
 800d180:	ec51 0b18 	vmov	r0, r1, d8
 800d184:	f7f3 fa38 	bl	80005f8 <__aeabi_dmul>
 800d188:	f1bb 0f1f 	cmp.w	fp, #31
 800d18c:	4604      	mov	r4, r0
 800d18e:	460d      	mov	r5, r1
 800d190:	dc0d      	bgt.n	800d1ae <__ieee754_rem_pio2+0x1ae>
 800d192:	4b6e      	ldr	r3, [pc, #440]	; (800d34c <__ieee754_rem_pio2+0x34c>)
 800d194:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d19c:	4543      	cmp	r3, r8
 800d19e:	d006      	beq.n	800d1ae <__ieee754_rem_pio2+0x1ae>
 800d1a0:	4622      	mov	r2, r4
 800d1a2:	462b      	mov	r3, r5
 800d1a4:	4630      	mov	r0, r6
 800d1a6:	4639      	mov	r1, r7
 800d1a8:	f7f3 f86e 	bl	8000288 <__aeabi_dsub>
 800d1ac:	e00e      	b.n	800d1cc <__ieee754_rem_pio2+0x1cc>
 800d1ae:	462b      	mov	r3, r5
 800d1b0:	4622      	mov	r2, r4
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	4639      	mov	r1, r7
 800d1b6:	f7f3 f867 	bl	8000288 <__aeabi_dsub>
 800d1ba:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d1be:	9303      	str	r3, [sp, #12]
 800d1c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d1c4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800d1c8:	2b10      	cmp	r3, #16
 800d1ca:	dc02      	bgt.n	800d1d2 <__ieee754_rem_pio2+0x1d2>
 800d1cc:	e9ca 0100 	strd	r0, r1, [sl]
 800d1d0:	e039      	b.n	800d246 <__ieee754_rem_pio2+0x246>
 800d1d2:	a34f      	add	r3, pc, #316	; (adr r3, 800d310 <__ieee754_rem_pio2+0x310>)
 800d1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d8:	ec51 0b18 	vmov	r0, r1, d8
 800d1dc:	f7f3 fa0c 	bl	80005f8 <__aeabi_dmul>
 800d1e0:	4604      	mov	r4, r0
 800d1e2:	460d      	mov	r5, r1
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	4630      	mov	r0, r6
 800d1ea:	4639      	mov	r1, r7
 800d1ec:	f7f3 f84c 	bl	8000288 <__aeabi_dsub>
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	4680      	mov	r8, r0
 800d1f6:	4689      	mov	r9, r1
 800d1f8:	4630      	mov	r0, r6
 800d1fa:	4639      	mov	r1, r7
 800d1fc:	f7f3 f844 	bl	8000288 <__aeabi_dsub>
 800d200:	4622      	mov	r2, r4
 800d202:	462b      	mov	r3, r5
 800d204:	f7f3 f840 	bl	8000288 <__aeabi_dsub>
 800d208:	a343      	add	r3, pc, #268	; (adr r3, 800d318 <__ieee754_rem_pio2+0x318>)
 800d20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20e:	4604      	mov	r4, r0
 800d210:	460d      	mov	r5, r1
 800d212:	ec51 0b18 	vmov	r0, r1, d8
 800d216:	f7f3 f9ef 	bl	80005f8 <__aeabi_dmul>
 800d21a:	4622      	mov	r2, r4
 800d21c:	462b      	mov	r3, r5
 800d21e:	f7f3 f833 	bl	8000288 <__aeabi_dsub>
 800d222:	4602      	mov	r2, r0
 800d224:	460b      	mov	r3, r1
 800d226:	4604      	mov	r4, r0
 800d228:	460d      	mov	r5, r1
 800d22a:	4640      	mov	r0, r8
 800d22c:	4649      	mov	r1, r9
 800d22e:	f7f3 f82b 	bl	8000288 <__aeabi_dsub>
 800d232:	9a03      	ldr	r2, [sp, #12]
 800d234:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d238:	1ad3      	subs	r3, r2, r3
 800d23a:	2b31      	cmp	r3, #49	; 0x31
 800d23c:	dc24      	bgt.n	800d288 <__ieee754_rem_pio2+0x288>
 800d23e:	e9ca 0100 	strd	r0, r1, [sl]
 800d242:	4646      	mov	r6, r8
 800d244:	464f      	mov	r7, r9
 800d246:	e9da 8900 	ldrd	r8, r9, [sl]
 800d24a:	4630      	mov	r0, r6
 800d24c:	4642      	mov	r2, r8
 800d24e:	464b      	mov	r3, r9
 800d250:	4639      	mov	r1, r7
 800d252:	f7f3 f819 	bl	8000288 <__aeabi_dsub>
 800d256:	462b      	mov	r3, r5
 800d258:	4622      	mov	r2, r4
 800d25a:	f7f3 f815 	bl	8000288 <__aeabi_dsub>
 800d25e:	9b02      	ldr	r3, [sp, #8]
 800d260:	2b00      	cmp	r3, #0
 800d262:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d266:	f6bf af0b 	bge.w	800d080 <__ieee754_rem_pio2+0x80>
 800d26a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d26e:	f8ca 3004 	str.w	r3, [sl, #4]
 800d272:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d276:	f8ca 8000 	str.w	r8, [sl]
 800d27a:	f8ca 0008 	str.w	r0, [sl, #8]
 800d27e:	f8ca 300c 	str.w	r3, [sl, #12]
 800d282:	f1cb 0b00 	rsb	fp, fp, #0
 800d286:	e6fb      	b.n	800d080 <__ieee754_rem_pio2+0x80>
 800d288:	a327      	add	r3, pc, #156	; (adr r3, 800d328 <__ieee754_rem_pio2+0x328>)
 800d28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28e:	ec51 0b18 	vmov	r0, r1, d8
 800d292:	f7f3 f9b1 	bl	80005f8 <__aeabi_dmul>
 800d296:	4604      	mov	r4, r0
 800d298:	460d      	mov	r5, r1
 800d29a:	4602      	mov	r2, r0
 800d29c:	460b      	mov	r3, r1
 800d29e:	4640      	mov	r0, r8
 800d2a0:	4649      	mov	r1, r9
 800d2a2:	f7f2 fff1 	bl	8000288 <__aeabi_dsub>
 800d2a6:	4602      	mov	r2, r0
 800d2a8:	460b      	mov	r3, r1
 800d2aa:	4606      	mov	r6, r0
 800d2ac:	460f      	mov	r7, r1
 800d2ae:	4640      	mov	r0, r8
 800d2b0:	4649      	mov	r1, r9
 800d2b2:	f7f2 ffe9 	bl	8000288 <__aeabi_dsub>
 800d2b6:	4622      	mov	r2, r4
 800d2b8:	462b      	mov	r3, r5
 800d2ba:	f7f2 ffe5 	bl	8000288 <__aeabi_dsub>
 800d2be:	a31c      	add	r3, pc, #112	; (adr r3, 800d330 <__ieee754_rem_pio2+0x330>)
 800d2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c4:	4604      	mov	r4, r0
 800d2c6:	460d      	mov	r5, r1
 800d2c8:	ec51 0b18 	vmov	r0, r1, d8
 800d2cc:	f7f3 f994 	bl	80005f8 <__aeabi_dmul>
 800d2d0:	4622      	mov	r2, r4
 800d2d2:	462b      	mov	r3, r5
 800d2d4:	f7f2 ffd8 	bl	8000288 <__aeabi_dsub>
 800d2d8:	4604      	mov	r4, r0
 800d2da:	460d      	mov	r5, r1
 800d2dc:	e760      	b.n	800d1a0 <__ieee754_rem_pio2+0x1a0>
 800d2de:	4b1c      	ldr	r3, [pc, #112]	; (800d350 <__ieee754_rem_pio2+0x350>)
 800d2e0:	4598      	cmp	r8, r3
 800d2e2:	dd37      	ble.n	800d354 <__ieee754_rem_pio2+0x354>
 800d2e4:	ee10 2a10 	vmov	r2, s0
 800d2e8:	462b      	mov	r3, r5
 800d2ea:	4620      	mov	r0, r4
 800d2ec:	4629      	mov	r1, r5
 800d2ee:	f7f2 ffcb 	bl	8000288 <__aeabi_dsub>
 800d2f2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d2f6:	e9ca 0100 	strd	r0, r1, [sl]
 800d2fa:	e695      	b.n	800d028 <__ieee754_rem_pio2+0x28>
 800d2fc:	f3af 8000 	nop.w
 800d300:	54400000 	.word	0x54400000
 800d304:	3ff921fb 	.word	0x3ff921fb
 800d308:	1a626331 	.word	0x1a626331
 800d30c:	3dd0b461 	.word	0x3dd0b461
 800d310:	1a600000 	.word	0x1a600000
 800d314:	3dd0b461 	.word	0x3dd0b461
 800d318:	2e037073 	.word	0x2e037073
 800d31c:	3ba3198a 	.word	0x3ba3198a
 800d320:	6dc9c883 	.word	0x6dc9c883
 800d324:	3fe45f30 	.word	0x3fe45f30
 800d328:	2e000000 	.word	0x2e000000
 800d32c:	3ba3198a 	.word	0x3ba3198a
 800d330:	252049c1 	.word	0x252049c1
 800d334:	397b839a 	.word	0x397b839a
 800d338:	3fe921fb 	.word	0x3fe921fb
 800d33c:	4002d97b 	.word	0x4002d97b
 800d340:	3ff921fb 	.word	0x3ff921fb
 800d344:	413921fb 	.word	0x413921fb
 800d348:	3fe00000 	.word	0x3fe00000
 800d34c:	0800e4b8 	.word	0x0800e4b8
 800d350:	7fefffff 	.word	0x7fefffff
 800d354:	ea4f 5628 	mov.w	r6, r8, asr #20
 800d358:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800d35c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800d360:	4620      	mov	r0, r4
 800d362:	460d      	mov	r5, r1
 800d364:	f7f3 fbf8 	bl	8000b58 <__aeabi_d2iz>
 800d368:	f7f3 f8dc 	bl	8000524 <__aeabi_i2d>
 800d36c:	4602      	mov	r2, r0
 800d36e:	460b      	mov	r3, r1
 800d370:	4620      	mov	r0, r4
 800d372:	4629      	mov	r1, r5
 800d374:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d378:	f7f2 ff86 	bl	8000288 <__aeabi_dsub>
 800d37c:	4b21      	ldr	r3, [pc, #132]	; (800d404 <__ieee754_rem_pio2+0x404>)
 800d37e:	2200      	movs	r2, #0
 800d380:	f7f3 f93a 	bl	80005f8 <__aeabi_dmul>
 800d384:	460d      	mov	r5, r1
 800d386:	4604      	mov	r4, r0
 800d388:	f7f3 fbe6 	bl	8000b58 <__aeabi_d2iz>
 800d38c:	f7f3 f8ca 	bl	8000524 <__aeabi_i2d>
 800d390:	4602      	mov	r2, r0
 800d392:	460b      	mov	r3, r1
 800d394:	4620      	mov	r0, r4
 800d396:	4629      	mov	r1, r5
 800d398:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d39c:	f7f2 ff74 	bl	8000288 <__aeabi_dsub>
 800d3a0:	4b18      	ldr	r3, [pc, #96]	; (800d404 <__ieee754_rem_pio2+0x404>)
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	f7f3 f928 	bl	80005f8 <__aeabi_dmul>
 800d3a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d3ac:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800d3b0:	2703      	movs	r7, #3
 800d3b2:	2400      	movs	r4, #0
 800d3b4:	2500      	movs	r5, #0
 800d3b6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800d3ba:	4622      	mov	r2, r4
 800d3bc:	462b      	mov	r3, r5
 800d3be:	46b9      	mov	r9, r7
 800d3c0:	3f01      	subs	r7, #1
 800d3c2:	f7f3 fb81 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	d1f5      	bne.n	800d3b6 <__ieee754_rem_pio2+0x3b6>
 800d3ca:	4b0f      	ldr	r3, [pc, #60]	; (800d408 <__ieee754_rem_pio2+0x408>)
 800d3cc:	9301      	str	r3, [sp, #4]
 800d3ce:	2302      	movs	r3, #2
 800d3d0:	9300      	str	r3, [sp, #0]
 800d3d2:	4632      	mov	r2, r6
 800d3d4:	464b      	mov	r3, r9
 800d3d6:	4651      	mov	r1, sl
 800d3d8:	a804      	add	r0, sp, #16
 800d3da:	f000 f9c5 	bl	800d768 <__kernel_rem_pio2>
 800d3de:	9b02      	ldr	r3, [sp, #8]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	4683      	mov	fp, r0
 800d3e4:	f6bf ae4c 	bge.w	800d080 <__ieee754_rem_pio2+0x80>
 800d3e8:	e9da 2100 	ldrd	r2, r1, [sl]
 800d3ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d3f0:	e9ca 2300 	strd	r2, r3, [sl]
 800d3f4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800d3f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d3fc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800d400:	e73f      	b.n	800d282 <__ieee754_rem_pio2+0x282>
 800d402:	bf00      	nop
 800d404:	41700000 	.word	0x41700000
 800d408:	0800e538 	.word	0x0800e538
 800d40c:	00000000 	.word	0x00000000

0800d410 <atan>:
 800d410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d414:	ec55 4b10 	vmov	r4, r5, d0
 800d418:	4bc3      	ldr	r3, [pc, #780]	; (800d728 <atan+0x318>)
 800d41a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d41e:	429e      	cmp	r6, r3
 800d420:	46ab      	mov	fp, r5
 800d422:	dd18      	ble.n	800d456 <atan+0x46>
 800d424:	4bc1      	ldr	r3, [pc, #772]	; (800d72c <atan+0x31c>)
 800d426:	429e      	cmp	r6, r3
 800d428:	dc01      	bgt.n	800d42e <atan+0x1e>
 800d42a:	d109      	bne.n	800d440 <atan+0x30>
 800d42c:	b144      	cbz	r4, 800d440 <atan+0x30>
 800d42e:	4622      	mov	r2, r4
 800d430:	462b      	mov	r3, r5
 800d432:	4620      	mov	r0, r4
 800d434:	4629      	mov	r1, r5
 800d436:	f7f2 ff29 	bl	800028c <__adddf3>
 800d43a:	4604      	mov	r4, r0
 800d43c:	460d      	mov	r5, r1
 800d43e:	e006      	b.n	800d44e <atan+0x3e>
 800d440:	f1bb 0f00 	cmp.w	fp, #0
 800d444:	f300 8131 	bgt.w	800d6aa <atan+0x29a>
 800d448:	a59b      	add	r5, pc, #620	; (adr r5, 800d6b8 <atan+0x2a8>)
 800d44a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d44e:	ec45 4b10 	vmov	d0, r4, r5
 800d452:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d456:	4bb6      	ldr	r3, [pc, #728]	; (800d730 <atan+0x320>)
 800d458:	429e      	cmp	r6, r3
 800d45a:	dc14      	bgt.n	800d486 <atan+0x76>
 800d45c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d460:	429e      	cmp	r6, r3
 800d462:	dc0d      	bgt.n	800d480 <atan+0x70>
 800d464:	a396      	add	r3, pc, #600	; (adr r3, 800d6c0 <atan+0x2b0>)
 800d466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d46a:	ee10 0a10 	vmov	r0, s0
 800d46e:	4629      	mov	r1, r5
 800d470:	f7f2 ff0c 	bl	800028c <__adddf3>
 800d474:	4baf      	ldr	r3, [pc, #700]	; (800d734 <atan+0x324>)
 800d476:	2200      	movs	r2, #0
 800d478:	f7f3 fb4e 	bl	8000b18 <__aeabi_dcmpgt>
 800d47c:	2800      	cmp	r0, #0
 800d47e:	d1e6      	bne.n	800d44e <atan+0x3e>
 800d480:	f04f 3aff 	mov.w	sl, #4294967295
 800d484:	e02b      	b.n	800d4de <atan+0xce>
 800d486:	f000 f963 	bl	800d750 <fabs>
 800d48a:	4bab      	ldr	r3, [pc, #684]	; (800d738 <atan+0x328>)
 800d48c:	429e      	cmp	r6, r3
 800d48e:	ec55 4b10 	vmov	r4, r5, d0
 800d492:	f300 80bf 	bgt.w	800d614 <atan+0x204>
 800d496:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d49a:	429e      	cmp	r6, r3
 800d49c:	f300 80a0 	bgt.w	800d5e0 <atan+0x1d0>
 800d4a0:	ee10 2a10 	vmov	r2, s0
 800d4a4:	ee10 0a10 	vmov	r0, s0
 800d4a8:	462b      	mov	r3, r5
 800d4aa:	4629      	mov	r1, r5
 800d4ac:	f7f2 feee 	bl	800028c <__adddf3>
 800d4b0:	4ba0      	ldr	r3, [pc, #640]	; (800d734 <atan+0x324>)
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	f7f2 fee8 	bl	8000288 <__aeabi_dsub>
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	4606      	mov	r6, r0
 800d4bc:	460f      	mov	r7, r1
 800d4be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d4c2:	4620      	mov	r0, r4
 800d4c4:	4629      	mov	r1, r5
 800d4c6:	f7f2 fee1 	bl	800028c <__adddf3>
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	4630      	mov	r0, r6
 800d4d0:	4639      	mov	r1, r7
 800d4d2:	f7f3 f9bb 	bl	800084c <__aeabi_ddiv>
 800d4d6:	f04f 0a00 	mov.w	sl, #0
 800d4da:	4604      	mov	r4, r0
 800d4dc:	460d      	mov	r5, r1
 800d4de:	4622      	mov	r2, r4
 800d4e0:	462b      	mov	r3, r5
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	4629      	mov	r1, r5
 800d4e6:	f7f3 f887 	bl	80005f8 <__aeabi_dmul>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	4680      	mov	r8, r0
 800d4f0:	4689      	mov	r9, r1
 800d4f2:	f7f3 f881 	bl	80005f8 <__aeabi_dmul>
 800d4f6:	a374      	add	r3, pc, #464	; (adr r3, 800d6c8 <atan+0x2b8>)
 800d4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fc:	4606      	mov	r6, r0
 800d4fe:	460f      	mov	r7, r1
 800d500:	f7f3 f87a 	bl	80005f8 <__aeabi_dmul>
 800d504:	a372      	add	r3, pc, #456	; (adr r3, 800d6d0 <atan+0x2c0>)
 800d506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50a:	f7f2 febf 	bl	800028c <__adddf3>
 800d50e:	4632      	mov	r2, r6
 800d510:	463b      	mov	r3, r7
 800d512:	f7f3 f871 	bl	80005f8 <__aeabi_dmul>
 800d516:	a370      	add	r3, pc, #448	; (adr r3, 800d6d8 <atan+0x2c8>)
 800d518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51c:	f7f2 feb6 	bl	800028c <__adddf3>
 800d520:	4632      	mov	r2, r6
 800d522:	463b      	mov	r3, r7
 800d524:	f7f3 f868 	bl	80005f8 <__aeabi_dmul>
 800d528:	a36d      	add	r3, pc, #436	; (adr r3, 800d6e0 <atan+0x2d0>)
 800d52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52e:	f7f2 fead 	bl	800028c <__adddf3>
 800d532:	4632      	mov	r2, r6
 800d534:	463b      	mov	r3, r7
 800d536:	f7f3 f85f 	bl	80005f8 <__aeabi_dmul>
 800d53a:	a36b      	add	r3, pc, #428	; (adr r3, 800d6e8 <atan+0x2d8>)
 800d53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d540:	f7f2 fea4 	bl	800028c <__adddf3>
 800d544:	4632      	mov	r2, r6
 800d546:	463b      	mov	r3, r7
 800d548:	f7f3 f856 	bl	80005f8 <__aeabi_dmul>
 800d54c:	a368      	add	r3, pc, #416	; (adr r3, 800d6f0 <atan+0x2e0>)
 800d54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d552:	f7f2 fe9b 	bl	800028c <__adddf3>
 800d556:	4642      	mov	r2, r8
 800d558:	464b      	mov	r3, r9
 800d55a:	f7f3 f84d 	bl	80005f8 <__aeabi_dmul>
 800d55e:	a366      	add	r3, pc, #408	; (adr r3, 800d6f8 <atan+0x2e8>)
 800d560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d564:	4680      	mov	r8, r0
 800d566:	4689      	mov	r9, r1
 800d568:	4630      	mov	r0, r6
 800d56a:	4639      	mov	r1, r7
 800d56c:	f7f3 f844 	bl	80005f8 <__aeabi_dmul>
 800d570:	a363      	add	r3, pc, #396	; (adr r3, 800d700 <atan+0x2f0>)
 800d572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d576:	f7f2 fe87 	bl	8000288 <__aeabi_dsub>
 800d57a:	4632      	mov	r2, r6
 800d57c:	463b      	mov	r3, r7
 800d57e:	f7f3 f83b 	bl	80005f8 <__aeabi_dmul>
 800d582:	a361      	add	r3, pc, #388	; (adr r3, 800d708 <atan+0x2f8>)
 800d584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d588:	f7f2 fe7e 	bl	8000288 <__aeabi_dsub>
 800d58c:	4632      	mov	r2, r6
 800d58e:	463b      	mov	r3, r7
 800d590:	f7f3 f832 	bl	80005f8 <__aeabi_dmul>
 800d594:	a35e      	add	r3, pc, #376	; (adr r3, 800d710 <atan+0x300>)
 800d596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59a:	f7f2 fe75 	bl	8000288 <__aeabi_dsub>
 800d59e:	4632      	mov	r2, r6
 800d5a0:	463b      	mov	r3, r7
 800d5a2:	f7f3 f829 	bl	80005f8 <__aeabi_dmul>
 800d5a6:	a35c      	add	r3, pc, #368	; (adr r3, 800d718 <atan+0x308>)
 800d5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ac:	f7f2 fe6c 	bl	8000288 <__aeabi_dsub>
 800d5b0:	4632      	mov	r2, r6
 800d5b2:	463b      	mov	r3, r7
 800d5b4:	f7f3 f820 	bl	80005f8 <__aeabi_dmul>
 800d5b8:	4602      	mov	r2, r0
 800d5ba:	460b      	mov	r3, r1
 800d5bc:	4640      	mov	r0, r8
 800d5be:	4649      	mov	r1, r9
 800d5c0:	f7f2 fe64 	bl	800028c <__adddf3>
 800d5c4:	4622      	mov	r2, r4
 800d5c6:	462b      	mov	r3, r5
 800d5c8:	f7f3 f816 	bl	80005f8 <__aeabi_dmul>
 800d5cc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d5d0:	4602      	mov	r2, r0
 800d5d2:	460b      	mov	r3, r1
 800d5d4:	d14b      	bne.n	800d66e <atan+0x25e>
 800d5d6:	4620      	mov	r0, r4
 800d5d8:	4629      	mov	r1, r5
 800d5da:	f7f2 fe55 	bl	8000288 <__aeabi_dsub>
 800d5de:	e72c      	b.n	800d43a <atan+0x2a>
 800d5e0:	ee10 0a10 	vmov	r0, s0
 800d5e4:	4b53      	ldr	r3, [pc, #332]	; (800d734 <atan+0x324>)
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	4629      	mov	r1, r5
 800d5ea:	f7f2 fe4d 	bl	8000288 <__aeabi_dsub>
 800d5ee:	4b51      	ldr	r3, [pc, #324]	; (800d734 <atan+0x324>)
 800d5f0:	4606      	mov	r6, r0
 800d5f2:	460f      	mov	r7, r1
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	4620      	mov	r0, r4
 800d5f8:	4629      	mov	r1, r5
 800d5fa:	f7f2 fe47 	bl	800028c <__adddf3>
 800d5fe:	4602      	mov	r2, r0
 800d600:	460b      	mov	r3, r1
 800d602:	4630      	mov	r0, r6
 800d604:	4639      	mov	r1, r7
 800d606:	f7f3 f921 	bl	800084c <__aeabi_ddiv>
 800d60a:	f04f 0a01 	mov.w	sl, #1
 800d60e:	4604      	mov	r4, r0
 800d610:	460d      	mov	r5, r1
 800d612:	e764      	b.n	800d4de <atan+0xce>
 800d614:	4b49      	ldr	r3, [pc, #292]	; (800d73c <atan+0x32c>)
 800d616:	429e      	cmp	r6, r3
 800d618:	da1d      	bge.n	800d656 <atan+0x246>
 800d61a:	ee10 0a10 	vmov	r0, s0
 800d61e:	4b48      	ldr	r3, [pc, #288]	; (800d740 <atan+0x330>)
 800d620:	2200      	movs	r2, #0
 800d622:	4629      	mov	r1, r5
 800d624:	f7f2 fe30 	bl	8000288 <__aeabi_dsub>
 800d628:	4b45      	ldr	r3, [pc, #276]	; (800d740 <atan+0x330>)
 800d62a:	4606      	mov	r6, r0
 800d62c:	460f      	mov	r7, r1
 800d62e:	2200      	movs	r2, #0
 800d630:	4620      	mov	r0, r4
 800d632:	4629      	mov	r1, r5
 800d634:	f7f2 ffe0 	bl	80005f8 <__aeabi_dmul>
 800d638:	4b3e      	ldr	r3, [pc, #248]	; (800d734 <atan+0x324>)
 800d63a:	2200      	movs	r2, #0
 800d63c:	f7f2 fe26 	bl	800028c <__adddf3>
 800d640:	4602      	mov	r2, r0
 800d642:	460b      	mov	r3, r1
 800d644:	4630      	mov	r0, r6
 800d646:	4639      	mov	r1, r7
 800d648:	f7f3 f900 	bl	800084c <__aeabi_ddiv>
 800d64c:	f04f 0a02 	mov.w	sl, #2
 800d650:	4604      	mov	r4, r0
 800d652:	460d      	mov	r5, r1
 800d654:	e743      	b.n	800d4de <atan+0xce>
 800d656:	462b      	mov	r3, r5
 800d658:	ee10 2a10 	vmov	r2, s0
 800d65c:	4939      	ldr	r1, [pc, #228]	; (800d744 <atan+0x334>)
 800d65e:	2000      	movs	r0, #0
 800d660:	f7f3 f8f4 	bl	800084c <__aeabi_ddiv>
 800d664:	f04f 0a03 	mov.w	sl, #3
 800d668:	4604      	mov	r4, r0
 800d66a:	460d      	mov	r5, r1
 800d66c:	e737      	b.n	800d4de <atan+0xce>
 800d66e:	4b36      	ldr	r3, [pc, #216]	; (800d748 <atan+0x338>)
 800d670:	4e36      	ldr	r6, [pc, #216]	; (800d74c <atan+0x33c>)
 800d672:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d67a:	f7f2 fe05 	bl	8000288 <__aeabi_dsub>
 800d67e:	4622      	mov	r2, r4
 800d680:	462b      	mov	r3, r5
 800d682:	f7f2 fe01 	bl	8000288 <__aeabi_dsub>
 800d686:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d68a:	4602      	mov	r2, r0
 800d68c:	460b      	mov	r3, r1
 800d68e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d692:	f7f2 fdf9 	bl	8000288 <__aeabi_dsub>
 800d696:	f1bb 0f00 	cmp.w	fp, #0
 800d69a:	4604      	mov	r4, r0
 800d69c:	460d      	mov	r5, r1
 800d69e:	f6bf aed6 	bge.w	800d44e <atan+0x3e>
 800d6a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6a6:	461d      	mov	r5, r3
 800d6a8:	e6d1      	b.n	800d44e <atan+0x3e>
 800d6aa:	a51d      	add	r5, pc, #116	; (adr r5, 800d720 <atan+0x310>)
 800d6ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d6b0:	e6cd      	b.n	800d44e <atan+0x3e>
 800d6b2:	bf00      	nop
 800d6b4:	f3af 8000 	nop.w
 800d6b8:	54442d18 	.word	0x54442d18
 800d6bc:	bff921fb 	.word	0xbff921fb
 800d6c0:	8800759c 	.word	0x8800759c
 800d6c4:	7e37e43c 	.word	0x7e37e43c
 800d6c8:	e322da11 	.word	0xe322da11
 800d6cc:	3f90ad3a 	.word	0x3f90ad3a
 800d6d0:	24760deb 	.word	0x24760deb
 800d6d4:	3fa97b4b 	.word	0x3fa97b4b
 800d6d8:	a0d03d51 	.word	0xa0d03d51
 800d6dc:	3fb10d66 	.word	0x3fb10d66
 800d6e0:	c54c206e 	.word	0xc54c206e
 800d6e4:	3fb745cd 	.word	0x3fb745cd
 800d6e8:	920083ff 	.word	0x920083ff
 800d6ec:	3fc24924 	.word	0x3fc24924
 800d6f0:	5555550d 	.word	0x5555550d
 800d6f4:	3fd55555 	.word	0x3fd55555
 800d6f8:	2c6a6c2f 	.word	0x2c6a6c2f
 800d6fc:	bfa2b444 	.word	0xbfa2b444
 800d700:	52defd9a 	.word	0x52defd9a
 800d704:	3fadde2d 	.word	0x3fadde2d
 800d708:	af749a6d 	.word	0xaf749a6d
 800d70c:	3fb3b0f2 	.word	0x3fb3b0f2
 800d710:	fe231671 	.word	0xfe231671
 800d714:	3fbc71c6 	.word	0x3fbc71c6
 800d718:	9998ebc4 	.word	0x9998ebc4
 800d71c:	3fc99999 	.word	0x3fc99999
 800d720:	54442d18 	.word	0x54442d18
 800d724:	3ff921fb 	.word	0x3ff921fb
 800d728:	440fffff 	.word	0x440fffff
 800d72c:	7ff00000 	.word	0x7ff00000
 800d730:	3fdbffff 	.word	0x3fdbffff
 800d734:	3ff00000 	.word	0x3ff00000
 800d738:	3ff2ffff 	.word	0x3ff2ffff
 800d73c:	40038000 	.word	0x40038000
 800d740:	3ff80000 	.word	0x3ff80000
 800d744:	bff00000 	.word	0xbff00000
 800d748:	0800e660 	.word	0x0800e660
 800d74c:	0800e640 	.word	0x0800e640

0800d750 <fabs>:
 800d750:	ec51 0b10 	vmov	r0, r1, d0
 800d754:	ee10 2a10 	vmov	r2, s0
 800d758:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d75c:	ec43 2b10 	vmov	d0, r2, r3
 800d760:	4770      	bx	lr
 800d762:	0000      	movs	r0, r0
 800d764:	0000      	movs	r0, r0
	...

0800d768 <__kernel_rem_pio2>:
 800d768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d76c:	ed2d 8b02 	vpush	{d8}
 800d770:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d774:	f112 0f14 	cmn.w	r2, #20
 800d778:	9306      	str	r3, [sp, #24]
 800d77a:	9104      	str	r1, [sp, #16]
 800d77c:	4bc2      	ldr	r3, [pc, #776]	; (800da88 <__kernel_rem_pio2+0x320>)
 800d77e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800d780:	9009      	str	r0, [sp, #36]	; 0x24
 800d782:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d786:	9300      	str	r3, [sp, #0]
 800d788:	9b06      	ldr	r3, [sp, #24]
 800d78a:	f103 33ff 	add.w	r3, r3, #4294967295
 800d78e:	bfa8      	it	ge
 800d790:	1ed4      	subge	r4, r2, #3
 800d792:	9305      	str	r3, [sp, #20]
 800d794:	bfb2      	itee	lt
 800d796:	2400      	movlt	r4, #0
 800d798:	2318      	movge	r3, #24
 800d79a:	fb94 f4f3 	sdivge	r4, r4, r3
 800d79e:	f06f 0317 	mvn.w	r3, #23
 800d7a2:	fb04 3303 	mla	r3, r4, r3, r3
 800d7a6:	eb03 0a02 	add.w	sl, r3, r2
 800d7aa:	9b00      	ldr	r3, [sp, #0]
 800d7ac:	9a05      	ldr	r2, [sp, #20]
 800d7ae:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800da78 <__kernel_rem_pio2+0x310>
 800d7b2:	eb03 0802 	add.w	r8, r3, r2
 800d7b6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d7b8:	1aa7      	subs	r7, r4, r2
 800d7ba:	ae20      	add	r6, sp, #128	; 0x80
 800d7bc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d7c0:	2500      	movs	r5, #0
 800d7c2:	4545      	cmp	r5, r8
 800d7c4:	dd13      	ble.n	800d7ee <__kernel_rem_pio2+0x86>
 800d7c6:	9b06      	ldr	r3, [sp, #24]
 800d7c8:	aa20      	add	r2, sp, #128	; 0x80
 800d7ca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d7ce:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800d7d2:	f04f 0800 	mov.w	r8, #0
 800d7d6:	9b00      	ldr	r3, [sp, #0]
 800d7d8:	4598      	cmp	r8, r3
 800d7da:	dc31      	bgt.n	800d840 <__kernel_rem_pio2+0xd8>
 800d7dc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800da78 <__kernel_rem_pio2+0x310>
 800d7e0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d7e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d7e8:	462f      	mov	r7, r5
 800d7ea:	2600      	movs	r6, #0
 800d7ec:	e01b      	b.n	800d826 <__kernel_rem_pio2+0xbe>
 800d7ee:	42ef      	cmn	r7, r5
 800d7f0:	d407      	bmi.n	800d802 <__kernel_rem_pio2+0x9a>
 800d7f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d7f6:	f7f2 fe95 	bl	8000524 <__aeabi_i2d>
 800d7fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d7fe:	3501      	adds	r5, #1
 800d800:	e7df      	b.n	800d7c2 <__kernel_rem_pio2+0x5a>
 800d802:	ec51 0b18 	vmov	r0, r1, d8
 800d806:	e7f8      	b.n	800d7fa <__kernel_rem_pio2+0x92>
 800d808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d80c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d810:	f7f2 fef2 	bl	80005f8 <__aeabi_dmul>
 800d814:	4602      	mov	r2, r0
 800d816:	460b      	mov	r3, r1
 800d818:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d81c:	f7f2 fd36 	bl	800028c <__adddf3>
 800d820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d824:	3601      	adds	r6, #1
 800d826:	9b05      	ldr	r3, [sp, #20]
 800d828:	429e      	cmp	r6, r3
 800d82a:	f1a7 0708 	sub.w	r7, r7, #8
 800d82e:	ddeb      	ble.n	800d808 <__kernel_rem_pio2+0xa0>
 800d830:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d834:	f108 0801 	add.w	r8, r8, #1
 800d838:	ecab 7b02 	vstmia	fp!, {d7}
 800d83c:	3508      	adds	r5, #8
 800d83e:	e7ca      	b.n	800d7d6 <__kernel_rem_pio2+0x6e>
 800d840:	9b00      	ldr	r3, [sp, #0]
 800d842:	aa0c      	add	r2, sp, #48	; 0x30
 800d844:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d848:	930b      	str	r3, [sp, #44]	; 0x2c
 800d84a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d84c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d850:	9c00      	ldr	r4, [sp, #0]
 800d852:	930a      	str	r3, [sp, #40]	; 0x28
 800d854:	00e3      	lsls	r3, r4, #3
 800d856:	9308      	str	r3, [sp, #32]
 800d858:	ab98      	add	r3, sp, #608	; 0x260
 800d85a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d85e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d862:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800d866:	ab70      	add	r3, sp, #448	; 0x1c0
 800d868:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d86c:	46c3      	mov	fp, r8
 800d86e:	46a1      	mov	r9, r4
 800d870:	f1b9 0f00 	cmp.w	r9, #0
 800d874:	f1a5 0508 	sub.w	r5, r5, #8
 800d878:	dc77      	bgt.n	800d96a <__kernel_rem_pio2+0x202>
 800d87a:	ec47 6b10 	vmov	d0, r6, r7
 800d87e:	4650      	mov	r0, sl
 800d880:	f000 fac2 	bl	800de08 <scalbn>
 800d884:	ec57 6b10 	vmov	r6, r7, d0
 800d888:	2200      	movs	r2, #0
 800d88a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d88e:	ee10 0a10 	vmov	r0, s0
 800d892:	4639      	mov	r1, r7
 800d894:	f7f2 feb0 	bl	80005f8 <__aeabi_dmul>
 800d898:	ec41 0b10 	vmov	d0, r0, r1
 800d89c:	f000 fb34 	bl	800df08 <floor>
 800d8a0:	4b7a      	ldr	r3, [pc, #488]	; (800da8c <__kernel_rem_pio2+0x324>)
 800d8a2:	ec51 0b10 	vmov	r0, r1, d0
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	f7f2 fea6 	bl	80005f8 <__aeabi_dmul>
 800d8ac:	4602      	mov	r2, r0
 800d8ae:	460b      	mov	r3, r1
 800d8b0:	4630      	mov	r0, r6
 800d8b2:	4639      	mov	r1, r7
 800d8b4:	f7f2 fce8 	bl	8000288 <__aeabi_dsub>
 800d8b8:	460f      	mov	r7, r1
 800d8ba:	4606      	mov	r6, r0
 800d8bc:	f7f3 f94c 	bl	8000b58 <__aeabi_d2iz>
 800d8c0:	9002      	str	r0, [sp, #8]
 800d8c2:	f7f2 fe2f 	bl	8000524 <__aeabi_i2d>
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	4630      	mov	r0, r6
 800d8cc:	4639      	mov	r1, r7
 800d8ce:	f7f2 fcdb 	bl	8000288 <__aeabi_dsub>
 800d8d2:	f1ba 0f00 	cmp.w	sl, #0
 800d8d6:	4606      	mov	r6, r0
 800d8d8:	460f      	mov	r7, r1
 800d8da:	dd6d      	ble.n	800d9b8 <__kernel_rem_pio2+0x250>
 800d8dc:	1e61      	subs	r1, r4, #1
 800d8de:	ab0c      	add	r3, sp, #48	; 0x30
 800d8e0:	9d02      	ldr	r5, [sp, #8]
 800d8e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d8e6:	f1ca 0018 	rsb	r0, sl, #24
 800d8ea:	fa43 f200 	asr.w	r2, r3, r0
 800d8ee:	4415      	add	r5, r2
 800d8f0:	4082      	lsls	r2, r0
 800d8f2:	1a9b      	subs	r3, r3, r2
 800d8f4:	aa0c      	add	r2, sp, #48	; 0x30
 800d8f6:	9502      	str	r5, [sp, #8]
 800d8f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d8fc:	f1ca 0217 	rsb	r2, sl, #23
 800d900:	fa43 fb02 	asr.w	fp, r3, r2
 800d904:	f1bb 0f00 	cmp.w	fp, #0
 800d908:	dd65      	ble.n	800d9d6 <__kernel_rem_pio2+0x26e>
 800d90a:	9b02      	ldr	r3, [sp, #8]
 800d90c:	2200      	movs	r2, #0
 800d90e:	3301      	adds	r3, #1
 800d910:	9302      	str	r3, [sp, #8]
 800d912:	4615      	mov	r5, r2
 800d914:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d918:	4294      	cmp	r4, r2
 800d91a:	f300 809f 	bgt.w	800da5c <__kernel_rem_pio2+0x2f4>
 800d91e:	f1ba 0f00 	cmp.w	sl, #0
 800d922:	dd07      	ble.n	800d934 <__kernel_rem_pio2+0x1cc>
 800d924:	f1ba 0f01 	cmp.w	sl, #1
 800d928:	f000 80c1 	beq.w	800daae <__kernel_rem_pio2+0x346>
 800d92c:	f1ba 0f02 	cmp.w	sl, #2
 800d930:	f000 80c7 	beq.w	800dac2 <__kernel_rem_pio2+0x35a>
 800d934:	f1bb 0f02 	cmp.w	fp, #2
 800d938:	d14d      	bne.n	800d9d6 <__kernel_rem_pio2+0x26e>
 800d93a:	4632      	mov	r2, r6
 800d93c:	463b      	mov	r3, r7
 800d93e:	4954      	ldr	r1, [pc, #336]	; (800da90 <__kernel_rem_pio2+0x328>)
 800d940:	2000      	movs	r0, #0
 800d942:	f7f2 fca1 	bl	8000288 <__aeabi_dsub>
 800d946:	4606      	mov	r6, r0
 800d948:	460f      	mov	r7, r1
 800d94a:	2d00      	cmp	r5, #0
 800d94c:	d043      	beq.n	800d9d6 <__kernel_rem_pio2+0x26e>
 800d94e:	4650      	mov	r0, sl
 800d950:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800da80 <__kernel_rem_pio2+0x318>
 800d954:	f000 fa58 	bl	800de08 <scalbn>
 800d958:	4630      	mov	r0, r6
 800d95a:	4639      	mov	r1, r7
 800d95c:	ec53 2b10 	vmov	r2, r3, d0
 800d960:	f7f2 fc92 	bl	8000288 <__aeabi_dsub>
 800d964:	4606      	mov	r6, r0
 800d966:	460f      	mov	r7, r1
 800d968:	e035      	b.n	800d9d6 <__kernel_rem_pio2+0x26e>
 800d96a:	4b4a      	ldr	r3, [pc, #296]	; (800da94 <__kernel_rem_pio2+0x32c>)
 800d96c:	2200      	movs	r2, #0
 800d96e:	4630      	mov	r0, r6
 800d970:	4639      	mov	r1, r7
 800d972:	f7f2 fe41 	bl	80005f8 <__aeabi_dmul>
 800d976:	f7f3 f8ef 	bl	8000b58 <__aeabi_d2iz>
 800d97a:	f7f2 fdd3 	bl	8000524 <__aeabi_i2d>
 800d97e:	4602      	mov	r2, r0
 800d980:	460b      	mov	r3, r1
 800d982:	ec43 2b18 	vmov	d8, r2, r3
 800d986:	4b44      	ldr	r3, [pc, #272]	; (800da98 <__kernel_rem_pio2+0x330>)
 800d988:	2200      	movs	r2, #0
 800d98a:	f7f2 fe35 	bl	80005f8 <__aeabi_dmul>
 800d98e:	4602      	mov	r2, r0
 800d990:	460b      	mov	r3, r1
 800d992:	4630      	mov	r0, r6
 800d994:	4639      	mov	r1, r7
 800d996:	f7f2 fc77 	bl	8000288 <__aeabi_dsub>
 800d99a:	f7f3 f8dd 	bl	8000b58 <__aeabi_d2iz>
 800d99e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d9a2:	f84b 0b04 	str.w	r0, [fp], #4
 800d9a6:	ec51 0b18 	vmov	r0, r1, d8
 800d9aa:	f7f2 fc6f 	bl	800028c <__adddf3>
 800d9ae:	f109 39ff 	add.w	r9, r9, #4294967295
 800d9b2:	4606      	mov	r6, r0
 800d9b4:	460f      	mov	r7, r1
 800d9b6:	e75b      	b.n	800d870 <__kernel_rem_pio2+0x108>
 800d9b8:	d106      	bne.n	800d9c8 <__kernel_rem_pio2+0x260>
 800d9ba:	1e63      	subs	r3, r4, #1
 800d9bc:	aa0c      	add	r2, sp, #48	; 0x30
 800d9be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9c2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800d9c6:	e79d      	b.n	800d904 <__kernel_rem_pio2+0x19c>
 800d9c8:	4b34      	ldr	r3, [pc, #208]	; (800da9c <__kernel_rem_pio2+0x334>)
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	f7f3 f89a 	bl	8000b04 <__aeabi_dcmpge>
 800d9d0:	2800      	cmp	r0, #0
 800d9d2:	d140      	bne.n	800da56 <__kernel_rem_pio2+0x2ee>
 800d9d4:	4683      	mov	fp, r0
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	2300      	movs	r3, #0
 800d9da:	4630      	mov	r0, r6
 800d9dc:	4639      	mov	r1, r7
 800d9de:	f7f3 f873 	bl	8000ac8 <__aeabi_dcmpeq>
 800d9e2:	2800      	cmp	r0, #0
 800d9e4:	f000 80c1 	beq.w	800db6a <__kernel_rem_pio2+0x402>
 800d9e8:	1e65      	subs	r5, r4, #1
 800d9ea:	462b      	mov	r3, r5
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	9900      	ldr	r1, [sp, #0]
 800d9f0:	428b      	cmp	r3, r1
 800d9f2:	da6d      	bge.n	800dad0 <__kernel_rem_pio2+0x368>
 800d9f4:	2a00      	cmp	r2, #0
 800d9f6:	f000 808a 	beq.w	800db0e <__kernel_rem_pio2+0x3a6>
 800d9fa:	ab0c      	add	r3, sp, #48	; 0x30
 800d9fc:	f1aa 0a18 	sub.w	sl, sl, #24
 800da00:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800da04:	2b00      	cmp	r3, #0
 800da06:	f000 80ae 	beq.w	800db66 <__kernel_rem_pio2+0x3fe>
 800da0a:	4650      	mov	r0, sl
 800da0c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800da80 <__kernel_rem_pio2+0x318>
 800da10:	f000 f9fa 	bl	800de08 <scalbn>
 800da14:	1c6b      	adds	r3, r5, #1
 800da16:	00da      	lsls	r2, r3, #3
 800da18:	9205      	str	r2, [sp, #20]
 800da1a:	ec57 6b10 	vmov	r6, r7, d0
 800da1e:	aa70      	add	r2, sp, #448	; 0x1c0
 800da20:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800da94 <__kernel_rem_pio2+0x32c>
 800da24:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800da28:	462c      	mov	r4, r5
 800da2a:	f04f 0800 	mov.w	r8, #0
 800da2e:	2c00      	cmp	r4, #0
 800da30:	f280 80d4 	bge.w	800dbdc <__kernel_rem_pio2+0x474>
 800da34:	462c      	mov	r4, r5
 800da36:	2c00      	cmp	r4, #0
 800da38:	f2c0 8102 	blt.w	800dc40 <__kernel_rem_pio2+0x4d8>
 800da3c:	4b18      	ldr	r3, [pc, #96]	; (800daa0 <__kernel_rem_pio2+0x338>)
 800da3e:	461e      	mov	r6, r3
 800da40:	ab70      	add	r3, sp, #448	; 0x1c0
 800da42:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800da46:	1b2b      	subs	r3, r5, r4
 800da48:	f04f 0900 	mov.w	r9, #0
 800da4c:	f04f 0a00 	mov.w	sl, #0
 800da50:	2700      	movs	r7, #0
 800da52:	9306      	str	r3, [sp, #24]
 800da54:	e0e6      	b.n	800dc24 <__kernel_rem_pio2+0x4bc>
 800da56:	f04f 0b02 	mov.w	fp, #2
 800da5a:	e756      	b.n	800d90a <__kernel_rem_pio2+0x1a2>
 800da5c:	f8d8 3000 	ldr.w	r3, [r8]
 800da60:	bb05      	cbnz	r5, 800daa4 <__kernel_rem_pio2+0x33c>
 800da62:	b123      	cbz	r3, 800da6e <__kernel_rem_pio2+0x306>
 800da64:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800da68:	f8c8 3000 	str.w	r3, [r8]
 800da6c:	2301      	movs	r3, #1
 800da6e:	3201      	adds	r2, #1
 800da70:	f108 0804 	add.w	r8, r8, #4
 800da74:	461d      	mov	r5, r3
 800da76:	e74f      	b.n	800d918 <__kernel_rem_pio2+0x1b0>
	...
 800da84:	3ff00000 	.word	0x3ff00000
 800da88:	0800e6c0 	.word	0x0800e6c0
 800da8c:	40200000 	.word	0x40200000
 800da90:	3ff00000 	.word	0x3ff00000
 800da94:	3e700000 	.word	0x3e700000
 800da98:	41700000 	.word	0x41700000
 800da9c:	3fe00000 	.word	0x3fe00000
 800daa0:	0800e680 	.word	0x0800e680
 800daa4:	1acb      	subs	r3, r1, r3
 800daa6:	f8c8 3000 	str.w	r3, [r8]
 800daaa:	462b      	mov	r3, r5
 800daac:	e7df      	b.n	800da6e <__kernel_rem_pio2+0x306>
 800daae:	1e62      	subs	r2, r4, #1
 800dab0:	ab0c      	add	r3, sp, #48	; 0x30
 800dab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dab6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800daba:	a90c      	add	r1, sp, #48	; 0x30
 800dabc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800dac0:	e738      	b.n	800d934 <__kernel_rem_pio2+0x1cc>
 800dac2:	1e62      	subs	r2, r4, #1
 800dac4:	ab0c      	add	r3, sp, #48	; 0x30
 800dac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daca:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800dace:	e7f4      	b.n	800daba <__kernel_rem_pio2+0x352>
 800dad0:	a90c      	add	r1, sp, #48	; 0x30
 800dad2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800dad6:	3b01      	subs	r3, #1
 800dad8:	430a      	orrs	r2, r1
 800dada:	e788      	b.n	800d9ee <__kernel_rem_pio2+0x286>
 800dadc:	3301      	adds	r3, #1
 800dade:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800dae2:	2900      	cmp	r1, #0
 800dae4:	d0fa      	beq.n	800dadc <__kernel_rem_pio2+0x374>
 800dae6:	9a08      	ldr	r2, [sp, #32]
 800dae8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800daec:	446a      	add	r2, sp
 800daee:	3a98      	subs	r2, #152	; 0x98
 800daf0:	9208      	str	r2, [sp, #32]
 800daf2:	9a06      	ldr	r2, [sp, #24]
 800daf4:	a920      	add	r1, sp, #128	; 0x80
 800daf6:	18a2      	adds	r2, r4, r2
 800daf8:	18e3      	adds	r3, r4, r3
 800dafa:	f104 0801 	add.w	r8, r4, #1
 800dafe:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800db02:	9302      	str	r3, [sp, #8]
 800db04:	9b02      	ldr	r3, [sp, #8]
 800db06:	4543      	cmp	r3, r8
 800db08:	da04      	bge.n	800db14 <__kernel_rem_pio2+0x3ac>
 800db0a:	461c      	mov	r4, r3
 800db0c:	e6a2      	b.n	800d854 <__kernel_rem_pio2+0xec>
 800db0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800db10:	2301      	movs	r3, #1
 800db12:	e7e4      	b.n	800dade <__kernel_rem_pio2+0x376>
 800db14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db16:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800db1a:	f7f2 fd03 	bl	8000524 <__aeabi_i2d>
 800db1e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800db22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db24:	46ab      	mov	fp, r5
 800db26:	461c      	mov	r4, r3
 800db28:	f04f 0900 	mov.w	r9, #0
 800db2c:	2600      	movs	r6, #0
 800db2e:	2700      	movs	r7, #0
 800db30:	9b05      	ldr	r3, [sp, #20]
 800db32:	4599      	cmp	r9, r3
 800db34:	dd06      	ble.n	800db44 <__kernel_rem_pio2+0x3dc>
 800db36:	9b08      	ldr	r3, [sp, #32]
 800db38:	e8e3 6702 	strd	r6, r7, [r3], #8
 800db3c:	f108 0801 	add.w	r8, r8, #1
 800db40:	9308      	str	r3, [sp, #32]
 800db42:	e7df      	b.n	800db04 <__kernel_rem_pio2+0x39c>
 800db44:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800db48:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800db4c:	f7f2 fd54 	bl	80005f8 <__aeabi_dmul>
 800db50:	4602      	mov	r2, r0
 800db52:	460b      	mov	r3, r1
 800db54:	4630      	mov	r0, r6
 800db56:	4639      	mov	r1, r7
 800db58:	f7f2 fb98 	bl	800028c <__adddf3>
 800db5c:	f109 0901 	add.w	r9, r9, #1
 800db60:	4606      	mov	r6, r0
 800db62:	460f      	mov	r7, r1
 800db64:	e7e4      	b.n	800db30 <__kernel_rem_pio2+0x3c8>
 800db66:	3d01      	subs	r5, #1
 800db68:	e747      	b.n	800d9fa <__kernel_rem_pio2+0x292>
 800db6a:	ec47 6b10 	vmov	d0, r6, r7
 800db6e:	f1ca 0000 	rsb	r0, sl, #0
 800db72:	f000 f949 	bl	800de08 <scalbn>
 800db76:	ec57 6b10 	vmov	r6, r7, d0
 800db7a:	4ba0      	ldr	r3, [pc, #640]	; (800ddfc <__kernel_rem_pio2+0x694>)
 800db7c:	ee10 0a10 	vmov	r0, s0
 800db80:	2200      	movs	r2, #0
 800db82:	4639      	mov	r1, r7
 800db84:	f7f2 ffbe 	bl	8000b04 <__aeabi_dcmpge>
 800db88:	b1f8      	cbz	r0, 800dbca <__kernel_rem_pio2+0x462>
 800db8a:	4b9d      	ldr	r3, [pc, #628]	; (800de00 <__kernel_rem_pio2+0x698>)
 800db8c:	2200      	movs	r2, #0
 800db8e:	4630      	mov	r0, r6
 800db90:	4639      	mov	r1, r7
 800db92:	f7f2 fd31 	bl	80005f8 <__aeabi_dmul>
 800db96:	f7f2 ffdf 	bl	8000b58 <__aeabi_d2iz>
 800db9a:	4680      	mov	r8, r0
 800db9c:	f7f2 fcc2 	bl	8000524 <__aeabi_i2d>
 800dba0:	4b96      	ldr	r3, [pc, #600]	; (800ddfc <__kernel_rem_pio2+0x694>)
 800dba2:	2200      	movs	r2, #0
 800dba4:	f7f2 fd28 	bl	80005f8 <__aeabi_dmul>
 800dba8:	460b      	mov	r3, r1
 800dbaa:	4602      	mov	r2, r0
 800dbac:	4639      	mov	r1, r7
 800dbae:	4630      	mov	r0, r6
 800dbb0:	f7f2 fb6a 	bl	8000288 <__aeabi_dsub>
 800dbb4:	f7f2 ffd0 	bl	8000b58 <__aeabi_d2iz>
 800dbb8:	1c65      	adds	r5, r4, #1
 800dbba:	ab0c      	add	r3, sp, #48	; 0x30
 800dbbc:	f10a 0a18 	add.w	sl, sl, #24
 800dbc0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dbc4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800dbc8:	e71f      	b.n	800da0a <__kernel_rem_pio2+0x2a2>
 800dbca:	4630      	mov	r0, r6
 800dbcc:	4639      	mov	r1, r7
 800dbce:	f7f2 ffc3 	bl	8000b58 <__aeabi_d2iz>
 800dbd2:	ab0c      	add	r3, sp, #48	; 0x30
 800dbd4:	4625      	mov	r5, r4
 800dbd6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dbda:	e716      	b.n	800da0a <__kernel_rem_pio2+0x2a2>
 800dbdc:	ab0c      	add	r3, sp, #48	; 0x30
 800dbde:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800dbe2:	f7f2 fc9f 	bl	8000524 <__aeabi_i2d>
 800dbe6:	4632      	mov	r2, r6
 800dbe8:	463b      	mov	r3, r7
 800dbea:	f7f2 fd05 	bl	80005f8 <__aeabi_dmul>
 800dbee:	4642      	mov	r2, r8
 800dbf0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800dbf4:	464b      	mov	r3, r9
 800dbf6:	4630      	mov	r0, r6
 800dbf8:	4639      	mov	r1, r7
 800dbfa:	f7f2 fcfd 	bl	80005f8 <__aeabi_dmul>
 800dbfe:	3c01      	subs	r4, #1
 800dc00:	4606      	mov	r6, r0
 800dc02:	460f      	mov	r7, r1
 800dc04:	e713      	b.n	800da2e <__kernel_rem_pio2+0x2c6>
 800dc06:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800dc0a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800dc0e:	f7f2 fcf3 	bl	80005f8 <__aeabi_dmul>
 800dc12:	4602      	mov	r2, r0
 800dc14:	460b      	mov	r3, r1
 800dc16:	4648      	mov	r0, r9
 800dc18:	4651      	mov	r1, sl
 800dc1a:	f7f2 fb37 	bl	800028c <__adddf3>
 800dc1e:	3701      	adds	r7, #1
 800dc20:	4681      	mov	r9, r0
 800dc22:	468a      	mov	sl, r1
 800dc24:	9b00      	ldr	r3, [sp, #0]
 800dc26:	429f      	cmp	r7, r3
 800dc28:	dc02      	bgt.n	800dc30 <__kernel_rem_pio2+0x4c8>
 800dc2a:	9b06      	ldr	r3, [sp, #24]
 800dc2c:	429f      	cmp	r7, r3
 800dc2e:	ddea      	ble.n	800dc06 <__kernel_rem_pio2+0x49e>
 800dc30:	9a06      	ldr	r2, [sp, #24]
 800dc32:	ab48      	add	r3, sp, #288	; 0x120
 800dc34:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800dc38:	e9c6 9a00 	strd	r9, sl, [r6]
 800dc3c:	3c01      	subs	r4, #1
 800dc3e:	e6fa      	b.n	800da36 <__kernel_rem_pio2+0x2ce>
 800dc40:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800dc42:	2b02      	cmp	r3, #2
 800dc44:	dc0b      	bgt.n	800dc5e <__kernel_rem_pio2+0x4f6>
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	dc39      	bgt.n	800dcbe <__kernel_rem_pio2+0x556>
 800dc4a:	d05d      	beq.n	800dd08 <__kernel_rem_pio2+0x5a0>
 800dc4c:	9b02      	ldr	r3, [sp, #8]
 800dc4e:	f003 0007 	and.w	r0, r3, #7
 800dc52:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800dc56:	ecbd 8b02 	vpop	{d8}
 800dc5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc5e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800dc60:	2b03      	cmp	r3, #3
 800dc62:	d1f3      	bne.n	800dc4c <__kernel_rem_pio2+0x4e4>
 800dc64:	9b05      	ldr	r3, [sp, #20]
 800dc66:	9500      	str	r5, [sp, #0]
 800dc68:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800dc6c:	eb0d 0403 	add.w	r4, sp, r3
 800dc70:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800dc74:	46a2      	mov	sl, r4
 800dc76:	9b00      	ldr	r3, [sp, #0]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	f1aa 0a08 	sub.w	sl, sl, #8
 800dc7e:	dc69      	bgt.n	800dd54 <__kernel_rem_pio2+0x5ec>
 800dc80:	46aa      	mov	sl, r5
 800dc82:	f1ba 0f01 	cmp.w	sl, #1
 800dc86:	f1a4 0408 	sub.w	r4, r4, #8
 800dc8a:	f300 8083 	bgt.w	800dd94 <__kernel_rem_pio2+0x62c>
 800dc8e:	9c05      	ldr	r4, [sp, #20]
 800dc90:	ab48      	add	r3, sp, #288	; 0x120
 800dc92:	441c      	add	r4, r3
 800dc94:	2000      	movs	r0, #0
 800dc96:	2100      	movs	r1, #0
 800dc98:	2d01      	cmp	r5, #1
 800dc9a:	f300 809a 	bgt.w	800ddd2 <__kernel_rem_pio2+0x66a>
 800dc9e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800dca2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800dca6:	f1bb 0f00 	cmp.w	fp, #0
 800dcaa:	f040 8098 	bne.w	800ddde <__kernel_rem_pio2+0x676>
 800dcae:	9b04      	ldr	r3, [sp, #16]
 800dcb0:	e9c3 7800 	strd	r7, r8, [r3]
 800dcb4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800dcb8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800dcbc:	e7c6      	b.n	800dc4c <__kernel_rem_pio2+0x4e4>
 800dcbe:	9e05      	ldr	r6, [sp, #20]
 800dcc0:	ab48      	add	r3, sp, #288	; 0x120
 800dcc2:	441e      	add	r6, r3
 800dcc4:	462c      	mov	r4, r5
 800dcc6:	2000      	movs	r0, #0
 800dcc8:	2100      	movs	r1, #0
 800dcca:	2c00      	cmp	r4, #0
 800dccc:	da33      	bge.n	800dd36 <__kernel_rem_pio2+0x5ce>
 800dcce:	f1bb 0f00 	cmp.w	fp, #0
 800dcd2:	d036      	beq.n	800dd42 <__kernel_rem_pio2+0x5da>
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dcda:	9c04      	ldr	r4, [sp, #16]
 800dcdc:	e9c4 2300 	strd	r2, r3, [r4]
 800dce0:	4602      	mov	r2, r0
 800dce2:	460b      	mov	r3, r1
 800dce4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800dce8:	f7f2 face 	bl	8000288 <__aeabi_dsub>
 800dcec:	ae4a      	add	r6, sp, #296	; 0x128
 800dcee:	2401      	movs	r4, #1
 800dcf0:	42a5      	cmp	r5, r4
 800dcf2:	da29      	bge.n	800dd48 <__kernel_rem_pio2+0x5e0>
 800dcf4:	f1bb 0f00 	cmp.w	fp, #0
 800dcf8:	d002      	beq.n	800dd00 <__kernel_rem_pio2+0x598>
 800dcfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dcfe:	4619      	mov	r1, r3
 800dd00:	9b04      	ldr	r3, [sp, #16]
 800dd02:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800dd06:	e7a1      	b.n	800dc4c <__kernel_rem_pio2+0x4e4>
 800dd08:	9c05      	ldr	r4, [sp, #20]
 800dd0a:	ab48      	add	r3, sp, #288	; 0x120
 800dd0c:	441c      	add	r4, r3
 800dd0e:	2000      	movs	r0, #0
 800dd10:	2100      	movs	r1, #0
 800dd12:	2d00      	cmp	r5, #0
 800dd14:	da09      	bge.n	800dd2a <__kernel_rem_pio2+0x5c2>
 800dd16:	f1bb 0f00 	cmp.w	fp, #0
 800dd1a:	d002      	beq.n	800dd22 <__kernel_rem_pio2+0x5ba>
 800dd1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd20:	4619      	mov	r1, r3
 800dd22:	9b04      	ldr	r3, [sp, #16]
 800dd24:	e9c3 0100 	strd	r0, r1, [r3]
 800dd28:	e790      	b.n	800dc4c <__kernel_rem_pio2+0x4e4>
 800dd2a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dd2e:	f7f2 faad 	bl	800028c <__adddf3>
 800dd32:	3d01      	subs	r5, #1
 800dd34:	e7ed      	b.n	800dd12 <__kernel_rem_pio2+0x5aa>
 800dd36:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800dd3a:	f7f2 faa7 	bl	800028c <__adddf3>
 800dd3e:	3c01      	subs	r4, #1
 800dd40:	e7c3      	b.n	800dcca <__kernel_rem_pio2+0x562>
 800dd42:	4602      	mov	r2, r0
 800dd44:	460b      	mov	r3, r1
 800dd46:	e7c8      	b.n	800dcda <__kernel_rem_pio2+0x572>
 800dd48:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800dd4c:	f7f2 fa9e 	bl	800028c <__adddf3>
 800dd50:	3401      	adds	r4, #1
 800dd52:	e7cd      	b.n	800dcf0 <__kernel_rem_pio2+0x588>
 800dd54:	e9da 8900 	ldrd	r8, r9, [sl]
 800dd58:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800dd5c:	9b00      	ldr	r3, [sp, #0]
 800dd5e:	3b01      	subs	r3, #1
 800dd60:	9300      	str	r3, [sp, #0]
 800dd62:	4632      	mov	r2, r6
 800dd64:	463b      	mov	r3, r7
 800dd66:	4640      	mov	r0, r8
 800dd68:	4649      	mov	r1, r9
 800dd6a:	f7f2 fa8f 	bl	800028c <__adddf3>
 800dd6e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dd72:	4602      	mov	r2, r0
 800dd74:	460b      	mov	r3, r1
 800dd76:	4640      	mov	r0, r8
 800dd78:	4649      	mov	r1, r9
 800dd7a:	f7f2 fa85 	bl	8000288 <__aeabi_dsub>
 800dd7e:	4632      	mov	r2, r6
 800dd80:	463b      	mov	r3, r7
 800dd82:	f7f2 fa83 	bl	800028c <__adddf3>
 800dd86:	ed9d 7b06 	vldr	d7, [sp, #24]
 800dd8a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dd8e:	ed8a 7b00 	vstr	d7, [sl]
 800dd92:	e770      	b.n	800dc76 <__kernel_rem_pio2+0x50e>
 800dd94:	e9d4 8900 	ldrd	r8, r9, [r4]
 800dd98:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800dd9c:	4640      	mov	r0, r8
 800dd9e:	4632      	mov	r2, r6
 800dda0:	463b      	mov	r3, r7
 800dda2:	4649      	mov	r1, r9
 800dda4:	f7f2 fa72 	bl	800028c <__adddf3>
 800dda8:	e9cd 0100 	strd	r0, r1, [sp]
 800ddac:	4602      	mov	r2, r0
 800ddae:	460b      	mov	r3, r1
 800ddb0:	4640      	mov	r0, r8
 800ddb2:	4649      	mov	r1, r9
 800ddb4:	f7f2 fa68 	bl	8000288 <__aeabi_dsub>
 800ddb8:	4632      	mov	r2, r6
 800ddba:	463b      	mov	r3, r7
 800ddbc:	f7f2 fa66 	bl	800028c <__adddf3>
 800ddc0:	ed9d 7b00 	vldr	d7, [sp]
 800ddc4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ddc8:	ed84 7b00 	vstr	d7, [r4]
 800ddcc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ddd0:	e757      	b.n	800dc82 <__kernel_rem_pio2+0x51a>
 800ddd2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ddd6:	f7f2 fa59 	bl	800028c <__adddf3>
 800ddda:	3d01      	subs	r5, #1
 800dddc:	e75c      	b.n	800dc98 <__kernel_rem_pio2+0x530>
 800ddde:	9b04      	ldr	r3, [sp, #16]
 800dde0:	9a04      	ldr	r2, [sp, #16]
 800dde2:	601f      	str	r7, [r3, #0]
 800dde4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800dde8:	605c      	str	r4, [r3, #4]
 800ddea:	609d      	str	r5, [r3, #8]
 800ddec:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ddf0:	60d3      	str	r3, [r2, #12]
 800ddf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ddf6:	6110      	str	r0, [r2, #16]
 800ddf8:	6153      	str	r3, [r2, #20]
 800ddfa:	e727      	b.n	800dc4c <__kernel_rem_pio2+0x4e4>
 800ddfc:	41700000 	.word	0x41700000
 800de00:	3e700000 	.word	0x3e700000
 800de04:	00000000 	.word	0x00000000

0800de08 <scalbn>:
 800de08:	b570      	push	{r4, r5, r6, lr}
 800de0a:	ec55 4b10 	vmov	r4, r5, d0
 800de0e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800de12:	4606      	mov	r6, r0
 800de14:	462b      	mov	r3, r5
 800de16:	b999      	cbnz	r1, 800de40 <scalbn+0x38>
 800de18:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800de1c:	4323      	orrs	r3, r4
 800de1e:	d03f      	beq.n	800dea0 <scalbn+0x98>
 800de20:	4b35      	ldr	r3, [pc, #212]	; (800def8 <scalbn+0xf0>)
 800de22:	4629      	mov	r1, r5
 800de24:	ee10 0a10 	vmov	r0, s0
 800de28:	2200      	movs	r2, #0
 800de2a:	f7f2 fbe5 	bl	80005f8 <__aeabi_dmul>
 800de2e:	4b33      	ldr	r3, [pc, #204]	; (800defc <scalbn+0xf4>)
 800de30:	429e      	cmp	r6, r3
 800de32:	4604      	mov	r4, r0
 800de34:	460d      	mov	r5, r1
 800de36:	da10      	bge.n	800de5a <scalbn+0x52>
 800de38:	a327      	add	r3, pc, #156	; (adr r3, 800ded8 <scalbn+0xd0>)
 800de3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3e:	e01f      	b.n	800de80 <scalbn+0x78>
 800de40:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800de44:	4291      	cmp	r1, r2
 800de46:	d10c      	bne.n	800de62 <scalbn+0x5a>
 800de48:	ee10 2a10 	vmov	r2, s0
 800de4c:	4620      	mov	r0, r4
 800de4e:	4629      	mov	r1, r5
 800de50:	f7f2 fa1c 	bl	800028c <__adddf3>
 800de54:	4604      	mov	r4, r0
 800de56:	460d      	mov	r5, r1
 800de58:	e022      	b.n	800dea0 <scalbn+0x98>
 800de5a:	460b      	mov	r3, r1
 800de5c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800de60:	3936      	subs	r1, #54	; 0x36
 800de62:	f24c 3250 	movw	r2, #50000	; 0xc350
 800de66:	4296      	cmp	r6, r2
 800de68:	dd0d      	ble.n	800de86 <scalbn+0x7e>
 800de6a:	2d00      	cmp	r5, #0
 800de6c:	a11c      	add	r1, pc, #112	; (adr r1, 800dee0 <scalbn+0xd8>)
 800de6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de72:	da02      	bge.n	800de7a <scalbn+0x72>
 800de74:	a11c      	add	r1, pc, #112	; (adr r1, 800dee8 <scalbn+0xe0>)
 800de76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de7a:	a319      	add	r3, pc, #100	; (adr r3, 800dee0 <scalbn+0xd8>)
 800de7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de80:	f7f2 fbba 	bl	80005f8 <__aeabi_dmul>
 800de84:	e7e6      	b.n	800de54 <scalbn+0x4c>
 800de86:	1872      	adds	r2, r6, r1
 800de88:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800de8c:	428a      	cmp	r2, r1
 800de8e:	dcec      	bgt.n	800de6a <scalbn+0x62>
 800de90:	2a00      	cmp	r2, #0
 800de92:	dd08      	ble.n	800dea6 <scalbn+0x9e>
 800de94:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800de98:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800de9c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dea0:	ec45 4b10 	vmov	d0, r4, r5
 800dea4:	bd70      	pop	{r4, r5, r6, pc}
 800dea6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800deaa:	da08      	bge.n	800debe <scalbn+0xb6>
 800deac:	2d00      	cmp	r5, #0
 800deae:	a10a      	add	r1, pc, #40	; (adr r1, 800ded8 <scalbn+0xd0>)
 800deb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800deb4:	dac0      	bge.n	800de38 <scalbn+0x30>
 800deb6:	a10e      	add	r1, pc, #56	; (adr r1, 800def0 <scalbn+0xe8>)
 800deb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800debc:	e7bc      	b.n	800de38 <scalbn+0x30>
 800debe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dec2:	3236      	adds	r2, #54	; 0x36
 800dec4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dec8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800decc:	4620      	mov	r0, r4
 800dece:	4b0c      	ldr	r3, [pc, #48]	; (800df00 <scalbn+0xf8>)
 800ded0:	2200      	movs	r2, #0
 800ded2:	e7d5      	b.n	800de80 <scalbn+0x78>
 800ded4:	f3af 8000 	nop.w
 800ded8:	c2f8f359 	.word	0xc2f8f359
 800dedc:	01a56e1f 	.word	0x01a56e1f
 800dee0:	8800759c 	.word	0x8800759c
 800dee4:	7e37e43c 	.word	0x7e37e43c
 800dee8:	8800759c 	.word	0x8800759c
 800deec:	fe37e43c 	.word	0xfe37e43c
 800def0:	c2f8f359 	.word	0xc2f8f359
 800def4:	81a56e1f 	.word	0x81a56e1f
 800def8:	43500000 	.word	0x43500000
 800defc:	ffff3cb0 	.word	0xffff3cb0
 800df00:	3c900000 	.word	0x3c900000
 800df04:	00000000 	.word	0x00000000

0800df08 <floor>:
 800df08:	ec51 0b10 	vmov	r0, r1, d0
 800df0c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800df10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df14:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800df18:	2e13      	cmp	r6, #19
 800df1a:	ee10 5a10 	vmov	r5, s0
 800df1e:	ee10 8a10 	vmov	r8, s0
 800df22:	460c      	mov	r4, r1
 800df24:	dc31      	bgt.n	800df8a <floor+0x82>
 800df26:	2e00      	cmp	r6, #0
 800df28:	da14      	bge.n	800df54 <floor+0x4c>
 800df2a:	a333      	add	r3, pc, #204	; (adr r3, 800dff8 <floor+0xf0>)
 800df2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df30:	f7f2 f9ac 	bl	800028c <__adddf3>
 800df34:	2200      	movs	r2, #0
 800df36:	2300      	movs	r3, #0
 800df38:	f7f2 fdee 	bl	8000b18 <__aeabi_dcmpgt>
 800df3c:	b138      	cbz	r0, 800df4e <floor+0x46>
 800df3e:	2c00      	cmp	r4, #0
 800df40:	da53      	bge.n	800dfea <floor+0xe2>
 800df42:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800df46:	4325      	orrs	r5, r4
 800df48:	d052      	beq.n	800dff0 <floor+0xe8>
 800df4a:	4c2d      	ldr	r4, [pc, #180]	; (800e000 <floor+0xf8>)
 800df4c:	2500      	movs	r5, #0
 800df4e:	4621      	mov	r1, r4
 800df50:	4628      	mov	r0, r5
 800df52:	e024      	b.n	800df9e <floor+0x96>
 800df54:	4f2b      	ldr	r7, [pc, #172]	; (800e004 <floor+0xfc>)
 800df56:	4137      	asrs	r7, r6
 800df58:	ea01 0307 	and.w	r3, r1, r7
 800df5c:	4303      	orrs	r3, r0
 800df5e:	d01e      	beq.n	800df9e <floor+0x96>
 800df60:	a325      	add	r3, pc, #148	; (adr r3, 800dff8 <floor+0xf0>)
 800df62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df66:	f7f2 f991 	bl	800028c <__adddf3>
 800df6a:	2200      	movs	r2, #0
 800df6c:	2300      	movs	r3, #0
 800df6e:	f7f2 fdd3 	bl	8000b18 <__aeabi_dcmpgt>
 800df72:	2800      	cmp	r0, #0
 800df74:	d0eb      	beq.n	800df4e <floor+0x46>
 800df76:	2c00      	cmp	r4, #0
 800df78:	bfbe      	ittt	lt
 800df7a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800df7e:	4133      	asrlt	r3, r6
 800df80:	18e4      	addlt	r4, r4, r3
 800df82:	ea24 0407 	bic.w	r4, r4, r7
 800df86:	2500      	movs	r5, #0
 800df88:	e7e1      	b.n	800df4e <floor+0x46>
 800df8a:	2e33      	cmp	r6, #51	; 0x33
 800df8c:	dd0b      	ble.n	800dfa6 <floor+0x9e>
 800df8e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800df92:	d104      	bne.n	800df9e <floor+0x96>
 800df94:	ee10 2a10 	vmov	r2, s0
 800df98:	460b      	mov	r3, r1
 800df9a:	f7f2 f977 	bl	800028c <__adddf3>
 800df9e:	ec41 0b10 	vmov	d0, r0, r1
 800dfa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfa6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800dfaa:	f04f 37ff 	mov.w	r7, #4294967295
 800dfae:	40df      	lsrs	r7, r3
 800dfb0:	4238      	tst	r0, r7
 800dfb2:	d0f4      	beq.n	800df9e <floor+0x96>
 800dfb4:	a310      	add	r3, pc, #64	; (adr r3, 800dff8 <floor+0xf0>)
 800dfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfba:	f7f2 f967 	bl	800028c <__adddf3>
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	f7f2 fda9 	bl	8000b18 <__aeabi_dcmpgt>
 800dfc6:	2800      	cmp	r0, #0
 800dfc8:	d0c1      	beq.n	800df4e <floor+0x46>
 800dfca:	2c00      	cmp	r4, #0
 800dfcc:	da0a      	bge.n	800dfe4 <floor+0xdc>
 800dfce:	2e14      	cmp	r6, #20
 800dfd0:	d101      	bne.n	800dfd6 <floor+0xce>
 800dfd2:	3401      	adds	r4, #1
 800dfd4:	e006      	b.n	800dfe4 <floor+0xdc>
 800dfd6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800dfda:	2301      	movs	r3, #1
 800dfdc:	40b3      	lsls	r3, r6
 800dfde:	441d      	add	r5, r3
 800dfe0:	45a8      	cmp	r8, r5
 800dfe2:	d8f6      	bhi.n	800dfd2 <floor+0xca>
 800dfe4:	ea25 0507 	bic.w	r5, r5, r7
 800dfe8:	e7b1      	b.n	800df4e <floor+0x46>
 800dfea:	2500      	movs	r5, #0
 800dfec:	462c      	mov	r4, r5
 800dfee:	e7ae      	b.n	800df4e <floor+0x46>
 800dff0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800dff4:	e7ab      	b.n	800df4e <floor+0x46>
 800dff6:	bf00      	nop
 800dff8:	8800759c 	.word	0x8800759c
 800dffc:	7e37e43c 	.word	0x7e37e43c
 800e000:	bff00000 	.word	0xbff00000
 800e004:	000fffff 	.word	0x000fffff

0800e008 <_init>:
 800e008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e00a:	bf00      	nop
 800e00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e00e:	bc08      	pop	{r3}
 800e010:	469e      	mov	lr, r3
 800e012:	4770      	bx	lr

0800e014 <_fini>:
 800e014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e016:	bf00      	nop
 800e018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e01a:	bc08      	pop	{r3}
 800e01c:	469e      	mov	lr, r3
 800e01e:	4770      	bx	lr
